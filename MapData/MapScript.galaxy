//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Undead Assault Apocalypse
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/CampaignLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "LibEBB916F2"
include "LibE6C8C21C"
include "Lib7084B428"
include "ai71EEC1FA"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCamp_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
    libEBB916F2_InitLib();
    libE6C8C21C_InitLib();
    lib7084B428_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_ranktotal = 3;
const fixed gv_c0FungusCoreDuration = 180.0;
const fixed gv_c0FungusCoreInterval = 10.0;
const fixed gv_c0KillT1Duration = 360.0;
const fixed gv_c0T1IntruderDuration = 240.0;
const fixed gv_c0T1IntruderInterval = 10.0;
const fixed gv_c0T1Duration = 270.0;
const fixed gv_c0T1Interval = 10.0;
const int gv_gameEvents = 1;
const int gv_bossEvents = 3;
const int gv_playerEvents = 2;
const int gv_summary = 4;
const int gv_asserts = 5;
const int gv_banks2 = 6;
const string gv_gameEventLogFile = "Game Event Log";
const string gv_bossEventLogFile = "Boss Log";
const string gv_playerEventsLogFile = "Player Log";
const string gv_summaryLogFile = "Summary Log";
const string gv_assertsLogFile = "Unit Tests";
const string gv_bankLogFile = "Bank Statistics";
const int gv_miscUnlockCount = 50;
const int gv_achievementCount = 80;
const int gv_eRROR = 187317;
const int gv_mP = 12;
const int gv_accessories = 50;
const int gv_camos = 62;
const int gv_decals = 52;
const int gv_sIcount = 200;
const int gv_SIBetaCount = 36;
const string gv_mini1 = "Infantry Rifleman";
const string gv_mini2 = "Automatic Rifleman";
const string gv_mini3 = "Combat Engineer";
const string gv_mini4 = "Javelin Gunner";
const string gv_mini5 = "74D Flamethrower";
const string gv_mini6 = "Infantry SDM";
const string gv_mini7 = "68W Combat Medic";
const int gv_itemCount = 69;
const int gv_cCOREPlayers = 12;
const int gv_ailmentCount = 11;
const int gv_miniarraysize = 7;
const int gv_miniarraysizeCC = 7;
const bool gv_rCDDDefaultStats = true;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_PMCSquadLdrTxts {
    bool lv_enabled;
    text lv_text1;
    text lv_text2;
    text lv_text3;
};

struct gs_PMCSquad {
    unitgroup lv_group;
    unit lv_squadLeader;
    unit lv_rATechnician;
    bool lv_extracting;
};

struct gs_SandBoxVoting {
    int lv_sandBoxVoteDialog;
    int[3] lv_sandBoxButton;
    int[3] lv_voteCount;
};

struct gs_PolicePatrol {
    unitgroup lv_group;
    point[9] lv_route;
    int lv_routenext;
    int lv_routemax;
    bool lv_returning;
};

struct gs_MOSUsed {
    bool lv_mechOperator;
    bool lv_mercenary;
    bool lv_rifleman;
    bool lv_automaticRifleman;
    bool lv_flamethrower;
    bool lv_combatMedic;
    bool lv_cavalryScout;
    bool lv_enforcer;
    bool lv_sDM;
    bool lv_platoonLeader;
    bool lv_javelinGunner;
    bool lv_combatEngineer;
    bool lv_ghost;
    bool lv_fireSupportSpecialist;
    bool lv_commando;
    bool lv_cyborgMos;
    bool lv_laserEnforcer;
    bool lv_specter;
    bool lv_orbitalSupportSpecialist;
    bool lv_heavyGunner;
};

struct gs_ItemPool {
    int lv_aPRound;
    int lv_dURound;
    int lv_liftBoot;
    int lv_kineticIntegrator;
    int lv_uSMCR;
    int lv_hK42;
    int lv_stynerBR2;
    int lv_stynerBR3;
    int lv_sOFAR;
    int lv_atlasX50;
    int lv_iDMR2;
    int lv_m92Torrent;
    int lv_xR900;
    int lv_m41SAW;
    int lv_m241MMG;
    int lv_m135Minigun;
    int lv_m79Flamethrower;
    int lv_inferno;
    int lv_iPR;
    int lv_xM88b;
    int lv_pR34E;
    int lv_pR42C;
    int lv_iSS7;
    int lv_aA12;
    int lv_m1014;
    int lv_aS50Custom;
    int lv_d20LaserRifle;
};

struct gs_ScrollMenu {
    int lv_dialog;
    int lv_bG;
    int[9][4] lv_menuItems;
    int lv_scrollBar;
    int[gv_mP + 1] lv_scrollState;
    bool[gv_mP + 1] lv_scrollEnabled;
};

struct gs_Player {
    bool lv_shift;
    bool lv_control;
};

struct gs_UIDialogs {
    int lv_globalDialog;
    int[gv_cCOREPlayers + 1] lv_behaviorDialog;
    int[gv_cCOREPlayers + 1] lv_behaviorPin;
    bool[gv_cCOREPlayers + 1] lv_behaviorLock;
};

struct gs_Behavior {
    string lv__behavior;
    int lv__panel;
    int lv__duration;
    int lv__border;
    int lv__icon;
};

struct gs_PlayerData {
    unitgroup lv_heroGroup;
    gs_Behavior[25] lv_behaviors;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_Fireteam_FireteamLeader = 0;
const int ge_Fireteam_Join = 1;
const int ge_Fireteam_Leave = 2;
const int ge_ScoreType_Kills = 0;
const int ge_ScoreType_MassiveKills = 1;
const int ge_ScoreType_Revives = 2;
const int ge_ScoreType_Heals = 3;
const int ge_ScoreType_Hits = 4;
const int ge_ScoreType_Deaths = 5;
const int ge_ObjectiveMissionType_Show = 0;
const int ge_ObjectiveMissionType_Hide = 1;
const int ge_ObjectiveMissionType_Completed = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
region gv_startingLZ;
point gv_phantomBeginning;
int gv_combatMedics;
int gv_countRifleman;
bool gv_easterEggFound;
int gv_easterEggDialogue;
int gv_heroCount;
int[13] gv_heroNameTag;
bool gv_gameWon;
bool gv_prologueOutbreak;
unit[13] gv_heroselector;
unitgroup gv_heroselectors;
unit gv_phantombeginning;
int gv_modetotal;
int gv_gamemode;
int[20] gv_modevote;
int gv_votestotal;
int gv_modedialog;
fixed gv_xpmodifier;
fixed gv_xpModifierFromMods;
int gv_bonusXpGained;
int[13] gv_dialogmodifier;
text[4] gv_rankname;
int gv_rankdialog;
int[4] gv_rankitem;
int gv_rankcount;
bool[13] gv_playerRankChosen;
bool[13] gv_rankSelected;
bool[13] gv_submit;
int gv_submitButton;
int[4] gv_dialogrankset;
int[4] gv_rankLabel;
int[13] gv_modifiervote;
int[5] gv_weatherTypeVoted;
int gv_playerVotesModifiers;
bool gv_mod_elitepmc;
bool gv_mod_genesis;
bool gv_mod_allrandom;
bool gv_mod_tier3;
bool gv_mod_tier2;
bool gv_mod_tier1;
bool gv_mod_rifle;
bool gv_mod_1life;
bool gv_mod_NoAmmo;
bool gv_mod_Banana;
bool gv_mod_Weather;
bool gv_mod_UT1;
int gv_loopType;
int gv_zombieBuffAmount;
int gv_modetimeoutwindow;
timer gv_modetimer;
int[13] gv_playermodevote;
unitgroup gv_playerminis;
int gv_commandCardType;
int gv_weatherTypeSelected;
bool[13] gv_playerRandomed;
bool gv_randomEnabled;
bool gv_beginning;
int[13] gv_rankPlayerSelected;
int gv_zS_PlanetPortrait;
camerainfo gv_zS_PlanetPortraitPlayerCamera;
string gv_zS_PlanetPortraitEvoMissionLight;
int[4] gv_epiSAMPings;
bool gv_epiSAMOnline;
region[4] gv_epiSAMSites;
actor[13] gv_epiSAMSearch;
actor[13] gv_epiCompActors;
region[13] gv_epiCompSites;
bool[4] gv_epiSAMSearched;
int gv_untitledVariable001;
timer gv_artilleryTimer;
unit[5] gv_offMapArtilleryDummies;
bool gv_smithyArtilleryActive;
bool gv_smithySpawned;
int gv_siteIndicators;
int gv_completedComputers;
int[3] gv_epiCompProgress;
int gv_smithyPing;
bool[4] gv_smithySpawns;
int gv_smithyStage;
unit gv_infestedSmithy;
int gv_RAcomputercount;
unitgroup gv_MissionT1s;
int[7] gv_fuelLimit;
bool gv_helpDS;
unitgroup gv_refugeegroup;
unitgroup gv_casualties;
int[7] gv_fuelAmount;
int gv_satchelCount;
unit[4] gv_satchels;
unit[4] gv_seismicHoles;
unitgroup gv_seismicSatchel;
bool[4] gv_seismicDisturbanceKilled;
region[4] gv_seismicSpawns;
int[4] gv_seismicPings;
region[4] gv_seismicSpawnPoints;
bool gv_satchelKilled;
unitgroup gv_seismicBoss;
unit[8] gv_fungusCoreSpawns;
unitgroup gv_fungusCores;
unit gv_rASpy;
unitgroup gv_spyGroup;
bool gv_sPYFound;
bool gv_soldierFound;
unit gv_drMorrow;
unitgroup gv_dr;
int gv_silosCompleted;
unitgroup gv_shadowUnits;
unitgroup gv_escortCivilians;
region gv_randomRegion;
timer gv_bossTimer;
int gv_bossTimerWindow;
bool gv_charonFinalSpawn;
bool gv_charonTimer;
unit gv_charon;
bool[3] gv_charonBurrowsUp;
bool[2] gv_charonAbilityAllowed;
unitgroup gv_bossGroup;
bool gv_charonBurrowLoop;
int gv_tunnelSatchelCount;
bool gv_satchelDestroyed;
unit[4] gv_satchel;
int[4] gv_satchelTimeMAX;
int[4] gv_satchelTimeRemaining;
int gv_satchelTextTag;
color gv_redTextTag;
unit gv_satchelItem;
int gv_satchelDestroyedCount;
bool[4] gv_satchelRetry;
unitgroup gv_m200Satchel;
bool[4] gv_currentSatchel;
bool gv_skiesclear;
int[3] gv_dsvotes;
int gv_dsdialog;
int[3] gv_dsdialogbuttons;
bool[4] gv_sensorset;
bool gv_chapter1;
unit gv_bioDome;
bool[8] gv_epilogueUnlocked;
unitgroup gv_uSHelis;
unit[4] gv_uSHeliUnit;
bool[4] gv_initBunkerAssault;
int gv_supplyPing;
unit gv_colWindsor;
unit gv_captainOReily;
int[13] gv_aORegionPings;
region[13] gv_aORegions;
bool[9] gv_aORegionsSearched;
bool gv_aOSearched;
actor[9] gv_placerMarkers;
int gv_towerCount;
fixed gv_pingRate;
int[8] gv_towerTag;
bool[9] gv_sentrySet;
region[9] gv_tCPRegion;
unit[9] gv_sentryGuns;
string[11] gv_pingNumeral;
unitgroup gv_prologueSentries;
actor[9] gv_placementArea;
int[9] gv_placementAreaText;
unitgroup gv_infectedCivilians;
int gv_civiliansQuarantined;
int gv_bunkersLost;
unit[5] gv_bunkers;
unitgroup gv_bunkerGroup;
unitgroup gv_bunkerSoldiers;
unit[4] gv_airportGenerators;
bool gv_generatorMissionFailed;
bool gv_epilogueEarned;
bool gv_perfectionCompletion;
unit gv_lldr;
unitgroup gv_finaltier1s;
bool gv_ch3;
unitgroup gv_vIPs;
bool gv_drRosenKilled;
unit[4] gv_bDS;
region[4] gv_bDSRegion;
int[4] gv_bDSPings;
int gv_patrolnext;
int gv_patrolmax;
point[23] gv_patrolroute;
int gv_heliMax;
bool gv_refugeesInRoute;
int gv_refugeeCount;
bool gv_reconDroneFound;
unit gv_reconnaissanceDrone;
region gv_reconPoint;
bool gv_reconDroneRepaired;
unitgroup gv_infernus;
unit gv_Titan;
unit gv_Thanatos;
timer gv_SmithyFleeTimer;
bool[6][4] gv_gameModeUnlocks;
bool gv_survivalCompleted;
region gv_umbraRegion;
int gv_extracted;
int gv_extractionCount;
bool gv_HyperPulseSpawns;
region[11] gv_f15eastRegions;
region[10] gv_f15westRegions;
bool gv_HyperPMCVoteEnabled;
bool gv_hyperpmcEnabled;
bool gv_pMCSurvivalCompleted;
bool gv_smithyKilled;
bool gv_juggernaughtKilled;
bool gv__12ManExtraction;
int gv_waterSamplesCollected;
bool gv_waterSamplesCompleted;
unit gv_cockblock;
bool gv_allowmission;
bool gv_pMCBonusMissionEnabled;
int gv_twelfthObj;
int gv_eleventhObj;
bool[11] gv_newBossMissionCompleted;
bool gv_newBossModeCompleted;
unitgroup gv_ghostSquad;
bool gv_pConvoyReverse;
region[12] gv_policeTCPs;
unitgroup[12] gv_policeTCPGroups;
int gv_phantomDownLZ;
unitgroup gv_phantomCrew;
actor[7] gv_rAPhantom;
int gv_phantomCrewExtraction;
region gv_spawnPMCRegionB;
bool gv_rASF;
int gv_pMCSquadCount;
gs_PMCSquad[51] gv_pMCSquads;
bool gv_pMCAlert;
timer gv_pMCAlertTimer;
gs_PMCSquadLdrTxts[17] gv_pMCSquadText;
unitgroup gv_pMCTerminator;
unitgroup gv_pMCBossGroup;
unit gv_smithy;
int gv_pMissionCount;
unit gv_policeChief;
bool[8] gv_tCPRelieved;
actor gv_rAPhantomDown;
bool gv_pMCReachedPhantom;
int[2] gv_rAPCCount;
bool gv_pMCPrologueCompleted;
bool[12] gv_postSearched;
int gv_convoysKilled;
bool gv_convoy_Set;
bool gv_pMCCh1Completed;
unit[4] gv_missionUnit;
bool gv_pMCCh2Completed;
bool gv_tSMissionFailed;
bool gv_timeStopsFailed;
int gv_biosamplehanded;
unitgroup gv_biosamples;
bool gv_pMCCh3Completed;
gs_SandBoxVoting gv_sandBox;
bool gv_pmcset;
bool gv_pmcon;
bool gv_allselectors;
int gv_sand_Box_Spawner;
int[6] gv_sand_Box_Spawner_Boxes;
int[7] gv_sand_Box_Spawner_Pull_Down_Tabs;
int[4] gv_sand_Box_Spawner_Buttons;
int gv_sand_Box_View_Button;
int gv_civsExtracted;
unitgroup gv_civilians;
unitgroup[5] gv_wanderers;
region[5] gv_cityRegions;
gs_PolicePatrol[4] gv_policePatrols;
bool gv_gameOver;
int gv_spawnCount;
region[6] gv_lZs;
region[5] gv_mapEdges;
int gv_startingplayers;
playergroup gv_players;
unit[13] gv_playerHeroes;
unitgroup gv_heroesGroup;
unitgroup gv_undeadGroup;
int gv_sprintBar;
string[22][2] gv_mOS;
bool gv_rifleman;
bool gv_assaultman;
bool gv_automaticRifleman;
bool gv_flamethrower;
bool gv_combatMedic;
bool gv_calvaryScout;
bool gv_enforcer;
bool gv_sDM;
bool gv_platoonLeader;
bool gv_javelinGunner;
bool gv_combatEngineer;
bool gv_ghost;
bool gv_fireSupportSpecialist;
bool gv_commando;
bool gv_cyborgMos;
bool gv_laserEnforcer;
bool gv_specter;
bool gv_orbitalSupportSpecialist;
bool gv_heavyGunner;
bool gv_mechOperator;
bool gv_mercenary;
bool gv_vesania30;
bool gv_cyborg20;
bool gv_bioSpecialist;
playergroup gv_scoreBoard;
point[12] gv_isrLocations;
unit[12] gv_isrTowers;
actor[13] gv_partyHats;
int gv_mainObj;
int gv_secondObj;
int gv_thirdObj;
int gv_fourthObj;
int gv_fifthObj;
int gv_sixthObj;
int gv_seventhObj;
int gv_eigthObj;
int gv_ninthObj;
int gv_tenthObj;
int gv_optionalObj;
int gv_missionCompletionAmount;
unitgroup gv_simpleMissionItems;
region gv_sensorLZ;
int[12] gv_sensorpings;
actor gv_sensorbeacon;
int gv_sensorcount;
int gv_infestationLevel;
sound gv_heartbeat;
bool gv_heartbeatplaying;
int gv_averageXP;
unit[4] gv_generators;
int gv_xPGained;
bool[13] gv_playerxphalved;
bool[4] gv_missioncomplete;
int gv_missionping;
int gv_pingsecondary;
timer gv_missiontimer;
int gv_missiontimerwindow;
timer gv_missiontimer2;
int gv_missiontimerwindow2;
region[9] gv_silos;
region[9] gv_silonext;
int gv_silonextint;
int gv_silocount;
unitgroup gv_tCPhostiles;
bool[5] gv_tCPfailed;
region[5] gv_tCPSpawns;
unitgroup gv_survivors;
text[6] gv_findsurvivorchat1;
text[6] gv_findsurvivorchat2;
int gv_survivorsrescued;
point[4][21] gv_convoyroutes;
region[4][3] gv_convoystartend;
int gv_convoynext;
int gv_convoynext2;
int gv_convoyset;
int gv_convoymax;
unitgroup gv_convoy;
int gv_convoyvehiclessafe;
bool gv_convoymessage;
bool gv_convoyfinal;
int[9] gv_highlanderpings;
region[9] gv_highlanders;
unitgroup gv_patrol;
region gv_medevacregion;
unit gv_mEDEVAC;
int[4] gv_optionalObjPings;
unitgroup gv_transitionalgroup;
region[13] gv_waterSites;
actor[13] gv_waterSiteActors;
unitgroup gv_waterGatherers;
unitgroup gv_snipers;
bool[9] gv_silodisabled;
unitgroup gv_undeadTargetGroup;
bool gv_pauseSpawning;
region gv_spawnRegion;
region gv_bossSpawnRegion;
bool gv_tCPspawning;
bool[13] gv_playerVoted;
int gv_undeadSupplyCap;
bool gv_guslaniSpawns;
fixed gv_totalMissions;
fixed gv_missionCompleted;
unitgroup gv_missionItemPingItems;
actor[31] gv_objectiveTagIndex;
int[31] gv_objectiveTagIndexText;
bool gv_thunderstorm;
bool gv_frostBite;
bool gv_intenseFog;
bool[13] gv_playerNODson;
fixed[7] gv_fogvars;
bool gv_fogevent;
string gv_currentlighting;
text gv_weatherType;
gs_ItemPool gv_itemLimit;
region[8] gv_weaponcacheregion;
bool[6] gv_weaponcachefound;
int gv_weaponcachesfound;
region[6] gv_rockcache;
actor[6] gv_rockModel;
fixed[13] gv_pointMultiplier;
fixed[13] gv_pointLevel;
fixed[13] gv_medicPoints;
bool[13] gv_tKer;
int[13] gv_medicPointLabel;
int gv_medicPointDialog;
playergroup gv_medics;
int[13] gv_mandoShotgunAmmo;
bool gv_cS_Escort;
bool gv_cS_Escort_Toggled;
fixed[13] gv_a10Distro;
fixed[13] gv_cASLLDRDistro;
int[13] gv_iDFShells;
fixed[13] gv_iDFRadius;
fixed[13] gv_iDFDistro;
fixed[13] gv_iDFInterval;
region[13] gv_iDFTRPs;
int gv_iDFShellsGlobal;
bool gv_fireMission;
bool gv_iDFAvailable;
bool gv_jFOAvailable;
bool gv_allowISR;
bool gv_iSREnabled;
int[13] gv_battleRifleAmmo;
int[13] gv_eM25rAmmo;
int[13] gv_w34Ammo;
int gv_scanDelay;
bool gv_changeItem;
int gv_irradiateOSSPing;
int gv_energyRayOSSPing;
string[8] gv_lNtypes;
unitgroup gv_lNavailable;
int gv_lNsPresent;
int gv_lNsRecruited;
unitgroup gv_lNSentries;
playergroup gv_sFAATs;
unitgroup gv_playerLNs;
unitgroup gv_boundingLNs;
bool gv_advancedleadership;
int gv_lNRiflemanAvailable;
int gv_lNAutomaticRiflemanAvailable;
int gv_lNJavelinGunnerAvailable;
int gv_lNCombatEngineerAvailable;
int gv_lNSquadDesignatedMarksmanAvailable;
int gv_lN68WCombatMedicAvailable;
int gv_lN74DFlamethrowerAvailable;
bool gv_lNCustomCommandCard;
int gv_lNCE;
bool gv_hasPointman;
unitgroup gv_laserDesignatorTarget;
int gv_sniperMAG;
int gv_smgMAG;
int[13] gv_plasmaCarbineAmmo;
int[13] gv_antiMaterielRifleAmmo;
int gv_bankVersion;
string gv_uACBANKNAME;
int[17] gv_playerImportedFromUA3;
bank[13] gv_hotkeyBank;
bank[13] gv_banks;
bank[13] gv_banksold;
bool gv_savedisabled;
bool[17] gv_saveprevent;
bool gv_gamesPlayer1;
int[16] gv_playerkills;
int[13] gv_playermassivekills;
int[13] gv_playerheals;
int[41][13] gv_gamesWon;
int[13] gv_playerhits;
int[4] gv_rankMax;
int[13] gv_playerRankSet;
text[4][18] gv_rankPrefix;
int[4][18] gv_rankXPMin;
string[4][18] gv_rankActorMsg;
string[4][18] gv_rankDecal;
int[4][13] gv_playerExperience;
int[13] gv_playerStartingXP;
int[13] gv_playerRevives;
int[13] gv_playerRevivesGame;
int[13] gv_playerGamesPlayed;
int[13] gv_playerAvgGameTime;
bool[13] gv_playerLeftGame;
bool gv_victory;
int gv_borgWeaponDialog;
int[6] gv_borgWeaponDialogButtons;
int[6] gv_borgWeaponDialogBorders;
int[6] gv_borgWeaponDialogImages;
string[6] gv_borgWeaponDialogImageFiles;
bool[gv_miscUnlockCount + 1][13] gv_miscUnlocks;
bool[gv_achievementCount + 1][13] gv_achievementUnlocked;
bool[11][13] gv_achievementSlotFilled;
text[gv_achievementCount + 1][13] gv_achievementName;
text[gv_achievementCount + 1][13] gv_achievementDescription;
text[gv_achievementCount + 1] gv_achievementPoint;
int[gv_achievementCount + 1][13] gv_achievementPointCnt;
string[gv_achievementCount + 1][13] gv_achievementImage;
text[gv_achievementCount + 1][13] gv_achievementTooltip;
int[13] gv_playerAchCnt;
int[13] gv_playerAchPts;
gs_ScrollMenu gv_sM;
gs_Player[gv_mP + 1] gv_player;
int gv_accessoryDialog;
int[gv_accessories + 1] gv_accessoryDialogButtons;
bool[gv_accessories + 1][13] gv_playeraccessoryunlocked;
int[13] gv_accessoryDialogItems;
bool[13] gv_unitModelWeaponDisplayAcc;
int gv_voteKickDialogMain;
int gv_voteKickDialog;
int gv_voteKickButton;
int[13] gv_voteKickPlayers;
int gv_voteKickVoteBoard;
text gv_voteKickVoteBoardTitle;
int gv_voteKickVoteBoardYes;
int gv_voteKickVoteBoardNo;
int gv_voteKickVoteBoardYesLabel;
int gv_voteKickVoteBoardNoLabel;
int gv_voteKickVoteBoardTimerLabel;
bool[13] gv_voteKickVoteBoardVotedAlready;
bool gv_voteKickVoteBoardStarted;
int gv_numberofVotesYes;
int gv_numberofVotesNo;
timer gv_kickVoteTimer;
int gv_kickedPlayer;
int gv_kickTimerTime;
int gv_unlockDialog;
int[53] gv_decalDialogButtons;
int[gv_camos + 1] gv_camoDialogButtons;
int[13] gv_unlockDialogItems;
int[13] gv_playerCurrentCamo;
int[13][4] gv_textureValue;
int[13] gv_camo_Set;
int[13] gv_decal_Set;
bool[13] gv_unitModelWeaponDisplay;
unitgroup gv_octoCamos;
bool[gv_camos + 1][13] gv_playercamounlocked;
bool[gv_decals + 1][13] gv_playerdecalunlocked;
bool[gv_sIcount + 1][13] gv_playerSISelected;
int gv_sIDialog;
int[gv_sIcount + 1] gv_sIDialogButtons;
int[3] gv_sIDialogLabels;
text[gv_sIcount + 1] gv_sIname;
string[gv_sIcount + 1] gv_sIabbreviation;
text[gv_sIcount + 1] gv_sIdescription;
bool[gv_sIcount + 1][13] gv_sIunlocked;
int[4][gv_sIcount + 1] gv_sIXPminimum;
int[gv_sIcount + 1] gv_sIBorderFrameIndex;
int[gv_sIcount + 1] gv_sIBorderFrameHighlightIndex;
int[gv_sIcount + 1] gv_sILabelColorIndex;
int gv_sIAWSIActive;
int[gv_sIcount + 1] gv_sIImageIndex;
string[gv_sIcount + 1] gv_sIImage;
int[13] gv_sIMosName;
string[3][13] gv_playerSIbehaviors;
int[gv_SIBetaCount + 1] gv_SIBetaDialogButtons;
text[gv_SIBetaCount + 1] gv_SIBetaName;
string[gv_SIBetaCount + 1] gv_SIBetaAbbreviation;
text[gv_SIBetaCount + 1] gv_SIBetaDescription;
bool[gv_SIBetaCount + 1][13] gv_SIBetaUnlocked;
int[gv_SIBetaCount + 1] gv_SIBetaBorderFrameIndex;
int[gv_SIBetaCount + 1] gv_SIBetaBorderFrameHighlightIndex;
int[gv_SIBetaCount + 1] gv_SIBetaLabelColorIndex;
int[gv_SIBetaCount + 1] gv_SIBetaImageIndex;
string[gv_SIBetaCount + 1] gv_SIBetaImage;
int[13] gv_playerSIcount;
int[3][13] gv_playerSIsused;
int[13] gv_mosspecificSIcount;
int[2][13] gv_mosspecificSIsused;
bool[13] gv_enabledBB;
int[13] gv_bBCount;
int gv_battleBuddySelectionScreen;
int[8] gv_miniButtons;
unitgroup gv_battleBuddy;
int[13] gv_battleBuddyType;
bool[13] gv_battleBuddySelected;
int gv_automaticRiflemanBBCount;
int gv_combatEngineerBBCount;
int gv_javelinGunnerBBCount;
int gv__74DFlamethrowerBBCount;
int gv_infantrySDMBBCount;
int gv_cameraButton;
int[13] gv_functionaldialog;
int[10] gv_functionaldialogbuttons;
int[3][13] gv_funcdialogoffsets;
int gv_hUDDialog;
int[11][15] gv_hUDDialogItems;
int gv_inventoryButton;
bool[13][13] gv_playervoted;
string[13] gv_playerHeroImage;
int gv_statusDialog;
int[12][13] gv_statusDialogItems;
int gv_infoDialog;
int[2][13] gv_infoText;
int gv_infoPlacement;
int[20] gv_modeitem;
string[20] gv_difficultyImages;
int gv_fireteamDialog;
int[11] gv_fireteamdialogbuttons;
playergroup[5] gv_fireteamGroups;
text[5] gv_fireteamnames;
int[5][5] gv_fireteamlabels;
int[13] gv_playersfireteam;
int[5] gv_fireteamTLs;
int[5] gv_fireteamORP;
unit[13] gv_fireteamORPpoints;
int[5][13] gv_fireteamPlacement;
bool[5][5] gv_placementOccupied;
unitgroup gv_sprinters;
int gv_ammoDialogue;
int[9] gv_ammoDialogueItems;
bool gv_pauseSprintLoop;
string[27] gv_hotkeyBind;
bool[13] gv_customCommandCard;
string[13] gv_setHotKey;
int gv_hotKeyDialog;
int[3] gv_hotkeyDialogButtons;
int[16] gv_hotkeyMenus;
int gv_hotkeyMenuButton;
int[3] gv_itemScannerDialogButtons;
int gv_itemScannerMenuButton;
int gv_itemScannerMenuDialog;
int[4] gv_itemScannerBoxes;
int[4] gv_itemScannerPullDownTabs;
int gv_inventory;
int gv_playerInventory;
int[gv_itemCount + 1][13] gv_itemInventoryCount;
bool[gv_itemCount + 1][13] gv_itemInInventory;
string[gv_itemCount + 1] gv_itemImages;
string[gv_itemCount + 1] gv_itemName;
int[13] gv_amount;
unitgroup[13] gv_dropItems;
unit[13] gv_selected;
int[13] gv_selectedPlayer;
int gv_heroInventoryDialog;
int gv_nPCInventoryDialog;
int[6][6] gv_inventorySlots;
int gv_visorTextDialog;
int[13] gv_visorText;
timer[13] gv_visorTextTimer;
int[13] gv_modifierFrameHighlighted;
int[4] gv_rankHighlighted;
gs_UIDialogs gv_uIDialogs;
gs_PlayerData[gv_cCOREPlayers + 1] gv_playerData;
int[2] gv_tipPanel;
int gv_overheatThreshold;
fixed gv_cooldownPeriod;
int gv_overheatProgressBar;
int gv_overheatProgressBarBorder;
int gv_endGameButton;
int gv_endGame;
bool[13] gv_medicScoreboard;
int gv_rankMenu;
fixed gv_barIncrement;
fixed gv_barMax;
fixed gv_barCurrent;
int gv_progressBarDialog;
int gv_progressBar_PB;
int gv_progressBarTitle;
int gv_progressBarValueLabel;
bool gv_progressBarBool;
int gv_objective_Panel;
int gv_objective_Mission_Tracker;
int gv_objective_Mission_Tracker_Check;
int gv_objective_Mission_Tracker_Label;
int gv_objective_Mission_Tracker_PB;
fixed gv_objective_Mission_Tracker_Max;
fixed gv_objective_Mission_Tracker_Current;
int gv_BossBarRegistry;
string[gv_ailmentCount + 1] gv_ailments;
int[gv_ailmentCount + 1] gv_ailmentIndividualChance;
int gv_ailmentChance;
string[gv_ailmentCount + 1] gv_ailmentImages;
text[5] gv_unitHighestAilmentImage;
string[gv_miniarraysize + 1] gv_minitypes;
string[gv_miniarraysizeCC + 1] gv_minitypesCC;
bool gv_ceallowed;
unitgroup gv_reloading;
int gv_jamChance;
int[13] gv_magsize;
int[13] gv_magsused;
unitgroup gv_jammed;
unitgroup gv_immediateAction;
fixed[13] gv_reloadbasetime;
int[13] gv_jammedtext;
unitgroup[13] gv_playerdroppedammo;
int[13] gv_playerEncumbrance;
int[13] gv_playerMagMax;
bool[13] gv_medicKilled;
unit gv_lastlandedphantom;
bool gv_shockPaddlesAllowed;
unit[13] gv_deadHeroIndicator;
bool[13] gv_playersHeroisDead;
int[13] gv_playerkickvotes;
bool[13] gv_playerkickable;
int[13] gv_playerDeaths;
bool[13] gv_deadPlayerMini;
fixed[13] gv_deathDuration;
fixed[13] gv_deathInterval;
unitgroup[13] gv_heroskilledbyplayer;
int[13] gv_tKCount;
int gv_teamDeathTotal;
bool[13] gv_playerRevivedPlayer;
unit gv_shockPaddles;
int gv_tier1Threads;
bool gv_stopNoviceCommander;
bool gv_stopAdvancedCommander;
bool gv_stopMasterCommander;
int gv_noviceInvasionPoints;
int gv_advancedInvasionPoints;
int gv_masterInvasionPoints;
bool gv_undeadMutations;
unitgroup gv_massiveGroup;
bool gv_missionAutostart;
revealer[13] gv_devRevealer;
bool gv_devRevealersCreated;
bool gv_devingame;
bool gv_testingGenesisBuffs;
bool gv_modingame;
int gv_sandboxDifficultyModifier;
bool gv_fakeweather;
bool gv_weatherstopImme;
int gv_complexBossBarLength;
bool gv_displayTier3CountAfterHyperPulseT2T3Actived;
int gv_thanatosMoveWAILastTime;
bool gv_criticalShotReal5X;
int gv_hyperPulseT2T3SupplyCapChangesTo;
bool gv_nightMarePLUZM5C2M1Enable;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;

    gv_startingLZ = RegionFromId(6);
    gv_phantomBeginning = PointFromId(370);
    gv_easterEggDialogue = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_heroNameTag[init_i] = c_textTagNone;
    }
    gv_heroselectors = UnitGroupEmpty();
    gv_modetotal = UserDataInstanceCount("GameModes");
    gv_modedialog = c_invalidDialogId;
    gv_xpmodifier = 1.0;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_dialogmodifier[init_i] = c_invalidDialogControlId;
    }
    gv_rankdialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_rankitem[init_i] = c_invalidDialogControlId;
    }
    gv_submitButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_dialogrankset[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_rankLabel[init_i] = c_invalidDialogControlId;
    }
    gv_modetimeoutwindow = c_timerWindowNone;
    gv_modetimer = TimerCreate();
    gv_playerminis = UnitGroupEmpty();
    gv_commandCardType = c_invalidDialogControlId;
    gv_weatherTypeSelected = c_invalidDialogControlId;
    gv_zS_PlanetPortrait = c_invalidPortraitId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_epiSAMPings[init_i] = c_invalidPingId;
    }
    gv_artilleryTimer = TimerCreate();
    gv_smithyPing = c_invalidPingId;
    gv_MissionT1s = UnitGroupEmpty();
    gv_refugeegroup = UnitGroupEmpty();
    gv_casualties = UnitGroupEmpty();
    gv_seismicSatchel = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_seismicPings[init_i] = c_invalidPingId;
    }
    gv_seismicBoss = UnitGroupEmpty();
    gv_fungusCores = UnitGroupEmpty();
    gv_spyGroup = UnitGroupEmpty();
    gv_dr = UnitGroupEmpty();
    gv_shadowUnits = UnitGroupEmpty();
    gv_escortCivilians = UnitGroupEmpty();
    gv_bossTimer = TimerCreate();
    gv_bossTimerWindow = c_timerWindowNone;
    gv_bossGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_satchelTimeMAX[init_i] = 90;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_satchelTimeRemaining[init_i] = 90;
    }
    gv_satchelTextTag = c_textTagNone;
    gv_redTextTag = Color(100.00, 0.00, 0.00);
    gv_m200Satchel = UnitGroupEmpty();
    gv_dsdialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_dsdialogbuttons[init_i] = c_invalidDialogControlId;
    }
    gv_uSHelis = UnitGroupEmpty();
    gv_supplyPing = c_invalidPingId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_aORegionPings[init_i] = c_invalidPingId;
    }
    gv_pingRate = 4.0;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_towerTag[init_i] = c_textTagNone;
    }
    gv_prologueSentries = UnitGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_placementAreaText[init_i] = c_textTagNone;
    }
    gv_infectedCivilians = UnitGroupEmpty();
    gv_bunkerGroup = UnitGroupEmpty();
    gv_bunkerSoldiers = UnitGroupEmpty();
    gv_finaltier1s = UnitGroupEmpty();
    gv_vIPs = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_bDSPings[init_i] = c_invalidPingId;
    }
    gv_patrolnext = 1;
    gv_heliMax = 2;
    gv_reconDroneRepaired = true;
    gv_infernus = UnitGroupEmpty();
    gv_SmithyFleeTimer = TimerCreate();
    gv_allowmission = true;
    gv_twelfthObj = c_invalidObjectiveId;
    gv_eleventhObj = c_invalidObjectiveId;
    gv_ghostSquad = UnitGroupEmpty();
    for (init_i = 0; init_i <= 11; init_i += 1) {
        gv_policeTCPGroups[init_i] = UnitGroupEmpty();
    }
    gv_phantomCrew = UnitGroupEmpty();
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_pMCSquads[init_i].lv_group = UnitGroupEmpty();
    }
    gv_pMCAlertTimer = TimerCreate();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_pMCSquadText[init_i].lv_text1 = StringExternal("Param/Value/7C3D527E");
        gv_pMCSquadText[init_i].lv_text2 = StringExternal("Param/Value/F1D12AF3");
        gv_pMCSquadText[init_i].lv_text3 = StringExternal("Param/Value/A460E722");
    }
    gv_pMCTerminator = UnitGroupEmpty();
    gv_pMCBossGroup = UnitGroupEmpty();
    gv_tSMissionFailed = true;
    gv_biosamples = UnitGroupEmpty();
    gv_sandBox.lv_sandBoxVoteDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_sandBox.lv_sandBoxButton[init_i1] = c_invalidDialogControlId;
    }
    gv_sand_Box_Spawner = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_sand_Box_Spawner_Boxes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_sand_Box_Spawner_Pull_Down_Tabs[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_sand_Box_Spawner_Buttons[init_i] = c_invalidDialogControlId;
    }
    gv_sand_Box_View_Button = c_invalidDialogControlId;
    gv_civilians = UnitGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_wanderers[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_policePatrols[init_i].lv_group = UnitGroupEmpty();
        gv_policePatrols[init_i].lv_routenext = 1;
    }
    gv_spawnCount = 6;
    gv_players = PlayerGroupEmpty();
    gv_heroesGroup = UnitGroupEmpty();
    gv_undeadGroup = UnitGroupEmpty();
    gv_sprintBar = c_invalidDialogId;
    gv_scoreBoard = PlayerGroupEmpty();
    gv_mainObj = c_invalidObjectiveId;
    gv_secondObj = c_invalidObjectiveId;
    gv_thirdObj = c_invalidObjectiveId;
    gv_fourthObj = c_invalidObjectiveId;
    gv_fifthObj = c_invalidObjectiveId;
    gv_sixthObj = c_invalidObjectiveId;
    gv_seventhObj = c_invalidObjectiveId;
    gv_eigthObj = c_invalidObjectiveId;
    gv_ninthObj = c_invalidObjectiveId;
    gv_tenthObj = c_invalidObjectiveId;
    gv_optionalObj = c_invalidObjectiveId;
    gv_missionCompletionAmount = c_invalidObjectiveId;
    gv_simpleMissionItems = UnitGroupEmpty();
    for (init_i = 0; init_i <= 11; init_i += 1) {
        gv_sensorpings[init_i] = c_invalidPingId;
    }
    gv_infestationLevel = 15;
    gv_missionping = c_invalidPingId;
    gv_pingsecondary = c_invalidPingId;
    gv_missiontimer = TimerCreate();
    gv_missiontimerwindow = c_timerWindowNone;
    gv_missiontimer2 = TimerCreate();
    gv_missiontimerwindow2 = c_timerWindowNone;
    gv_silonextint = 1;
    gv_tCPhostiles = UnitGroupEmpty();
    gv_survivors = UnitGroupEmpty();
    gv_convoynext = 1;
    gv_convoynext2 = 1;
    gv_convoy = UnitGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_highlanderpings[init_i] = c_invalidPingId;
    }
    gv_patrol = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_optionalObjPings[init_i] = c_invalidPingId;
    }
    gv_transitionalgroup = UnitGroupEmpty();
    gv_waterGatherers = UnitGroupEmpty();
    gv_snipers = UnitGroupEmpty();
    gv_undeadTargetGroup = UnitGroupEmpty();
    gv_undeadSupplyCap = 170;
    gv_missionItemPingItems = UnitGroupEmpty();
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_objectiveTagIndexText[init_i] = c_textTagNone;
    }
    gv_currentlighting = "UACDayAlt";
    gv_itemLimit.lv_aPRound = 6;
    gv_itemLimit.lv_dURound = 3;
    gv_itemLimit.lv_liftBoot = 3;
    gv_itemLimit.lv_kineticIntegrator = 4;
    gv_itemLimit.lv_uSMCR = 8;
    gv_itemLimit.lv_hK42 = 6;
    gv_itemLimit.lv_stynerBR2 = 6;
    gv_itemLimit.lv_stynerBR3 = 3;
    gv_itemLimit.lv_sOFAR = 6;
    gv_itemLimit.lv_atlasX50 = 3;
    gv_itemLimit.lv_iDMR2 = 4;
    gv_itemLimit.lv_m92Torrent = 3;
    gv_itemLimit.lv_xR900 = 3;
    gv_itemLimit.lv_m41SAW = 5;
    gv_itemLimit.lv_m241MMG = 4;
    gv_itemLimit.lv_m135Minigun = 3;
    gv_itemLimit.lv_m79Flamethrower = 4;
    gv_itemLimit.lv_inferno = 3;
    gv_itemLimit.lv_iPR = 2;
    gv_itemLimit.lv_xM88b = 1;
    gv_itemLimit.lv_pR34E = 2;
    gv_itemLimit.lv_pR42C = 2;
    gv_itemLimit.lv_iSS7 = 6;
    gv_itemLimit.lv_aA12 = 4;
    gv_itemLimit.lv_m1014 = 3;
    gv_itemLimit.lv_aS50Custom = 3;
    gv_itemLimit.lv_d20LaserRifle = 3;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_pointMultiplier[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_pointLevel[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_medicPointLabel[init_i] = c_invalidDialogControlId;
    }
    gv_medicPointDialog = c_invalidDialogId;
    gv_medics = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_mandoShotgunAmmo[init_i] = 25;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_a10Distro[init_i] = -1.0;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_cASLLDRDistro[init_i] = -1.0;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_iDFShells[init_i] = 1;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_iDFRadius[init_i] = 2.0;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_iDFDistro[init_i] = -1.0;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_iDFInterval[init_i] = 0.2;
    }
    gv_iDFShellsGlobal = 175;
    gv_iDFAvailable = true;
    gv_jFOAvailable = true;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_battleRifleAmmo[init_i] = 60;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_eM25rAmmo[init_i] = 5;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_w34Ammo[init_i] = 25;
    }
    gv_scanDelay = 20;
    gv_irradiateOSSPing = c_invalidPingId;
    gv_energyRayOSSPing = c_invalidPingId;
    gv_lNavailable = UnitGroupEmpty();
    gv_lNSentries = UnitGroupEmpty();
    gv_sFAATs = PlayerGroupEmpty();
    gv_playerLNs = UnitGroupEmpty();
    gv_boundingLNs = UnitGroupEmpty();
    gv_laserDesignatorTarget = UnitGroupEmpty();
    gv_sniperMAG = 25;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_antiMaterielRifleAmmo[init_i] = 5;
    }
    gv_bankVersion = 1;
    gv_uACBANKNAME = "UAABank";
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_playerRankSet[init_i] = 1;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 17; init_j += 1) {
            gv_rankActorMsg[init_i][init_j] = "SetShowing 1";
        }
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_playerGamesPlayed[init_i] = 1;
    }
    gv_borgWeaponDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_borgWeaponDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_borgWeaponDialogBorders[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_borgWeaponDialogImages[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_achievementCount; init_i += 1) {
        for (init_j = 0; init_j <= 12; init_j += 1) {
            gv_achievementTooltip[init_i][init_j] = StringExternal("Param/Value/03808FC0");
        }
    }
    gv_sM.lv_dialog = c_invalidDialogId;
    gv_sM.lv_bG = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 3; init_j1 += 1) {
            gv_sM.lv_menuItems[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    gv_sM.lv_scrollBar = c_invalidDialogControlId;
    gv_accessoryDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= gv_accessories; init_i += 1) {
        gv_accessoryDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_accessoryDialogItems[init_i] = c_invalidDialogControlId;
    }
    gv_voteKickDialogMain = c_invalidDialogId;
    gv_voteKickDialog = c_invalidDialogId;
    gv_voteKickButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_voteKickPlayers[init_i] = c_invalidDialogControlId;
    }
    gv_voteKickVoteBoard = c_invalidDialogId;
    gv_voteKickVoteBoardYes = c_invalidDialogControlId;
    gv_voteKickVoteBoardNo = c_invalidDialogControlId;
    gv_voteKickVoteBoardYesLabel = c_invalidDialogControlId;
    gv_voteKickVoteBoardNoLabel = c_invalidDialogControlId;
    gv_voteKickVoteBoardTimerLabel = c_invalidDialogControlId;
    gv_kickVoteTimer = TimerCreate();
    gv_unlockDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 52; init_i += 1) {
        gv_decalDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_camos; init_i += 1) {
        gv_camoDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_unlockDialogItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_playerCurrentCamo[init_i] = 1;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_camo_Set[init_i] = gv_camos;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_decal_Set[init_i] = gv_decals;
    }
    gv_octoCamos = UnitGroupEmpty();
    gv_sIDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= gv_sIcount; init_i += 1) {
        gv_sIDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_sIDialogLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_sIcount; init_i += 1) {
        gv_sIabbreviation[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_sIcount; init_i += 1) {
        gv_sIBorderFrameIndex[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_sIcount; init_i += 1) {
        gv_sIBorderFrameHighlightIndex[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_sIcount; init_i += 1) {
        gv_sILabelColorIndex[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_sIcount; init_i += 1) {
        gv_sIImageIndex[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_sIMosName[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_SIBetaCount; init_i += 1) {
        gv_SIBetaDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_SIBetaCount; init_i += 1) {
        gv_SIBetaAbbreviation[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_SIBetaCount; init_i += 1) {
        gv_SIBetaBorderFrameIndex[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_SIBetaCount; init_i += 1) {
        gv_SIBetaBorderFrameHighlightIndex[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_SIBetaCount; init_i += 1) {
        gv_SIBetaLabelColorIndex[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_SIBetaCount; init_i += 1) {
        gv_SIBetaImageIndex[init_i] = c_invalidDialogControlId;
    }
    gv_battleBuddySelectionScreen = c_invalidDialogId;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_miniButtons[init_i] = c_invalidDialogControlId;
    }
    gv_battleBuddy = UnitGroupEmpty();
    gv_cameraButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_functionaldialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_functionaldialogbuttons[init_i] = c_invalidDialogControlId;
    }
    gv_hUDDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 14; init_j += 1) {
            gv_hUDDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_inventoryButton = c_invalidDialogControlId;
    gv_statusDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 11; init_i += 1) {
        for (init_j = 0; init_j <= 12; init_j += 1) {
            gv_statusDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_infoDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        for (init_j = 0; init_j <= 12; init_j += 1) {
            gv_infoText[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 19; init_i += 1) {
        gv_modeitem[init_i] = c_invalidDialogControlId;
    }
    gv_fireteamDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_fireteamdialogbuttons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_fireteamGroups[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_fireteamlabels[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_fireteamORP[init_i] = c_invalidPingId;
    }
    gv_sprinters = UnitGroupEmpty();
    gv_ammoDialogue = c_invalidDialogId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_ammoDialogueItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 26; init_i += 1) {
        gv_hotkeyBind[init_i] = "";
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_setHotKey[init_i] = "";
    }
    gv_hotKeyDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_hotkeyDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_hotkeyMenus[init_i] = c_invalidDialogControlId;
    }
    gv_hotkeyMenuButton = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_itemScannerDialogButtons[init_i] = c_invalidDialogControlId;
    }
    gv_itemScannerMenuButton = c_invalidDialogId;
    gv_itemScannerMenuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_itemScannerBoxes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_itemScannerPullDownTabs[init_i] = c_invalidDialogControlId;
    }
    gv_inventory = c_invalidDialogId;
    gv_playerInventory = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_itemCount; init_i += 1) {
        gv_itemImages[init_i] = "";
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_dropItems[init_i] = UnitGroupEmpty();
    }
    gv_heroInventoryDialog = c_invalidDialogId;
    gv_nPCInventoryDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_inventorySlots[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_visorTextDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_visorText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_visorTextTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_modifierFrameHighlighted[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_rankHighlighted[init_i] = c_invalidDialogControlId;
    }
    gv_uIDialogs.lv_globalDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= gv_cCOREPlayers; init_i1 += 1) {
        gv_uIDialogs.lv_behaviorDialog[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= gv_cCOREPlayers; init_i1 += 1) {
        gv_uIDialogs.lv_behaviorPin[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_cCOREPlayers; init_i += 1) {
        gv_playerData[init_i].lv_heroGroup = UnitGroupEmpty();
        for (init_i1 = 0; init_i1 <= 24; init_i1 += 1) {
            gv_playerData[init_i].lv_behaviors[init_i1].lv__panel = c_invalidDialogControlId;
            gv_playerData[init_i].lv_behaviors[init_i1].lv__duration = c_invalidDialogControlId;
            gv_playerData[init_i].lv_behaviors[init_i1].lv__border = c_invalidDialogControlId;
            gv_playerData[init_i].lv_behaviors[init_i1].lv__icon = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_tipPanel[init_i] = c_invalidDialogControlId;
    }
    gv_overheatThreshold = 65;
    gv_cooldownPeriod = 0.75;
    gv_overheatProgressBar = c_invalidDialogControlId;
    gv_overheatProgressBarBorder = c_invalidDialogControlId;
    gv_endGameButton = c_invalidDialogControlId;
    gv_endGame = c_invalidDialogId;
    gv_rankMenu = c_invalidDialogControlId;
    gv_progressBarDialog = c_invalidDialogControlId;
    gv_progressBar_PB = c_invalidDialogControlId;
    gv_progressBarTitle = c_invalidDialogControlId;
    gv_progressBarValueLabel = c_invalidDialogControlId;
    gv_progressBarBool = true;
    gv_objective_Panel = c_invalidDialogControlId;
    gv_objective_Mission_Tracker = c_invalidDialogControlId;
    gv_objective_Mission_Tracker_Check = c_invalidDialogControlId;
    gv_objective_Mission_Tracker_Label = c_invalidDialogControlId;
    gv_objective_Mission_Tracker_PB = c_invalidDialogControlId;
    gv_BossBarRegistry = 1;
    for (init_i = 0; init_i <= gv_ailmentCount; init_i += 1) {
        gv_ailmentIndividualChance[init_i] = 10;
    }
    gv_ailmentChance = 10;
    for (init_i = 0; init_i <= gv_ailmentCount; init_i += 1) {
        gv_ailmentImages[init_i] = "";
    }
    gv_ceallowed = true;
    gv_reloading = UnitGroupEmpty();
    gv_jamChance = 7;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_magsused[init_i] = 1;
    }
    gv_jammed = UnitGroupEmpty();
    gv_immediateAction = UnitGroupEmpty();
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_reloadbasetime[init_i] = 4.0;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_jammedtext[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_playerdroppedammo[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_playerEncumbrance[init_i] = 15;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_playerMagMax[init_i] = 25;
    }
    gv_shockPaddlesAllowed = true;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_deathDuration[init_i] = 240.0;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_deathInterval[init_i] = 24.0;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_heroskilledbyplayer[init_i] = UnitGroupEmpty();
    }
    gv_noviceInvasionPoints = 10;
    gv_advancedInvasionPoints = 15;
    gv_masterInvasionPoints = 20;
    gv_massiveGroup = UnitGroupEmpty();
    gv_missionAutostart = true;
    gv_sandboxDifficultyModifier = 3;
    gv_complexBossBarLength = 1000;
    gv_displayTier3CountAfterHyperPulseT2T3Actived = true;
    gv_thanatosMoveWAILastTime = 150;
    gv_hyperPulseT2T3SupplyCapChangesTo = 220;
    gv_nightMarePLUZM5C2M1Enable = true;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SetupRankSet (int lp_player, int lp_rankset);
void gf_SetupCommandCard (int lp_player, int lp_listItem);
void gf_SetupMos (string lp_newHero, int lp_rounds, fixed lp_reloadBaseTime, int lp_mags, soundlink lp_sound, string lp_heroImage);
bool gf_PlayerRandomedCount ();
bool gf_CheckVotes (int lp_mode);
void gf_CountVotes ();
void gf_ResetVotes ();
void gf_InitModeDialogCampaign ();
void gf_InitModeDialogSurvival ();
void gf_InitModeDialogQuickMatch ();
void gf_SetGameMode ();
int gf_EventActive ();
void gf_SetModifiers ();
void gf_GameStart ();
void gf_PreparePlanetPortraitZoomIn (string lp_model, camerainfo lp_camera, string lp_light);
void gf_ZoomInPlanetPortrait ();
void gf_HidePlanetPortrait ();
void gf_CinematicStart ();
void gf_HeroSetup (int lp_player, unit lp_herounit);
void gf_InitializeHeroVars ();
void gf_LoadCamoDecalBank (int lp_player);
void gf_BMDDTowerNetwork ();
void gf_RepairingTower (unit lp_unit, region lp_region, int lp_site);
void gf_SignalStrengthDialogue (int lp_towersCompleted);
void gf_SporeColonies ();
void gf_SentryGuns ();
void gf_ScalePlacementArea (int lp_region);
void gf_QuarantineCivilians ();
void gf_DrMorrowText ();
void gf_CivilianPing (unit lp_item);
void gf_DefendBalaad ();
void gf_BalaadSpawns (int lp_tCP, string lp_type, int lp_count);
void gf_Chapter1Defend ();
void gf_KillIntrudingT1s ();
void gf_IntrudingT1sPenaltySpawn ();
void gf_BunkerSoldiersOrder ();
void gf_EscortCivilians ();
void gf_WanderingSoldier ();
void gf_EscortLabAssistant ();
void gf_EscortReinforcements ();
void gf_ProtectAH25Hunters ();
void gf_DeliverFuel (unit lp_fuel, int lp_bay);
void gf_Chapter2Courage ();
void gf_IntoTheDarkness ();
void gf_MarchOfTheDead ();
void gf_IntoTheDarkMarch ();
void gf_Apiaries ();
void gf_RechargeGenerators ();
void gf_BiosphereSilos ();
void gf_ExtractVIPs ();
void gf_VIPBossSpawn ();
void gf_ReconnaissanceDrone ();
void gf_ReconDroneLaserDesignateUnit (unit lp_targetUnit);
void gf_DasdanRetreats ();
void gf_SpawnRefugees ();
void gf_TakeoffPhantomSpef (unit lp_Unit);
void gf_Chapter3DarkSkies ();
void gf_Heliport ();
void gf_DarkSky ();
void gf_SearchThalimHomes ();
void gf_FindKeyCard ();
void gf_FindKineticEnergyCapacitors ();
void gf_EscortDarkSky ();
void gf_DSSkin (unit lp_dSUnit);
void gf_ProtectBioResonator ();
void gf_BioResonatorSpawns ();
void gf_SeismicDisturbance ();
void gf_ThresherMaws ();
void gf_FungusCores ();
void gf_SecureLZs ();
void gf_AirThreats ();
void gf_EscortEngineers ();
void gf_USArmyEscortActions ();
void gf_T1Arrival ();
void gf_SpawnSmithy ();
void gf_Computers1Bal ();
void gf_AccessingComputers (unit lp_unit, region lp_region, int lp_site);
void gf_Computers2Air ();
void gf_Computers3RA ();
void gf_SmithyAdvance ();
void gf_SmithyAdvanceSpawns ();
void gf_FillBunker (unit lp_bunker);
void gf_ElitePMCFlyover ();
void gf_PMCSurvivalStartBonusMission ();
void gf_PMCSurvivalResearchHandover (unit lp_research);
void gf_NewBossModeInitialSupplyDrop ();
int gf_PMCSquadSlot (int lp_squadIndex);
void gf_SpawnPMCSquad (int lp_squadType, int lp_chance);
void gf_SpawnPMCSquadInRegion (int lp_squadtype, int lp_chance, region lp_region);
void gf_SpawnPMCSoldier (string lp_type, point lp_point, int lp_squad);
void gf_SpawnPMCBoss (int lp_count, string lp_type);
void gf_StartPMCBossAttackLoop (unit lp_pMCBoss);
void gf_SpawnTerminatorSquad (int lp_squadtype, int lp_chance);
void gf_SpawnTerminatorUnit (string lp_type, point lp_point, int lp_squad);
void gf_SquadAttackPosition (int lp_squad, point lp_position);
void gf_AddTextureToPMCUnit (unit lp_unit);
void gf_PMCTextSwitch (int lp_randomMsg, int lp_squad);
void gf_PMCCampaignSupplyCaches (int lp_cache);
void gf_DropShellatTargetPMC (point lp_target, string lp_effect, int lp_player);
void gf_PoliceTCPCheck (int lp_index);
void gf_DasdanCasualties ();
point gf_FindPlayerPoint ();
void gf_PSampleHandover (unit lp_sample);
void gf_SandBoxVoteScreen ();
void gf_SandBoxInitialize ();
void gf_ShowSandBoxDialog (int lp_player);
void gf_CreateSandBoxDialog ();
void gf_SpawnPlayerHeroSandBox (point lp_point, int lp_player, string lp_message);
void gf_SpawnSandboxLN (int lp_player, int lp_amount, string lp_lNType);
void gf_CreateSpawnerButton (int lp_anchor, int lp_offsetX, int lp_offsetY, int lp_sidebarWidth);
string gf_GetArmorWeaponTypeFromList (int lp_listItem);
string gf_GetItemTypeFromList (int lp_listItem);
string gf_GetMiniVehicleFromList (int lp_listUnit, int lp_player);
string gf_GetUndeadUnitFromList (int lp_listUnit);
int gf_GetSpawnAmountOrLoopFromList (int lp_listAmount);
int gf_GetSpawnLoopFromList (int lp_spawnLoop);
void gf_HoldoutCivEscort ();
void gf_A10Strafe ();
void gf_InitializeCivilians ();
string gf_RandomCivilianType ();
string gf_RandomPoliceType ();
void gf_PolicePatrolInitialize ();
void gf_InitializeGameSetup ();
void gf_InitUI ();
void gf_InitRegions ();
void gf_InitBanks ();
void gf_InitDebug ();
void gf_ResetMissionComplete ();
void gf_SpawnTCPzombie (int lp_tCP, string lp_type, int lp_count);
void gf_HideAllUIFramesForPlayers (playergroup lp_playerGroup);
void gf_MissionItemPingAddItem (unit lp_item);
void gf_MissionItemPingRemoveItem (unit lp_item);
void gf_MissionItemCarried (unit lp_item, int lp_player);
void gf_MissionItemDropped (int lp_player, unit lp_item);
bool gf_Parity (int lp_integer);
text gf_TextImage (string lp_imgpath, int lp_scale);
string gf_GetPlayerImage (int lp_player);
void gf_MissionText (text lp_text);
void gf_SetNewLighting (string lp_light, fixed lp_blendtime);
void gf_ResetLighting (fixed lp_blendtime);
void gf_PlaySoundOnUnit (unit lp_unit, soundlink lp_sound);
void gf_AIScatterFromPoint (point lp_point, fixed lp_radius);
void gf_PlayerTransmission (text lp_text, int lp_attachText, int lp_player);
void gf_TextChat (unit lp_unit, text lp_text);
void gf_PMCTextChat (unit lp_unit, text lp_text);
void gf_SetTTFadeandDuration (int lp_tag, fixed lp_duration);
void gf_SkipActionsIfGameOver ();
void gf_ChapterIntermissionOn ();
void gf_ChapterIntermissionOff ();
void gf_PlayableMapArea (fixed lp_z, fixed lp_y, fixed lp_x);
void gf_SaveCameraSettings ();
void gf_RestoreCameraSettings (fixed lp_seconds, fixed lp_deceleration);
void gf_GivePlayerHeroXP (unit lp_player, string lp_xP);
void gf_RefreshUnitGroup (unitgroup lp_group);
void gf_PlayUnloadAnimationOnUnit (unit lp_player);
void gf_MoveToGuardPos (unit lp_unit, region lp_region);
void gf_MoveToPosProne (unit lp_unit, point lp_point);
void gf_LandPhantom (point lp_lZ);
void gf_TakeoffPhantom ();
void gf_AttachObjectiveTagToUnit (int lp_modelType, int lp_modelSize, unit lp_unit, text lp_textTag, int lp_index);
void gf_RemoveObjectiveTagFromUnit (unit lp_unit, int lp_index);
void gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location, int lp_index);
void gf_RemoveObjectiveTagFromPoint (point lp_point, int lp_index);
void gf_SpawnDebrisAnimation (point lp_destroyedPoint, string lp_actorType);
void gf_RandomWeatherEvent (int lp_weatherModifier);
void gf_WeatherThunderStormEffectIntense ();
void gf_WeatherBlizzardStormEffectIntense ();
void gf_WeatherFogEventIntense ();
void gf_BlendFog (fixed lp_colorR, fixed lp_colorG, fixed lp_colorB, fixed lp_density, fixed lp_falloff, fixed lp_start, fixed lp_blendtime);
void gf_ReducedVisionEffect ();
bool gf_CyborgRifle ();
bool gf_CyborgDMR ();
bool gf_CyborgShotgun ();
bool gf_CyborgMG ();
bool gf_CyborgPlasma ();
void gf_SpawnItem (string lp_item, int lp_chance);
void gf_SpawnItemLoc (string lp_item, int lp_chance, point lp_loc);
void gf_AirDropItemLoc (string lp_item, point lp_loc, int lp_chance);
void gf_RemoveItemIfZero (unit lp_unit, string lp_chargestring, fixed lp_maxcharges);
fixed gf_negativereal (fixed lp_real);
fixed gf_chargesremaining (unit lp_item, string lp_chargestring, fixed lp_maxcharges);
bool gf_ItemNotInCooldown (unit lp_unit, string lp_itemtype, string lp_chargestring);
int gf_CountItemTypeUsed (string lp_itemtype, unit lp_unit, string lp_chargestring);
int gf_CountItemType (string lp_itemtype, unit lp_unit);
unit gf_FirstItemType (string lp_itemtype, unit lp_unit);
unit gf_FirstAmmoUsed (unit lp_unit);
unit gf_FirstAmmoCaseUsed (unit lp_unit);
unit gf_First40mmGrenadeUsed (unit lp_unit);
unit gf_SameItemTypeUsed (unit lp_host, unit lp_firstitem, string lp_chargestring);
void gf_CombineItems (unit lp_reciever, unit lp_donator, string lp_chargestring, fixed lp_maxcharges);
void gf_DonateItems (unit lp_reciever, unit lp_donator, string lp_chargestring, fixed lp_maxchargesdonator);
void gf_UpdateItemTextChargeDisplay (unit lp_item);
void gf_DropAllItemsImmediate (unit lp_dropper, fixed lp_spread);
void gf_ReloadSentry (unit lp_sentry, unit lp_magazine, fixed lp_value);
void gf_SubstractItemFromPool (string lp_item);
bool gf_ItemCountCheck (string lp_item);
void gf_WeaponCacheSpawnItem (string lp_itemUnitType, int lp_number, region lp_cacheSite);
void gf_DropShellatTarget (point lp_target, string lp_effect, int lp_player);
void gf_PlanePathing (unit lp_unit, point lp_triggerAbilityPoint);
string gf_randomLNtype ();
string gf_randomLNtypeCC ();
void gf_DropItem (unit lp_dropper, fixed lp_spread);
void gf_LaserDesignateUnit (unit lp_targetUnit);
void gf_SystemRestore (unit lp_robot);
void gf_SaveBankSimple (int lp_player);
bool gf_LoadBankSimple (int lp_player);
void gf_SavePlayerProgress (int lp_player);
void gf_LoadPlayerProgress (int lp_player);
void gf_SuperBank (int lp_pindex);
void gf_NukeBank (int lp_pindex);
int gf_GetPlayerRank (int lp_player);
void gf_RemoveMedicGroup (int lp_player);
void gf_InitializeRankVars ();
void gf_CreateBorgWeaponDialog ();
int gf_GetPointCount (int lp_player);
int gf_GetAchievementCount (int lp_player);
int gf_GetCamoCount (int lp_player);
int gf_GetMosSpecificSICount (int lp_player);
int gf_GetTotalGamesWon (int lp_player);
void gf_InitializeAchievementVars ();
void gf_SetupAchievement (int lp_array, text lp_name, text lp_description, string lp_image, text lp_points, int lp_pointCount);
void gf_UpdateAchievementPoints (int lp_player);
void gf_UpdateAchievementCount (int lp_player);
void gf_AwardAchievementBadgeUnlocked (int lp_x, int lp_player, text lp_nameLabel, text lp_description, string lp_icon, text lp_points);
void gf_UnlockAchievement (int lp_player);
void gf_SMIni (int lp_player, int lp_scrollBar);
void gf_SMCreate ();
void gf_DisplayAchievement (int lp_x, int lp_player, text lp_nameLabel, text lp_description, string lp_icon, text lp_points);
int gf_CreateDialogItemAny (int lp_dialogItemType, int lp_dialog, string lp_template, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, text lp_buttonText, string lp_style, string lp_hoverImage2, string lp_hoverImage, playergroup lp_players);
int gf_CreateDialogMore (bool lp_modal, int lp_width, int lp_height, bool lp_fullscreen, int lp_offsetX, int lp_offsetY, int lp_anchor, bool lp_dialogShowHide, playergroup lp_players, string lp_hoverImage2, bool lp_bGShowHide);
void gf_CreateAccessoryDialog ();
void gf_UpdateAccessoryDialog (int lp_player);
int gf_NumberofPlayers ();
void gf_VoteKickFunction (int lp_playerNumber);
void gf_CreateVoteKickButton (int lp_anchor, int lp_offsetX, int lp_offsetY, int lp_sidebarWidth);
void gf_KickDelay (playergroup lp_player, int lp_time);
void gf_CreateUnlockableDialog ();
void gf_UpdateUnlockableDialog (int lp_player);
void gf_RefreshButtons (int lp_player, int lp_unlockType, int lp_unlockSelected);
void gf_OctoCamo ();
void gf_InitializeSIVars ();
void gf_CreateSIDialog ();
void gf_SetupStandardSpecialSIBoard (int lp_dialog, int lp_sI, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, int lp_relativeOffsetX, int lp_relativeOffsetY);
void gf_UpdateSIDialogforPlayer (int lp_player);
void gf_CreateMosSI (int lp_dialog, int lp_sI, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, int lp_relativeOffsetX, int lp_relativeOffsetY, int lp_player);
void gf_SetupMosSI (int lp_sI, int lp_player);
void gf_RefreshSIButtons (int lp_player);
void gf_RemoveSIs (unit lp_player);
void gf_SetupSI (int lp_array, int lp_enXP, int lp_wOXP, int lp_cOXP, text lp_name, string lp_abbreviation, text lp_description);
void gf_SetupBetaSI (int lp_array, int lp_enXP, int lp_wOXP, int lp_cOXP, text lp_name, string lp_abbreviation, text lp_description);
void gf_CreateBetaMosSI (int lp_dialog, int lp_sI, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, int lp_relativeOffsetX, int lp_relativeOffsetY, int lp_player);
void gf_SetupBetaMosSI (int lp_sI, int lp_player);
void gf_CreateBattleBuddyDialog ();
string gf_BattleBuddyReinforcementType (int lp_player);
void gf_PlayerTags (int lp_player);
void gf_DisplayUIButtons (bool lp_option);
void gf_FloatingTextforPlayer (unit lp_unit, text lp_text, int lp_player);
void gf_SetHUDBars (int lp_hUDBarPlayer);
void gf_CreateInfoDialog ();
void gf_InfoModeText (int lp_player, int lp_placement, int lp_modeVoted);
void gf_InfoRankText (int lp_player, int lp_placement, text lp_rank, text lp_modifiersVoted);
void gf_ResetInfoText ();
void gf_CreateDifficultyButtonLeft (int lp_dialog, int lp_difficulty, string lp_image, int lp_buttonPosition);
void gf_CreateDifficultyButtonRight (int lp_dialog, int lp_difficulty, string lp_image, int lp_buttonPosition);
int gf_GetNewFTLeader (int lp_fireteam);
void gf_CreateFTImage (int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, int lp_relativeOffsetX, int lp_relativeOffsetY);
void gf_AddRemovePlayerFromFireteam (int lp_placement, int lp_player, int lp_fireteam, int lp_status);
void gf_UpdateFireteamVision ();
void gf_InitializeAmmoSprintBar ();
void gf_SprintLoop ();
void gf_SprintCheck (unit lp_unit);
string gf_GetArmorType (int lp_listItem);
string gf_GetWeaponType (int lp_listItem);
string gf_GetItemType (int lp_listItem);
void gf_CreateItemScannerDialog ();
string gf_ConvertGamelinkUnitToString (string lp_item);
fixed gf_GetItemCharge (unit lp_item);
bool gf_ItemList (unit lp_item);
void gf_InitializeItemVars ();
void gf_SetupItems (int lp_index, string lp_gameLink, string lp_itemimagepath);
void gf_ItemInventoryCount (int lp_item, int lp_enterLeave, int lp_owner);
void gf_CreateInventoryDialog ();
void gf_UpdateInventoryDialog (int lp_player, int lp_targetPlayer, int lp_unitType);
void gf_CreateVisorTextDialog ();
void gf_DisplayVisorTextDialog (text lp_text, int lp_player);
void gf_FadeVisorTextDialog (int lp_player);
void gf_CreateCheckBox (int lp_mod, int lp_offsetX, int lp_offsetY);
void gf_CreateModLabel (int lp_mod, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY);
void gf_CreateDividerLine (int lp_width, int lp_height, int lp_offsetX, int lp_offsetY);
void gf_CreateImageFrame (int lp_mod, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, int lp_relativeOffsetX, int lp_relativeOffsetY);
void gf_CreateRankFrame (int lp_image, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, int lp_relativeOffsetX, int lp_relativeOffsetY);
void gf_UICreateC2ABBehaviorsC2BB ();
void gf_UIBehaviorProcess (unit lp_unit, int lp_index);
void gf_UIBehaviorRemove (string lp_behavior, int lp_player);
int gf_UIBehaviorsFindCurrentIndex (int lp_item, int lp_player);
int gf_UIBehaviorsFindLastIndex (int lp_player);
int gf_UIBehaviorsFindCurrentIndexByBehavior (string lp_behavior, int lp_player);
void gf_DisplayTipPanel (int lp_player);
void gf_DisplayOverheatBar (bool lp_showHide, int lp_player);
int gf_GetScoreboardRanks (int lp_player, int lp_rank);
string gf_GetHDRankImage (int lp_player, int lp_rank);
int gf_ReturnPlayerIndexMaximumScoreType (int lp_sortType);
int gf_ReturnPlayerIndexMinimumScoreType (int lp_sortType);
int gf_ReturnMaximumScoreValueType (int lp_sortType);
int gf_ReturnMinimumScoreValueType (int lp_sortType);
void gf_DisplayScoreScreen ();
fixed gf_ProgressBarPercent ();
bool gf_ProgressBarLoop ();
void gf_ShowHideProgressBar (bool lp_showHide);
void gf_SetProgressBarMax (fixed lp_max);
void gf_SetProgressBarIncrement (fixed lp_increment);
void gf_SetProgressBarTitle (text lp_title);
void gf_StartProgressBarLoop (bool lp_bool);
void gf_DistributeXP (int lp_xp, int lp_Player);
fixed gf_MissionTrackerPercent ();
void gf_MoveObjectivePanel (int lp_xOffset, int lp_yOffset, int lp_anchor);
void gf_DisplayObjectiveMissionCounter (int lp_type);
void gf_UpdateMissionCompletionTracker (bool lp_bool);
void gf_SucceedMission (int lp_xp, text lp_mission, int lp_iLdelta, bool lp_bonusXp);
void gf_FailMission (int lp_xplost, text lp_mission, int lp_iLdelta);
void gf_AwardPlayerXP (int lp_xp, text lp_mission, int lp_player);
void gf_LosePlayerXP (int lp_xplost, text lp_mission, int lp_iLdelta);
int gf_UnitHighestAilment (unit lp_unit);
void gf_InitializeAilmentVars ();
void gf_SetupAilments (int lp_array, string lp_ailmentbehavior, int lp_ailmentchance, string lp_ailmentimagepath);
void gf_RemoveAilments (unit lp_player);
void gf_InitializeMiniVars ();
string gf_randomminitype ();
void gf_RandomMiniFlagDecal (unit lp_unit);
void gf_ResetDeadPlayerMini (int lp_player);
void gf_Reinforcements ();
void gf_ReinforcementsGlobal ();
void gf_FlashCCButton (int lp_player, string lp_button_Ability, fixed lp_time);
int gf_AmmoChargeCheck (unit lp_unit, string lp_chargestring);
void gf_UpdateAmmoWeight (int lp_ammo, int lp_propertyChange, int lp_player);
void gf_ReloadWeapon (int lp_player, int lp_controller);
bool gf_UnitCanJam (unit lp_unit);
void gf_AH32ViperDeath (unit lp_aH32Viper);
void gf_StartSpawnLoop (int lp_loop, int lp_loopType);
void gf_StopSpawnLoop (int lp_loop, int lp_loopType);
void gf_SpawnUndead (int lp_count, string lp_type, int lp_chance);
void gf_SpawnThanatos ();
void gf_SpawnUndeadIgnoreSupply (int lp_count, string lp_type, int lp_chance);
void gf_SpawnUndeadImmediate (int lp_count, string lp_type, int lp_chance);
void gf_SpawnUndeadMixed (int lp_chance, string lp_type1, string lp_type2, string lp_type3, int lp_count1, int lp_count2, int lp_count3);
void gf_SpawnUndeadMutated (int lp_count, string lp_type, int lp_add, string lp_mutation, int lp_chance);
void gf_SpawnUndeadInRegion (string lp_type, int lp_count, region lp_region, int lp_supplycap);
void gf_SpawnUndeadInRegionUseForNestedLoops (string lp_type, int lp_count, region lp_region, int lp_supplycap);
void gf_CommanderBonusPoints ();
void gf_InvasionCommanderNovice (int lp_invasionPoints);
void gf_InvasionCommanderAdvanced (int lp_invasionPoints);
void gf_InvasionCommanderMaster (int lp_invasionPoints);
int gf_ParasiteRandomizerFunction ();
void gf_ChokeABitch (unit lp_sourceUnit, unit lp_targetUnit);
void gf_MutateUndead ();
bool gf_DevHandles (string lp_handle);
bool gf_ModHandles (string lp_handle);
bool gf_BetaHandles (string lp_handle);
bool gf_EventsTeamHandles (string lp_handle);
bool gf_BasicHandles (string lp_handle);
bool gf_VIPDonatorHandles (string lp_handle);
bool gf_TournamentWinners (string lp_handle);
void gf_RepickSis (int lp_player);
void gf_ResetAllAbilityCooldownsForUnit (unit lp_unit);
void gf_PlayableMapAreaTest (int lp_map);
bool gf_GameIsTestOrSandbox ();
int gf_GetColor (string lp_string, int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_InitializeModeDialog;
trigger gt_ModeSelect;
trigger gt_ModeTimerEnd;
trigger gt_InitializeRankModifiersDialog;
trigger gt_RankSelected;
trigger gt_ModifierChecked;
trigger gt_RankModifierSubmit;
trigger gt_RankTimerEnd;
trigger gt_StartGameModesTrainingSurvPMCSurvBossMode;
trigger gt_GameStartCheckforAllMOS;
trigger gt_HeroSelection;
trigger gt_AutoselectHero;
trigger gt_SelectHeroSelector;
trigger gt_RandomHeroSelect;
trigger gt_SetupStory;
trigger gt_BeginStory;
trigger gt_ConductKLE;
trigger gt_YetiSpawnLoop;
trigger gt_ApproachTower;
trigger gt_PickUpSentryGuns;
trigger gt_SentryGunPlacementArea;
trigger gt_PlaceSentryGuns;
trigger gt_SentryGunTimeEnd;
trigger gt_InspectCivilians;
trigger gt_ContactInfectedCivilian;
trigger gt_InfectedCivilianDies;
trigger gt_InfectedCivilianEntersFacility;
trigger gt_InfectedCivilianTimeEnd;
trigger gt_DefendBalaadBunkerCount;
trigger gt_DefendBalaadTimeEnd;
trigger gt_UndeadSpawningPrologue2;
trigger gt_ContactCivilian;
trigger gt_CivilianEntersThalim;
trigger gt_CivilianDies;
trigger gt_EscortCiviliansTimeEnd;
trigger gt_SoldierLocated;
trigger gt_MeetLabAssistant;
trigger gt_LabAssistantSiteLoop;
trigger gt_LabAssistantDies;
trigger gt_EscortReinforcmentsLoop;
trigger gt_ReinforcementsLeave;
trigger gt_ReinforcementVehicleDies;
trigger gt_EscortReinforcementsEnd;
trigger gt_HeliUndeadSpawns;
trigger gt_HelicopterKilled;
trigger gt_PickUpFuelContainers;
trigger gt_DeliverFuel;
trigger gt_HelicopterEnd;
trigger gt_TitanHealthBar;
trigger gt_ThanatosHealthBar;
trigger gt_ThanatosMove;
trigger gt_ApproachGenerator;
trigger gt_GeneratorPowered;
trigger gt_GeneratorTimeEnd;
trigger gt_AcquireBDS;
trigger gt_ApproachBDS;
trigger gt_VIPKilled;
trigger gt_VIPSite;
trigger gt_VIPMovementLoop;
trigger gt_VIPExtracted;
trigger gt_VIPTimeEnd;
trigger gt_ReconnaissanceDroneFound;
trigger gt_RefugeeDies;
trigger gt_RefugeeConvoyLoop;
trigger gt_RefugeeConvoyLeave;
trigger gt_RefugeeConvoyDies;
trigger gt_RefugeeConvoyEnd;
trigger gt_PlayerLeaveAO;
trigger gt_DSDialogButton;
trigger gt_DSVoteEnd;
trigger gt_SearchHome;
trigger gt_PhantomArrivesDS;
trigger gt_EvacPlayerToPhantomDS;
trigger gt_EvacPlayerToPhantomTimeEndDS;
trigger gt_DestroySatchelSpawnPing;
trigger gt_SeismicSpawnLoop;
trigger gt_Satchel;
trigger gt_InfernusIsAttacked;
trigger gt_FungusCoreSpawns;
trigger gt_EnterLZ;
trigger gt_T1TimerEnd;
trigger gt_PhantomArrives;
trigger gt_EvacPlayerToPhantom;
trigger gt_EvacPlayerToPhantomTimeEnd;
trigger gt_Epilogue;
trigger gt_RemoveLLDR;
trigger gt_UndeadVisualContact;
trigger gt_Satchel1PickUp;
trigger gt_Satchel2PickUp;
trigger gt_Satchel3PickUp;
trigger gt_Tunnel1;
trigger gt_Tunnel2;
trigger gt_Tunnel3;
trigger gt_SatchelTimerWarning1;
trigger gt_SatchelTimerWarning2;
trigger gt_SatchelTimerWarning3;
trigger gt_SatchelTimeout;
trigger gt_RedoTunnel;
trigger gt_CharonSatchelSpawns;
trigger gt_CharonTimer;
trigger gt_CharonSpawnsFinal;
trigger gt_CharonMendLoop;
trigger gt_CharonBurrows;
trigger gt_CharonDies;
trigger gt_EpilogueDS;
trigger gt_SearchTargeter;
trigger gt_InfestedSmithyFlee;
trigger gt_InfestedSmithyFleeDamage;
trigger gt_SmithyTimerExpire;
trigger gt_SmithyFleeTimerExpire;
trigger gt_SmithyZombieSpawns;
trigger gt_OffmapArtillery;
trigger gt_ActivateSAM;
trigger gt_ApproachComputer;
trigger gt_SmithyDies;
trigger gt_UACGameEnd;
trigger gt_SurvivalMode;
trigger gt_SurvivalPeriodicXP;
trigger gt_SurvivalPeriodicXPEnhanced;
trigger gt_Survival5Min;
trigger gt_Survival10Min;
trigger gt_Survival15Min;
trigger gt_Survival20Min;
trigger gt_Survival25Min;
trigger gt_Survival30Min;
trigger gt_Survival35Min;
trigger gt_Survival40Min;
trigger gt_AirDrop40Min;
trigger gt_AirDropPing2;
trigger gt_Survival45Min;
trigger gt_SurvivalHellSpawning;
trigger gt_SurvivalModeTimeout;
trigger gt_SurvivalEvacPlayerEnter;
trigger gt_SurvivalEnd;
trigger gt_SurvivalIncreasedT2Spawning;
trigger gt__1020RandomTimer;
trigger gt_Cockblock;
trigger gt_PMCSurvivalMode;
trigger gt_PMCPeriodicXP;
trigger gt_PMCPeriodicXPEnhanced;
trigger gt_CacheSystem;
trigger gt_PMCSurvival5Min;
trigger gt_PMCSurvival10Min;
trigger gt_PMCSurvival15Min;
trigger gt_PMCSurvival20Min;
trigger gt_PMCSurvival25Min;
trigger gt_PMCSurvival30Min;
trigger gt_PMCSurvival35Min;
trigger gt_PMCSurvival40Min;
trigger gt_PMCSurvival45Min;
trigger gt_PMCSurvivalModeTimeout;
trigger gt_PMCSurvivalEvacPlayerEnter;
trigger gt_SmithyDeath;
trigger gt_PMCSurvivalEnd;
trigger gt_PMCSurvivalOpenRAFacilityGates;
trigger gt_PMCSurvivalDownloadResearch;
trigger gt_JuggernaughtDeath;
trigger gt_NewBossModeLoadSequences;
trigger gt_NewBossModeInitialize;
trigger gt_NewBossMode5Min;
trigger gt_NewBossMode10Min;
trigger gt_NewBossMode15Min;
trigger gt_NewBossMode20Min;
trigger gt_NewBossMode25Min;
trigger gt_NewBossMode30Min;
trigger gt_NewBossMode35Min;
trigger gt_NewBossMode40Min;
trigger gt_NewBossMode45Min;
trigger gt_NewBossMode50Min;
trigger gt_NewBossModeKillCheck;
trigger gt_NewBossModeEnd;
trigger gt_IonCannonUmbra;
trigger gt_CallForFireAspectus;
trigger gt_PartyHat;
trigger gt_FragOutWarningPMC;
trigger gt_SquadLoop;
trigger gt_SquadContact;
trigger gt_PMCAlertExpire;
trigger gt_PMCPeriodicSpawn;
trigger gt_PMCIdle;
trigger gt_RemovePMCItem;
trigger gt_PMCMode;
trigger gt_PCommissioner;
trigger gt_PApproachCommissioner;
trigger gt_PCommissionerTimeout;
trigger gt_PMCFirstContact;
trigger gt_PPoliceCheckpoint;
trigger gt_PEnterPoliceTCP;
trigger gt_PPoliceTCPEnd;
trigger gt_PRAPhantomDown;
trigger gt_PEnterPhantomLZ;
trigger gt_PKillCrew;
trigger gt_PExtractCrew;
trigger gt_PhantomDownEnd;
trigger gt_RAJuggernaught;
trigger gt_PChapter1GhostOfTheJungle;
trigger gt_PConvoyRaid;
trigger gt_PConvoyPatrols;
trigger gt_PConvoyRaidLoop;
trigger gt_PConvoyRaidLeave;
trigger gt_PConvoyRaidDies;
trigger gt_PConvoyRaidEnd;
trigger gt_PIgnisVesania;
trigger gt_PGuardPosts;
trigger gt_PDestroyGuardPost;
trigger gt_PGuardPostsTimeout;
trigger gt_PUmbra;
trigger gt_PChapter2TameTheBeast;
trigger gt_PTheBurrowed;
trigger gt_UseSeismicResonator;
trigger gt_PGhostConvoy;
trigger gt_PGhostRAPatrols;
trigger gt_PGhostConvoyLoop;
trigger gt_PGhostConvoyLeave;
trigger gt_PGhostConvoyContact;
trigger gt_PGhostConvoyDies;
trigger gt_PGhostConvoyEnd;
trigger gt_PCombatWalker;
trigger gt_PCombatEngineerDies;
trigger gt_ObjectiveLoop;
trigger gt_PickUpCasualty;
trigger gt_EnterMEDEVACSite;
trigger gt_MedevacTimeEnd;
trigger gt_PTametheBeast;
trigger gt_SmithyBarrageAI;
trigger gt_PChapter3TimeStops;
trigger gt_PBioSamples;
trigger gt_PCollectSample;
trigger gt_PTurnInSample;
trigger gt_PSampleTimeEnd;
trigger gt_PAspectus;
trigger gt_WCallForFireTargetPlayer;
trigger gt_PAntiAir;
trigger gt_CreateSamSite;
trigger gt_UseSamSiteItem;
trigger gt_SamSitePing;
trigger gt_PTimeStops;
trigger gt_PSatchelPing;
trigger gt_PTSPlaceSatchel;
trigger gt_PTSAbortCodes;
trigger gt_PTSTimeStops;
trigger gt_PTSTimeStopRevert;
trigger gt_PTSTimeStopEnd;
trigger gt_PDestroytheRA;
trigger gt_SandBoxVote;
trigger gt_SandBoxVoteTimer;
trigger gt_SandBoxCommands;
trigger gt_ReviveSandBoxMode;
trigger gt_ShowHideSpawnMenu;
trigger gt_SandBoxListBox;
trigger gt_SandBoxSpawnUnitItem;
trigger gt_SmithyBarrageAI2;
trigger gt_ThalimHoldout;
trigger gt_HoldoutCivDies;
trigger gt_HoldoutCivExtracts;
trigger gt_ThalimHoldout5Min;
trigger gt_ThalimHoldout10Min;
trigger gt_ThalimHoldout15Min;
trigger gt_ThalimHoldout20Min;
trigger gt_ThalimHoldout25Min;
trigger gt_ThalimHoldoutTimeout;
trigger gt_ThalimHoldoutEvacPlayerEnter;
trigger gt_ThalimHoldoutEnd;
trigger gt_FailGameOver;
trigger gt_ClassicSurvival;
trigger gt_ClassicSurvival6Min;
trigger gt_ClassicSurvival12Min;
trigger gt_ClassicSurvival18Min;
trigger gt_ClassicSurvival24Min;
trigger gt_ClassicSurvival27Min;
trigger gt_ClassicSurvivalTimeout;
trigger gt_ClassicSurvivalEvacPlayerEnter;
trigger gt_ClassicSurvivalEnd;
trigger gt_PolicePatrolLoop;
trigger gt_PoliceDecal;
trigger gt_Initialization;
trigger gt_ISRTowerLoop;
trigger gt_MissionItemPickedUp;
trigger gt_MissionItemDropped;
trigger gt_PingHandler;
trigger gt_SwampSlowEnter;
trigger gt_SwampSlowExit;
trigger gt_RandomFog;
trigger gt_WeatherThunderStormEffect;
trigger gt_SuitMalfunctionChance;
trigger gt_RandomFogIntense;
trigger gt_SuitMalfunctionChanceIntense;
trigger gt_FrostBiteChanceIntense;
trigger gt_PowerUserEcell;
trigger gt_ItemCombining;
trigger gt_APDUFilter;
trigger gt_UpdateItemCharges;
trigger gt_ReloadSentryGun;
trigger gt_SentryGunItemDropFilter;
trigger gt_SentryGunEnergyCell;
trigger gt_ShockPaddlesRemovePing;
trigger gt_WeaponsItems1;
trigger gt_WeaponsItems2;
trigger gt_WeaponsItemsSurvival;
trigger gt_InitWeaponCaches;
trigger gt_FindWeaponsCache;
trigger gt_AssaultmanSkills;
trigger gt_SoldierSkillsUpgrade;
trigger gt_BeltLinking;
trigger gt_BeltLinkingReload;
trigger gt_ARSkills;
trigger gt_SpecialistSkills;
trigger gt_StrengthTraining;
trigger gt_ImprovedHeartbeatSensorSS4;
trigger gt_LearnReconSkills;
trigger gt_Heartbeat;
trigger gt_M2SentryDeathEffect;
trigger gt_ReviveBonus;
trigger gt_HealBonus;
trigger gt_GiveBonus;
trigger gt_SITREPDisplay;
trigger gt_ExplosivesExpert;
trigger gt_ImprovedAutomaticMode;
trigger gt_ChronoShift;
trigger gt_ChronoShiftEscort;
trigger gt_WeaponSwapShot;
trigger gt_WeaponSwapRifle;
trigger gt_CyborgSkills;
trigger gt_StonewallTexture;
trigger gt_CrowdControl;
trigger gt_Commanda;
trigger gt_Commandc;
trigger gt_Commands;
trigger gt_Commandr;
trigger gt_Commandd;
trigger gt_Commandi;
trigger gt_CAS;
trigger gt_LLDR;
trigger gt_AttackWeaponsTeam;
trigger gt_CallForFire;
trigger gt_CFFAspectus;
trigger gt_ImmediateEffects;
trigger gt_ImmediateFlareShareVision;
trigger gt_OSR;
trigger gt_StrafeRun;
trigger gt_FuelDischargeFireinyohole;
trigger gt_FuelDischarge;
trigger gt_LearnGhostSkillsISR;
trigger gt_LearnGhostSkillsandIonCannon;
trigger gt_CrysisSuit;
trigger gt_IonCannonSelection;
trigger gt_IonCannonWarning;
trigger gt_Overheat;
trigger gt_OverheatCoolDown;
trigger gt_LearnPreciseAim;
trigger gt_LearnBeltLinkingHG;
trigger gt_LearnWPHG;
trigger gt_LearnSSHG;
trigger gt_JavelinSkills;
trigger gt_RocketWarning;
trigger gt_LaserPrismD20;
trigger gt_ImprovedLaserPrismD20;
trigger gt_MaxLaserPrismD20;
trigger gt_BlueCrystalSS4;
trigger gt_ProximitySensor;
trigger gt_MechCalldown;
trigger gt_MechAdjustments;
trigger gt_LearnEM25r;
trigger gt_LearnW34Python;
trigger gt_MercenarySkills;
trigger gt_WeaponSwitch;
trigger gt_ItemScanner;
trigger gt_Tier1Scanner;
trigger gt_OrbitalBombardment;
trigger gt_EnergyRaysDelay;
trigger gt_AbilityUseNotification;
trigger gt_LearnOrbitalStrike;
trigger gt_LearnOrbitalSurveillience;
trigger gt_LearnOrbitalSupport;
trigger gt_ImprovedConcentrationSS4;
trigger gt_PlatoonLeaderSkillsLevelUp;
trigger gt_InitLNS;
trigger gt_PeriodicLNSpawn;
trigger gt_AOCommander;
trigger gt_AdvancedLeadershipLNSpawn;
trigger gt_PingLNs;
trigger gt_LNDeath;
trigger gt_Leadership;
trigger gt_Dismiss;
trigger gt_LNReport;
trigger gt_LNSITREPDisplay;
trigger gt_FragLevelUp;
trigger gt_RiflemanSkillLevelUp;
trigger gt_LearnChargeRefund;
trigger gt_Disarm;
trigger gt_SpawnedUnitVision;
trigger gt_JumpFail;
trigger gt_FragOutWarning;
trigger gt_FragOutWarningItem;
trigger gt_CameraShakeSmall;
trigger gt_CameraShakeLarge;
trigger gt_SelfApplyFirstAidKit;
trigger gt_LaserDesignatorReveal;
trigger gt_LaserDesignatorRevealPMC;
trigger gt_StrafeDesignator;
trigger gt_TerminalLanceStrafe;
trigger gt_UpgradeSkillsLevelUp;
trigger gt_Omniscience;
trigger gt_JumpInjury;
trigger gt_ApplySentryDecal;
trigger gt_CycloneMissileWarning;
trigger gt_SMGSniperToggle;
trigger gt_WeaponSwitchVindicare;
trigger gt_SpyPlane;
trigger gt_SnipeCritical;
trigger gt_SnipeLevelup;
trigger gt_PenetratorRoundLevelup;
trigger gt_AssassinSkills;
trigger gt_SpecterSkillsLevelup;
trigger gt_WeaponsTrainingLevelup;
trigger gt_MunitionsUpgradesLevelup;
trigger gt_LearnMarksmanSkills;
trigger gt_PinpointRapidFireSS4;
trigger gt_Viper30mmChainGun;
trigger gt_LearnAirReconnaissance;
trigger gt_AkmasBulldozer;
trigger gt_JashansZulus;
trigger gt_FragOutWarningAkma;
trigger gt_LoadPlayerBank;
trigger gt_SavePlayerBank;
trigger gt_EditorBank;
trigger gt_PlayerLeavesGame;
trigger gt_Cheats;
trigger gt_GamesPlayed;
trigger gt_PlayerKills;
trigger gt_PlayerHeal;
trigger gt_PlayerHit;
trigger gt_PlayerQuits;
trigger gt_BorgWeaponSelect;
trigger gt_Init;
trigger gt_SMResponses;
trigger gt_AccessorySelected;
trigger gt_InitVoteKick;
trigger gt_KickPlayerPressed;
trigger gt_KickVoteYesNo;
trigger gt_KickVoteTimerLabel;
trigger gt_PlayerTKKillCount;
trigger gt_KickVoteTimerExpires;
trigger gt_CamoSelected;
trigger gt_DecalSelected;
trigger gt_OctoCamo;
trigger gt_SYL;
trigger gt_ZES;
trigger gt_AUC;
trigger gt_NormalSpecialSIs;
trigger gt_MOSSpecificSIs;
trigger gt_BattleBuddySelection;
trigger gt_BattleBuddyDies;
trigger gt_beer;
trigger gt_giveCommand;
trigger gt_FunctionalButtons;
trigger gt_CommandPanel;
trigger gt_CustomHeroNameTag;
trigger gt_EscButton;
trigger gt_Command;
trigger gt_InitHUDDialog;
trigger gt_HUDUpdate;
trigger gt_ShowHUDDialogButton;
trigger gt_InitStatusDialog;
trigger gt_PingPlayerLocation;
trigger gt_FireteamDialogInitialize;
trigger gt_FireteamLeaderORP;
trigger gt_AmmoBarRounds;
trigger gt_AmmoBarMagazines;
trigger gt_FlamethrowerAmmoBar;
trigger gt_Sprint;
trigger gt_RemoveSprintWhenProne;
trigger gt_InventoryInOut;
trigger gt_SelectPlayer;
trigger gt_DeselectPlayer;
trigger gt_VisorTextTimerExpire;
trigger gt_AcquireBehavior;
trigger gt_RemoveBehavior;
trigger gt_SelectMos;
trigger gt_DeselectMos;
trigger gt_SelectHG;
trigger gt_DeselectHG;
trigger gt_EndGameButton;
trigger gt_RankMenu;
trigger gt_BluntAilments;
trigger gt_SlashAilments;
trigger gt_PierceAilments;
trigger gt_PoisonAilments;
trigger gt_TBICameraShake;
trigger gt_CursedHit;
trigger gt_ScorpioHit;
trigger gt_CharonHit;
trigger gt_CureAilments;
trigger gt_AilmentSpawnZombie;
trigger gt_AilmentSpawnZombie2;
trigger gt_HeroGainLevel;
trigger gt_SubmachineGunLNMini;
trigger gt_DropMagazine;
trigger gt_DropMagazineShortage;
trigger gt_EffectMagazine;
trigger gt_PickUpPlayerDroppedMag;
trigger gt_HeroReload;
trigger gt_ReloadClearJam;
trigger gt_ReloadMini;
trigger gt_AutomaticReloadMini;
trigger gt_AutomaticReloadMiniFromEffect;
trigger gt_Jam;
trigger gt_Unjam;
trigger gt_HeroDeath;
trigger gt_Revive;
trigger gt_GameOver;
trigger gt_UndeadSpawningPrologue;
trigger gt_UndeadSpawning1;
trigger gt_UndeadSpawning2;
trigger gt_UndeadSpawning3;
trigger gt_UndeadSpawningOutbreak1;
trigger gt_UndeadSpawningOutbreak2;
trigger gt_UndeadSpawningOutbreak3;
trigger gt_UndeadSpawningOnslaught1;
trigger gt_UndeadSpawningOnslaught2;
trigger gt_UndeadSpawningOnslaught3;
trigger gt_GenesisSpawning1;
trigger gt_GenesisSpawning2;
trigger gt_GenesisSpawning3;
trigger gt_UndeadSpawningBurrowed;
trigger gt_UndeadSpawningTier1;
trigger gt_UndeadSpawningZulu;
trigger gt_UndeadOrders;
trigger gt_UndeadIdles;
trigger gt_UndeadMassiveInfestationLevel;
trigger gt_ParasiteSpawn;
trigger gt_ParasiteMorph;
trigger gt_ThanatosLoop;
trigger gt_TyrantPull;
trigger gt_ThanatosPull;
trigger gt_DevTriggerCommandExecuting;
trigger gt_BetaTestingUnlocks;
trigger gt_DevCommandDisplay;
trigger gt_DevCommands;
trigger gt_Exterminatus;
trigger gt_ModCommands;
trigger gt_BetaCommands;
trigger gt_ColorCommands;
trigger gt_TournamentRewardUnlocks;
trigger gt_VIPDonatorTrigger;
trigger gt_DevSIs;
trigger gt_DevModTrigger;
trigger gt_ForceMakeEditorGeneratedConnectiontoLibWH;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai71EEC1FA") { ai71EEC1FA_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { ai71EEC1FA_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { return ai71EEC1FA_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { return ai71EEC1FA_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { ai71EEC1FA_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { ai71EEC1FA_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai71EEC1FA") { ai71EEC1FA_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { ai71EEC1FA_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { ai71EEC1FA_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { return ai71EEC1FA_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { return ai71EEC1FA_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { return ai71EEC1FA_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("ai71EEC1FA", 15);
    AICampaignStart(13);
    AICampaignStart(14);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ASCII Util
//--------------------------------------------------------------------------------------------------
// CONSTANTS
string[16] ASCII_UTIL_HEXMAP;
const string ASCII_UTIL_ASCIIMAP = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF";
const string ASCII_UTIL_BASE64MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
// PUBLIC FUNCTIONS
string ASCIIUtilIntToHex(int in);
int ASCIIUtilStringToInt(string s, int off);
string ASCIIUtilIntToBase64(int in);
int ASCIIUtilBase64ToInt(string s, int off);
// PRIVATE FUNCTIONS
void ASCIIUtilInit();
// IMPLEMENTATION
string ASCIIUtilIntToHex(int in){
    return ASCII_UTIL_HEXMAP[(in >> 28) & 0xF] + ASCII_UTIL_HEXMAP[(in >> 24) & 0xF] + 
        ASCII_UTIL_HEXMAP[(in >> 20) & 0xF] + ASCII_UTIL_HEXMAP[(in >> 16) & 0xF] + 
        ASCII_UTIL_HEXMAP[(in >> 12) & 0xF] + ASCII_UTIL_HEXMAP[(in >> 8) & 0xF] + 
        ASCII_UTIL_HEXMAP[(in >> 4) & 0xF] + ASCII_UTIL_HEXMAP[in & 0xF];
}
int ASCIIUtilStringToInt(string s, int off){
    return StringFind(ASCII_UTIL_ASCIIMAP, StringSub(s, off, off), true);
}
string ASCIIUtilIntToBase64(int in){
    in+= 1;
    return StringSub(ASCII_UTIL_BASE64MAP, in, in);
}
int ASCIIUtilBase64ToInt(string s, int off){
    return StringFind(ASCII_UTIL_BASE64MAP, StringSub(s, off, off), true) - 1;
}
void ASCIIUtilInit(){
    int i;
    int j;
   
    i = 0;
    j = 1;
    while( i < 16 ){
        ASCII_UTIL_HEXMAP[i] = StringSub("0123456789ABCDEF", j, j);
        i = j;
        j+= 1;
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bit Field
//--------------------------------------------------------------------------------------------------
// CONSTANTS
const int BIT_FIELD_SIZE = 32;
const int BIT_FIELD_INTMIN = 1 << 31;
typedef int[BIT_FIELD_SIZE] bit_field_array_t;
int bit_field_transformer_t(int in);
struct bit_field_t{
    
    bit_field_array_t field;
    int pos;
 
    int len;
    
    bool def;
};
// PUBLIC FUNCTIONS
void BitFieldInitialize(structref<bit_field_t> obj, int len, bool logic);
void BitFieldResize(structref<bit_field_t> obj, int len);
void BitFieldSetSize(structref<bit_field_t> obj, int len);
int BitFieldGetSize(structref<bit_field_t> obj);
void BitFieldSeek(structref<bit_field_t> obj, int pos);
int BitFieldGetPosition(structref<bit_field_t> obj);
int BitFieldRemaining(structref<bit_field_t> obj);
void BitFieldWrite(structref<bit_field_t> obj, int val, int len);
void BitFieldWriteSafe(structref<bit_field_t> obj, int val, int len);
void BitFieldSet(structref<bit_field_t> obj, int val, int pos);
int BitFieldRead(structref<bit_field_t> obj, int len);
int BitFieldReadSafe(structref<bit_field_t> obj, int len);
int BitFieldGet(structref<bit_field_t> obj, int pos);
void BitFieldTransform(structref<bit_field_t> obj, funcref<bit_field_transformer_t> transformer);
// IMPLEMENTATION
void BitFieldInitialize(structref<bit_field_t> obj, int len, bool logic){
    obj.pos = 0;
    obj.len = 0;
    obj.def = logic;
    BitFieldResize(obj, len);
}
void BitFieldResize(structref<bit_field_t> obj, int len){
    int i;
    int end;
    int val;
    if( len > (BIT_FIELD_SIZE * 32) ){ len = BIT_FIELD_SIZE * 32; }
    else if( len < 0 ){ len = 0; }
  
    if( obj.len > len ){
      
        obj.len = len;
    
        i = len % 32;
        if( i == 0 ){ return; }
        
        end = len / 32;
        val = obj.field[end] & ((1 << i) - 1);
       
        if( obj.def ){
           
            val|= (BIT_FIELD_INTMIN >> (31 - i));
        }
        obj.field[end] = val;
    }
 
    else{
        if( obj.def ){ val = -1; }
        else{ val = 0; }
       
        i = (obj.len + 31) / 32;
        end = (len + 31) / 32;
        
        while( i < end ){
            obj.field[i] = val;
            i+= 1;
        }
     
        obj.len = len;
    }
}
void BitFieldSetSize(structref<bit_field_t> obj, int len){
    obj.len = len;
}
int BitFieldGetSize(structref<bit_field_t> obj){
    return obj.len;
}
void BitFieldSeek(structref<bit_field_t> obj, int pos){
  
    obj.pos = pos;
}
int BitFieldGetPosition(structref<bit_field_t> obj){
    return obj.pos;
}
int BitFieldRemaining(structref<bit_field_t> obj){
    return obj.len - obj.pos;
}
void BitFieldWrite(structref<bit_field_t> obj, int val, int len){
  
    int i;
    int reg;
    int mask;
  
    i = obj.pos % 32;
    reg = obj.pos / 32;
    obj.pos+= len;
   
    mask = ((2 << (len - 1)) - 1) << i; 
    obj.field[reg] = (obj.field[reg] & (~mask)) | ((val << i) & mask);
  
    i = 32 - i;
    if( i >= len ){ return; }
   
    reg+= 1;
  
    mask = (1 << (len - i)) - 1;
    obj.field[reg] = (obj.field[reg] & (~mask)) | ((val >> i) & mask);
}
void BitFieldWriteSafe(structref<bit_field_t> obj, int val, int len){
    
    int i;
  
    if( obj.pos <= -len || obj.pos >= obj.len ){
        obj.pos+= len;
        return;
    }
    
    if( obj.pos < 0 ){
        val>>= -obj.pos;
        len+= obj.pos;
        obj.pos = 0;
    }
   
    i = len + obj.pos - obj.len;
    if( i < 0 ){ i = 0; }
   
    BitFieldWrite(obj, val, len - i);
    obj.pos+= i;
}
void BitFieldSet(structref<bit_field_t> obj, int val, int pos){
    obj.field[pos] = val;
}
int BitFieldRead(structref<bit_field_t> obj, int len){
    
    int i;
    int reg;
    int val;
    
    i = obj.pos % 32;
    reg = obj.pos / 32;
    
    val = obj.field[reg] >> i;
    
    i = 32 - i;
    if( i < len ){ 
       
        val&= (1 << i) - 1;
        
        reg+= 1;
        val|= obj.field[reg] << i;
    }
    
    val&= ((2 << (len - 1)) - 1); 
    obj.pos+= len;
    return val;
}
int BitFieldReadSafe(structref<bit_field_t> obj, int len){
  
    int i = 0;
    int j;
    int val = 0;
  
    if( obj.pos <= -len || obj.pos >= obj.len ){
        obj.pos+= len;
        if( obj.pos ){ return (1 << len) - 1; }
        return 0;
    }
 
    if( obj.pos < 0 ){
        if( obj.def ){ val = (1 << (-obj.pos)) - 1; }
        len+= obj.pos;
        i = -obj.pos;
        obj.pos = 0;
    }
   
    j = len + obj.pos - obj.len;
    if( j <= 0 ){ j = 0; }
    else if( obj.def ){ val|= ((1 << j) - 1) << (len + i - j); }
   
    val|= BitFieldRead(obj, len - j) << i;
    obj.pos+= j;
    return val;
}
int BitFieldGet(structref<bit_field_t> obj, int pos){
    return obj.field[pos];
}
void BitFieldTransform(structref<bit_field_t> obj, funcref<bit_field_transformer_t> transformer){
    int i = 0;
    int end = obj.len / 32;
    while( i <= end ){
        obj.field[i] = transformer(obj.field[i]);
        i+= 1;
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SHA-1 Hasher
//--------------------------------------------------------------------------------------------------
// TYPES
typedef int[5] sha1_hasher_hash_t;
typedef int[16] sha1_hasher_block_t;
int sha1_hasher_data_reader_t();
struct sha1_hasher_t{
    
    sha1_hasher_hash_t h;
};
// PUBLIC FUNCTIONS
void SHA1HasherInitalize(structref<sha1_hasher_t> obj);
void SHA1HasherProcess(structref<sha1_hasher_t> obj, arrayref<sha1_hasher_block_t> block);
void SHA1HasherProcessFinal(structref<sha1_hasher_t> obj, arrayref<sha1_hasher_block_t> block, int len);
void SHA1HasherHash(structref<sha1_hasher_t> obj, arrayref<sha1_hasher_hash_t> hash);
void SHA1HasherHashData(structref<sha1_hasher_t> obj, funcref<sha1_hasher_data_reader_t> reader, int len);
// IMPLEMENTATION
void SHA1HasherInitalize(structref<sha1_hasher_t> obj){
  
    obj.h[0] = 0x67452301;
    obj.h[1] = 0x6FCDAB89 | (1 << 31);
    obj.h[2] = 0x18BADCFE | (1 << 31);
    obj.h[3] = 0x10325476;
    obj.h[4] = 0x43D2E1F0 | (1 << 31);
}
void SHA1HasherProcess(structref<sha1_hasher_t> obj, arrayref<sha1_hasher_block_t> block){
    int[80] w;
    int i;
    int temp;
    sha1_hasher_hash_t h;
 
    for( i = 0 ; i < 16 ; i+= 1 ){
        
        w[i] = (block[i] << 24) | ((block[i] << 8) & 0xFF0000) | ((block[i] >> 8) & 0xFF00) | ((block[i] >> 24) & 0xFF);
    }
    for( ; i < 80 ; i+= 1 ){
        temp = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
     
        w[i] = (temp << 1) | ((temp >> 31) & 0x01);
    }
    for( i = 0 ; i < 5 ; i+= 1 ){
        h[i] = obj.h[i];
    }
   
    for( i = 0 ; i < 20 ; i+= 1 ){
      
        temp = ((h[0] << 5) | ((h[0] >> 27) & 0x1F)) + ((h[1] & h[2]) | ((~h[1]) & h[3])) + h[4] + 0x5A827999 + w[i];
      
        h[4] = h[3];
        h[3] = h[2];
        h[2] = (h[1] << 30) | ((h[1] >> 2) & 0x3FFFFFFF);
        h[1] = h[0];
        h[0] = temp;
    }
 
    for( ; i < 40 ; i+= 1 ){
 
        temp = ((h[0] << 5) | ((h[0] >> 27) & 0x1F)) + (h[1] ^ h[2] ^ h[3]) + h[4] + 0x6ED9EBA1 + w[i];
   
        h[4] = h[3];
        h[3] = h[2];
        h[2] = (h[1] << 30) | ((h[1] >> 2) & 0x3FFFFFFF);
        h[1] = h[0];
        h[0] = temp;
    }
  
    for( ; i < 60 ; i+= 1 ){
       
        temp = ((h[0] << 5) | ((h[0] >> 27) & 0x1F)) + ((h[1] & h[2]) | (h[1] & h[3]) | (h[2] & h[3])) + h[4] + (0x0F1BBCDC | (1 << 31)) + w[i];
        h[4] = h[3];
        h[3] = h[2];
        h[2] = (h[1] << 30) | ((h[1] >> 2) & 0x3FFFFFFF);
        h[1] = h[0];
        h[0] = temp;
    }
    // Process last 20 units.
    for( ; i < 80 ; i+= 1 ){
        //:Left Rotate 5
        temp = ((h[0] << 5) | ((h[0] >> 27) & 0x1F)) + (h[1] ^ h[2] ^ h[3]) + h[4] + (0x4A62C1D6 | (1 << 31)) + w[i];
        // Hash generation logic. Maybe a separate function?
        h[4] = h[3];
        h[3] = h[2];
        //:Left Rotate 30
        h[2] = (h[1] << 30) | ((h[1] >> 2) & 0x3FFFFFFF);
        h[1] = h[0];
        h[0] = temp;
    }
    // Finally append block hashes.
    for( i = 0 ; i < 5 ; i+= 1 ){
        obj.h[i]+= h[i];
    }
}
void SHA1HasherProcessFinal(structref<sha1_hasher_t> obj, arrayref<sha1_hasher_block_t> block, int len){
    int pos;
    int sub;
    // Determine sub-block position.
    pos = (len % 64) / 4;
    sub = (len % 4) * 8;
    // Append terminator.
    block[pos] = (0x80 << sub) | (block[pos] & ((2 << (sub - 1)) - 1));
    pos+= 1;
    // Determine if another block of padding is needed.
    if( pos > 14 ){
        // Pad block with 0.
        for( ; pos < 16 ; pos+= 1 ){
            block[pos] = 0;
        }
        // Hash block.
        SHA1HasherProcess(obj, block);
        // Start at begining of new block.
        pos = 0;
    }
    // Pad remainder of block with 0.
    for( ; pos < 14 ; pos+= 1 ){
        block[pos] = 0;
    }
    // Append big endian message length (in bits). Cannot support length >268435455 bytes.
    len*= 8;
    block[14] = 0;
    block[15] = (len << 24) | ((len << 8) & 0xFF0000) | ((len >> 8) & 0xFF00) | ((len >> 24) & 0xFF);
    // Hash the last block.
    SHA1HasherProcess(obj, block);
}
void SHA1HasherHash(structref<sha1_hasher_t> obj, arrayref<sha1_hasher_hash_t> hash){
    int i;
    // Bulk copy the hash.
    for( i = 0 ; i < 5 ; i+= 1 ){
        hash[i] = obj.h[i];
    }
}
void SHA1HasherHashData(structref<sha1_hasher_t> obj, funcref<sha1_hasher_data_reader_t> reader, int len){
    sha1_hasher_block_t block;
    int pos;
    int i;
    // Initalize hasher.
    SHA1HasherInitalize(obj);
    // Whole block read loop.
    pos = 0;
    while( len >= 64 ){
        // Read block.
        for( i = 0 ; i < 16 ; i+= 1 ){
            block[i] = reader();
        }
        // Hash block.
        SHA1HasherProcess(obj, block);
        // Advance.
        pos+= 64;
        len-= 64;
    }
    // Sub-block read.
    for( i = 0 ; i < (len / 4) ; i+= 1 ){
        block[i] = reader();
    }
    pos+= i * 4;
    len-= i * 4;
    // Read sub-int.
    if( len > 0 ){
        block[i] = reader() & ((1 << (8 * len)) - 1);
        pos+= len;
    // Or clear next int.
    }else{
        block[i] = 0;
    }
    // Now work on padding.
    len = pos;
    block[i]|= (0x80 << ((pos % 4) * 8));
    pos = ((pos / 4) + 1) * 4;
    // Determine if another block of padding is needed.
    if( (pos % 64) > 56 ){
        // Pad block with 0.
        for( i = (pos % 64) / 4 ; i < 16 ; i+= 1 ){
            block[i] = 0;
        }
        // Hash block.
        SHA1HasherProcess(obj, block);
        // Advance a block.
        pos = ((pos / 64) + 1) * 64;
    }
    // Pad remainder of block with 0.
    for( i = (pos % 64) / 4 ; i < 14 ; i+= 1 ){
        block[i] = 0;
    }
    // Append big endian message length (in bits). Cannot support length >268435455 bytes.
    i = len * 8;
    block[14] = 0;
    block[15] = (i << 24) | ((i << 8) & 0xFF0000) | ((i >> 8) & 0xFF00) | ((i >> 24) & 0xFF);
    // Hash the last block.
    SHA1HasherProcess(obj, block);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ASCII Channel
//--------------------------------------------------------------------------------------------------
// TYPES
struct ascii_channel_t{
  
    string buffer;
   
    int pos;
};
// PUBLIC FUNCTIONS
void ASCIIChannelSetup(structref<ascii_channel_t> obj, string s);
int ASCIIChannelLength(structref<ascii_channel_t> obj);
int ASCIIChannelRead(structref<ascii_channel_t> obj);
//
// IMPLEMENTATION
void ASCIIChannelSetup(structref<ascii_channel_t> obj, string s){
    obj.buffer = s;
    obj.pos = 0;
}
int ASCIIChannelLength(structref<ascii_channel_t> obj){
    return StringLength(obj.buffer) - obj.pos;
}
int ASCIIChannelRead(structref<ascii_channel_t> obj){
    int end;
    int shift;
    int val;
    end = obj.pos + 4;
    if( end > StringLength(obj.buffer) ){ end = StringLength(obj.buffer); }
    
    shift = 0;
    val = 0;
    obj.pos+= 1;
    for( ; obj.pos <= end ; obj.pos+= 1 ){
        val|= ASCIIUtilStringToInt(obj.buffer, obj.pos) << shift;
        shift+= 8;
    }
    obj.pos-= 1;
    return val;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AES Encryption
//--------------------------------------------------------------------------------------------------
// CONSTANTS
const int AES_ENCRYPTION_NB = 4;
const int AES_ENCRYPTION_NK = 5;
const int AES_ENCRYPTION_NR = 11;
const int AES_ENCRYPTION_NKS = AES_ENCRYPTION_NB * (AES_ENCRYPTION_NR + 1);
typedef byte[256] aes_encryption_table_t;
aes_encryption_table_t AES_ENCRYPTION_SBOX;
aes_encryption_table_t AES_ENCRYPTION_ISBOX;
aes_encryption_table_t AES_ENCRYPTION_GM2;
aes_encryption_table_t AES_ENCRYPTION_GM9;
aes_encryption_table_t AES_ENCRYPTION_GM13;
byte[30] AES_ENCRYPTION_RCON;
// TYPES
typedef int[AES_ENCRYPTION_NK] aes_encryption_key_t;
typedef int[AES_ENCRYPTION_NB] aes_encryption_block_t;
struct aes_encryption_t{
   
    int[AES_ENCRYPTION_NKS] keysched;
   
    int keypos;
};
void AESEncryptionSetup(structref<aes_encryption_t> obj, arrayref<aes_encryption_key_t> key);
void AESEncryptionCipher(structref<aes_encryption_t> obj, arrayref<aes_encryption_block_t> block);
void AESEncryptionInvCipher(structref<aes_encryption_t> obj, arrayref<aes_encryption_block_t> block);
int AESEncryptionRotWord(int word);
int AESEncryptionSubWord(int word, arrayref<aes_encryption_table_t> box);
void AESEncryptionSubBytes(arrayref<aes_encryption_block_t> block);
void AESEncryptionShiftRows(arrayref<aes_encryption_block_t> block);
void AESEncryptionMixColumns(arrayref<aes_encryption_block_t> block);
void AESEncryptionAddRoundKey(structref<aes_encryption_t> obj, arrayref<aes_encryption_block_t> block);
void AESEncryptionKeyExpansion(structref<aes_encryption_t> obj, arrayref<aes_encryption_key_t> key);
void AESEncryptionInvShiftRows(arrayref<aes_encryption_block_t> block);
void AESEncryptionInvSubBytes(arrayref<aes_encryption_block_t> block);
void AESEncryptionInvMixColumns(arrayref<aes_encryption_block_t> block);
void AESEncryptionInit();
 
// IMPLEMENTATION
void AESEncryptionSetup(structref<aes_encryption_t> obj, arrayref<aes_encryption_key_t> key){
    AESEncryptionKeyExpansion(obj, key);
}
void AESEncryptionCipher(structref<aes_encryption_t> obj, arrayref<aes_encryption_block_t> block){
    int i;
   
    obj.keypos = 0;
  
    AESEncryptionAddRoundKey(obj, block);
   
    for( i = 1 ; i < AES_ENCRYPTION_NR ; i+= 1 ){
        AESEncryptionSubBytes(block);
        AESEncryptionShiftRows(block);
        AESEncryptionMixColumns(block);
        AESEncryptionAddRoundKey(obj, block);
    }
 
    AESEncryptionSubBytes(block);
    AESEncryptionShiftRows(block);
    AESEncryptionAddRoundKey(obj, block);
}
void AESEncryptionInvCipher(structref<aes_encryption_t> obj, arrayref<aes_encryption_block_t> block){
    int i;
  
    obj.keypos = AES_ENCRYPTION_NKS - AES_ENCRYPTION_NB;
    AESEncryptionAddRoundKey(obj, block);
   
    for( obj.keypos = (AES_ENCRYPTION_NR - 1) * AES_ENCRYPTION_NB ; obj.keypos > 0 ; obj.keypos-= AES_ENCRYPTION_NB * 2 ){
        AESEncryptionInvShiftRows(block);
        AESEncryptionInvSubBytes(block);
        AESEncryptionAddRoundKey(obj, block);
        AESEncryptionInvMixColumns(block);
    }
   
    AESEncryptionInvShiftRows(block);
    AESEncryptionInvSubBytes(block);
    AESEncryptionAddRoundKey(obj, block);
}
int AESEncryptionRotWord(int word){
    return (word << 24) | ((word >> 8) & 0xFFFFFF);
}
int AESEncryptionSubWord(int word, arrayref<aes_encryption_table_t> box){
    int a;
    int tc;
 
    a = box[word & 0xFF];
    tc = box[(word >> 8) & 0xFF];
    a|= tc << 8;
    tc = box[(word >> 16) & 0xFF];
    a|= tc << 16;
    tc = box[(word >> 24) & 0xFF];
    a|= tc << 24;
    return a;
}
void AESEncryptionSubBytes(arrayref<aes_encryption_block_t> block){
  
    block[0] = AESEncryptionSubWord(block[0], AES_ENCRYPTION_SBOX);
    block[1] = AESEncryptionSubWord(block[1], AES_ENCRYPTION_SBOX);
    block[2] = AESEncryptionSubWord(block[2], AES_ENCRYPTION_SBOX);
    block[3] = AESEncryptionSubWord(block[3], AES_ENCRYPTION_SBOX);
}
void AESEncryptionShiftRows(arrayref<aes_encryption_block_t> block){
  
    int a;
    int b;
    int c;
 
    a = (block[0] & 0xFF) | (block[1] & 0xFF00) | (block[2] & 0xFF0000) | (block[3] & ~0xFFFFFF);
    b = (block[1] & 0xFF) | (block[2] & 0xFF00) | (block[3] & 0xFF0000) | (block[0] & ~0xFFFFFF);
    c = (block[2] & 0xFF) | (block[3] & 0xFF00) | (block[0] & 0xFF0000) | (block[1] & ~0xFFFFFF);
    block[3] = (block[3] & 0xFF) | (block[0] & 0xFF00) | (block[1] & 0xFF0000) | (block[2] & ~0xFFFFFF);
    block[2] = c;
    block[1] = b;
    block[0] = a;
}
void AESEncryptionMixColumns(arrayref<aes_encryption_block_t> block){
    int a;
    int b;
  
    a = block[0];
    b = AESEncryptionSubWord(a, AES_ENCRYPTION_GM2);
    block[0] = b ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((a << 24) | ((a >> 8) & 0xFFFFFF)) ^ ((a << 16) | ((a >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    a = block[1];
    b = AESEncryptionSubWord(a, AES_ENCRYPTION_GM2);
    block[1] = b ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((a << 24) | ((a >> 8) & 0xFFFFFF)) ^ ((a << 16) | ((a >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    a = block[2];
    b = AESEncryptionSubWord(a, AES_ENCRYPTION_GM2);
    block[2] = b ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((a << 24) | ((a >> 8) & 0xFFFFFF)) ^ ((a << 16) | ((a >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    a = block[3];
    b = AESEncryptionSubWord(a, AES_ENCRYPTION_GM2);
    block[3] = b ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((a << 24) | ((a >> 8) & 0xFFFFFF)) ^ ((a << 16) | ((a >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    }
void AESEncryptionAddRoundKey(structref<aes_encryption_t> obj, arrayref<aes_encryption_block_t> block){
    block[0]^= obj.keysched[obj.keypos];
    obj.keypos+= 1;
    block[1]^= obj.keysched[obj.keypos];
    obj.keypos+= 1;
    block[2]^= obj.keysched[obj.keypos];
    obj.keypos+= 1;
    block[3]^= obj.keysched[obj.keypos];
    obj.keypos+= 1;
}
void AESEncryptionKeyExpansion(structref<aes_encryption_t> obj, arrayref<aes_encryption_key_t> key){
    int i;
    int temp;
    int conv;
 
    for( i = 0 ; i < AES_ENCRYPTION_NK ; i+= 1 ){
        obj.keysched[i] = key[i];
    }
   
    for( ; i < AES_ENCRYPTION_NKS ; i+= 1 ){
        temp = obj.keysched[i - 1];
        if( (i % AES_ENCRYPTION_NK) == 0 ){
          
            conv = AES_ENCRYPTION_RCON[i / AES_ENCRYPTION_NK];
            temp = AESEncryptionSubWord(AESEncryptionRotWord(temp), AES_ENCRYPTION_SBOX) ^ conv;
        }
        else if( (AES_ENCRYPTION_NK > 6) && ((i % AES_ENCRYPTION_NK) == 4) ){
            temp = AESEncryptionSubWord(temp, AES_ENCRYPTION_SBOX);
        }
        obj.keysched[i] = obj.keysched[i - AES_ENCRYPTION_NK] ^ temp;
    }
}
void AESEncryptionInvShiftRows(arrayref<aes_encryption_block_t> block){
   
    int a;
    int b;
    int c;
   
    a = (block[0] & 0xFF) | (block[3] & 0xFF00) | (block[2] & 0xFF0000) | (block[1] & ~0xFFFFFF);
    b = (block[1] & 0xFF) | (block[0] & 0xFF00) | (block[3] & 0xFF0000) | (block[2] & ~0xFFFFFF);
    c = (block[2] & 0xFF) | (block[1] & 0xFF00) | (block[0] & 0xFF0000) | (block[3] & ~0xFFFFFF);
   
    block[3] = (block[3] & 0xFF) | (block[2] & 0xFF00) | (block[1] & 0xFF0000) | (block[0] & ~0xFFFFFF);
    block[2] = c;
    block[1] = b;
    block[0] = a;
}
void AESEncryptionInvSubBytes(arrayref<aes_encryption_block_t> block){
    block[0] = AESEncryptionSubWord(block[0], AES_ENCRYPTION_ISBOX);
    block[1] = AESEncryptionSubWord(block[1], AES_ENCRYPTION_ISBOX);
    block[2] = AESEncryptionSubWord(block[2], AES_ENCRYPTION_ISBOX);
    block[3] = AESEncryptionSubWord(block[3], AES_ENCRYPTION_ISBOX);
}
void AESEncryptionInvMixColumns(arrayref<aes_encryption_block_t> block){
    int a;
    int b;
    int c;
    int d;
 
    d = block[0];
    a = AESEncryptionSubWord(d, AES_ENCRYPTION_GM9);
    b = a ^ AESEncryptionSubWord(d, AES_ENCRYPTION_GM2);
    c = AESEncryptionSubWord(d, AES_ENCRYPTION_GM13);
    d^= c ^ b ^ a;
    block[0] = d ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((c << 16) | ((c >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    d = block[1];
    a = AESEncryptionSubWord(d, AES_ENCRYPTION_GM9);
    b = a ^ AESEncryptionSubWord(d, AES_ENCRYPTION_GM2);
    c = AESEncryptionSubWord(d, AES_ENCRYPTION_GM13);
    d^= c ^ b ^ a;
    block[1] = d ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((c << 16) | ((c >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    d = block[2];
    a = AESEncryptionSubWord(d, AES_ENCRYPTION_GM9);
    b = a ^ AESEncryptionSubWord(d, AES_ENCRYPTION_GM2);
    c = AESEncryptionSubWord(d, AES_ENCRYPTION_GM13);
    d^= c ^ b ^ a;
    block[2] = d ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((c << 16) | ((c >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    d = block[3];
    a = AESEncryptionSubWord(d, AES_ENCRYPTION_GM9);
    b = a ^ AESEncryptionSubWord(d, AES_ENCRYPTION_GM2);
    c = AESEncryptionSubWord(d, AES_ENCRYPTION_GM13);
    d^= c ^ b ^ a;
    block[3] = d ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((c << 16) | ((c >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
}
void AESEncryptionInit(){
    int i;
    int a;
    byte b;
  
    AES_ENCRYPTION_SBOX[  0] = 0x63;
    AES_ENCRYPTION_SBOX[  1] = 0x7C;
    AES_ENCRYPTION_SBOX[  2] = 0x77;
    AES_ENCRYPTION_SBOX[  3] = 0x7B;
    AES_ENCRYPTION_SBOX[  4] = 0xF2;
    AES_ENCRYPTION_SBOX[  5] = 0x6B;
    AES_ENCRYPTION_SBOX[  6] = 0x6F;
    AES_ENCRYPTION_SBOX[  7] = 0xC5;
    AES_ENCRYPTION_SBOX[  8] = 0x30;
    AES_ENCRYPTION_SBOX[  9] = 0x01;
    AES_ENCRYPTION_SBOX[ 10] = 0x67;
    AES_ENCRYPTION_SBOX[ 11] = 0x2B;
    AES_ENCRYPTION_SBOX[ 12] = 0xFE;
    AES_ENCRYPTION_SBOX[ 13] = 0xD7;
    AES_ENCRYPTION_SBOX[ 14] = 0xAB;
    AES_ENCRYPTION_SBOX[ 15] = 0x76;
    AES_ENCRYPTION_SBOX[ 16] = 0xCA;
    AES_ENCRYPTION_SBOX[ 17] = 0x82;
    AES_ENCRYPTION_SBOX[ 18] = 0xC9;
    AES_ENCRYPTION_SBOX[ 19] = 0x7D;
    AES_ENCRYPTION_SBOX[ 20] = 0xFA;
    AES_ENCRYPTION_SBOX[ 21] = 0x59;
    AES_ENCRYPTION_SBOX[ 22] = 0x47;
    AES_ENCRYPTION_SBOX[ 23] = 0xF0;
    AES_ENCRYPTION_SBOX[ 24] = 0xAD;
    AES_ENCRYPTION_SBOX[ 25] = 0xD4;
    AES_ENCRYPTION_SBOX[ 26] = 0xA2;
    AES_ENCRYPTION_SBOX[ 27] = 0xAF;
    AES_ENCRYPTION_SBOX[ 28] = 0x9C;
    AES_ENCRYPTION_SBOX[ 29] = 0xA4;
    AES_ENCRYPTION_SBOX[ 30] = 0x72;
    AES_ENCRYPTION_SBOX[ 31] = 0xC0;
    AES_ENCRYPTION_SBOX[ 32] = 0xB7;
    AES_ENCRYPTION_SBOX[ 33] = 0xFD;
    AES_ENCRYPTION_SBOX[ 34] = 0x93;
    AES_ENCRYPTION_SBOX[ 35] = 0x26;
    AES_ENCRYPTION_SBOX[ 36] = 0x36;
    AES_ENCRYPTION_SBOX[ 37] = 0x3F;
    AES_ENCRYPTION_SBOX[ 38] = 0xF7;
    AES_ENCRYPTION_SBOX[ 39] = 0xCC;
    AES_ENCRYPTION_SBOX[ 40] = 0x34;
    AES_ENCRYPTION_SBOX[ 41] = 0xA5;
    AES_ENCRYPTION_SBOX[ 42] = 0xE5;
    AES_ENCRYPTION_SBOX[ 43] = 0xF1;
    AES_ENCRYPTION_SBOX[ 44] = 0x71;
    AES_ENCRYPTION_SBOX[ 45] = 0xD8;
    AES_ENCRYPTION_SBOX[ 46] = 0x31;
    AES_ENCRYPTION_SBOX[ 47] = 0x15;
    AES_ENCRYPTION_SBOX[ 48] = 0x04;
    AES_ENCRYPTION_SBOX[ 49] = 0xC7;
    AES_ENCRYPTION_SBOX[ 50] = 0x23;
    AES_ENCRYPTION_SBOX[ 51] = 0xC3;
    AES_ENCRYPTION_SBOX[ 52] = 0x18;
    AES_ENCRYPTION_SBOX[ 53] = 0x96;
    AES_ENCRYPTION_SBOX[ 54] = 0x05;
    AES_ENCRYPTION_SBOX[ 55] = 0x9A;
    AES_ENCRYPTION_SBOX[ 56] = 0x07;
    AES_ENCRYPTION_SBOX[ 57] = 0x12;
    AES_ENCRYPTION_SBOX[ 58] = 0x80;
    AES_ENCRYPTION_SBOX[ 59] = 0xE2;
    AES_ENCRYPTION_SBOX[ 60] = 0xEB;
    AES_ENCRYPTION_SBOX[ 61] = 0x27;
    AES_ENCRYPTION_SBOX[ 62] = 0xB2;
    AES_ENCRYPTION_SBOX[ 63] = 0x75;
    AES_ENCRYPTION_SBOX[ 64] = 0x09;
    AES_ENCRYPTION_SBOX[ 65] = 0x83;
    AES_ENCRYPTION_SBOX[ 66] = 0x2C;
    AES_ENCRYPTION_SBOX[ 67] = 0x1A;
    AES_ENCRYPTION_SBOX[ 68] = 0x1B;
    AES_ENCRYPTION_SBOX[ 69] = 0x6E;
    AES_ENCRYPTION_SBOX[ 70] = 0x5A;
    AES_ENCRYPTION_SBOX[ 71] = 0xA0;
    AES_ENCRYPTION_SBOX[ 72] = 0x52;
    AES_ENCRYPTION_SBOX[ 73] = 0x3B;
    AES_ENCRYPTION_SBOX[ 74] = 0xD6;
    AES_ENCRYPTION_SBOX[ 75] = 0xB3;
    AES_ENCRYPTION_SBOX[ 76] = 0x29;
    AES_ENCRYPTION_SBOX[ 77] = 0xE3;
    AES_ENCRYPTION_SBOX[ 78] = 0x2F;
    AES_ENCRYPTION_SBOX[ 79] = 0x84;
    AES_ENCRYPTION_SBOX[ 80] = 0x53;
    AES_ENCRYPTION_SBOX[ 81] = 0xD1;
    AES_ENCRYPTION_SBOX[ 82] = 0x00;
    AES_ENCRYPTION_SBOX[ 83] = 0xED;
    AES_ENCRYPTION_SBOX[ 84] = 0x20;
    AES_ENCRYPTION_SBOX[ 85] = 0xFC;
    AES_ENCRYPTION_SBOX[ 86] = 0xB1;
    AES_ENCRYPTION_SBOX[ 87] = 0x5B;
    AES_ENCRYPTION_SBOX[ 88] = 0x6A;
    AES_ENCRYPTION_SBOX[ 89] = 0xCB;
    AES_ENCRYPTION_SBOX[ 90] = 0xBE;
    AES_ENCRYPTION_SBOX[ 91] = 0x39;
    AES_ENCRYPTION_SBOX[ 92] = 0x4A;
    AES_ENCRYPTION_SBOX[ 93] = 0x4C;
    AES_ENCRYPTION_SBOX[ 94] = 0x58;
    AES_ENCRYPTION_SBOX[ 95] = 0xCF;
    AES_ENCRYPTION_SBOX[ 96] = 0xD0;
    AES_ENCRYPTION_SBOX[ 97] = 0xEF;
    AES_ENCRYPTION_SBOX[ 98] = 0xAA;
    AES_ENCRYPTION_SBOX[ 99] = 0xFB;
    AES_ENCRYPTION_SBOX[100] = 0x43;
    AES_ENCRYPTION_SBOX[101] = 0x4D;
    AES_ENCRYPTION_SBOX[102] = 0x33;
    AES_ENCRYPTION_SBOX[103] = 0x85;
    AES_ENCRYPTION_SBOX[104] = 0x45;
    AES_ENCRYPTION_SBOX[105] = 0xF9;
    AES_ENCRYPTION_SBOX[106] = 0x02;
    AES_ENCRYPTION_SBOX[107] = 0x7F;
    AES_ENCRYPTION_SBOX[108] = 0x50;
    AES_ENCRYPTION_SBOX[109] = 0x3C;
    AES_ENCRYPTION_SBOX[110] = 0x9F;
    AES_ENCRYPTION_SBOX[111] = 0xA8;
    AES_ENCRYPTION_SBOX[112] = 0x51;
    AES_ENCRYPTION_SBOX[113] = 0xA3;
    AES_ENCRYPTION_SBOX[114] = 0x40;
    AES_ENCRYPTION_SBOX[115] = 0x8F;
    AES_ENCRYPTION_SBOX[116] = 0x92;
    AES_ENCRYPTION_SBOX[117] = 0x9D;
    AES_ENCRYPTION_SBOX[118] = 0x38;
    AES_ENCRYPTION_SBOX[119] = 0xF5;
    AES_ENCRYPTION_SBOX[120] = 0xBC;
    AES_ENCRYPTION_SBOX[121] = 0xB6;
    AES_ENCRYPTION_SBOX[122] = 0xDA;
    AES_ENCRYPTION_SBOX[123] = 0x21;
    AES_ENCRYPTION_SBOX[124] = 0x10;
    AES_ENCRYPTION_SBOX[125] = 0xFF;
    AES_ENCRYPTION_SBOX[126] = 0xF3;
    AES_ENCRYPTION_SBOX[127] = 0xD2;
    AES_ENCRYPTION_SBOX[128] = 0xCD;
    AES_ENCRYPTION_SBOX[129] = 0x0C;
    AES_ENCRYPTION_SBOX[130] = 0x13;
    AES_ENCRYPTION_SBOX[131] = 0xEC;
    AES_ENCRYPTION_SBOX[132] = 0x5F;
    AES_ENCRYPTION_SBOX[133] = 0x97;
    AES_ENCRYPTION_SBOX[134] = 0x44;
    AES_ENCRYPTION_SBOX[135] = 0x17;
    AES_ENCRYPTION_SBOX[136] = 0xC4;
    AES_ENCRYPTION_SBOX[137] = 0xA7;
    AES_ENCRYPTION_SBOX[138] = 0x7E;
    AES_ENCRYPTION_SBOX[139] = 0x3D;
    AES_ENCRYPTION_SBOX[140] = 0x64;
    AES_ENCRYPTION_SBOX[141] = 0x5D;
    AES_ENCRYPTION_SBOX[142] = 0x19;
    AES_ENCRYPTION_SBOX[143] = 0x73;
    AES_ENCRYPTION_SBOX[144] = 0x60;
    AES_ENCRYPTION_SBOX[145] = 0x81;
    AES_ENCRYPTION_SBOX[146] = 0x4F;
    AES_ENCRYPTION_SBOX[147] = 0xDC;
    AES_ENCRYPTION_SBOX[148] = 0x22;
    AES_ENCRYPTION_SBOX[149] = 0x2A;
    AES_ENCRYPTION_SBOX[150] = 0x90;
    AES_ENCRYPTION_SBOX[151] = 0x88;
    AES_ENCRYPTION_SBOX[152] = 0x46;
    AES_ENCRYPTION_SBOX[153] = 0xEE;
    AES_ENCRYPTION_SBOX[154] = 0xB8;
    AES_ENCRYPTION_SBOX[155] = 0x14;
    AES_ENCRYPTION_SBOX[156] = 0xDE;
    AES_ENCRYPTION_SBOX[157] = 0x5E;
    AES_ENCRYPTION_SBOX[158] = 0x0B;
    AES_ENCRYPTION_SBOX[159] = 0xDB;
    AES_ENCRYPTION_SBOX[160] = 0xE0;
    AES_ENCRYPTION_SBOX[161] = 0x32;
    AES_ENCRYPTION_SBOX[162] = 0x3A;
    AES_ENCRYPTION_SBOX[163] = 0x0A;
    AES_ENCRYPTION_SBOX[164] = 0x49;
    AES_ENCRYPTION_SBOX[165] = 0x06;
    AES_ENCRYPTION_SBOX[166] = 0x24;
    AES_ENCRYPTION_SBOX[167] = 0x5C;
    AES_ENCRYPTION_SBOX[168] = 0xC2;
    AES_ENCRYPTION_SBOX[169] = 0xD3;
    AES_ENCRYPTION_SBOX[170] = 0xAC;
    AES_ENCRYPTION_SBOX[171] = 0x62;
    AES_ENCRYPTION_SBOX[172] = 0x91;
    AES_ENCRYPTION_SBOX[173] = 0x95;
    AES_ENCRYPTION_SBOX[174] = 0xE4;
    AES_ENCRYPTION_SBOX[175] = 0x79;
    AES_ENCRYPTION_SBOX[176] = 0xE7;
    AES_ENCRYPTION_SBOX[177] = 0xC8;
    AES_ENCRYPTION_SBOX[178] = 0x37;
    AES_ENCRYPTION_SBOX[179] = 0x6D;
    AES_ENCRYPTION_SBOX[180] = 0x8D;
    AES_ENCRYPTION_SBOX[181] = 0xD5;
    AES_ENCRYPTION_SBOX[182] = 0x4E;
    AES_ENCRYPTION_SBOX[183] = 0xA9;
    AES_ENCRYPTION_SBOX[184] = 0x6C;
    AES_ENCRYPTION_SBOX[185] = 0x56;
    AES_ENCRYPTION_SBOX[186] = 0xF4;
    AES_ENCRYPTION_SBOX[187] = 0xEA;
    AES_ENCRYPTION_SBOX[188] = 0x65;
    AES_ENCRYPTION_SBOX[189] = 0x7A;
    AES_ENCRYPTION_SBOX[190] = 0xAE;
    AES_ENCRYPTION_SBOX[191] = 0x08;
    AES_ENCRYPTION_SBOX[192] = 0xBA;
    AES_ENCRYPTION_SBOX[193] = 0x78;
    AES_ENCRYPTION_SBOX[194] = 0x25;
    AES_ENCRYPTION_SBOX[195] = 0x2E;
    AES_ENCRYPTION_SBOX[196] = 0x1C;
    AES_ENCRYPTION_SBOX[197] = 0xA6;
    AES_ENCRYPTION_SBOX[198] = 0xB4;
    AES_ENCRYPTION_SBOX[199] = 0xC6;
    AES_ENCRYPTION_SBOX[200] = 0xE8;
    AES_ENCRYPTION_SBOX[201] = 0xDD;
    AES_ENCRYPTION_SBOX[202] = 0x74;
    AES_ENCRYPTION_SBOX[203] = 0x1F;
    AES_ENCRYPTION_SBOX[204] = 0x4B;
    AES_ENCRYPTION_SBOX[205] = 0xBD;
    AES_ENCRYPTION_SBOX[206] = 0x8B;
    AES_ENCRYPTION_SBOX[207] = 0x8A;
    AES_ENCRYPTION_SBOX[208] = 0x70;
    AES_ENCRYPTION_SBOX[209] = 0x3E;
    AES_ENCRYPTION_SBOX[210] = 0xB5;
    AES_ENCRYPTION_SBOX[211] = 0x66;
    AES_ENCRYPTION_SBOX[212] = 0x48;
    AES_ENCRYPTION_SBOX[213] = 0x03;
    AES_ENCRYPTION_SBOX[214] = 0xF6;
    AES_ENCRYPTION_SBOX[215] = 0x0E;
    AES_ENCRYPTION_SBOX[216] = 0x61;
    AES_ENCRYPTION_SBOX[217] = 0x35;
    AES_ENCRYPTION_SBOX[218] = 0x57;
    AES_ENCRYPTION_SBOX[219] = 0xB9;
    AES_ENCRYPTION_SBOX[220] = 0x86;
    AES_ENCRYPTION_SBOX[221] = 0xC1;
    AES_ENCRYPTION_SBOX[222] = 0x1D;
    AES_ENCRYPTION_SBOX[223] = 0x9E;
    AES_ENCRYPTION_SBOX[224] = 0xE1;
    AES_ENCRYPTION_SBOX[225] = 0xF8;
    AES_ENCRYPTION_SBOX[226] = 0x98;
    AES_ENCRYPTION_SBOX[227] = 0x11;
    AES_ENCRYPTION_SBOX[228] = 0x69;
    AES_ENCRYPTION_SBOX[229] = 0xD9;
    AES_ENCRYPTION_SBOX[230] = 0x8E;
    AES_ENCRYPTION_SBOX[231] = 0x94;
    AES_ENCRYPTION_SBOX[232] = 0x9B;
    AES_ENCRYPTION_SBOX[233] = 0x1E;
    AES_ENCRYPTION_SBOX[234] = 0x87;
    AES_ENCRYPTION_SBOX[235] = 0xE9;
    AES_ENCRYPTION_SBOX[236] = 0xCE;
    AES_ENCRYPTION_SBOX[237] = 0x55;
    AES_ENCRYPTION_SBOX[238] = 0x28;
    AES_ENCRYPTION_SBOX[239] = 0xDF;
    AES_ENCRYPTION_SBOX[240] = 0x8C;
    AES_ENCRYPTION_SBOX[241] = 0xA1;
    AES_ENCRYPTION_SBOX[242] = 0x89;
    AES_ENCRYPTION_SBOX[243] = 0x0D;
    AES_ENCRYPTION_SBOX[244] = 0xBF;
    AES_ENCRYPTION_SBOX[245] = 0xE6;
    AES_ENCRYPTION_SBOX[246] = 0x42;
    AES_ENCRYPTION_SBOX[247] = 0x68;
    AES_ENCRYPTION_SBOX[248] = 0x41;
    AES_ENCRYPTION_SBOX[249] = 0x99;
    AES_ENCRYPTION_SBOX[250] = 0x2D;
    AES_ENCRYPTION_SBOX[251] = 0x0F;
    AES_ENCRYPTION_SBOX[252] = 0xB0;
    AES_ENCRYPTION_SBOX[253] = 0x54;
    AES_ENCRYPTION_SBOX[254] = 0xBB;
    AES_ENCRYPTION_SBOX[255] = 0x16;
    for( i = 0 ; i < 256 ; i+= 1 ){
     
        a = AES_ENCRYPTION_SBOX[i];
        AES_ENCRYPTION_ISBOX[a] = i;
    }
    for( i = 0 ; i < 128 ; i+= 1 ){
        AES_ENCRYPTION_GM2[i] = i << 1;
    }
    for( ; i < 256 ; i+= 1 ){
        AES_ENCRYPTION_GM2[i] = ((i << 1) & 0xFF) ^ 0x1B;
    }
  
    for( i = 0 ; i < 256 ; i+= 1 ){
      
        a = AES_ENCRYPTION_GM2[i];
        a = AES_ENCRYPTION_GM2[a];
        a = AES_ENCRYPTION_GM2[a];
     
        AES_ENCRYPTION_GM9[i] = a ^ i;
    }
    for( i = 0 ; i < 256 ; i+= 1 ){
      
        a = AES_ENCRYPTION_GM2[i];
    
        AES_ENCRYPTION_GM13[i] = AES_ENCRYPTION_GM2[a] ^ AES_ENCRYPTION_GM9[i];
    }
 
    AES_ENCRYPTION_RCON[0] = 0x8D;
    a = 1;
    for( i = 1 ; i < 30 ; i+= 1 ){
        
        AES_ENCRYPTION_RCON[i] = a;
        a = AES_ENCRYPTION_GM2[a];
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Imperial Bank
//--------------------------------------------------------------------------------------------------
// TYPES
typedef sha1_hasher_hash_t imperial_bank_key_t;
struct imperial_bank_ownerref_t{
    int pos; 
    int len; 
};
struct imperial_bank_t{
    
    bank file;
  
    string owners;
    imperial_bank_key_t key;
 
    int savenum; 
  
    int blocknum; 
 
    int loadowner; 
  
    int accountn; 
    imperial_bank_ownerref_t[16] accounts;
    bool auth;
};
// PUBLIC FUNCTIONS
bool ImperialBankLoad(structref<imperial_bank_t> obj, bank source);
bool ImperialBankValid(structref<imperial_bank_t> obj);
void ImperialBankClear(structref<imperial_bank_t> obj);
bool ImperialBankSave(structref<imperial_bank_t> obj);
bool ImperialBankRead(structref<imperial_bank_t> obj, string block, structref<bit_field_t> out);
bool ImperialBankWrite(structref<imperial_bank_t> obj, string block, structref<bit_field_t> in);
// PRIVATE FUNCTIONS
void ImperialBankHeaderKey(structref<imperial_bank_t> obj, arrayref<imperial_bank_key_t> key);
bool ImperialBankReadHeader(structref<imperial_bank_t> obj, structref<bit_field_t> block);
void ImperialBankWriteHeader(structref<imperial_bank_t> obj, structref<bit_field_t> block);
bool ImperialBankReadBlock(structref<imperial_bank_t> obj, string section, string block, arrayref<imperial_bank_key_t> key, structref<bit_field_t> out);
void ImperialBankWriteBlock(structref<imperial_bank_t> obj, string section, string block, arrayref<imperial_bank_key_t> key, structref<bit_field_t> in);
void ImperialBankCryptKey(arrayref<imperial_bank_key_t> key, arrayref<imperial_bank_key_t> key1, arrayref<imperial_bank_key_t> key2, arrayref<imperial_bank_key_t> key3);
void ImperialBankBlockCrypt(arrayref<imperial_bank_key_t> key, structref<bit_field_t> block);
void ImperialBankBlockHash(arrayref<imperial_bank_key_t> outkey, structref<bit_field_t> block);
bool ImperialBankBlockValidate(arrayref<imperial_bank_key_t> key, structref<bit_field_t> block);
// GLOBALS
// ASCII converter.
ascii_channel_t ImperialBankASCIIConverter;
int ImperialBankASCIIConverterRead(){
    return ASCIIChannelRead(ImperialBankASCIIConverter);
}
// IMPLEMENTATION
bool ImperialBankLoad(structref<imperial_bank_t> obj, bank source){
    string acc;
    int i;
    imperial_bank_key_t key;
    sha1_hasher_t hasher;
    bit_field_t header;
  
    obj.auth = false;
    if( source == null ){ return false; }
    obj.file = source;
    BankOptionSet(source, c_bankOptionSignature, true);
    if( BankSectionCount(source) != 2 ||
      !BankSectionExists(source, "IBH") ||
      !BankSectionExists(source, "IBD") || 
      BankKeyCount(source, "IBH") != 2 ||
      !BankKeyExists(source, "IBH", "ID") ||
      !BankValueIsType(source, "IBH", "ID", c_bankTypeString) ||
      !BankKeyExists(source, "IBH", "HEAD") ||
      !BankValueIsType(source, "IBH", "HEAD", c_bankTypeString) ){ return false; }
 
    obj.owners = BankValueGetAsString(source, "IBH", "ID");
    acc = PlayerHandle(BankPlayer(source));
    if( acc == "" ){ acc = "SC2E-TEST-ACCOUNT"; }
 
    ASCIIChannelSetup(ImperialBankASCIIConverter, obj.owners);
    SHA1HasherHashData(hasher, ImperialBankASCIIConverterRead, ASCIIChannelLength(ImperialBankASCIIConverter));
    SHA1HasherHash(hasher, obj.key);
   
    ImperialBankHeaderKey(obj, key);
  
    if( !ImperialBankReadBlock(obj, "IBH", "HEAD", key, header) ||
      !ImperialBankReadHeader(obj, header) ){ return false; }
  
    if( StringSub(obj.owners, obj.accounts[obj.loadowner].pos, obj.accounts[obj.loadowner].pos + obj.accounts[obj.loadowner].len - 1) == acc ){
        obj.auth = BankVerify(source);
    }
    else{
        for( i = 0 ; i < obj.accountn ; i+= 1 ){
            if( StringSub(obj.owners, obj.accounts[i].pos, obj.accounts[i].pos + obj.accounts[i].len - 1) == acc ){
                obj.loadowner = i;
                obj.auth = true;
                break;
            }
        }
    }
  
    return true;
}
bool ImperialBankValid(structref<imperial_bank_t> obj){
    return obj.auth;
}
void ImperialBankClear(structref<imperial_bank_t> obj){
    sha1_hasher_t hasher;
    while( BankSectionCount(obj.file) > 0 ){
        BankSectionRemove(obj.file, BankSectionName(obj.file, 0));
    }
    BankOptionSet(obj.file, c_bankOptionSignature, true);
 
    BankSectionCreate(obj.file, "IBD");
    BankSectionCreate(obj.file, "IBH");
 
    obj.owners = PlayerHandle(BankPlayer(obj.file));
    
    if( obj.owners == "" ){ obj.owners = "SC2E-TEST-ACCOUNT"; }
    BankValueSetFromString(obj.file, "IBH", "ID", obj.owners);
    obj.accountn = 1;
    obj.accounts[0].pos = 1;
    obj.accounts[0].len = StringLength(obj.owners);
    obj.loadowner = 0;
    
    ASCIIChannelSetup(ImperialBankASCIIConverter, obj.owners);
    SHA1HasherHashData(hasher, ImperialBankASCIIConverterRead, ASCIIChannelLength(ImperialBankASCIIConverter));
    SHA1HasherHash(hasher, obj.key);
   
    obj.savenum = 0;
    obj.blocknum = 0;
    obj.auth = true;
}
bool ImperialBankSave(structref<imperial_bank_t> obj){
    imperial_bank_key_t key;
    bit_field_t header;
   
    if( !obj.auth ){ return false; }
   
    obj.savenum = (obj.savenum + 1) % (1 << 18);
   
    ImperialBankWriteHeader(obj, header);
   
    ImperialBankHeaderKey(obj, key);
    
    ImperialBankWriteBlock(obj, "IBH", "HEAD", key, header);
   
    BankSave(obj.file);
    return true;
}
bool ImperialBankRead(structref<imperial_bank_t> obj, string block, structref<bit_field_t> out){
    sha1_hasher_t hasher;
    imperial_bank_key_t key;
    if( !obj.auth ){return false; }
 
    ASCIIChannelSetup(ImperialBankASCIIConverter, block);
    SHA1HasherHashData(hasher, ImperialBankASCIIConverterRead, ASCIIChannelLength(ImperialBankASCIIConverter));
    SHA1HasherHash(hasher, key);
    
    return ImperialBankReadBlock(obj, "IBD", block, key, out);
}
bool ImperialBankWrite(structref<imperial_bank_t> obj, string block, structref<bit_field_t> in){
    sha1_hasher_t hasher;
    imperial_bank_key_t key;
    
    if( !obj.auth ){ return false; }
  
    if( !BankKeyExists(obj.file, "IBD", block) ){
        obj.blocknum+= 1;
    }
    ASCIIChannelSetup(ImperialBankASCIIConverter, block);
    SHA1HasherHashData(hasher, ImperialBankASCIIConverterRead, ASCIIChannelLength(ImperialBankASCIIConverter));
    SHA1HasherHash(hasher, key);
   
    ImperialBankWriteBlock(obj, "IBD", block, key, in);
    return true;
}
void ImperialBankHeaderKey(structref<imperial_bank_t> obj, arrayref<imperial_bank_key_t> key){
  
    key[0] = 0x12345678 ^ obj.key[3];
    key[1] = obj.key[0] ^ obj.key[4] ^ 0x7A8B9CAD;
    key[2] = 0x31415926;
    key[3] = obj.key[1] ^ obj.key[2] ^ 0x42184218;
    key[4] = 0x27182818;
}
bool ImperialBankReadHeader(structref<imperial_bank_t> obj, structref<bit_field_t> block){
    int i = 0;
    int temp = 0;
   
    BitFieldSeek(block, 0);
    
    i = BitFieldGetSize(block);
    if( i < 42 ){ return false; }
    i-= 24;
  
    if( BitFieldRead(block, 6) > 0 ){ return false; }
    
    obj.savenum = BitFieldRead(block, 18);
    obj.blocknum = BitFieldRead(block, 10);
    obj.loadowner = BitFieldRead(block, 4);
    obj.accountn = BitFieldRead(block, 4);
  
    if( i < (obj.accountn * 17) ){ return false; }
    for( i = 0 ; i < obj.accountn ; i+= 1 ){
        obj.accounts[i].pos = BitFieldRead(block, 10);
        obj.accounts[i].len = BitFieldRead(block, 7);
    }
    
    if( BankKeyCount(obj.file, "IBD") != obj.blocknum ||
      obj.loadowner >= obj.accountn ){ return false; }
   
    temp = 1;
    for( i = 0 ; i < obj.accountn ; i+= 1 ){
        if( obj.accounts[i].pos != temp ||
          obj.accounts[i].len == 0 ){ return false; }
        temp+= obj.accounts[i].len;
    }
    if( (temp - 1) != StringLength(obj.owners) ){ return false; }
    
    return true;
}
void ImperialBankWriteHeader(structref<imperial_bank_t> obj, structref<bit_field_t> block){
    int i = 0;
   
    BitFieldInitialize(block, 42 + (obj.accountn * 17), false);
    
    BitFieldWrite(block, 0, 6);
    
    BitFieldWrite(block, obj.savenum, 18);
    BitFieldWrite(block, obj.blocknum, 10);
    BitFieldWrite(block, obj.loadowner, 4);
    BitFieldWrite(block, obj.accountn, 4);
    
    for( i = 0 ; i < obj.accountn ; i+= 1 ){
        BitFieldWrite(block, obj.accounts[i].pos, 10);
        BitFieldWrite(block, obj.accounts[i].len, 7);
    }
}
bool ImperialBankReadBlock(structref<imperial_bank_t> obj, string section, string block, arrayref<imperial_bank_key_t> key, structref<bit_field_t> out){
    imperial_bank_key_t ekey;
    imperial_bank_key_t hkey;
    string s;
    int i;
    int end;
   
    if( !BankKeyExists(obj.file, section, block) ){ return false; }
    
    else if( !BankValueIsType(obj.file, section, block, c_bankTypeString) ){
        BankKeyRemove(obj.file, section, block);
        obj.blocknum-= 1;
        return false;
    }
    s = BankValueGetAsString(obj.file, section, block);
    end = StringLength(s);
  
    if( (end * 6) > (BIT_FIELD_SIZE * 32 + 160) ||
      ((end * 6 - 160) % 128) >= 6 ){ return false; }
    
    BitFieldSetSize(out, 162);
    BitFieldSeek(out, 0);
    for( i = 1 ; i <= 27 ; i+= 1 ){
        BitFieldWrite(out, ASCIIUtilBase64ToInt(s, i), 6);
    }
    for( i = 0 ; i < 5 ; i+= 1 ){
        hkey[i] = BitFieldGet(out, i);
    }
  
    BitFieldSet(out, BitFieldGet(out, 5), 0);
    BitFieldSeek(out, 2);
    BitFieldSetSize(out, (((end * 6) - 160) / 128) * 128);
   
    for( i = 28 ; i < end ; i+= 1 ){
        BitFieldWrite(out, ASCIIUtilBase64ToInt(s, i), 6);
    }
   
    BitFieldWrite(out, ASCIIUtilBase64ToInt(s, end), BitFieldRemaining(out));
    
    ImperialBankCryptKey(ekey, obj.key, key, hkey);
    ImperialBankBlockCrypt(ekey, out);
  
    return ImperialBankBlockValidate(hkey, out);
}
void ImperialBankWriteBlock(structref<imperial_bank_t> obj, string section, string block, arrayref<imperial_bank_key_t> key, structref<bit_field_t> in){
    imperial_bank_key_t ekey;
    imperial_bank_key_t hkey;
    string s;
    string h;
    int i;
    int end;
 
    BitFieldResize(in, ((BitFieldGetSize(in) + 127) & ((-1) << 7)));
 
    ImperialBankBlockHash(hkey, in);
   
    ImperialBankCryptKey(ekey, obj.key, key, hkey);
    ImperialBankBlockCrypt(ekey, in);
  
    s = "";
    BitFieldSeek(in, 2);
    end = BitFieldRemaining(in) / 6;
    for( i = 0 ; i < end ; i+= 1 ){
        s+= ASCIIUtilIntToBase64(BitFieldRead(in, 6));
    }
    
    end = BitFieldRemaining(in);
    if( end > 0 ){ 
        s+= ASCIIUtilIntToBase64(BitFieldRead(in, end) | ((hkey[2] << end) & 0x3F));
    }
   
    BitFieldSetSize(in, 162);
    BitFieldSeek(in, 0);
 
    BitFieldSet(in, BitFieldGet(in, 0), 5);
   
    for( i = 0 ; i < 5 ; i+= 1 ){
        BitFieldSet(in, hkey[i], i);
    }
    
    h = "";
    for( i = 0 ; i < 27 ; i+= 1 ){
        h+= ASCIIUtilIntToBase64(BitFieldRead(in, 6));
    }
    
    BankValueSetFromString(obj.file, section, block, h + s);
}
void ImperialBankCryptKey(arrayref<imperial_bank_key_t> key, arrayref<imperial_bank_key_t> key1, arrayref<imperial_bank_key_t> key2, arrayref<imperial_bank_key_t> key3){
 
    key[0] = key1[1] ^ key2[2] ^ ((key3[3] << 13) | ((key3[3] >> 19) & 0x1FFF));
    key[1] = key1[3] ^ key2[0] ^ key3[0];
    key[2] = key1[0] ^ key2[3] ^ key3[2];
    key[3] = key1[2] ^ key2[1] ^ key3[4];
    key[4] = key1[4] ^ key2[4] ^ key3[1];
}
void ImperialBankBlockCrypt(arrayref<imperial_bank_key_t> key, structref<bit_field_t> block){
    aes_encryption_t crypt;
    aes_encryption_block_t eblock;
    int i;
    int end;
    int ckey;
    
    ckey = key[0] ^ key[1] ^ key[2] ^ key[3] ^ key[4];
    AESEncryptionSetup(crypt, key);
   
    end = BitFieldGetSize(block) / 32;
    i = 0;
    while( i < end ){
       
        eblock[0] = i;
        eblock[1] = ~i;
        eblock[2] = i ^ ckey;
        eblock[3] = (-i) ^ ckey;
        AESEncryptionCipher(crypt, eblock);
   
        BitFieldSet(block, BitFieldGet(block, i) ^ eblock[1], i);
        i+= 1;
        BitFieldSet(block, BitFieldGet(block, i) ^ eblock[2], i);
        i+= 1;
        BitFieldSet(block, BitFieldGet(block, i) ^ eblock[3], i);
        i+= 1;
        BitFieldSet(block, BitFieldGet(block, i) ^ eblock[0], i);
        i+= 1;
    }
}
void ImperialBankBlockHash(arrayref<imperial_bank_key_t> outkey, structref<bit_field_t> block){
    sha1_hasher_t hasher;
    sha1_hasher_block_t hashblock;
    int i;
    int end;
    int j;
    int eob;
 
    SHA1HasherInitalize(hasher);
    end = BitFieldGetSize(block) / 32;
  
    while( i < end ){
      
        eob = end - i;
        if( eob > 16 ){ eob = 16; }
      
        for( j = 0 ; j < eob ; j+= 1 ){
            hashblock[j] = BitFieldGet(block, i);
            i+= 1;
        }
       
        SHA1HasherProcess(hasher, hashblock);
    }
    SHA1HasherProcessFinal(hasher, hashblock, end * 4);
    SHA1HasherHash(hasher, outkey);
}
bool ImperialBankBlockValidate(arrayref<imperial_bank_key_t> key, structref<bit_field_t> block){
    imperial_bank_key_t hash;
    int i;
    bool result;
    ImperialBankBlockHash(hash, block);
   
    result = true;
    for( i = 0 ; i < 5 ; i+= 1 ){
        result = result && (key[i] == hash[i]);
    }
    return result;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Player Bank
//--------------------------------------------------------------------------------------------------
// ASCII converter.
ascii_channel_t PlayerBankImportConverter;
int PlayerBankImportConverterRead(){
    return ASCIIChannelRead(PlayerBankImportConverter);
}
string PlayerBankImportConverterSignature(string s){
    sha1_hasher_t hasher;
    imperial_bank_key_t hash;
   
    ASCIIChannelSetup(PlayerBankImportConverter, s);
    SHA1HasherHashData(hasher, PlayerBankImportConverterRead, ASCIIChannelLength(PlayerBankImportConverter));
    SHA1HasherHash(hasher, hash);
    return ASCIIUtilIntToHex(hash[0]) + ASCIIUtilIntToHex(hash[1]) + ASCIIUtilIntToHex(hash[2]) + ASCIIUtilIntToHex(hash[3]) + ASCIIUtilIntToHex(hash[4]);;
}
imperial_bank_t[16] PlayerBanks;
void PlayerBankNew(int player){
    ImperialBankClear(PlayerBanks[player]);
}
bool PlayerBankLoad(int player){
    bit_field_t block;
    int i;
    int ver;
    int len;
    
    if (!ImperialBankLoad(PlayerBanks[player], gv_banks[player])) { return false; }
	BitFieldInitialize(block, 32, false);
	if (!ImperialBankRead(PlayerBanks[player], "UAC", block)) { return false; }
	BitFieldSeek(block, 0);
	len = BitFieldGetSize(block);
	ver = BitFieldRead(block, 9);
	if (ver > 3) { return false; }
	if (len != 640) { return false; }
	gv_playerImportedFromUA3[player] = BitFieldRead(block, 2);
	for (i = 1; i <= 3; i += 1) {
		gv_playerExperience[i][player] = BitFieldRead(block, 20);
	}
	gv_playerStartingXP[player] = gv_playerExperience[1][player]; // ???
	gv_playerGamesPlayed[player] = BitFieldRead(block, 16);
	gv_playerRevives[player] = BitFieldRead(block, 20);
	gv_playerAvgGameTime[player] = BitFieldRead(block, 16);
	gv_funcdialogoffsets[1][player] = BitFieldRead(block, 12) - 2048;
	gv_funcdialogoffsets[2][player] = BitFieldRead(block, 12) - 2048;
	if (ver == 0)
	{
		//Camo
		for (i = 2; i <= 44; i += 1) {
			gv_playercamounlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//Ensure additional camos are set as not-earned.
		for (; i <= gv_camos; i += 1) {
			gv_playercamounlocked[i][player] = false;
		}
		//Decals
		for (i = 1; i <= 29; i += 1) {
			gv_playerdecalunlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//Ensure additional decals are set as not-earned.
		for (; i <= gv_decals; i += 1) {
			gv_playerdecalunlocked[i][player] = false;
		}
		//SI
		for (i = 1; i <= 64; i += 1) {
			gv_sIunlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//Ensure additional SI are set as not-earned.
		for (; i <= gv_sIcount; i += 1) {
			gv_sIunlocked[i][player] = false;
		}
		//Achievement
		for (i = 1; i <= 3; i += 1) {
			gv_achievementUnlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//Ensure additional Achievements are set as not-earned.
		for (; i <= gv_achievementCount; i += 1) {
			gv_achievementUnlocked[i][player] = false;
		}
		//Games Won Section
		for (i = 1; i <= 12; i += 1) {
			gv_gamesWon[i][player] = BitFieldRead(block, 16);
		}
	}
	else if (ver == 1 || ver == 2)
	{
		//Camo
		for (i = 2; i <= 52; i += 1) {
			gv_playercamounlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//Ensure additional camos are set as not-earned.
		for (; i <= gv_camos; i += 1) {
			gv_playercamounlocked[i][player] = false;
		}
		//Decals
		for (i = 1; i <= 35; i += 1) {
			gv_playerdecalunlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//SI
		for (i = 1; i <= 70; i += 1) {
			gv_sIunlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//Ensure additional SI are set as not-earned.
		for (; i <= gv_sIcount; i += 1) {
			gv_sIunlocked[i][player] = false;
		}
		//Achievement
		for (i = 1; i <= gv_achievementCount; i += 1) {
			gv_achievementUnlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//Games Won Section
		for (i = 1; i <= 12; i += 1) {
			gv_gamesWon[i][player] = BitFieldRead(block, 16);
		}
		//Additional Decals added in Version 2
		for (i = 36; i <= 52; i += 1) {
			gv_playerdecalunlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//Ensure additional decals are set as not-earned.
		for (; i <= gv_decals; i += 1) {
			gv_playerdecalunlocked[i][player] = false;
		}
		//Ensure Accessories are set as not-earned
		for (i = 1; i <= gv_accessories; i += 1) {
			gv_playeraccessoryunlocked[i][player] = false;
		}
	}
	else if (ver == 3)
	{
		//Games Won Section
		for (i = 1; i <= 13; i += 1) {
			gv_gamesWon[i][player] = BitFieldRead(block, 16);
		}
		//Achievement
		for (i = 1; i <= gv_achievementCount; i += 1) {
			gv_achievementUnlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//Camo
		for (i = 2; i <= gv_camos; i += 1) {
			gv_playercamounlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//Decals
		for (i = 1; i <= gv_decals; i += 1) {
			gv_playerdecalunlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//SI
		for (i = 1; i <= gv_sIcount; i += 1) {
			gv_sIunlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
		//Accessories
		for (i = 1; i <= gv_accessories; i += 1) {
			gv_playeraccessoryunlocked[i][player] = BitFieldRead(block, 1) != 0;
		}
	}
	return true;
}
int PlayerBankClampInt(int in, int len){
    int max;
    if( in < 0 ){ return 0; }
    max = (~((-1) << len));
    if( in > max ){ return max; }
    return in;
}
void PlayerBankWriteBool(structref<bit_field_t> block, bool val){
    if( val ){ BitFieldWrite(block, 1, 1); }
    else{ BitFieldWrite(block, 0, 1); }
}
bool PlayerBankSave(int player){
    bit_field_t block;
    imperial_bank_t temp;
    int i;
    if (!ImperialBankValid(PlayerBanks[player])) {
		ImperialBankClear(PlayerBanks[player]);
	}
	//Init bit field
	BitFieldInitialize(block, 640, false);
	BitFieldSeek(block, 0);
	//Write bank version
	if (PlayerBanks[player].owners == "SC2E-TEST-ACCOUNT")
    { BitFieldWrite(block, 100, 9); }
    else if (GameIsOnline() == false)
    { BitFieldWrite(block, 100, 9); }
    else if  (GameIsTestMap(false) == true)
    { BitFieldWrite(block, 100, 9); }
    else{ BitFieldWrite(block, 3, 9); }
	//Import from UA3 - No longer used
	BitFieldWrite(block, gv_playerImportedFromUA3[player], 2);
	//Write Player EXP
	for (i = 1; i <= 3; i += 1) {
		BitFieldWrite(block, PlayerBankClampInt(gv_playerExperience[i][player], 20), 20);
	}
	//Write number of games played
	BitFieldWrite(block, PlayerBankClampInt(gv_playerGamesPlayed[player], 16), 16);
	//Write number of revives
	BitFieldWrite(block, PlayerBankClampInt(gv_playerRevives[player], 20), 20);
	//Write average game time
	BitFieldWrite(block, PlayerBankClampInt(gv_playerAvgGameTime[player], 16), 16);
	//Write functionl dialog offsets
	BitFieldWrite(block, PlayerBankClampInt(gv_funcdialogoffsets[1][player] + 2048, 12), 12);
	BitFieldWrite(block, PlayerBankClampInt(gv_funcdialogoffsets[2][player] + 2048, 12), 12);
	//Games Won
	for (i = 1; i <= 13; i += 1) {
		BitFieldWrite(block, PlayerBankClampInt(gv_gamesWon[i][player], 16), 16);
	}
	//Achievements
	for (i = 1; i <= gv_achievementCount; i += 1) {
		PlayerBankWriteBool(block, gv_achievementUnlocked[i][player]);
	}
	//Camos
	for (i = 2; i <= gv_camos; i += 1) {
		PlayerBankWriteBool(block, gv_playercamounlocked[i][player]);
	}
	//Decals
	for (i = 1; i <= gv_decals; i += 1) {
		PlayerBankWriteBool(block, gv_playerdecalunlocked[i][player]);
	}
	//SI's
	for (i = 1; i <= gv_sIcount; i += 1) {
		PlayerBankWriteBool(block, gv_sIunlocked[i][player]);
	}
	//Accessories
	for (i = 1; i <= gv_accessories; i += 1) {
		PlayerBankWriteBool(block, gv_playeraccessoryunlocked[i][player]);
	}
	if (!ImperialBankWrite(PlayerBanks[player], "UAC", block)) { return false; }
	return ImperialBankSave(PlayerBanks[player]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Global Var
//--------------------------------------------------------------------------------------------------
bool gv_LUNATICVoteEnable;
bool gv_LUNATICEnable;
int gv_backimg;
int gv_backimg2;
int gv_ILAllow = 40;

//--------------------------------------------------------------------------------------------------
// Custom Script: FunctionProvider-EventRaiseController
//--------------------------------------------------------------------------------------------------
const string gv_GreenText = "<c val=\"b3ffb3-50ff50\">";
const string gv_FCTH = "<s val=\"FCT_Heal_Normal\">";
const string gv_RedText = "<c val=\"ff5050-ff1515\">";
const string gv_YellowText = "<c val=\"ffff70-ffff10\">";
const string gv_PurpleText = "<c val=\"ff60ff-ff22ff\">";
const string gv_TechText = "<c val=\"b8edff-f0ffff\">";
struct gs_Events
{
    int lv_Priority; //Priority 1 will trade as background events.
    fixed lv_MsgLifeEnd;
    text lv_EventText;
    
    bool lv_writeout;
    fixed lv_writeoutTime;
    fixed lv_twinkleperiod; // <0.1 means dont twinkle, Priority 1 Events don't have this property.
    int lv_LinerIndex; //To Define if this Events is Duplicated.
    string lv_token;
};
const int gv_EventPoolSize = 100;
gs_Events[gv_EventPoolSize] gv_EventsPool; 
//Tempture & RH% Controller Delta
fixed gv_AutoControlled_TempDelta;
fixed gv_AutoControlled_RHPDelta;
bool gv_TempWarning;
//RHP Dont have a Warning bool. >= 96.0 red.
int gf_GetMainEventIndexInEventsPool() //Have Trim Function in this Progress
{
    int lv_i;
    int lv_highestPriority = -1;
    int lv_highestPriorityEventIndex = -1;
    fixed lv_currentMT = GameGetMissionTime();
    for (lv_i = 0; lv_i < gv_EventPoolSize; lv_i += 1)
    {
        if (gv_EventsPool[lv_i].lv_LinerIndex == 0) { continue; }
        if (gv_EventsPool[lv_i].lv_MsgLifeEnd < lv_currentMT)
        {
            gv_EventsPool[lv_i].lv_LinerIndex = 0;
            continue;
        }
        if (lv_highestPriority < gv_EventsPool[lv_i].lv_Priority)
        {
            lv_highestPriority = gv_EventsPool[lv_i].lv_Priority;
            lv_highestPriorityEventIndex = lv_i;
        }
    }
    if (lv_highestPriorityEventIndex != -1) { return lv_highestPriorityEventIndex; }
    return -1;
}
int gf_ReturnHighestPriorityEventsLevel() //Have Trim Function in this Progress
{
    int lv_i;
    int lv_highestPriority = 0;
    fixed lv_currentMT = GameGetMissionTime();
    for (lv_i = 0; lv_i < gv_EventPoolSize; lv_i += 1)
    {
        if (gv_EventsPool[lv_i].lv_LinerIndex == 0) { continue; }
        if (gv_EventsPool[lv_i].lv_MsgLifeEnd < lv_currentMT)
        {
            gv_EventsPool[lv_i].lv_LinerIndex = 0;
            continue;
        }
        if (lv_highestPriority < gv_EventsPool[lv_i].lv_Priority)
        {
            lv_highestPriority = gv_EventsPool[lv_i].lv_Priority;
        }
    }
    return lv_highestPriority;
}
int gf_GetPriority1LevelEventRandomIndex()
{
    int lv_i;
    int lv_result = -1;
    fixed lv_currentMT = GameGetMissionTime();
    for (lv_i = 0; lv_i < gv_EventPoolSize; lv_i += 1)
    {
        if (gv_EventsPool[lv_i].lv_LinerIndex == 0) { continue; }
        if (gv_EventsPool[lv_i].lv_MsgLifeEnd < lv_currentMT)
        {
            gv_EventsPool[lv_i].lv_LinerIndex = 0;
            continue;
        }
        if (gv_EventsPool[lv_i].lv_Priority == 1)
        {
            if (lv_result == -1 || (RandomInt(0, 2) == 1))
            {
                lv_result = lv_i;
            }
        }
    }
    return lv_result;
}
fixed gv_TempDeltaFadeSpeed025s = 0.04;
fixed gv_TempDeltaFadeTarget;
fixed gv_RHPDeltaFadeSpeed025s = 0.04;
fixed gv_RHPDeltaFadeTarget;
trigger gt_FadeTempRHP;
bool gt_FadeTempRHP_Func(bool lp_1, bool lp_2)
{
    fixed lv_distance;
    gv_AutoControlled_TempDelta = gv_TempDeltaFadeTarget;
    gv_AutoControlled_RHPDelta = gv_RHPDeltaFadeTarget;
    while (true)
    {
        //Temp
        if (gv_AutoControlled_TempDelta != gv_TempDeltaFadeTarget)
        {
            lv_distance = gv_AutoControlled_TempDelta - gv_TempDeltaFadeTarget;
            if (AbsF(lv_distance) < gv_TempDeltaFadeSpeed025s)
            {
                gv_AutoControlled_TempDelta = gv_TempDeltaFadeTarget;
            }
            else
            {
                if (lv_distance > 0) { gv_AutoControlled_TempDelta -= gv_TempDeltaFadeSpeed025s; }
                else { gv_AutoControlled_TempDelta += gv_TempDeltaFadeSpeed025s; }
            }
        }
        //RHP
        if (gv_AutoControlled_RHPDelta != gv_RHPDeltaFadeTarget)
        {
            lv_distance = gv_AutoControlled_RHPDelta - gv_RHPDeltaFadeTarget;
            if (AbsF(lv_distance) < gv_RHPDeltaFadeSpeed025s)
            {
                gv_AutoControlled_RHPDelta = gv_RHPDeltaFadeTarget;
            }
            else
            {
                if (lv_distance > 0) { gv_AutoControlled_RHPDelta -= gv_RHPDeltaFadeSpeed025s; }
                else { gv_AutoControlled_RHPDelta += gv_RHPDeltaFadeSpeed025s; }
            }
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}
void gt_FadeTempRHP_Init()
{
    gt_FadeTempRHP = TriggerCreate("gt_FadeTempRHP_Func");
}
trigger gt_EventRaiseController;
bool gt_EventRaiseController_Func(bool lp_1, bool lp_2)
{
    const fixed lv_EventHandlerLoopPeriod = 0.25;
    const string lv_DefaultFont = "<s val=\"CNDefaultTextPRI\">";
    const string lv_boarderStyle = "Assets\\Textures\\ui_mission_leaderboard_progressbar_frame.dds";
    const string lv_sk = "</s>";
    const string lv_ck = "</c>";
    const string lv_NewLine = "</n>";
    int lv_ran;
    int lv_eventPointer;
    fixed lv_currentEventsMaxDisplayTime;
    int lv_displayCotainer;
    int lv_dialogLabel;
    int lv_i;
    fixed lv_cmp;
    string lv_construct;
    bool lv_RHPCrit;
    bool lv_firstprint;
    bool lv_piecring;
    bool lv_loopPriority1Events;
    bool lv_twinkleshow;
    fixed lv_currentPrintTime;
    fixed lv_dialogElapsedTimeForTwinkle;
    int lv_BasicEventType;
    fixed lv_TempCurrent;
    fixed lv_RHPCurrent;
    const fixed lv_tempH = 34.0;
    const fixed lv_tempL = 28.0;
    const fixed lv_RHPH = 70.0;
    const fixed lv_RHPL = 50.0;
    const fixed lv_tempA = 1.5;
    const fixed lv_RHPA = 10.0;
    if (!lp_2) { return true; }
    if (TriggerActiveCount(gt_EventRaiseController) > 1) { return true; }
    
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_FadeTempRHP, false, false);
    //lv_displayCotainer = DialogCreate(275, 75, c_anchorBottomLeft, 0, 354, true);
    lv_displayCotainer = DialogCreate(275, 75, c_anchorBottomRight, 0, 325, true);
    DialogSetVisible(lv_displayCotainer, PlayerGroupAll(), true);
    DialogSetImageVisible(lv_displayCotainer, false);
    libNtve_gf_CreateDialogItemImage(lv_displayCotainer, DialogGetWidth(lv_displayCotainer), DialogGetHeight(lv_displayCotainer), c_anchorCenter, 0, 0, StringToText(""), lv_boarderStyle, c_triggerImageTypeBorder, false, Color(100.0, 100.0, 100.0), c_triggerBlendModeNormal);
    lv_dialogLabel = -1;
    while (true)
    {
        lv_twinkleshow = false;
        lv_eventPointer = gf_GetMainEventIndexInEventsPool();
        lv_piecring = true;
        lv_loopPriority1Events = false;
        lv_dialogElapsedTimeForTwinkle = 0.0;
        if (lv_eventPointer != -1)
        {
            //Has Events
            if (gv_EventsPool[lv_eventPointer].lv_Priority != 1)
            {
                if (lv_dialogLabel != -1) { DialogControlDestroy(lv_dialogLabel); }
                lv_currentPrintTime = gv_EventsPool[lv_eventPointer].lv_writeoutTime;
                lv_dialogLabel = libNtve_gf_CreateDialogItemLabel(lv_displayCotainer, 250, 56, c_anchorCenter, 0, 0, StringToText(lv_DefaultFont) + gv_EventsPool[lv_eventPointer].lv_EventText, ColorWithAlpha(0.0, 0.0, 0.0, 0.0), gv_EventsPool[lv_eventPointer].lv_writeout, lv_currentPrintTime);
                lv_currentEventsMaxDisplayTime = gv_EventsPool[lv_eventPointer].lv_MsgLifeEnd - GameGetMissionTime();
                while (lv_currentEventsMaxDisplayTime > 0.0 && (gf_ReturnHighestPriorityEventsLevel() <= gv_EventsPool[lv_eventPointer].lv_Priority))
                {
                    if (gv_EventsPool[lv_eventPointer].lv_twinkleperiod >= 0.1 && lv_dialogElapsedTimeForTwinkle > lv_currentPrintTime)
                    {
                        Wait(gv_EventsPool[lv_eventPointer].lv_twinkleperiod, c_timeGame);
                        lv_currentEventsMaxDisplayTime -= gv_EventsPool[lv_eventPointer].lv_twinkleperiod;
                        DialogControlSetVisible(lv_dialogLabel, PlayerGroupAll(), lv_twinkleshow);
                        lv_twinkleshow = !lv_twinkleshow;
                    }
                    else
                    {
                        Wait(lv_EventHandlerLoopPeriod, c_timeGame);
                        lv_currentEventsMaxDisplayTime -= lv_EventHandlerLoopPeriod;
                        lv_dialogElapsedTimeForTwinkle += lv_EventHandlerLoopPeriod;
                    }
                }
                lv_piecring = false;
            }
            else
            {
                lv_loopPriority1Events = true;
            }
        }
        if (lv_piecring)
        {
            //Basic Events Random Display
            lv_i = 2; //Basic Events Type Count
            lv_ran = RandomInt(1, lv_i);
            if (lv_BasicEventType == lv_ran)
            {
                lv_ran = (lv_ran + 1) % (lv_i + 1);
                if (lv_ran == 0) { lv_ran = 1; }
            }
            if (lv_loopPriority1Events && (RandomInt(0, 1) == 1))
            {
                lv_ran = -1;
            }
            lv_BasicEventType = lv_ran;
            
            if (lv_ran == 1)
            {
                lv_firstprint = true;
                lv_currentEventsMaxDisplayTime = 5.0;
                while (lv_currentEventsMaxDisplayTime > 0.0 && gf_ReturnHighestPriorityEventsLevel() <= 1)
                {
                    //Temperature & RHP% Display
                    if (lv_TempCurrent == 0.0)
                    {
                        lv_TempCurrent = RandomFixed(lv_tempL, lv_tempH);
                        lv_RHPCurrent = RandomFixed(lv_RHPL, lv_RHPH);
                    }
                    else
                    {
                        lv_TempCurrent += RandomFixed(-0.1, 0.1);
                        lv_RHPCurrent += RandomFixed(-0.1, 0.1);
                        //Test Boarder & Control Random Changes by Nature Probability Distribution
                        if (lv_TempCurrent >= lv_tempH - RandomFixed(0.0, lv_tempA)) { lv_TempCurrent -= 0.1; }
                        if (lv_TempCurrent <= lv_tempL + RandomFixed(0.0, lv_tempA)) { lv_TempCurrent += 0.1; }
                        if (lv_RHPCurrent >= lv_RHPH - RandomFixed(0.0, lv_RHPA)) { lv_TempCurrent -= 0.1; }
                        if (lv_RHPCurrent <= lv_RHPL + RandomFixed(0.0, lv_RHPA)) { lv_TempCurrent += 0.1; }
                    }
                    
                    lv_construct = lv_DefaultFont + gv_GreenText + "Temperature" + " / " + "Humidity" + lv_NewLine + lv_ck + lv_sk + gv_FCTH;
                    if (gv_TempWarning) { lv_construct += gv_RedText; }
                    // \xC2\xB0 is degree symbol
                    lv_construct += FixedToString(lv_TempCurrent + gv_AutoControlled_TempDelta, 1) + "\xC2\xB0" + "C";
                    if (gv_TempWarning) { lv_construct += lv_ck; }
                    lv_construct += " / ";
                    lv_cmp = lv_RHPCurrent + gv_AutoControlled_RHPDelta;
                    if (lv_cmp >= 100.0) { lv_cmp = 100.0; }
                    lv_RHPCrit = lv_cmp > 96.0;
                    if (lv_RHPCrit) { lv_construct += gv_RedText; }
                    lv_construct += FixedToString(lv_cmp, 1) + "RH%";
                    //if (lv_RHPCrit) { lv_construct += lv_ck; }  //End of Text, no sense currently.
                    
                    if (lv_dialogLabel != -1) { DialogControlDestroy(lv_dialogLabel); }
                    lv_dialogLabel = libNtve_gf_CreateDialogItemLabel(lv_displayCotainer, 250, 56, c_anchorCenter, 0, 0, StringToText(lv_construct), ColorWithAlpha(0.0, 0.0, 0.0, 0.0), lv_firstprint, 1.5);
                    
                    if (lv_firstprint) { Wait(1.5, c_timeGame); }
                    Wait(lv_EventHandlerLoopPeriod, c_timeGame);
                    lv_currentEventsMaxDisplayTime -= lv_EventHandlerLoopPeriod;
                    lv_firstprint = false;
                }
            }
            else if (lv_ran == 2)
            {
                lv_firstprint = true;
                lv_currentEventsMaxDisplayTime = 5.0;
                while (lv_currentEventsMaxDisplayTime > 0.0 && gf_ReturnHighestPriorityEventsLevel() <= 1)
                {
                    //Eval Color
                    if ((gv_infestationLevel < gv_ILAllow / 4 * 1))
                    {
                        lv_construct = gv_GreenText;
                    }
                    else if ((gv_infestationLevel < gv_ILAllow / 4 * 2))
                    {
                        lv_construct = "<c val=\"FFFF00\">";
                    }
                    else
                    {
                        if ((gv_infestationLevel < gv_ILAllow / 4 * 3))
                        {
                            lv_construct = "<c val=\"FE33FF\">";
                        }
                        else
                        {
                            if ((gv_infestationLevel < gv_ILAllow))
                            {
                                lv_construct = "<c val=\"FF8000\">";
                            }
                            else
                            {
                                lv_construct = gv_RedText;
                            }
                        }
                    }
                    lv_construct += lv_DefaultFont + "AO Infestation Level:" + "</n>" + gv_FCTH + lv_construct + IntToString(gv_infestationLevel) + " / " + IntToString(gv_ILAllow);
                    if (lv_dialogLabel != -1) { DialogControlDestroy(lv_dialogLabel); }
                    lv_dialogLabel = libNtve_gf_CreateDialogItemLabel(lv_displayCotainer, 250, 56, c_anchorCenter, 0, 0, StringToText(lv_construct), ColorWithAlpha(0.0, 0.0, 0.0, 0.0), lv_firstprint, 1.0);
                    
                    if (lv_firstprint) { Wait(1.0, c_timeGame); }
                    Wait(lv_EventHandlerLoopPeriod, c_timeGame);
                    lv_currentEventsMaxDisplayTime -= lv_EventHandlerLoopPeriod;
                    lv_firstprint = false;
                }
            }
            else if (lv_ran == -1)
            {
                lv_i = gf_GetPriority1LevelEventRandomIndex();
                if (lv_i < 0) { continue; }
                lv_currentEventsMaxDisplayTime = 5.0;
                if (lv_dialogLabel != -1) { DialogControlDestroy(lv_dialogLabel); }
                lv_dialogLabel = libNtve_gf_CreateDialogItemLabel(lv_displayCotainer, 250, 56, c_anchorCenter, 0, 0, StringToText(lv_DefaultFont) + gv_EventsPool[lv_i].lv_EventText, ColorWithAlpha(0.0, 0.0, 0.0, 0.0), gv_EventsPool[lv_i].lv_writeout, gv_EventsPool[lv_i].lv_writeoutTime);
                while (lv_currentEventsMaxDisplayTime > 0.0 && gf_ReturnHighestPriorityEventsLevel() <= 1)
                {
                    Wait(lv_EventHandlerLoopPeriod, c_timeGame);
                    lv_currentEventsMaxDisplayTime -= lv_EventHandlerLoopPeriod;
                }
            }
        }
        Wait(0.125, c_timeGame); //Prevent Logic DeadLock
        //UnSync Clock Trim Perhaps.
    }
    return true;
}
void gt_EventRaiseController_Init()
{
    gt_EventRaiseController = TriggerCreate("gt_EventRaiseController_Func");
}
int gv_EventRaiseWritePointer;
int gv_EventLinearIndex = 100;
int gf_RaiseEvent(text lp_write, int lp_priority, fixed lp_lasttime)
{
    int lv_testcount;
    gv_EventLinearIndex += 1;
    do
    {
        gv_EventRaiseWritePointer = (gv_EventRaiseWritePointer + 1) % gv_EventPoolSize;
        lv_testcount += 1;
        if (lv_testcount >= gv_EventPoolSize)
        {
            return -1;
        }
    }
    while (gv_EventsPool[gv_EventRaiseWritePointer].lv_LinerIndex != 0);
    //Add it to Events Pool
    gv_EventsPool[gv_EventRaiseWritePointer].lv_Priority = lp_priority;
    gv_EventsPool[gv_EventRaiseWritePointer].lv_EventText = lp_write;
    gv_EventsPool[gv_EventRaiseWritePointer].lv_MsgLifeEnd = GameGetMissionTime() + lp_lasttime;
    gv_EventsPool[gv_EventRaiseWritePointer].lv_LinerIndex = gv_EventLinearIndex;
    //Make Other property to Default
    gv_EventsPool[gv_EventRaiseWritePointer].lv_writeout = false;
    gv_EventsPool[gv_EventRaiseWritePointer].lv_writeoutTime = 0.0;
    gv_EventsPool[gv_EventRaiseWritePointer].lv_token = "";
    gv_EventsPool[gv_EventRaiseWritePointer].lv_twinkleperiod = 0;
    return gv_EventRaiseWritePointer;
}
int gf_EventSetWriteOut(int lp_eventinpoolindex, bool lp_writeout, fixed lp_writeouttime)
{
    if (lp_eventinpoolindex < 0) { return lp_eventinpoolindex; }
    gv_EventsPool[lp_eventinpoolindex].lv_writeout = lp_writeout;
    gv_EventsPool[lp_eventinpoolindex].lv_writeoutTime = lp_writeouttime;
    return lp_eventinpoolindex;
}
int gf_EventSetToken(int lp_eventinpoolindex, string lp_token)
{
    if (lp_eventinpoolindex < 0) { return lp_eventinpoolindex; }
    gv_EventsPool[lp_eventinpoolindex].lv_token = lp_token;
    return lp_eventinpoolindex;
}
void gf_EventsPoolKillToken(string lp_token)
{
    int lv_i;
    fixed lv_currentMT = GameGetMissionTime();
    for (lv_i = 0; lv_i < gv_EventPoolSize; lv_i += 1)
    {
        if (gv_EventsPool[lv_i].lv_LinerIndex == 0) { continue; }
        if (gv_EventsPool[lv_i].lv_MsgLifeEnd < lv_currentMT)
        {
            gv_EventsPool[lv_i].lv_LinerIndex = 0;
            continue;
        }
        if (gv_EventsPool[lv_i].lv_token == lp_token)
        {
            gv_EventsPool[lv_i].lv_LinerIndex = 0;
        }
    }
}
void gf_EventsPoolPullBackTokenToLevel(string lp_token, int lp_level)
{
    int lv_i;
    fixed lv_currentMT = GameGetMissionTime();
    for (lv_i = 0; lv_i < gv_EventPoolSize; lv_i += 1)
    {
        if (gv_EventsPool[lv_i].lv_LinerIndex == 0) { continue; }
        if (gv_EventsPool[lv_i].lv_MsgLifeEnd < lv_currentMT)
        {
            gv_EventsPool[lv_i].lv_LinerIndex = 0;
            continue;
        }
        if (gv_EventsPool[lv_i].lv_token == lp_token && gv_EventsPool[lv_i].lv_Priority > lp_level)
        {
            gv_EventsPool[lv_i].lv_LinerIndex = 0;
        }
    }
}
int gf_EventSetTwinkle(int lp_eventinpoolindex, fixed lp_twinkleperiod)
{
    if (lp_eventinpoolindex < 0) { return lp_eventinpoolindex; }
    gv_EventsPool[lp_eventinpoolindex].lv_twinkleperiod = lp_twinkleperiod;
    return lp_eventinpoolindex;
}
int gf_PrintEvent(int lp_eventinpoolindex)
{
    if (lp_eventinpoolindex < 0) { return lp_eventinpoolindex; }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, gv_EventsPool[lp_eventinpoolindex].lv_EventText);
    return lp_eventinpoolindex;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Message Notfy
//--------------------------------------------------------------------------------------------------
const string gv_DefaultNotfyTextFont = "<s val=\"ModCenterSize40Bold\">";
const string gv_DefaultNewChapterNotfyTitleTextFont = "<s val=\"ModRightSize40\">";
const string gv_DefaultNewChapterNotfyDescriptionTextFont = "<s val=\"ModCenterSize28\">";
trigger auto_gf_SendMessageNotfy_Trigger = null;
string auto_gf_SendMessageNotfy_lp_msg;
void gf_SendMessageNotfy(string lp_msg)
{
    auto_gf_SendMessageNotfy_lp_msg = lp_msg;
    if (auto_gf_SendMessageNotfy_Trigger == null) {
        auto_gf_SendMessageNotfy_Trigger = TriggerCreate("auto_gf_SendMessageNotfy_TriggerFunc");
    }
    TriggerExecute(auto_gf_SendMessageNotfy_Trigger, false, false);
}
bool auto_gf_SendMessageNotfy_TriggerFunc (bool testConds, bool runActions)
{
    string lp_msg;
    int lv_frameK;
    int lv_frameK2;
    int lv_frame;
    // Automatic Variable Declarations
    // Variable Initialization
    lp_msg = auto_gf_SendMessageNotfy_lp_msg;
    lv_frameK = c_invalidDialogControlId;
    lv_frameK2 = c_invalidDialogControlId;
    lv_frame = c_invalidDialogId;
    // Actions
    if (!runActions) {
        return true;
    }
    DialogCreate(500, 200, c_anchorTop, 0, 100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_frame = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 70, c_anchorCenter, 0, -27, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_numberfieldselectedframe.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_frameK = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 0.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 345, 100, c_anchorCenter, 10, 0, StringToText(gv_DefaultNotfyTextFont+lp_msg), ColorWithAlpha(0,0,0,0), false, 0.5);
    lv_frameK2 = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.7, 0.0);
    SoundPlayForPlayer(SoundLink("UI_SoA_SpellClick", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(lv_frameK2, PlayerGroupAll(), 0.9, 100.0);
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(lv_frameK2, PlayerGroupAll(), 0.7, 0.0);
    SoundPlayForPlayer(SoundLink("UI_SoA_SpellClick", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(lv_frameK2, PlayerGroupAll(), 0.9, 100.0);
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(lv_frameK2, PlayerGroupAll(), 0.7, 0.0);
    SoundPlayForPlayer(SoundLink("UI_SoA_SpellClick", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(lv_frameK, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(lv_frameK2, PlayerGroupAll(), 0.5, 100.0);
    Wait(1.0, c_timeGame);
    DialogDestroy(lv_frame);
    return true;
}
trigger auto_gf_NewChapterNotfy_Trigger = null;
string auto_gf_NewChapterNotfy_lp_maintitle;
string auto_gf_NewChapterNotfy_lp_description;
void gf_NewChapterNotfy(string lp_maintitle, string lp_description)
{
    auto_gf_NewChapterNotfy_lp_maintitle = lp_maintitle;
    auto_gf_NewChapterNotfy_lp_description = lp_description;
    if (auto_gf_NewChapterNotfy_Trigger == null) {
        auto_gf_NewChapterNotfy_Trigger = TriggerCreate("auto_gf_NewChapterNotfy_TriggerFunc");
    }
    TriggerExecute(auto_gf_NewChapterNotfy_Trigger, false, false);
}
bool auto_gf_NewChapterNotfy_TriggerFunc (bool testConds, bool runActions)
{
    // Variable Declarations
    string lp_maintitle;
    string lp_description;
    int lv_frame;
    
    // Automatic Variable Declarations
    // Variable Initialization
    lp_maintitle = auto_gf_NewChapterNotfy_lp_maintitle;
    lp_description = auto_gf_NewChapterNotfy_lp_description;
    lv_frame = c_invalidDialogId;
    DialogCreate(700, 1200, c_anchorCenter, 0, -100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_frame = DialogLastCreated();
    SoundPlayForPlayer(SoundLink("UI_Rewind_OnClick", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateDialogItemImage(lv_frame, 34, 26, c_anchorCenter, 0, -350, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_chatpanel_whispercategoryarrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeAdd);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    Wait(0.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_TechConsole_Popup", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateDialogItemButton(lv_frame, 400, 90, c_anchorCenter, 0, -295, StringToText(""), StringToText(gv_DefaultNewChapterNotfyTitleTextFont+lp_maintitle), "Assets\\Textures\\ui_merc_purchasebutton_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_merc_purchasebutton_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    Wait(0.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_TechConsole_Popup", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateDialogItemImage(lv_frame, 324, 164, c_anchorCenter, 0, -245, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_coop_commander_nameplate.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeAdd);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    Wait(0.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_TechConsole_Popup", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateDialogItemImage(lv_frame, 228, 188, c_anchorCenter, 0, -260, StringToText(""), "Assets\\Textures\\ui_glues_icons_ladder_master_0.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeAdd);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    Wait(0.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_TechConsole_Popup", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateDialogItemImage(lv_frame, 460, 208, c_anchorCenter, 0, -245, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_tournament_bracket_winner_textflare.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeAdd);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    Wait(0.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_TechConsole_Popup", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateDialogItemButton(lv_frame, 700, 50, c_anchorCenter, 0, -120, StringToText(""), StringToText(gv_DefaultNewChapterNotfyDescriptionTextFont+lp_description), "Assets\\Textures\\ui_help_frame_tips_checkbox_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_help_frame_tips_checkbox_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 25.0);
    Wait(5.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_Rewind", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    DialogSetTransparency(lv_frame, 10.0);
    Wait(0.05, c_timeGame);
    DialogSetTransparency(lv_frame, 20.0);
    Wait(0.05, c_timeGame);
    DialogSetTransparency(lv_frame, 30.0);
    Wait(0.05, c_timeGame);
    DialogSetTransparency(lv_frame, 40.0);
    Wait(0.05, c_timeGame);
    DialogSetTransparency(lv_frame, 50.0);
    Wait(0.05, c_timeGame);
    DialogSetTransparency(lv_frame, 60.0);
    Wait(0.05, c_timeGame);
    DialogSetTransparency(lv_frame, 70.0);
    Wait(0.05, c_timeGame);
    DialogSetTransparency(lv_frame, 80.0);
    Wait(0.05, c_timeGame);
    DialogSetTransparency(lv_frame, 90.0);
    Wait(0.05, c_timeGame);
    DialogDestroy(lv_frame);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Function Cut - UAC Ping an Unit Item
//--------------------------------------------------------------------------------------------------
trigger gt_PinganUnitItem;
unit[13][6] gv_save_pings;
bool[20] gv_pinghotkeycooldown;
//--------------------------------------------------------------------------------------------------
// Trigger: Ping an Unit/Item
//--------------------------------------------------------------------------------------------------
bool gt_PinganUnitItem_Func(bool testConds, bool runActions)
{
    // Variable Initialization
    int autoBE6018BE_ae;
    int autoBE6018BE_ai;
    int autoE920364A_ae;
    int autoE920364A_ai;
    int auto7EFF6C7A_ae;
    int auto7EFF6C7A_ai;
    int auto9B40781D_ae;
    int auto9B40781D_ai;
    // Variable Declarations
    unit lv_unit;
    bool lv_unit_type_item;
    point lv_unit_position;
    int lv_player;
    int lv_tt1;
    int lv_tt2;
    int lv_loopint;
    int lv_ping_free_tmp;
    // Variable Initialization
    lv_unit = EventPingUnit();
    lv_unit_position = UnitGetPosition(lv_unit);
    lv_player = EventPlayer();
    lv_tt1 = c_textTagNone;
    lv_tt2 = c_textTagNone;
    // Conditions
    if (testConds)
    {
        if (!((lv_unit != null)))
        {
            return false;
        }
        if (!(((libNtve_gf_PlayerIsEnemy(EventPlayer(), UnitGetOwner(lv_unit), libNtve_ge_PlayerRelation_Ally) == true) || (libNtve_gf_PlayerIsEnemy(EventPlayer(), UnitGetOwner(lv_unit), libNtve_ge_PlayerRelation_Neutral) == true))))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    autoBE6018BE_ae = 5;
    autoBE6018BE_ai = 1;
    lv_loopint = 1;
    for (; ((autoBE6018BE_ai >= 0 && lv_loopint <= autoBE6018BE_ae) || (autoBE6018BE_ai <= 0 && lv_loopint >= autoBE6018BE_ae)); lv_loopint += autoBE6018BE_ai)
    {
        if ((gv_save_pings[EventPlayer()][lv_loopint] == null))
        {
            lv_ping_free_tmp = lv_loopint;
            break;
        }
    }
    if ((lv_ping_free_tmp == 0))
    {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringToText("You can only designate "  + "five" +  " items at the same time"), SoundLink("UI_GenericError", -1));
        return true;
    }
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        autoE920364A_ae = 5;
        autoE920364A_ai = 1;
        lv_loopint = 1;
        for (; ((autoE920364A_ai >= 0 && lv_loopint <= autoE920364A_ae) || (autoE920364A_ai <= 0 && lv_loopint >= autoE920364A_ae)); lv_loopint += autoE920364A_ai)
        {
            if ((gv_save_pings[PlayerGroupLoopCurrent()][lv_loopint] == lv_unit))
            {
                libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringToText("This Unit/Item is already designated!"), SoundLink("UI_GenericError", -1));
                return true;
            }
        }
    }
    PlayerGroupLoopEnd();
    gv_save_pings[EventPlayer()][lv_ping_free_tmp] = lv_unit;
    if ((UnitTypeTestFlag(UnitGetType(lv_unit), c_unitFlagUncommandable) == true))
    {
        lv_unit_type_item = true;
    }
    if ((UnitGetOwner(lv_unit) > 0) && (UnitGetOwner(lv_unit) < 13))
    {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringToText(" : <c val=\"FFF200\">") + UnitTypeGetName(UnitGetType(lv_unit)) + StringToText(" (") + TextWithColor(PlayerName(UnitGetOwner(lv_unit)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lv_unit), false))) + StringToText(") " + " Designated." + "</c>")));
    }
    else
    {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringToText(" : <c val=\"FFF200\">") + UnitTypeGetName(UnitGetType(lv_unit)) + StringToText("</c>" + " Designated.")));
    }
    SoundPlayForPlayer(SoundLink("UI_BNet_Promote", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TextTagCreate(StringToText("<img path=\"designated.dds\"/>"), 24, UnitGetPosition(lv_unit), 1.5, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), lv_unit, 2.0);
    lv_tt1 = TextTagLastCreated();
    if ((UnitGetOwner(lv_unit) > 0) && (UnitGetOwner(lv_unit) < 13))
    {
        TextTagCreate((StringToText("<s val=\"ModCenterSize16Bold\"><c val=\"00FF00\">") + UnitTypeGetName(UnitGetType(lv_unit)) + StringToText("</c></s>") + StringToText("(") + TextWithColor(PlayerName(UnitGetOwner(lv_unit)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lv_unit), false))) + StringToText(")")), 18, UnitGetPosition(lv_unit), 1.5, true, false, PlayerGroupAll());
    }
    else
    {
        TextTagCreate((StringToText("<s val=\"ModCenterSize16Bold\"><c val=\"00FF00\">") + UnitTypeGetName(UnitGetType(lv_unit)) + StringToText("</c></s>")), 18, UnitGetPosition(lv_unit), 1.5, true, false, PlayerGroupAll());
    }
    TextTagAttachToUnit(TextTagLastCreated(), lv_unit, 2.55);
    lv_tt2 = TextTagLastCreated();
    auto7EFF6C7A_ae = 12;
    auto7EFF6C7A_ai = 1;
    lv_loopint = 1;
    for (; ((auto7EFF6C7A_ai >= 0 && lv_loopint <= auto7EFF6C7A_ae) || (auto7EFF6C7A_ai <= 0 && lv_loopint >= auto7EFF6C7A_ae)); lv_loopint += auto7EFF6C7A_ai)
    {
        UIAlertUnit("Trigger", lv_loopint, UnitTypeGetName(UnitGetType(lv_unit)), null, lv_unit);
    }
    auto9B40781D_ae = 20;
    auto9B40781D_ai = 1;
    lv_loopint = 1;
    for (; ((auto9B40781D_ai >= 0 && lv_loopint <= auto9B40781D_ae) || (auto9B40781D_ai <= 0 && lv_loopint >= auto9B40781D_ae)); lv_loopint += auto9B40781D_ai)
    {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lv_unit) == false))
        {
            break;
        }
        if ((lv_unit_type_item == true) && (lv_unit_position != UnitGetPosition(lv_unit)))
        {
            break;
        }
    }
    TextTagDestroy(lv_tt1);
    TextTagDestroy(lv_tt2);
    gv_save_pings[EventPlayer()][lv_ping_free_tmp] = null;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PinganUnitItem_Init()
{
    gt_PinganUnitItem = TriggerCreate("gt_PinganUnitItem_Func");
    TriggerAddEventPing(gt_PinganUnitItem, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Pulse Screen
//--------------------------------------------------------------------------------------------------
void gf_PulseScreen(bool lp_playSound)
{
    //if (lp_playSound) { SoundPlay(SoundLink("Psi_StructurePowerUp2", -1), PlayerGroupAll(), 100.0, 0.0); }
    CinematicFade(false, 0.2, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: T1 Damage Dealt Display Global (T1DD)
//--------------------------------------------------------------------------------------------------
trigger gt_T1DamageDealtDisplayGlobal;
//--------------------------------------------------------------------------------------------------
// Trigger: T1 Damage Dealt Display Global
//--------------------------------------------------------------------------------------------------
bool gt_T1DamageDealtDisplayGlobal_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    fixed lv_damage;
    int lv_sourceplayer;
    text lv_font;
    int lv_colortest;
    text lv_cons;
    // Variable Initialization
    lv_damage = EventUnitDamageAmount();
    lv_sourceplayer = EventUnitDamageSourcePlayer();
    // Conditions
    if (testConds)
    {
        if (!((lv_damage > 6.0)))
        {
            return false;
        }
        if ((lv_sourceplayer > 12) || (lv_sourceplayer < 1))
        {
            return false;
        }
        if (!(UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    lv_font = StringToText("<s val = \"ColorDamage_Kicker_2\">");
    lv_colortest = FixedToInt(lv_damage);
    lv_cons = StringToText("-") + IntToText(lv_colortest);
    if (lv_colortest < 220)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(0.00, 100.00, 0.00)), 30, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else if (lv_colortest < 680)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(42.50, 42.50, 100.00)), 30, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else if (lv_colortest < 1600)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(100.00, 40.00, 40.00)), 30, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else if (lv_colortest < 4600)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(100.00, 0.00, 0.00)), 30, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else if (lv_colortest < 9200)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(100.00, 0.00, 100.00)), 30, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else
    {
        //9200+
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(100.00, 0.00, 60.00)), 30, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.3);
    TextTagSetVelocity(TextTagLastCreated(), 1.1, RandomInt(1, 180));
    TextTagSetGravity(TextTagLastCreated(), RandomFixed(-5.0, -1.0));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_T1DamageDealtDisplayGlobal_Init()
{
    gt_T1DamageDealtDisplayGlobal = TriggerCreate("gt_T1DamageDealtDisplayGlobal_Func");
    //TriggerEnable(gt_T1DamageDealtDisplayGlobal, false);
    TriggerAddEventUnitDamaged(gt_T1DamageDealtDisplayGlobal, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Real CriticalShot Damage Display (RCDD)
//--------------------------------------------------------------------------------------------------
trigger gt_rCDD;
//--------------------------------------------------------------------------------------------------
// Trigger: Real Crit Damage Display
//--------------------------------------------------------------------------------------------------
bool gt_rCDD_Func (bool testConds, bool runActions) {
    text lv_font;
    text lv_cons;
    fixed lv_colortest;
    int lv_angle;
    // Conditions
    if (testConds) { }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_cons = StringToText("+") + FixedToText(EventUnitDamageAmount(), 0);
    lv_colortest = FixedToInt(EventUnitDamageAmount());
    //Origin FontSize = 24;
    lv_font = StringToText("<s val = \"ColorDamage_Kicker_2\">");
    if (lv_colortest < 220)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(0.00, 100.00, 0.00)), 30, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else if (lv_colortest < 680)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(42.50, 42.50, 100.00)), 30, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else if (lv_colortest < 1370)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(100.00, 40.00, 40.00)), 30, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else if (lv_colortest < 2820)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(100.00, 0.00, 0.00)), 30, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else if (lv_colortest < 4960)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(100.00, 0.00, 100.00)), 30, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else
    {
        //4960+
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(100.00, 0.00, 60.00)), 30, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, false, PlayerGroupAll());
    }
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagAttachToUnit(TextTagLastCreated(), EventUnitDamageSourceUnit(), 1.0);
    TextTagSetTextShadow(TextTagLastCreated(), false);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.25);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.5);
    //-----------------------------------------------------------
        if (lv_colortest >= 500)
        {   //Normal Damage
            lv_angle = RandomInt(80, 100);
            //TextTagSetVelocity(TextTagLastCreated(), 0.2, 0.0);
            TextTagSetVelocity(TextTagLastCreated(), 1.4, lv_angle);
            TextTagSetGravity(TextTagLastCreated(), -1.0);
        }
        else
        {
            //Low Damage
            lv_angle = RandomInt(70, 110);
            TextTagSetVelocity(TextTagLastCreated(), 1.0, lv_angle);
            TextTagSetGravity(TextTagLastCreated(), -1.0);
        }
    //-----------------------------------------------------------
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_rCDD_Init () {
    gt_rCDD = TriggerCreate("gt_rCDD_Func");
    TriggerEnable(gt_rCDD, gv_rCDDDefaultStats);
    TriggerAddEventUnitDamaged(gt_rCDD, null, c_unitDamageTypeAny, c_unitDamageEither, "CriticalShotBonus");
    TriggerAddEventUnitDamaged(gt_rCDD, null, c_unitDamageTypeAny, c_unitDamageEither, "CriticalShotBonusFixed");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Advanced Infestation Level Display
//--------------------------------------------------------------------------------------------------
trigger gt_AdvancedInfestationLevelDisplay;
bool gv_ILDisplayRefreshPause;
int gv_fakeILDelta;
//--------------------------------------------------------------------------------------------------
// Trigger: Advanced Infestation Level Display
//--------------------------------------------------------------------------------------------------
bool gt_AdvancedInfestationLevelDisplay_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    text lv_temptext;
    // Variable Initialization
    // Actions
    if (!runActions)
    {
        return true;
    }
    if (gv_ILDisplayRefreshPause) { return true; }
    if ((gv_infestationLevel + gv_fakeILDelta < gv_ILAllow / 4 * 1))
    {
        lv_temptext = StringToText("<c val=\"80ff80\">");
    }
    else if ((gv_infestationLevel + gv_fakeILDelta < gv_ILAllow / 4 * 2))
    {
        lv_temptext = StringExternal("Param/Value/7C4A618F");
    }
    else
    {
        if ((gv_infestationLevel + gv_fakeILDelta < gv_ILAllow / 4 * 3))
        {
            lv_temptext = StringToText("<c val=\"FE33FF\">");
        }
        else
        {
            if ((gv_infestationLevel + gv_fakeILDelta < gv_ILAllow))
            {
                lv_temptext = StringExternal("Param/Value/F845DCEA");
            }
            else
            {
                lv_temptext = StringExternal("Param/Value/0CBC54D9");
            }
        }
    }
    libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[6], (StringExternal("Param/Value/B7BA1E26") + lv_temptext + IntToText(gv_infestationLevel + gv_fakeILDelta) + StringToText("/") + IntToText(gv_ILAllow)), PlayerGroupAll());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AdvancedInfestationLevelDisplay_Init()
{
    gt_AdvancedInfestationLevelDisplay = TriggerCreate("gt_AdvancedInfestationLevelDisplay_Func");
    TriggerEnable(gt_AdvancedInfestationLevelDisplay, false);
    TriggerAddEventPlayerEffectUsed(gt_AdvancedInfestationLevelDisplay, 14, "InfestationLevel22");
    TriggerAddEventPlayerEffectUsed(gt_AdvancedInfestationLevelDisplay, 14, "InfestationLevel12");
    TriggerAddEventPlayerEffectUsed(gt_AdvancedInfestationLevelDisplay, 14, "InfestationLevel2");
    TriggerAddEventPlayerEffectUsed(gt_AdvancedInfestationLevelDisplay, 14, "InfestationLevel1");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Twinkle Progress Bar
//--------------------------------------------------------------------------------------------------
void gf_TwinkleProgressBar(int lp_ProgressControlId)
{
    DialogSetTransparency(lp_ProgressControlId, 15.0);
    Wait(0.0625, c_timeGame);
    DialogSetTransparency(lp_ProgressControlId, 60.0);
    Wait(0.0625, c_timeGame);
    DialogSetTransparency(lp_ProgressControlId, 40.0);
    Wait(0.125, c_timeGame);
    DialogSetTransparency(lp_ProgressControlId, 60.0);
    Wait(0.0625, c_timeGame);
    DialogSetTransparency(lp_ProgressControlId, 70.0);
    Wait(0.0625, c_timeGame);
    DialogSetTransparency(lp_ProgressControlId, 45.0);
    Wait(0.0625, c_timeGame);
    DialogSetTransparency(lp_ProgressControlId, 1.0);
    Wait(0.125, c_timeGame);
    DialogSetTransparency(lp_ProgressControlId, 20.0);
    Wait(0.0625, c_timeGame);
    DialogSetTransparency(lp_ProgressControlId, 1.0);
    Wait(0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BDSD & AT Empty
//--------------------------------------------------------------------------------------------------
timer gv_HEATImpact;
bool gv_ATNotEmptyCurrent;
timer gv_ATImpact;
fixed gv_BigDamageSpellDamageCurrent;
int gv_BigDamageSpellDamageSourcePlayer;
trigger gt_BigDamageSpellDamageCount;
trigger gt_BigDamageSpellDamageDisplay;
trigger gt_ATEmpty;
bool gf_isHighRiskZombie(unit lp_unit);
//--------------------------------------------------------------------------------------------------
// Trigger: HE AT Damage Display
//--------------------------------------------------------------------------------------------------
bool gf_isHighRiskZombie(unit lp_unit)
{
    string lp_itemtype;
    lp_itemtype = UnitGetType(lp_unit);
    if((lp_itemtype == "Licker")
    || (lp_itemtype == "Krill")
    || (lp_itemtype == "ZombieImpaler")
    || (lp_itemtype == "AcidVore")
    || (lp_itemtype == "ArchVile")
    || (lp_itemtype == "Hopper")
    || (lp_itemtype == "Parasite")
    || (lp_itemtype == "StalkerZombie")
    || (lp_itemtype == "Pooch")
    || (lp_itemtype == "Morbus")
    || (lp_itemtype == "Horror")
    || (lp_itemtype == "ZombieCarrier")
    || (lp_itemtype == "RongYanChong")
    || (lp_itemtype == "RongYanChongM")
    || (lp_itemtype == "RongYanChongS")
    || (lp_itemtype == "ZombieWraith")) { return true; }
    return false;
}
bool gt_BigDamageSpellDamageDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colortest;
    text lv_font;
    text lv_cons;
    int lv_angle;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    
    lv_cons = FixedToText(gv_BigDamageSpellDamageCurrent, 0);
    lv_colortest = FixedToInt(gv_BigDamageSpellDamageCurrent);
    gv_BigDamageSpellDamageCurrent = 0.0;
    //Origin FontSize = 24;
    if (gv_BigDamageSpellDamageSourcePlayer < 0) { return true; }
    if (gv_BigDamageSpellDamageSourcePlayer > 12) { return true; }
    if (lv_colortest < 5) { return true; }
    lv_font = StringToText("<s val = \"ColorDamage_Kicker_2\">");
    if (lv_colortest < 4096)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(0.00, 100.00, 0.00)), 30, UnitGetPosition(gv_playerHeroes[gv_BigDamageSpellDamageSourcePlayer]), 1.0, true, false, PlayerGroupAll());
    }
    else if (lv_colortest < 8192)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(42.50, 42.50, 100.00)), 30, UnitGetPosition(gv_playerHeroes[gv_BigDamageSpellDamageSourcePlayer]), 1.0, true, false, PlayerGroupAll());
    }
    else if (lv_colortest < 16384)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(100.00, 40.00, 40.00)), 30, UnitGetPosition(gv_playerHeroes[gv_BigDamageSpellDamageSourcePlayer]), 1.0, true, false, PlayerGroupAll());
    }
    else if (lv_colortest < 26000)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(100.00, 0.00, 0.00)), 30, UnitGetPosition(gv_playerHeroes[gv_BigDamageSpellDamageSourcePlayer]), 1.0, true, false, PlayerGroupAll());
    }
    else if (lv_colortest < 42000)
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(100.00, 0.00, 100.00)), 30, UnitGetPosition(gv_playerHeroes[gv_BigDamageSpellDamageSourcePlayer]), 1.0, true, false, PlayerGroupAll());
    }
    else
    {
        TextTagCreate(lv_font + TextWithColor(lv_cons, Color(100.00, 0.00, 60.00)), 30, UnitGetPosition(gv_playerHeroes[gv_BigDamageSpellDamageSourcePlayer]), 1.0, true, false, PlayerGroupAll());
    }
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTextShadow(TextTagLastCreated(), false);
    TextTagAttachToUnit(TextTagLastCreated(), gv_playerHeroes[gv_BigDamageSpellDamageSourcePlayer], 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.3);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.5);
    lv_angle = RandomInt(80, 100);
    //TextTagSetVelocity(TextTagLastCreated(), 0.2, 0.0);
    TextTagSetVelocity(TextTagLastCreated(), 1.4, lv_angle);
    TextTagSetGravity(TextTagLastCreated(), -1.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BigDamageSpellDamageDisplay_Init () {
    gt_BigDamageSpellDamageDisplay = TriggerCreate("gt_BigDamageSpellDamageDisplay_Func");
    //TriggerEnable(gt_BigDamageSpellDamageDisplay, false);
    TriggerAddEventTimer(gt_BigDamageSpellDamageDisplay, gv_HEATImpact);
}
//--------------------------------------------------------------------------------------------------
// Trigger: HE AT Damage Count
//--------------------------------------------------------------------------------------------------
bool gt_BigDamageSpellDamageCount_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_BigDamageSpellDamageSourcePlayer = EventUnitDamageSourcePlayer();
    TimerStart(gv_HEATImpact, 0.0625, false, c_timeGame);
    gv_BigDamageSpellDamageCurrent += EventUnitDamageAmount();
    if (EventUnitDamageEffect() == "ATDamage1" || EventUnitDamageEffect() == "ATDamage2" || EventUnitDamageEffect() == "ATDamage3" || EventUnitDamageEffect() == "ATDamage4")
    {
        if (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) || gf_isHighRiskZombie(EventUnit())) { gv_ATNotEmptyCurrent = true; }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BigDamageSpellDamageCount_Init () {
    gt_BigDamageSpellDamageCount = TriggerCreate("gt_BigDamageSpellDamageCount_Func");
    //TriggerEnable(gt_BigDamageSpellDamageCount, false);
    TriggerAddEventUnitDamaged(gt_BigDamageSpellDamageCount, null, c_unitDamageTypeAny, c_unitDamageEither, "ATDamage1");
    TriggerAddEventUnitDamaged(gt_BigDamageSpellDamageCount, null, c_unitDamageTypeAny, c_unitDamageEither, "ATDamage2");
    TriggerAddEventUnitDamaged(gt_BigDamageSpellDamageCount, null, c_unitDamageTypeAny, c_unitDamageEither, "ATDamage3");
    TriggerAddEventUnitDamaged(gt_BigDamageSpellDamageCount, null, c_unitDamageTypeAny, c_unitDamageEither, "ATDamage4");
    TriggerAddEventUnitDamaged(gt_BigDamageSpellDamageCount, null, c_unitDamageTypeAny, c_unitDamageEither, "HEDamage1");
    TriggerAddEventUnitDamaged(gt_BigDamageSpellDamageCount, null, c_unitDamageTypeAny, c_unitDamageEither, "HEDamage2");
    TriggerAddEventUnitDamaged(gt_BigDamageSpellDamageCount, null, c_unitDamageTypeAny, c_unitDamageEither, "HEDamage3");
    TriggerAddEventUnitDamaged(gt_BigDamageSpellDamageCount, null, c_unitDamageTypeAny, c_unitDamageEither, "HEDamage4");
    TriggerAddEventUnitDamaged(gt_BigDamageSpellDamageCount, null, c_unitDamageTypeAny, c_unitDamageEither, "CallforFirePLDamage");
    TriggerAddEventUnitDamaged(gt_BigDamageSpellDamageCount, null, c_unitDamageTypeAny, c_unitDamageEither, "RailGunDamage");
    TriggerAddEventUnitDamaged(gt_BigDamageSpellDamageCount, null, c_unitDamageTypeAny, c_unitDamageEither, "ClusterRocketShockerDmg");
    TriggerAddEventUnitDamaged(gt_BigDamageSpellDamageCount, null, c_unitDamageTypeAny, c_unitDamageEither, "SatchelExplosionDamageCE");
}
//--------------------------------------------------------------------------------------------------
// Trigger: AT Empty
//--------------------------------------------------------------------------------------------------
bool gt_ATEmpty_Func (bool testConds, bool runActions) {
    fixed lv_distance;
    bool lv_skip;
    text lv_unitname;
    lv_skip = true;
    lv_distance = DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    // Actions
    if (!runActions) {
        return true;
    }
    
    lv_distance /= 10.0;
    lv_distance += 4.0;
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), lv_distance), UnitFilter(0, 0, 0, 0), 0));
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        if (!UnitIsAlive(UnitGroupLoopCurrent())) { continue; }
        if (!UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) && !gf_isHighRiskZombie(UnitGroupLoopCurrent())) { continue; }
        if (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) > 1.5) 
        {
            lv_skip = false;
            lv_unitname = UnitGetName(UnitGroupLoopCurrent());
            break;
        }
    }
    UnitGroupLoopEnd();
    if (lv_skip) { return true; }
    Wait(0.0625, c_timeGame);
    if (gv_ATNotEmptyCurrent) { gv_ATNotEmptyCurrent = false; return true; }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Oh no! ")+StringToText("<c val=\"80ff80\">")+PlayerName(EventPlayer())+StringToText("</c>"+" shot his "+"AT at a ") + lv_unitname + StringToText("<c val=\"ff1212\">"+" ,but missed"+"!"));
    Wait(0.5, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Maybe next time?"));
    
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ATEmpty_Init () {
    gt_ATEmpty = TriggerCreate("gt_ATEmpty_Func");
    //TriggerEnable(gt_ATEmpty, false);
    TriggerAddEventPlayerEffectUsed(gt_ATEmpty, c_playerAny, "ATDamage1");
    TriggerAddEventPlayerEffectUsed(gt_ATEmpty, c_playerAny, "ATDamage2");
    TriggerAddEventPlayerEffectUsed(gt_ATEmpty, c_playerAny, "ATDamage3");
    TriggerAddEventPlayerEffectUsed(gt_ATEmpty, c_playerAny, "ATDamage4");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Tier 3 Count
//--------------------------------------------------------------------------------------------------
trigger gt_Tier3Count;
//--------------------------------------------------------------------------------------------------
// Trigger: Tier 3 Count
//--------------------------------------------------------------------------------------------------
text gf_drawProgressBarAsText(int lp_length, int lp_current, int lp_max, string lp_fillrgb, string lp_fillemptyrgb)
{
    fixed lv_rate;
    int lv_draw;
    string lv_fillrgb;
    string lv_fillemptyrgb;
    string lv_tmpcons;
    int lv_i;
    int lp_locklength;
    
    lp_locklength = lp_length;
    lv_fillrgb = "<c val=\"" + lp_fillrgb + "\">";
    lv_fillemptyrgb = "<c val=\"" + lp_fillemptyrgb + "\">";
    lv_rate = IntToFixed(lp_current) / IntToFixed(lp_max);
    lv_draw = FixedToInt(lv_rate * IntToFixed(lp_length));
    lv_tmpcons = "<s val=\"CNDefaultText\">"+lv_fillrgb;
    if (lv_draw <= lp_length)
    {
        for (lv_i = 0; lv_i < lv_draw; lv_i += 1)
        {
            lv_tmpcons += "|";
            lp_length -= 1;
        }
    }
    else
    {
        for (lv_i = 0; lv_i < lp_locklength * 2 - lv_draw; lv_i += 1)
        {
            lv_tmpcons += "|";
            lp_length -= 1;
        }
        lv_tmpcons += "</c>" + "<c val=\"ff22ff\">";
        while (lp_length > 0)
        {
            lv_tmpcons += "|";
            lp_length -= 1;
        }
        return StringToText(lv_tmpcons);
    }
    lv_tmpcons += "</c>" + lv_fillemptyrgb;
    while (lp_length > 0)
    {
        lv_tmpcons += "|";
        lp_length -= 1;
    }
    return StringToText(lv_tmpcons);
}
bool gt_Tier3Count_Func(bool testConds, bool runActions)
{
    int lv_Tier3CountDialog;
    int[4] lv_Tier3CountDialogItems;
    // Conditions
    if (testConds)
    {
        
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    DialogCreate(400, 100, c_anchorTopRight, 10, 20, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorTopLeft, 0, 0, StringToText(""), "UI\\beginning_background.dds", c_triggerImageTypeBorder, false, Color(90,100,90), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 125, DialogGetHeight(DialogLastCreated()), c_anchorTopLeft, 0, 0, StringToText(""), "UI\\save_border_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_Tier3CountDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 85, c_anchorCenter, 20, 20, StringToText("<s val=\"CNDefaultText\">Tier 2/3 Unit Count"), ColorWithAlpha(0,0,0,0), false, 0.0);
    lv_Tier3CountDialogItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 130, 85, c_anchorLeft, 32, 40, StringToText("<s val=\"CNDefaultText\">Num."), Color(149*100/255,150*100/255,151*100/255), false, 0.0);
    lv_Tier3CountDialogItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 130, 85, c_anchorLeft, 327, 40, StringToText(""), Color(149*100/255,150*100/255,151*100/255), false, 0.0);
    lv_Tier3CountDialogItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 340, 75, c_anchorCenter, 45, 34, StringToText("<s val=\"CNDefaultText\">-------------------------------------------"), ColorWithAlpha(0,0,0,0), false, 0.0);
    lv_Tier3CountDialogItems[3] = DialogControlLastCreated();
    Wait(1.0, c_timeGame);
    while (!gv_gameOver)
    {
        libNtve_gf_SetDialogItemText(lv_Tier3CountDialogItems[2], StringToText("<s val=\"CNDefaultText\">") + IntToText(PlayerGetPropertyInt(14, c_playerPropSuppliesUsed)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lv_Tier3CountDialogItems[3], gf_drawProgressBarAsText(52, PlayerGetPropertyInt(14, c_playerPropSuppliesUsed), gv_undeadSupplyCap, "ff0000", "80ff80"), PlayerGroupAll());
        Wait(0.413, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Tier3Count_Init()
{
    gt_Tier3Count = TriggerCreate("gt_Tier3Count_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Item Destroyed
//--------------------------------------------------------------------------------------------------
trigger gt_ItemDes;
//--------------------------------------------------------------------------------------------------
// Trigger: Item Des
//--------------------------------------------------------------------------------------------------
bool gt_ItemDes_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    unit lv_item;
    int lv_exeplayer;
    text lv_itemname;
    int lv_times;
    string lv_unittype;
    // Variable Initialization
    lv_item = EventUnit();
    lv_exeplayer = UnitGetOwner(libNtve_gf_KillingUnit());
    lv_itemname = UnitGetName(EventUnit());
    lv_unittype = UnitGetType(lv_item);
    // Conditions
    if (lv_exeplayer > 15)
    {
        return false;
    }
    if (testConds)
    {
        if (!(PlayerGetAlliance(lv_exeplayer, c_allianceIdPassive, UnitGetOwner(lv_item))))
        {
            return false;
        }
        if (!(((lv_unittype == "KevlarBodyArmor") || ((lv_unittype == "MK44SentryGun") && (UnitGetOwner(lv_item) != 14) && (UnitGetOwner(lv_item) != 15)) || (lv_unittype == "OPA") || (lv_unittype == "ShieldGenerator") || (lv_unittype == "BioSuit") || (lv_unittype == "SPCS") || (lv_unittype == "HK42") || (lv_unittype == "StynerBR3") || (lv_unittype == "SOFAR") || (lv_unittype == "ATLASX50") || (lv_unittype == "IDMR2") || (lv_unittype == "XR900") || (lv_unittype == "M92Torrent") || (lv_unittype == "M41SAW") || (lv_unittype == "M241MMG") || (lv_unittype == "M135Minigun") || (lv_unittype == "ISS7") || (lv_unittype == "AA12") || (lv_unittype == "M1014") || (lv_unittype == "D20LaserRifle") || (lv_unittype == "IPR") || (lv_unittype == "PR34E") || (lv_unittype == "PR42C") || (lv_unittype == "AimAssistant") || (lv_unittype == "KineticIntegrator") || (lv_unittype == "APRounds") || (lv_unittype == "DURounds") || (lv_unittype == "M79Flamethrower") || (lv_unittype == "Inferno") || (lv_unittype == "GasCompressor") || (lv_unittype == "ProjectileAccelerator") || (lv_unittype == "PlasmaInducer") || (lv_unittype == "Flashlight") || (lv_unittype == "EnergyCell") || (lv_unittype == "M5MAR") || (lv_unittype == "ExplosiveCharge") || (lv_unittype == "40mmGrenadeItem") || (lv_unittype == "MGL") || (lv_unittype == "QuikClot") || (lv_unittype == "SolarArmor") || (lv_unittype == "SightHelper") || (lv_unittype == "PSDE") || (lv_unittype == "FirstAidKit") || (lv_unittype == "Binoculars") || (lv_unittype == "AS50Bipod") || (lv_unittype == "LiftBoots") || (lv_unittype == "AmmoCase") || (lv_unittype == "FlareGun") || (lv_unittype == "StynerBR2CQBR") || (lv_unittype == "USMCR") || (lv_unittype == "Magazines") || (lv_unittype == "GroundFlare") || (lv_unittype == "MK44SentryGunPacked")) || (((lv_unittype == "LNRifleman") || (lv_unittype == "LNAutomaticRifleman") || (lv_unittype == "LN68WCombatMedic") || (lv_unittype == "LN74DFlamethrower") || (lv_unittype == "LNSquadDesignatedMarksman") || (lv_unittype == "LNCombatEngineer") || (lv_unittype == "LNJavelinGunner") || (lv_unittype == "InfantryRifleman") || (lv_unittype == "InfantryAutomaticRifleman") || (lv_unittype == "CombatEngineerMini") || (lv_unittype == "JavelinGunner") || (lv_unittype == "74DFlamethrower") || (lv_unittype == "InfantrySDM") || (lv_unittype == "68WCombatMedic") || (lv_unittype == "InfantryRifleman2") || (lv_unittype == "InfantryAutomaticRifleman2") || (lv_unittype == "CombatEngineerMini2") || (lv_unittype == "JavelinGunner3") || (lv_unittype == "74DFlamethrower2") || (lv_unittype == "InfantrySDM2") || (lv_unittype == "68WCombatMedic2")) && ((UnitGetOwner(lv_item) >= 1) && (UnitGetOwner(lv_item) <= 12) && (lv_exeplayer != UnitGetOwner(lv_item))))))
        {
            return false;
        }
        if (!(gv_gamemode >= 1))
        {
            return false;
        }
        if (!((lv_exeplayer >= 1) && (lv_exeplayer <= 12)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringToText("!Warning: Player ") + TextWithColor(PlayerName(lv_exeplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_exeplayer, false))) + StringToText(" Destroy Item/Unit ") + lv_itemname + StringToText(".")));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ItemDes_Init()
{
    gt_ItemDes = TriggerCreate("gt_ItemDes_Func");
    TriggerAddEventUnitDied(gt_ItemDes, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Vote Chat Handler
//--------------------------------------------------------------------------------------------------
bool gv_HyperPulseT1Acc;
bool gv_HyperPulseAcc;
bool gv_HyperPulseModuleSwitch;
bool gv_HyperPulseVoteEnable;
bool[20] gv_HyperPulseVotes;
bool[20] gv_LUNATICVotes;
trigger gt_VoteChatHandler;
bool gt_VoteChatHandler_Func(bool lp_1, bool lp_2)
{
    int lv_i;
    int lv_count;
    if (!lp_2){return true;}
    if (true)
    {
        if (gv_HyperPulseVoteEnable && GameGetMissionTime() < 600.0)
        {
            if ((!gv_HyperPulseModuleSwitch) && (StringCase(EventChatMessage(false), false) == "-hyperpulse"))
            {
                gv_HyperPulseVotes[EventPlayer()] = true;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, PlayerName(EventPlayer()) + StringToText("Voted to Enable " + "HyperPulse" + " Spawning Mode!"));
                for (lv_i = 0; lv_i <= 12; lv_i += 1)
                {
                    if (gv_HyperPulseVotes[lv_i] && (PlayerStatus(lv_i) == c_playerStatusActive))
                    {
                        lv_count += 1;
                    }
                }
                if (lv_count > gf_NumberofPlayers() / 2)
                {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1212\">--Hyper Pulse ON!--"));
                    SoundPlay(SoundLink("TESTPASS", -1), PlayerGroupAll(), 100.0, 0.0);
                    gv_HyperPulseModuleSwitch = true;
                    if (gv_mod_tier1)
                    {
                        Wait(1.0, c_timeReal);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"b8edff-f0ffff\">" + "Initializing..."));
                        TriggerEnable(gt_AdvancedInfestationLevelDisplay, true);
                        gv_ILAllow = 80;
                        gv_infestationLevel -= 15;
                        TriggerExecute(gt_AdvancedInfestationLevelDisplay, false, false);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"b8edff-f0ffff\">" + "Enable Advanced Infestation Level Controller."));
                        Wait(0.5, c_timeReal);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"b8edff-f0ffff\">" + "Apply Difficulty Settings."));
                        gv_HyperPulseT1Acc = true;
                        gv_HyperPulseAcc = true;
                        Wait(0.4, c_timeReal);
                        gv_xpmodifier *= 1.3;
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1212\">----T1 LEVEL-----"));
                        gf_PulseScreen(true);
                        Wait(5.4, c_timeReal);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"b8edff-f0ffff\">" + "XP Earned Increase: 30%"));
                    }
                    else
                    {
                        Wait(0.8, c_timeReal);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"b8edff-f0ffff\">" + "Initializing..."));
                        Wait(0.4, c_timeReal);
                        gv_spawnCount = 17;
                        gv_undeadSupplyCap = gv_hyperPulseT2T3SupplyCapChangesTo;
                        gv_HyperPulseAcc = true;
                        TriggerEnable(gt_UndeadSpawningOutbreak2, true);
                        TriggerEnable(gt_UndeadSpawningOnslaught1, true);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"b8edff-f0ffff\">" + "Apply Difficulty Settings."));
                        Wait(0.4, c_timeReal);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"b8edff-f0ffff\">" + "Accelerate Spawning."));
                        Wait(0.4, c_timeReal);
                        if (gv_displayTier3CountAfterHyperPulseT2T3Actived) { TriggerExecute(gt_Tier3Count, false, false); }
                        gv_xpmodifier *= 1.15;
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1212\">----T2|T3 LEVEL----"));
                        gf_PulseScreen(true);
                        Wait(5.4, c_timeReal);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"b8edff-f0ffff\">" + "XP Earned Increase: 15%"));
                    }
                }
                else
                {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Require ") + IntToText(gf_NumberofPlayers() / 2 - lv_count + 1)+StringToText(" Addition Votes to Active HyperPulse"));
                }
            }
        }
        if (gv_HyperPMCVoteEnabled && GameGetMissionTime() < 300.0)
        {
            if ((!gv_HyperPulseModuleSwitch) && (StringCase(EventChatMessage(false), false) == "-hyperpmc"))
            {
                gv_HyperPulseVotes[EventPlayer()] = true;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, PlayerName(EventPlayer()) + StringToText("Voted to enable " + "HyperPMC" + "!"));
                for (lv_i = 0; lv_i <= 12; lv_i += 1)
                {
                    if (gv_HyperPulseVotes[lv_i] && (PlayerStatus(lv_i) == c_playerStatusActive))
                    {
                        lv_count += 1;
                    }
                }
                if (lv_count > gf_NumberofPlayers() / 2)
                {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1212\">--HyperPMC Enabled! Prepare to die.--"));
                    SoundPlay(SoundLink("TESTPASS", -1), PlayerGroupAll(), 100.0, 0.0);
                    gv_HyperPulseModuleSwitch = true;
                    Wait(1.0, c_timeReal);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"b8edff-f0ffff\">" + "Initializing..."));
                    Wait(4, c_timeReal);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"b8edff-f0ffff\">" + "Apply Difficulty Settings."));
                    gv_hyperpmcEnabled = true;
                    UnitGroupLoopBegin(gv_heroesGroup);
                    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
                    {
                        PingCreate(PlayerGroupSingle((UnitGetOwner((UnitGroupLoopCurrent())))), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0);
                        gf_AirDropItemLoc("AmmoCase", UnitGetPosition(UnitGroupLoopCurrent()), 1);
                        gf_AirDropItemLoc("SecurityArmor", UnitGetPosition(UnitGroupLoopCurrent()), 1);
                    }
                    Wait(0.4, c_timeReal);
                    gv_xpmodifier *= 1.3;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"b8edff-f0ffff\">" + "XP Earned Increase: 30%"));
                }
                else
                {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Require ") + IntToText(gf_NumberofPlayers() / 2 - lv_count + 1)+StringToText(" Addition Votes to Active HyperPulse"));
                }
            }
        }
    }
    return true;
}
void gt_VoteChatHandler_Init()
{
    gt_VoteChatHandler = TriggerCreate("gt_VoteChatHandler_Func");
    TriggerAddEventChatMessage(gt_VoteChatHandler, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Complex Boss Bar - High Tier X
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
// Trigger:  Complex Boss Bar - High Tier X
//--------------------------------------------------------------------------------------------------
//------------------Driver Declarations-----------------------
// Option: gv_HighTierXProgressBarInstantLAUNCH [Not Roll]
// Option: gv_HighTierXProgressBarUseRotateStepColor [RTG]
// ProgressBar Service Activate by Following Stage
// gv_HighTierXUnitGroup = UnitGroupEmpty();
// gv_HighTierXUnitGroup <Filling Process>
// TriggerExecute(gt_ComplexBossBarHighTierX, false, false);
//------------------------------------------------------------
// Function Pre Declarations
color gf_ColorFromRGB(fixed lv_R, fixed lv_G, fixed lv_B);
void libNtve_gf__BB_HPBarChange2(int lp_barID);
void gf_CreateProgressBar(int lp_bossBarID, string lp_portrait, text lp_title, int lp_max, playergroup lp_players, color lp_backgroundcolor, color lp_currentfillingcolor);
void libNtve_gf_RefreshBossBar2(int lp_bossBarID);
void libNtve_gf_SetBossBarMaximumValue2(int lp_bossBarID, int lp_max, bool lp_refresh);
void libNtve_gf_SetBossBarCurrentValue2(int lp_bossBarID, int lp_current, bool lp_refresh);
trigger gt_ComplexBossBarHighTierX;
//long progress bar width = 1500;
//short progress bar width = 520;
bool gv_cpbinservice;
bool gv_HighTierXProgressBarInstantLAUNCH = false;
bool gv_HighTierXProgressBarUseRotateStepColor = true;
unitgroup gv_HighTierXUnitGroup;
int gv_cpbreg;
color gf_ColorFromRGB(fixed lv_R, fixed lv_G, fixed lv_B)
{
    return Color(lv_R * 100 / 255.0, lv_G * 100 / 255.0, lv_B * 100 / 255.0);
}
void gf_CreateProgressBar(int lp_bossBarID, string lp_portrait, text lp_title, int lp_max, playergroup lp_players, color lp_backgroundcolor, color lp_currentfillingcolor)
{
    // Variable Declarations
    const int lv_width = 800;
    const int lv_height = 100;
    // Variable Initialization
    // Implementation
    if ((lp_bossBarID <= 0))
    {
        return;
    }
    if ((lp_bossBarID > libNtve_gv__BBC_BossBarMaxCount))
    {
        UIDisplayMessage(lp_players, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Ntve_13ECDD4D") + IntToText(libNtve_gv__BBC_BossBarMaxCount) + StringExternal("Param/Value/lib_Ntve_84FA80EA")));
        return;
    }
    libNtve_gv__BB_Players[lp_bossBarID] = lp_players;
    libNtve_gv__BB_Portraits[lp_bossBarID] = lp_portrait;
    libNtve_gv__BB_Title[lp_bossBarID] = lp_title;
    libNtve_gv__BB_Boss[lp_bossBarID] = null;
    libNtve_gf_SetBossBarMaximumValue2(lp_bossBarID, lp_max, false);
    libNtve_gf_SetBossBarCurrentValue2(lp_bossBarID, lp_max, false);
    libNtve_gv__BB_HPOldWidth[lp_bossBarID] = -1;
    //if ((libNtve_gv__BB_Dialog[lp_bossBarID] == c_invalidDialogId))
    if (true)
    {
        DialogCreate(libNtve_gv__BB_BarWidth[lp_bossBarID], libNtve_gv__BB_BarHeight[lp_bossBarID], c_anchorTop, 0, 50, false);
        libNtve_gv__BB_Dialog[lp_bossBarID] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_BGImgBar[lp_bossBarID] = DialogControlLastCreated();
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_frame_light.dds", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_BGImgPortrait[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_frame_unit.dds", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_PortraitImage[lp_bossBarID] = DialogControlLastCreated();
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        libNtve_gv__BB_TitleLabel[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BossBarTitleI", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_HpBorderImage[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_frame.dds", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_HpFullImage[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lp_backgroundcolor, PlayerGroupAll());
        //Background
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_HpCurrentImage[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lp_currentfillingcolor, PlayerGroupAll());
        //Current
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        libNtve_gv__BB_HpLabel[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BossBarHPI", PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 520, PlayerGroupAll());
    }
    libNtve_gf_SetBossBarRace(lp_bossBarID, libNtve_ge_BossBarRace_Terran, false);
    libNtve_gf_RefreshBossBar2(lp_bossBarID);
    DialogSetVisible(libNtve_gv__BB_Dialog[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], true);
}
trigger auto_libNtve_gf__BB_HPBarChange2_Trigger = null;
int auto_libNtve_gf__BB_HPBarChange2_lp_barID;
void libNtve_gf__BB_HPBarChange2(int lp_barID)
{
    auto_libNtve_gf__BB_HPBarChange2_lp_barID = lp_barID;
    if (auto_libNtve_gf__BB_HPBarChange2_Trigger == null)
    {
        auto_libNtve_gf__BB_HPBarChange2_Trigger = TriggerCreate("auto_libNtve_gf__BB_HPBarChange2_TriggerFunc");
    }
    TriggerExecute(auto_libNtve_gf__BB_HPBarChange2_Trigger, false, false);
}
bool auto_libNtve_gf__BB_HPBarChange2_TriggerFunc(bool testConds, bool runActions)
{
    int lp_barID = auto_libNtve_gf__BB_HPBarChange2_lp_barID;
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    text lv_label;
    int lv_newWidth;
    int lv_width;
    // Variable Initialization
    // Implementation
    if (((libNtve_gv__BB_HPOldWidth[lp_barID] < 0) || (libNtve_gv__BB_HPOldWidth[lp_barID] > libNtve_gf__BB_HPBarWidth(lp_barID))))
    {
        libNtve_gv__BB_HPOldWidth[lp_barID] = libNtve_gf__BB_HPBarWidth(lp_barID);
    }
    else
    {
    }
    lv_newWidth = libNtve_gf__BB_HPBarCurrentWidth(lp_barID);
    lv_width = (libNtve_gv__BB_HPOldWidth[lp_barID] - lv_newWidth);
    libNtve_gv__BB_HPOldWidth[lp_barID] = lv_newWidth;
    if ((lv_width > 0))
    {
        DialogControlCreate(libNtve_gv__BB_Dialog[lp_barID], c_triggerControlTypeImage);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(78.43, 78.43, 0.00), libNtve_gv__BB_Players[lp_barID]);
        DialogControlSetSize(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], lv_width, libNtve_gf__BB_HPBarHeight(lp_barID));
        DialogControlSetPositionRelative(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], c_anchorLeft, libNtve_gv__BB_HpFullImage[lp_barID], c_anchorLeft, MaxI((lv_newWidth - 1), 0), 0);
        DialogControlFadeTransparency(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], 0.2, 20.0);
        Wait(0.2, c_timeReal);
        DialogControlFadeTransparency(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], 0.8, 100.0);
        Wait(0.8, c_timeReal);
        DialogControlDestroy(DialogControlLastCreated());
    }
    else
    {
    }
    return true;
}
void libNtve_gf_RefreshBossBar2(int lp_bossBarID)
{
    // Implementation
    if ((libNtve_gv__BB_Dialog[lp_bossBarID] == c_invalidDialogId))
    {
        return;
    }
    else
    {
    }
    DialogControlSetSize(libNtve_gv__BB_BGImgPortrait[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_PortraitBorderWidth(lp_bossBarID), libNtve_gf__BB_PortraitBorderHeight(lp_bossBarID));
    DialogControlSetPosition(libNtve_gv__BB_BGImgPortrait[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorLeft, 18, 1);
    libNtve_gf_SetDialogItemImage(libNtve_gv__BB_PortraitImage[lp_bossBarID], libNtve_gv__BB_Portraits[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID]);
    DialogControlSetSize(libNtve_gv__BB_PortraitImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_PortraitWidth(lp_bossBarID), libNtve_gf__BB_PortraitHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_PortraitImage[lp_bossBarID], PlayerGroupAll(), c_anchorCenter, libNtve_gv__BB_BGImgPortrait[lp_bossBarID], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemText(libNtve_gv__BB_TitleLabel[lp_bossBarID], libNtve_gv__BB_Title[lp_bossBarID], PlayerGroupAll());
    DialogControlSetSize(libNtve_gv__BB_TitleLabel[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_TitleBarWidth(lp_bossBarID), libNtve_gf__BB_TitleBarHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_TitleLabel[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorTopLeft, libNtve_gv__BB_PortraitImage[lp_bossBarID], c_anchorTopRight, 0, 0);
    DialogControlSetSize(libNtve_gv__BB_HpBorderImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_HPBorderWidth(lp_bossBarID), libNtve_gf__BB_HPBorderHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_HpBorderImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorTop, libNtve_gv__BB_TitleLabel[lp_bossBarID], c_anchorBottom, 0, -12);
    //libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lp_bossBarID], libNtve_gf__BB_HPBarFormatLabel(lp_bossBarID), PlayerGroupAll());
    DialogControlSetSize(libNtve_gv__BB_HpLabel[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_HPBorderWidth(lp_bossBarID), libNtve_gf__BB_HPBorderHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_HpLabel[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorCenter, libNtve_gv__BB_HpBorderImage[lp_bossBarID], c_anchorCenter, 0, 1);
    DialogControlSetSize(libNtve_gv__BB_HpFullImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_HPBarWidth(lp_bossBarID), libNtve_gf__BB_HPBarHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_HpFullImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorCenter, libNtve_gv__BB_HpBorderImage[lp_bossBarID], c_anchorCenter, 0, 0);
    DialogControlSetSize(libNtve_gv__BB_HpCurrentImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_HPBarCurrentWidth(lp_bossBarID), libNtve_gf__BB_HPBarHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_HpCurrentImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorLeft, libNtve_gv__BB_HpFullImage[lp_bossBarID], c_anchorLeft, 0, 0);
    //libNtve_gf__BB_HPBarChange2(lp_bossBarID);
}
void libNtve_gf_SetBossBarMaximumValue2(int lp_bossBarID, int lp_max, bool lp_refresh)
{
    // Implementation
    libNtve_gv__BB_MaxValue[lp_bossBarID] = IntToFixed(lp_max);
    if ((libNtve_gv__BB_MaxValue[lp_bossBarID] <= 0.0))
    {
        libNtve_gv__BB_MaxValue[lp_bossBarID] = 1.0;
    }
    else
    {
    }
    libNtve_gv__BB_Boss[lp_bossBarID] = null;
    if ((lp_refresh == true))
    {
        libNtve_gf_RefreshBossBar2(lp_bossBarID);
    }
    else
    {
    }
}
void libNtve_gf_SetBossBarCurrentValue2(int lp_bossBarID, int lp_current, bool lp_refresh)
{
    // Implementation
    libNtve_gv__BB_CurrentValue[lp_bossBarID] = IntToFixed(lp_current);
    if ((libNtve_gv__BB_CurrentValue[lp_bossBarID] < 0.0))
    {
        libNtve_gv__BB_CurrentValue[lp_bossBarID] = 0.0;
    }
    else
    {
    }
    libNtve_gv__BB_Boss[lp_bossBarID] = null;
    if ((lp_refresh == true))
    {
        libNtve_gf_RefreshBossBar2(lp_bossBarID);
    }
    else
    {
    }
}
color gf_RedToGreenLeftRotateStep(fixed lv_current, fixed lv_totalstep)
{
    fixed lv_i;
    fixed lv_tempb;
    fixed lv_think_steptotal = 255 * 3 + 80;
    fixed lv_step = lv_current * (lv_think_steptotal / lv_totalstep);
    if (lv_step < 255) { return gf_ColorFromRGB(255, 0, lv_step); }
    else if (lv_step < 510) { return gf_ColorFromRGB(510 - lv_step, 0, 255); }
    else if (lv_step < 765) { return gf_ColorFromRGB(0, lv_step - 510, 255); }
    else
    {
        lv_i = lv_step - 765;
        lv_tempb = 255.0 - 2.1875 * lv_i;
        return gf_ColorFromRGB(lv_i, 255, lv_tempb);
    }
}
bool gt_ComplexBossBarHighTierX_Func(bool testConds, bool runActions)
{
    int lv_i;
    int lv_j;
    unitgroup lv_units;
    const int lv_barcount = 14;
    color[lv_barcount + 1] lv_colors;
    int[lv_barcount] lv_cpb;
    int lv_currentdeepth;
    int lv_hptotal;
    int lv_currenthp;
    fixed lv_wait;
    int lv_warningimage;
    int lv_warningdialog;
    lv_colors[0] = gf_ColorFromRGB(225, 238, 253);
    lv_colors[1] = gf_ColorFromRGB(161, 176, 189);
    lv_colors[2] = gf_ColorFromRGB(69, 91, 118);
    lv_colors[3] = gf_ColorFromRGB(61, 13, 20);
    lv_colors[4] = gf_ColorFromRGB(211, 70, 185);
    lv_colors[5] = gf_ColorFromRGB(85, 37, 183);
    lv_colors[6] = gf_ColorFromRGB(14, 13, 131);
    lv_colors[7] = gf_ColorFromRGB(30, 80, 185);
    lv_colors[8] = gf_ColorFromRGB(78, 192, 238);
    lv_colors[9] = gf_ColorFromRGB(60, 181, 132);
    lv_colors[10] = gf_ColorFromRGB(22, 49, 59);
    lv_colors[11] = gf_ColorFromRGB(120, 162, 83);   //Green
    lv_colors[12] = gf_ColorFromRGB(250, 254, 144);  //Yellow
    lv_colors[13] = gf_ColorFromRGB(215, 171, 96);   //Orange
    lv_colors[14] = gf_ColorFromRGB(139, 24, 35);    //Red
    if (gv_HighTierXProgressBarUseRotateStepColor)
    {
        for (lv_i=0;lv_i<=14;lv_i+=1)
        {
            lv_colors[lv_i] = gf_RedToGreenLeftRotateStep(lv_i, 14);
        }
    }
    
    lv_units = gv_HighTierXUnitGroup;
    if (testConds) { }
    if (!runActions) { return true; }
    lv_warningdialog = DialogCreate(100,100,c_anchorTopLeft,0,0,true);
    DialogSetImageVisible(lv_warningdialog,false);
    DialogSetFullscreen(lv_warningdialog,true);
    lv_warningimage = libNtve_gf_CreateDialogItemImage(lv_warningdialog, 100, 100, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\btn-tips-computerterminals.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(lv_warningimage,PlayerGroupAll(),true);
    //Calc total points
    UnitGroupLoopBegin(lv_units);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true))
        {
            lv_hptotal += UnitGetPropertyInt(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent);
        }
    }
    UnitGroupLoopEnd();
    //Reg
    for (lv_i = 0; lv_i < lv_barcount; lv_i += 1)
    {
        if (gv_cpbreg >= 45)
        {
            gv_cpbreg = 10;
        }
        libNtve_gv__BB_BarWidth[gv_cpbreg] = gv_complexBossBarLength;
        gf_CreateProgressBar(gv_cpbreg, "Assets\\Custom Icons\\Mod_T1.dds", StringToText("100% - T1" + " Biometric"), lv_hptotal / lv_barcount, PlayerGroupAll(), lv_colors[lv_i + 1], lv_colors[lv_i]);
        lv_cpb[lv_i] = gv_cpbreg;
        libNtve_gf_ShowHideBossBar(false, gv_cpbreg);
        gv_cpbreg += 1;
    }
    while (gv_cpbinservice == true) { Wait(1.0, c_timeGame); }
    gv_cpbinservice = true;
    //SoundPlay(SoundLink("HybridZerg_DistantRoar", -1), PlayerGroupAll(), 100.0, 0.0);
    
    //Roll cpb
    if (!gv_HighTierXProgressBarInstantLAUNCH)
    {
        for (lv_i = lv_barcount - 1; lv_i >= 0; lv_i -= 1)
        {
            if (lv_i >= 6) { libNtve_gv__BB_Portraits[lv_cpb[lv_i]] = "Assets\\Custom Icons\\Mod_T3.dds"; }
            else { libNtve_gv__BB_Portraits[lv_cpb[lv_i]] = "Assets\\Custom Icons\\Mod_T2.dds"; }
            
            libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[lv_i]], (StringToText("HP - ") + IntToText(lv_hptotal)), PlayerGroupAll());
            libNtve_gf_SetBossBarCurrentValue2(lv_cpb[lv_i], lv_hptotal / lv_barcount / lv_barcount * (lv_barcount - lv_i), true);
            libNtve_gf_ShowHideBossBar(true, lv_cpb[lv_i]);
            for (lv_j = 0; lv_j < 10; lv_j += 1)
            {
                libNtve_gf_SetBossBarCurrentValue2(lv_cpb[lv_i], (lv_hptotal / lv_barcount / lv_barcount / 10 * lv_j) + (lv_hptotal / lv_barcount / lv_barcount * (lv_barcount - lv_i - 1)), true);
                Wait(0.01, c_timeGame);
            }
            libNtve_gf_ShowHideBossBar(false, lv_cpb[lv_i]);
        }
    }
    libNtve_gf_ShowHideBossBar(true, lv_cpb[0]);
    lv_hptotal = 0;
    UnitGroupLoopBegin(lv_units);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true))
        {
            lv_hptotal += UnitGetPropertyInt(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent);
        }
    }
    UnitGroupLoopEnd();
    libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[0]], (StringToText("HP - ") + IntToText(lv_hptotal)), PlayerGroupAll());
    Wait(0.8, c_timeGame);
    //DialogSetVisible(lv_warningdialog,PlayerGroupAll(),true);
    Wait(1.2, c_timeGame);
    libNtve_gf_ShowHideBossBar(false, lv_cpb[0]);
    for (lv_i = 0; lv_i < lv_barcount; lv_i += 1)
    {
        libNtve_gf_SetBossBarMaximumValue2(lv_cpb[lv_i], lv_hptotal / lv_barcount, false);
    }
    //Restore To Red Tier 1 Image
    for (lv_i = lv_barcount - 1; lv_i >= 0; lv_i -= 1)
    {
        libNtve_gv__BB_Portraits[lv_cpb[lv_i]] = "Assets\\Custom Icons\\Mod_T1.dds";
    }
    lv_wait = 0.1;
    if (gv_HighTierXProgressBarInstantLAUNCH) { lv_wait = 0.1; }
    while (!((UnitGroupCount(lv_units, c_unitCountAlive) == 0)))
    {
        //Get Current points
        lv_currenthp = 0;
        UnitGroupLoopBegin(lv_units);
        for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
        {
            if ((UnitIsAlive(UnitGroupLoopCurrent()) == true))
            {
                lv_currenthp += UnitGetPropertyInt(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent);
            }
        }
        UnitGroupLoopEnd();
        //Redraw Progress Bar if More than Total HP
        if (lv_currenthp > lv_hptotal)
        {
            for (lv_i = 0; lv_i < lv_barcount; lv_i += 1)
            {
                libNtve_gf_SetBossBarMaximumValue2(lv_cpb[lv_i], lv_currenthp / lv_barcount, false);
                lv_hptotal = lv_currenthp;
            }
        }
        //Test Deepth
        for (lv_i = 0; lv_i < lv_barcount; lv_i += 1) { if (lv_currenthp >= lv_hptotal / lv_barcount * (lv_barcount - lv_i - 1)) { break; } }
        lv_currentdeepth = lv_i;
        //Update Text
        libNtve_gv__BB_Title[lv_cpb[lv_currentdeepth]] = StringToText(IntToString(lv_currenthp / (lv_hptotal / 100)) + "% - T1" + " Biometric");
        libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[lv_currentdeepth]], (IntToText(lv_currenthp) + StringExternal("Param/Value/lib_Ntve_22BDA933") + IntToText(lv_hptotal)), PlayerGroupAll());
        //Switch BossBar Display (Show Hide)
        libNtve_gf_ShowHideBossBar(true, lv_cpb[lv_currentdeepth]);
        for (lv_i = 0; lv_i < lv_barcount; lv_i += 1)
        {
            if (lv_i != lv_currentdeepth) { libNtve_gf_ShowHideBossBar(false, lv_cpb[lv_i]); }
        }
        
        //Apply Progress Bar Status
        libNtve_gf_SetBossBarCurrentValue2(lv_cpb[lv_currentdeepth], lv_currenthp - lv_hptotal / lv_barcount * (lv_barcount - lv_currentdeepth - 1), true);
        if (lv_wait <= 0.1)
        {
            Wait(0.1, c_timeGame);
        }
        else
        {
            Wait(lv_wait, c_timeGame);
            lv_wait /= 1.2;
        }
        if ((lv_wait <= 0.1) && (lv_wait > -10.0))
        {
            DialogControlFadeTransparency(lv_warningimage,PlayerGroupAll(),3.5,100);
            lv_wait = -100.0;
        }
    }
    for (lv_i = 0; lv_i < lv_barcount; lv_i += 1)
    {
        libNtve_gf_ShowHideBossBar(false, lv_cpb[lv_i]);
    }
    DialogSetVisible(lv_warningdialog,PlayerGroupAll(),false);
    gv_cpbinservice = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ComplexBossBarHighTierX_Init()
{
    gt_ComplexBossBarHighTierX = TriggerCreate("gt_ComplexBossBarHighTierX_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: HyperPulse T1 EXTRA
//--------------------------------------------------------------------------------------------------
bool gv_Tier1ModuleDisableSelfRespawn;
trigger gt_Tier1EXTRA;
//--------------------------------------------------------------------------------------------------
// Trigger: Tier 1 EXTRA
//--------------------------------------------------------------------------------------------------
bool gt_Tier1EXTRA_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    int lv_i;
    int lv_j;
    const int lv_barcount = 14;
    color[lv_barcount + 1] lv_colors;
    int[lv_barcount] lv_cpb;
    int lv_currentdeepth;
    point lv_pingroll;
    fixed lv_x;
    fixed lv_y;
    int lv_ping;
    region lv_randomregion;
    int lv_rollstepcount;
    int lv_rollstepcurrent;
    int lv_rollstepperbar;
    int lv_hptotal;
    int lv_gamelooptakes;
    string lv_barname;
    int lv_points;
    int lv_pointsEval;
    int lv_pointrandomuse;
    // Variable Initialization
    
    // Conditions
    if (testConds)
    {
        if (!((gv_gameOver == false)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    //Stop All Tier 1 Spawner Instances
    CinematicFade(false, 0.2, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    gv_stopNoviceCommander = true;
    gv_stopAdvancedCommander = true;
    gv_Tier1ModuleDisableSelfRespawn = true;
    TriggerStop(TriggerFind("auto_gf_InvasionCommanderNovice_TriggerFunc"));
    TriggerStop(TriggerFind("auto_gf_InvasionCommanderAdvanced_TriggerFunc"));
    TriggerStop(TriggerFind("auto_gf_InvasionCommanderMaster_TriggerFunc"));
    libNtve_gf_ShowHideBossBar(false, 46);
    libNtve_gf_ShowHideBossBar(false, 47);
    libNtve_gf_ShowHideBossBar(false, 48);
    //Evaluate Points: lv_pointsEval
    lv_barname = "HyperPulse T1 - EXTRA";
    lv_pointsEval = 110 + gf_NumberofPlayers() * 8;
    
    lv_points = lv_pointsEval;
    gv_mod_tier1 = false;
    for (lv_i=0;lv_i<=14;lv_i+=1)
    {
        lv_colors[lv_i] = gf_RedToGreenLeftRotateStep(lv_i, 14);
    }
    lv_hptotal = lv_pointsEval * 1000;
    gv_complexBossBarLength = 1500;
    for (lv_i = 0; lv_i < lv_barcount; lv_i += 1)
    {
        if (gv_cpbreg >= 45)
        {
            gv_cpbreg = 10;
        }
        libNtve_gv__BB_BarWidth[gv_cpbreg] = 1500;
        gf_CreateProgressBar(gv_cpbreg, "Assets\\Custom Icons\\Mod_T1.dds", StringToText(lv_barname), lv_hptotal / lv_barcount, PlayerGroupAll(), lv_colors[lv_i + 1], lv_colors[lv_i]);
        lv_cpb[lv_i] = gv_cpbreg;
        libNtve_gf_ShowHideBossBar(false, gv_cpbreg);
        gv_cpbreg += 1;
    }
    gv_mod_tier1 = true;
    lv_gamelooptakes = RandomInt(180, 210) * 16;
    lv_rollstepperbar = lv_gamelooptakes / lv_barcount;
    lv_rollstepcount = lv_barcount * lv_rollstepperbar;
    for (lv_i = lv_barcount - 1; lv_i >= 0; lv_i -= 1)
    {
        if (lv_i == lv_barcount - 1)
        {
            DialogSetTransparency(libNtve_gv__BB_Dialog[lv_cpb[lv_i]], 0.0);
        }
        if (lv_i >= 6) { libNtve_gv__BB_Portraits[lv_cpb[lv_i]] = "Assets\\Custom Icons\\Mod_T3.dds"; }
        else if (lv_i >= 2) { libNtve_gv__BB_Portraits[lv_cpb[lv_i]] = "Assets\\Custom Icons\\Mod_T2.dds"; }
        else { libNtve_gv__BB_Portraits[lv_cpb[lv_i]] = "Assets\\Custom Icons\\Mod_T1.dds"; }
        
        libNtve_gf_ShowHideBossBar(true, lv_cpb[lv_i]);
        DialogSetTransparency(libNtve_gv__BB_Dialog[lv_cpb[lv_i]], IntToFixed(lv_i + 1) * 4.3);
        for (lv_j = 0; lv_j < lv_rollstepperbar; lv_j += 1)
        {
            if (lv_i == lv_barcount - 1)
            {
                DialogSetTransparency(libNtve_gv__BB_Dialog[lv_cpb[lv_i]], IntToFixed(lv_j) * 60.0 / IntToFixed(lv_rollstepperbar));
            }
            else if (lv_i == lv_barcount - 2)
            {
                DialogSetTransparency(libNtve_gv__BB_Dialog[lv_cpb[lv_i]], IntToFixed(lv_rollstepperbar - lv_j) * 55.7 / IntToFixed(lv_rollstepperbar));
            }
            else if (lv_i == lv_barcount - 3)
            {
                DialogSetTransparency(libNtve_gv__BB_Dialog[lv_cpb[lv_i]], IntToFixed(lv_j) * 52.0 / IntToFixed(lv_rollstepperbar));
            }
            lv_rollstepcurrent += 1;
            if (IntToFixed(lv_pointsEval - lv_points) / IntToFixed(lv_pointsEval) < IntToFixed(lv_rollstepcurrent) / IntToFixed(lv_rollstepcount))
            {
                lv_pointrandomuse = RandomInt(1, 10);
                if (lv_pointrandomuse > lv_points) { lv_pointrandomuse = lv_points; }
                gf_InvasionCommanderMaster(lv_pointrandomuse);
                lv_points -= lv_pointrandomuse;
            }
            libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[lv_i]], (StringToText("Invasion - ") + IntToText((lv_pointsEval - lv_points - 1) * 4096 + lv_rollstepcurrent * 2)+StringToText("/")+IntToText(lv_pointsEval*4096)), PlayerGroupAll());
            libNtve_gv__BB_Title[lv_cpb[lv_i]] = StringToText(lv_barname);
            libNtve_gf_SetBossBarCurrentValue2(lv_cpb[lv_i], (lv_hptotal / lv_barcount / lv_rollstepcount * lv_rollstepcurrent), true);
            
            Wait(0.0625, c_timeGame);
        }
        libNtve_gf_ShowHideBossBar(false, lv_cpb[lv_i]);
    }
    gv_HighTierXProgressBarInstantLAUNCH = true;
    gv_HighTierXProgressBarUseRotateStepColor = true;
    gv_HighTierXUnitGroup = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        UnitGroupAdd(gv_HighTierXUnitGroup, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ComplexBossBarHighTierX, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Tier1EXTRA_Init()
{
    gt_Tier1EXTRA = TriggerCreate("gt_Tier1EXTRA_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SolarArmor
//--------------------------------------------------------------------------------------------------
void gf_SwitchSolarToHigh()
{
    
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        CatalogFieldValueSet(c_gameCatalogBehavior, "SolarArmor", "Modification.VitalRegenArray[Energy]", PlayerGroupLoopCurrent(), "0.4");
        CatalogFieldValueSet(c_gameCatalogBehavior, "SightHelper", "Modification.SightBonus", PlayerGroupLoopCurrent(), "4");
    }
    PlayerGroupLoopEnd();
    
}
void gf_SwitchSolarToNormal()
{
    
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        CatalogFieldValueSet(c_gameCatalogBehavior, "SolarArmor", "Modification.VitalRegenArray[Energy]", PlayerGroupLoopCurrent(), "0.2");
        CatalogFieldValueSet(c_gameCatalogBehavior, "SightHelper", "Modification.SightBonus", PlayerGroupLoopCurrent(), "4");
    }
    PlayerGroupLoopEnd();
    
}
void gf_SwitchSolarToLoss()
{
    
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        CatalogFieldValueSet(c_gameCatalogBehavior, "SolarArmor", "Modification.VitalRegenArray[Energy]", PlayerGroupLoopCurrent(), "0.0");
        CatalogFieldValueSet(c_gameCatalogBehavior, "SightHelper", "Modification.SightBonus", PlayerGroupLoopCurrent(), "2");
    }
    PlayerGroupLoopEnd();
    
}

//--------------------------------------------------------------------------------------------------
// Custom Script: 2018 New Year
//--------------------------------------------------------------------------------------------------
int gv_currentHNCp;
bool gv_UnlimitedShells;
bool[5] gv_fasttestArray;
string gv_voidRiftB;
string gv_voidRiftA;
trigger gt_voidRift;
bool gv_2018NewYearVoteAccept;
//--------------------------------------------------------------------------------------------------
// Functions: 2018 New Year
//--------------------------------------------------------------------------------------------------
int gv_InstantDetonationButton;
int gv_HNuclearStopButton;
void gf_TechUnlockDisplay(string lp_picPath, string lp_techName, string lp_descriptionstr)
{
    //int lv_TUnlockDialog;
    //int lv_TUnlockTechPicture;
    //lv_TUnlockDialog = DialogCreate(700, 400, c_anchorCenter, 0, -200, true);
    //lv_TUnlockTechPicture = DialogCreate(150, 150, c_anchorCenter, -200, -180, true);
    //libNtve_gf_CreateDialogItemLabel(lv_TUnlockDialog, 350,200,c_anchorCenter,100,90,StringToText("<s val=\"Chat_Display\">"+lp_description),Color(100.0,100.0,100.0),true,3.0);
    //DialogSetImageVisible(lv_TUnlockTechPicture, false);
    //DialogSetVisible(lv_TUnlockTechPicture, PlayerGroupAll(), true);
    //DialogSetVisible(lv_TUnlockDialog, PlayerGroupAll(), true);
    //DialogSetTitle(lv_TUnlockDialog, StringToText("<s val=\"Military_Title\"><c val=\"FFFFFF\">"+"\xe6\x96\xb0\xe7\xa7\x91\xe6\x8a\x80\xe8\xa7\xa3\xe9\x94\x81"+" - "+lp_techName));
    //libNtve_gf_CreateDialogItemImage(lv_TUnlockTechPicture, DialogGetWidth(lv_TUnlockTechPicture), DialogGetHeight(lv_TUnlockTechPicture), c_anchorCenter, 0, 0, StringToText(""), lp_picPath, c_triggerImageTypeNormal, false, Color(100.0, 100.0, 100.0), c_triggerBlendModeNormal);
    //DialogSetTransparency(lv_TUnlockTechPicture, 30.0);
    //DialogSetTransparency(lv_TUnlockDialog, 15.0);
    //Wait(7.0, c_timeGame);
    //DialogSetVisible(lv_TUnlockDialog, PlayerGroupAll(), false);
    //DialogDestroy(lv_TUnlockDialog);
    //DialogSetVisible(lv_TUnlockTechPicture, PlayerGroupAll(), false);
    //DialogDestroy(lv_TUnlockTechPicture);
    int lp_player;
    text lp_nameLabel = StringToText("New Tech Unlocked"+" - "+lp_techName);
    text lp_description = StringToText(lp_descriptionstr);
    string lp_icon = lp_picPath;
    text lp_points = StringToText("<T>");
    int auto7560AB83_ae;
    int auto7560AB83_ai;
    int auto98378251_ae;
    int auto98378251_ai;
    // Variable Declarations
    int lv_points;
    int lv_achievementNameLabel;
    int lv_description;
    int lv_achievementBackground;
    int lv_flash;
    int lv_flash2;
    int lv_animation;
    int lv_achievementBody;
    int lv_y;
    int lv_z;
    // Variable Initialization
    lv_achievementNameLabel = c_invalidDialogControlId;
    lv_description = c_invalidDialogControlId;
    lv_achievementBackground = c_invalidDialogControlId;
    lv_flash = c_invalidDialogControlId;
    lv_flash2 = c_invalidDialogControlId;
    lv_animation = c_invalidDialogControlId;
    lv_achievementBody = c_invalidDialogId;
    // Implementation
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        lp_player = PlayerGroupLoopCurrent();
        auto7560AB83_ae = 10;
        auto7560AB83_ai = 1;
        lv_z = 1;
        for (; ((auto7560AB83_ai >= 0 && lv_z <= auto7560AB83_ae) || (auto7560AB83_ai <= 0 && lv_z >= auto7560AB83_ae)); lv_z += auto7560AB83_ai)
        {
            if ((gv_achievementSlotFilled[lv_z][lp_player] == false))
            {
                gv_achievementSlotFilled[lv_z][lp_player] = true;
                DialogCreate(640, 153, c_anchorCenter, 0, (250 - ((191 + (1 / 4)) * (lv_z - 1))), true);
                lv_achievementBody = DialogLastCreated();
                DialogSetImageVisible(lv_achievementBody, false);
                libNtve_gf_CreateDialogItemImage(lv_achievementBody, 800, (191 + 1), c_anchorCenter, 0, 0, StringToText(""), "Assets/Textures/ui_achievement_metalframe.dds", c_triggerImageTypeEndCap, true, Color(100, 100, 100), c_triggerBlendModeNormal);
                lv_achievementBackground = DialogControlLastCreated();
                DialogControlSetFullDialog(lv_achievementBackground, PlayerGroupSingle(lp_player), true);
                DialogSetVisible(lv_achievementBody, PlayerGroupSingle(lp_player), true);
                SoundPlay(SoundLink("UI_BNet_Achievement", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 610, 125, c_anchorCenter, 0, 0, StringToText(""), "Textures\\Achievement-Animation-Frame-Dark-New-Test.dds", c_triggerImageTypeNineSlice, true, Color(100, 100, 100), c_triggerBlendModeNormal);
                lv_animation = DialogControlLastCreated();
                libNtve_gf_SetDialogItemRenderPriority(lv_animation, 520, PlayerGroupSingle(lp_player));
                DialogSetTransparency(lv_achievementBody, 50.0);
                Wait(0.0625, c_timeGame);
                DialogSetTransparency(lv_achievementBody, 0.0);
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Outiline-New.dds", PlayerGroupSingle(lp_player));
                Wait(0.1, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Outline-New-Frame.dds", PlayerGroupSingle(lp_player));
                Wait(0.1, c_timeGame);
                DialogControlFadeTransparency(lv_animation, PlayerGroupSingle(lp_player), 0.25, 100.0);
                Wait(0.35, c_timeGame);
                DialogControlFadeTransparency(lv_animation, PlayerGroupSingle(lp_player), 0.0, 0.0);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-1.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-5.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-10.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-15.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_CreateDialogItemLabel(lv_achievementBody, 500, 50, c_anchorTopLeft, 145, 40, (StringExternal("Param/Value/8AAA9C65") + (lp_nameLabel + StringExternal("Param/Value/BF527362"))), ColorWithAlpha(0, 0, 0, 0), false, 0.5);
                lv_achievementNameLabel = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(lv_achievementBody, 353, 100, c_anchorTopLeft, 0, 0, (StringExternal("Param/Value/A66E4D5A") + (lp_description + StringExternal("Param/Value/3FBE16B7"))), ColorWithAlpha(0, 0, 0, 0), false, 0.5);
                lv_description = DialogControlLastCreated();
                DialogControlSetPositionRelative(lv_description, PlayerGroupSingle(lp_player), c_anchorTopLeft, lv_achievementNameLabel, c_anchorBottomLeft, 0, -25);
                libNtve_gf_CreateDialogItemLabel(lv_achievementBody, 84, 50, c_anchorTopRight, 40, 60, (StringExternal("Param/Value/76D1F53B") + (lp_points + StringExternal("Param/Value/BB3CAE27"))), ColorWithAlpha(0, 0, 0, 0), false, 0.5);
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-20.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-25.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-30.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-35.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_CreateDialogItemImage(lv_achievementBody, 76, 76, c_anchorTopLeft, 44, 40, StringToText(""), lp_icon, c_triggerImageTypeNormal, false, Color(100, 100, 100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemImage(lv_achievementBody, 76, 84, c_anchorTopLeft, 44, 40, StringToText(""), "Assets/Textures/white32.dds", c_triggerImageTypeNormal, true, Color(100, 100, 100), c_triggerBlendModeNormal);
                lv_flash = DialogControlLastCreated();
                DialogControlFadeTransparency(lv_flash, PlayerGroupSingle(lp_player), 0.25, 100.0);
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-40.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-45.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_CreateDialogItemImage(lv_achievementBody, 84, 84, c_anchorTopRight, 46, 37, StringToText(""), "Assets/Textures/white32.dds", c_triggerImageTypeNormal, true, Color(100, 100, 100), c_triggerBlendModeNormal);
                lv_flash2 = DialogControlLastCreated();
                DialogControlFadeTransparency(lv_flash2, PlayerGroupSingle(lp_player), 0.25, 100.0);
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-50.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                DialogControlFadeTransparency(lv_flash, PlayerGroupSingle(lp_player), 0.0, 100.0);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-55.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                DialogControlDestroy(lv_animation);
                Wait(0.0625, c_timeGame);
                DialogControlFadeTransparency(lv_flash2, PlayerGroupSingle(lp_player), 0.0, 100.0);
                Wait(0.1, c_timeGame);
                DialogControlFadeTransparency(lv_flash, PlayerGroupSingle(lp_player), 0.0, 75.0);
                DialogControlFadeTransparency(lv_flash2, PlayerGroupSingle(lp_player), 0.0, 75.0);
                libNtve_gf_SetDialogItemImage(lv_flash2, "Textures\\Achievement-Animation-Point-Shine-1.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemImage(lv_flash, "Textures\\Achievement-Animation-Icon-Shine-1.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_flash2, "Textures\\Achievement-Animation-Point-Shine-5.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemImage(lv_flash, "Textures\\Achievement-Animation-Icon-Shine-5.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_flash2, "Textures\\Achievement-Animation-Point-Shine-9.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemImage(lv_flash, "Textures\\Achievement-Animation-Icon-Shine-9.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                DialogControlDestroy(lv_flash);
                DialogControlDestroy(lv_flash2);
                Wait(0.0625, c_timeGame);
                auto98378251_ae = 100;
                auto98378251_ai = 1;
                lv_y = 0;
                for (; ((auto98378251_ai >= 0 && lv_y <= auto98378251_ae) || (auto98378251_ai <= 0 && lv_y >= auto98378251_ae)); lv_y += auto98378251_ai)
                {
                    DialogSetTransparency(lv_achievementBody, lv_y);
                    Wait(0.125, c_timeGame);
                }
                DialogSetVisible(lv_achievementBody, PlayerGroupSingle(lp_player), false);
                DialogDestroy(lv_achievementBody);
                gv_achievementSlotFilled[lv_z][lp_player] = false;
                break;
            }
        }
    }
    PlayerGroupLoopEnd();
}
trigger gt_HNuclear_HALT;
bool gt_HNuclear_HALT_Func(bool lp_1, bool lp_2)
{
    if (EventDialogControl() != gv_HNuclearStopButton) { return true; }
    if (!TriggerIsEnabled(TriggerGetCurrent())) { return true; }
    if (gv_currentHNCp != 0 && gv_currentHNCp != EventPlayer()) { UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("<c val=\"ff1212\">"+"Access Denied!")); return true; }
    UnitGroupLoopBegin(UnitGroup("TerranHeavyNuclearMissileMK2S", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitSetPosition(UnitGroupLoopCurrent(), Point(255,255), false);
    UnitRemove(UnitGroupLoopCurrent());
    return true;
}
void gt_HNuclear_HALT_Init()
{
    gt_HNuclear_HALT = TriggerCreate("gt_HNuclear_HALT_Func");
    TriggerEnable(gt_HNuclear_HALT, false);
    TriggerAddEventDialogControl(gt_HNuclear_HALT, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
trigger gt_HNuclear_InstantDetonate;
bool gt_HNuclear_InstantDetonate_Func(bool lp_1, bool lp_2)
{
    if (EventDialogControl() != gv_InstantDetonationButton) { return true; }
    if (!TriggerIsEnabled(TriggerGetCurrent())) { return true; }
    if (gv_currentHNCp != 0 && gv_currentHNCp != EventPlayer()) { UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("<c val=\"ff1212\">"+"Access Denied!")); return true; }
    UnitGroupLoopBegin(UnitGroup("TerranHeavyNuclearMissileMK2S", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitRemove(UnitGroupLoopCurrent());
    return true;
}
void gt_HNuclear_InstantDetonate_Init()
{
    gt_HNuclear_InstantDetonate = TriggerCreate("gt_HNuclear_InstantDetonate_Func");
    TriggerEnable(gt_HNuclear_InstantDetonate, false);
    TriggerAddEventDialogControl(gt_HNuclear_InstantDetonate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
unit gf_CenterAI_HighestHNTS()
{
    unit lv_target;
    int lv_compare;
    int lv_highestunitcount;
    unit lv_playerhero = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
    unitgroup lv_undeadgroup = UnitGroupEmpty();
    lv_undeadgroup = UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_undeadgroup);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        if (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_playerhero)) < 30.0) { continue; }
        lv_compare = UnitGroupCount(UnitGroup(null, 14, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 8.0), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if (lv_compare > lv_highestunitcount) { lv_target = UnitGroupLoopCurrent(); lv_highestunitcount = lv_compare; }
    }
    UnitGroupLoopEnd();
    if (lv_highestunitcount <= 4) 
    { 
        UnitGroupLoopBegin(lv_undeadgroup);
        for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
        {
            if (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_playerhero)) < 30.0) { continue; }
            lv_compare = UnitGroupCount(UnitGroup(null, 14, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if (lv_compare > lv_highestunitcount) { lv_target = UnitGroupLoopCurrent(); lv_highestunitcount = lv_compare; }
        }
        UnitGroupLoopEnd();
    }
    return lv_target;
}
void gf_LaunchHNuclearMissleToTarget(bool lp_notrandom, fixed lp_wonderdistance, unit lp_targetunit)
{
    unit lv_fakelauncher;
    unit lv_projectile;
    fixed lv_origindistance;
    fixed lv_currentdistance;
    region lv_randomregion;
    fixed lv_percentage;
    point lv_currentnuclearending;
    point lv_fakelauncherspawnpoint;
    point lv_cinematicTargetPoint;
    int lv_nuclearCurrentStatusDialog;
    actor lv_sign;
    int lv_hnucleardialogmodel;
    int lv_launchProgressLabel;
    int lv_launchProgressDrawLabel;
    int lv_currentHNSLabelPoint;
    int lv_currentHNSLabelHeight;
    int lv_currentHNSLabel;
    int lv_PrintInfo;
    int lv_ringcount = 0;
    int lv_player = gv_currentHNCp;
    UISetButtonFaceHighlighted(PlayerGroupAll(), "HNuclearDesignator", false);
    lv_randomregion = RegionEmpty();
    lv_randomregion = RegionEntireMap();
    RegionAddRect(lv_randomregion, false, 10.0, 10.0, 245.0, 245.0);
    //VisRevealArea(lv_player, RegionCircle(UnitGetPosition(lp_targetunit), 30.0), 25.0, false);
    CatalogFieldValueSet(c_gameCatalogBehavior, "RongYanChongSlowAura", "Modification.SightMaximum", lv_player, "0");
    if (lp_notrandom)
    {
        lv_fakelauncherspawnpoint = PointWithOffsetPolar(UnitGetPosition(lp_targetunit), lp_wonderdistance, libNtve_gf_RandomAngle());
        lv_fakelauncherspawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_fakelauncherspawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_fakelauncherspawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactUlnarN", c_unitCreateIgnorePlacement, lv_player, lv_fakelauncherspawnpoint); 
    }
    else { libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactUlnarN", c_unitCreateIgnorePlacement, lv_player, RegionRandomPoint(lv_randomregion)); }
    lv_fakelauncher = UnitLastCreated();
    UnitBehaviorAdd(lv_fakelauncher, "RongYanChongSlowAura", lv_fakelauncher, 1);
    ActorSend(libNtve_gf_MainActorofUnit(lv_fakelauncher), "SetVisibility");
    CatalogFieldValueSet(c_gameCatalogAbil, "HeavyNuclearMissileArmadaBC", "PrepTime[0]", lv_player, "0");
    UnitIssueOrder(lv_fakelauncher, OrderTargetingUnit(AbilityCommand("HeavyNuclearMissileArmadaBC", 0), lp_targetunit), c_orderQueueReplace);
    lv_sign = libNtve_gf_AttachModelToUnit(lp_targetunit, "BriefingUnitSelectRed", "Ref_Center");
    ActorSend(libNtve_gf_MainActorofUnit(lp_targetunit), "MinimapIcon Assets\\Textures\\spaceplatformgrounddecalsymbol1_diffuse.dds");
    ActorSend(libNtve_gf_MainActorofUnit(lp_targetunit), "MinimapIconScale 0.5");
    ActorSend(libNtve_gf_MainActorofUnit(lp_targetunit), "Create DamageStageIndicator");
    
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        libNtve_gf_ShareVisionofUnit(lp_targetunit, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    while (UnitGetType(lv_projectile) != "TerranHeavyNuclearMissileMK2S")
    {
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
        for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
        {
            if (UnitGetType(UnitGroupLoopCurrent()) == "TerranHeavyNuclearMissileMK2S")
            {
                lv_projectile = UnitGroupLoopCurrent();
                break;
            }
        }
        UnitGroupLoopEnd();
        Wait(0.125, c_timeGame);
    }
    UnitRemove(lv_fakelauncher);
    lv_nuclearCurrentStatusDialog = DialogCreate(400, 500, c_anchorTopRight, 10, 200, true);
    DialogSetVisible(lv_nuclearCurrentStatusDialog, PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(lv_nuclearCurrentStatusDialog, 300, 85, c_anchorCenter, 20, 170, StringToText("Ballistic Trajectory Pecentage"), ColorWithAlpha(0,0,0,0), false, 0.0);
    libNtve_gf_CreateDialogItemLabel(lv_nuclearCurrentStatusDialog, 130, 85, c_anchorLeft, 32, 190, StringToText("%."), Color(149*100/255,150*100/255,151*100/255), false, 0.0);
    lv_launchProgressLabel = libNtve_gf_CreateDialogItemLabel(lv_nuclearCurrentStatusDialog, 130, 85, c_anchorLeft, 327, 190, StringToText(""), Color(149*100/255,150*100/255,151*100/255), false, 0.0);
    lv_launchProgressDrawLabel = libNtve_gf_CreateDialogItemLabel(lv_nuclearCurrentStatusDialog, 340, 75, c_anchorCenter, 45, 190, StringToText("-------------------------------------------"), ColorWithAlpha(0,0,0,0), false, 0.0);
    lv_currentHNSLabelPoint = libNtve_gf_CreateDialogItemLabel(lv_nuclearCurrentStatusDialog, 300, 85, c_anchorCenter, 20, 220, StringToText("ATVX - HNS"), ColorWithAlpha(0,0,0,0), false, 0.0);
    libNtve_gf_CreateDialogItemLabel(lv_nuclearCurrentStatusDialog, 130, 85, c_anchorLeft, 32, 240, StringToText("P/H.D."), Color(149*100/255,150*100/255,151*100/255), false, 0.0);
    lv_currentHNSLabelHeight = libNtve_gf_CreateDialogItemLabel(lv_nuclearCurrentStatusDialog, 130, 85, c_anchorLeft, 327, 240, StringToText(""), Color(149*100/255,150*100/255,151*100/255), false, 0.0);
    lv_currentHNSLabel = libNtve_gf_CreateDialogItemLabel(lv_nuclearCurrentStatusDialog, 340, 75, c_anchorCenter, 45, 240, StringToText("-------------------------------------------"), ColorWithAlpha(0,0,0,0), false, 0.0);
    libNtve_gf_CreateDialogItemLabel(lv_nuclearCurrentStatusDialog, 300, 100, c_anchorCenter, 0, -125, StringToText("     <s val=\"EditorOverlay\">TACNET"), Color(79.8,100.0,100.0), false, 0.0);
    gv_InstantDetonationButton = libNtve_gf_CreateDialogItemButton(lv_nuclearCurrentStatusDialog, 150, 80, c_anchorCenter, -80, -50, StringToText(""), StringToText("<c val=\"ff1212\">"+"Detonate"), "");
    gv_HNuclearStopButton = libNtve_gf_CreateDialogItemButton(lv_nuclearCurrentStatusDialog, 150, 80, c_anchorCenter, 80, -50, StringToText(""), StringToText("<c val=\"ff00ff\">"+"HALT"), "");
    TriggerEnable(gt_HNuclear_InstantDetonate, true);
    TriggerEnable(gt_HNuclear_HALT, true);
    lv_origindistance = DistanceBetweenPoints(UnitGetPosition(lp_targetunit),UnitGetPosition(lv_projectile));
    
    lv_PrintInfo = libNtve_gf_CreateDialogItemLabel(lv_nuclearCurrentStatusDialog, 300, 150, c_anchorCenter, 20, 90, StringToText("System Connected.</n>Nuclear Launch States - Approaching...</n>Target Position:</n>Distance To Impact:"), Color(79.8,100.0,100.0), true, 1.0);
    while (UnitIsAlive(lv_projectile))
    {
        if (UnitIsAlive(lp_targetunit)) { lv_currentnuclearending = UnitGetPosition(lp_targetunit); }
        lv_currentdistance = DistanceBetweenPoints(lv_currentnuclearending, UnitGetPosition(lv_projectile));
        lv_percentage = (lv_origindistance - lv_currentdistance) * 100.0 / lv_origindistance;
        if (lv_percentage < 0.0) { lv_percentage = 0.0; }
        libNtve_gf_SetDialogItemText(lv_launchProgressLabel, FixedToText(lv_percentage, 1) + StringToText("%"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lv_launchProgressDrawLabel, gf_drawProgressBarAsText(52, FixedToInt(lv_percentage), 100, "ff0000", "80ff80"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lv_currentHNSLabelPoint, StringToText("ATVX - HNS - ") + FixedToText(PointGetX(UnitGetPosition(lv_projectile)), 1) + StringToText(", ") + FixedToText(PointGetY(UnitGetPosition(lv_projectile)), 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lv_currentHNSLabelHeight, FixedToText(WorldHeight(c_heightMapAir, UnitGetPosition(lv_projectile)), 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lv_currentHNSLabel, gf_drawProgressBarAsText(52, FixedToInt(WorldHeight(c_heightMapGround, UnitGetPosition(lv_projectile))*10.0), 80, "ff0000", "80ff80"), PlayerGroupAll());
        if (lv_ringcount >= 22)
        {
            DialogControlDestroy(lv_PrintInfo);
            lv_PrintInfo = libNtve_gf_CreateDialogItemLabel(lv_nuclearCurrentStatusDialog, 300, 150, c_anchorCenter, 20, 90, StringToText("System Connected.</n>Nuclear Launch States - Approaching...</n>Target Position: ") + FixedToText(PointGetX(lv_currentnuclearending), 1) + StringToText(", ") + FixedToText(PointGetY(lv_currentnuclearending), 1) + StringToText("</n>Distance To Impact: " + FixedToString(lv_currentdistance, 1)), Color(79.8,100.0,100.0), false, 0.0);
        }
        lv_ringcount += 1;
        Wait(0.0625, c_timeGame);
    }
    TriggerEnable(gt_HNuclear_InstantDetonate, false);
    TriggerEnable(gt_HNuclear_HALT, false);
    DialogDestroy(lv_nuclearCurrentStatusDialog);
    if (UnitIsAlive(lp_targetunit)) 
    { 
        ActorSend(libNtve_gf_MainActorofUnit(lp_targetunit), "MinimapIcon");
        ActorSend(ActorFromScope(ActorScopeFromUnit(lp_targetunit), "DamageStageIndicator"), "Destroy"); 
    }
    ActorSend(lv_sign, "Destroy");
    ActorSend(ActorFromScope(ActorScopeFromUnit(lp_targetunit), "DamageStageIndicator"), "Destroy"); 
}
trigger gt_HNuclearDesignator;
bool gt_HNuclearDesignator_Func(bool lp_1, bool lp_2)
{
    if (!((UnitGetType(EventUnitInventoryItem()) == "HNuclearDesignator"))) { return true; }
    SoundPlay(SoundLink("HeavyNuclearMissileAttackChargeUp", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.5, c_timeGame);
    gv_currentHNCp = EventPlayer();
    gf_LaunchHNuclearMissleToTarget(false, 10.0, EventUnitInventoryItemTargetUnit());
    return true;
}
void gt_HNuclearDesignator_Init()
{
    gt_HNuclearDesignator = TriggerCreate("gt_HNuclearDesignator_Func");
    TriggerAddEventUnitInventoryChange(gt_HNuclearDesignator, null, c_unitInventoryChangeUses, null);
}
trigger gt_2018NewYear;
bool gt_2018NewYear_Func(bool testConds, bool runActions)
{
    int lv_i;
    int lv_j;
    const int lv_barcount = 14;
    color[lv_barcount + 1] lv_colors;
    int[lv_barcount] lv_cpb;
    int lv_currentdeepth;
    point lv_pingroll;
    fixed lv_x;
    fixed lv_y;
    int lv_ping;
    region lv_randomregion;
    int lv_rollstepcount;
    int lv_rollstepcurrent;
    int lv_rollstepperbar;
    int lv_hptotal;
    int lv_gamelooptakes;
    int lv_TUnlockDialog;
    int lv_TUnlockTechPicture;
    int lv_textlabel;
    int lv_player = UnitGetOwner(UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive));
    timer lv_music = TimerCreate();
    
    gv_iDFShellsGlobal = 16384;
    gv_mod_tier1 = true;
    gv_loopType = 3;
    gv_infestationLevel = 1;
    gv_HyperPulseT1Acc = true;
    gv_HyperPulseAcc = true;
    Wait(0.4, c_timeReal);
    SoundPlay(SoundLink("TESTPASS", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1212\">----HyperPulse T1 LEVEL-----"));
    //while (!gv_fireSupportSpecialist) { Wait(7.0, c_timeGame); }
    Wait(4.0, c_timeGame);
    gv_UnlimitedShells = true;
    SoundPlay(SoundLink("TESTPASS", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"80ff80\">"+"\xe5\xb7\xb2\xe6\x8e\x88\xe6\x9d\x83\xe4\xbd\xbf\xe7\x94\xa8"+"</n>-s 1~100</n>-r 0~50</n>-i 0.0625~3"));
    SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "vocaloid", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    while (GameGetMissionTime() < 650.0 && !gv_fasttestArray[0]) { Wait(7.0, c_timeGame); }
    gv_noviceInvasionPoints = 25;
    gf_StartSpawnLoop(2, 2);
    TriggerEnable(gt_CameraShakeLarge, false);
    TriggerEnable(gt_CameraShakeSmall, false);
    gf_TechUnlockDisplay("Assets\\Textures\\btn-upgrade-protoss-graviticbooster.dds", "\xe7\xa8\xb3\xe5\xae\x9a\xe5\x99\xa8", "\xe6\x8a\xb5\xe6\xb6\x88\xe6\xb8\xb8\xe6\x88\x8f\xe4\xb8\xad\xe7\x88\x86\xe7\x82\xb8\xe9\x80\xa0\xe6\x88\x90\xe7\x9a\x84\xe5\xb1\x8f\xe5\xb9\x95\xe6\x99\x83\xe5\x8a\xa8\xe6\x95\x88\xe6\x9e\x9c\xef\xbc\x8c\xe4\xbb\xa5\xe6\x8f\x90\xe9\xab\x98\xe6\x93\x8d\xe4\xbd\x9c\xe7\xa8\xb3\xe5\xae\x9a\xe6\x80\xa7\xe3\x80\x82");
    
    while (GameGetMissionTime() < 1500.0 && !gv_fasttestArray[1]) { Wait(8.0, c_timeGame); }
    gf_TechUnlockDisplay("Assets\\Textures\\btn-ability-protoss-warpinmadness-void.dds", "ATVX"+" - "+"\xe8\x87\xaa\xe9\x80\x82\xe5\xba\x94\xe9\x9b\xb7\xe8\xbe\xbe","\xe5\x91\xa8\xe6\x9c\x9f\xe6\x80\xa7\xe6\xa0\x87\xe8\xae\xb0\xe6\x89\x80\xe6\x9c\x89\xe9\xab\x98\xe5\xa8\x81\xe8\x83\x81\xe7\x94\x9f\xe7\x89\xa9"+"</n>"+"\xe5\x91\xa8\xe6\x9c\x9f\xe6\x80\xa7\xe6\xa0\x87\xe8\xae\xb0\xe6\x89\x80\xe6\x9c\x89\xe5\xb7\xa8\xe5\x9e\x8b\xe7\x94\x9f\xe7\x89\xa9");
    gv_voidRiftB = "JHERocketills0123";
    
    while (GameGetMissionTime() < 1800.0 && !gv_fasttestArray[2]) { Wait(1.0, c_timeGame); }
    SoundtrackStop(gv_players, c_soundtrackCategoryMusic, false);
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    Wait(20.0, c_timeGame);
    TriggerStop(gt_voidRift);
    
    //Void Rift Balance Switch V
    gv_voidRiftA = "ATRocket";
    
    //Cinematic
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, 0.5);
    SoundPlay(SoundLink("SPC30", -1), PlayerGroupAll(), 100.0, 0.0);
    TimerStart(lv_music, 224.0, false, c_timeReal);
    TimerRestart(lv_music);
    TimerPause(lv_music, true);
    TimerPause(lv_music, false);
    libNtve_gf_WaitForTimer(lv_music, 9.5, true);
    //Rise Fake T1 System Bar
    libNtve_gf_ShowHideBossBar(false, 46);
    libNtve_gf_ShowHideBossBar(false, 47);
    libNtve_gf_ShowHideBossBar(false, 48);
    
    //Fake Progress Bar
    gv_mod_tier1 = false;
    for (lv_i=0;lv_i<=14;lv_i+=1)
    {
        lv_colors[lv_i] = gf_RedToGreenLeftRotateStep(lv_i, 14);
    }
    lv_hptotal = 400000;
    for (lv_i = 0; lv_i < lv_barcount; lv_i += 1)
    {
        if (gv_cpbreg >= 45)
        {
            gv_cpbreg = 10;
        }
        libNtve_gv__BB_BarWidth[gv_cpbreg] = 1500;
        gf_CreateProgressBar(gv_cpbreg, "Assets\\Custom Icons\\Mod_T1.dds", StringToText("HyperPulse T1 - EXTREME"), lv_hptotal / lv_barcount, PlayerGroupAll(), lv_colors[lv_i + 1], lv_colors[lv_i]);
        lv_cpb[lv_i] = gv_cpbreg;
        libNtve_gf_ShowHideBossBar(false, gv_cpbreg);
        gv_cpbreg += 1;
    }
    lv_gamelooptakes = FixedToInt((85.5 - TimerGetElapsed(lv_music)) * 16);
    lv_rollstepperbar = lv_gamelooptakes / lv_barcount;
    lv_rollstepcount = lv_barcount * lv_rollstepperbar;
    //lv_pingroll = Point(RandomFixed(15.0, 230.0), 251.0);
    //libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MassivePing", lv_pingroll, ColorWithAlpha(100.00, 10.00, 10.00, 0.00), 0.0, 270.0);
    //lv_ping = PingLastCreated();
    //PingSetScale(PingLastCreated(), 0.4);
    lv_randomregion = RegionEmpty();
    lv_randomregion = RegionEntireMap();
    RegionAddRect(lv_randomregion, false, 10.0, 10.0, 245.0, 245.0);
    for (lv_i = lv_barcount - 1; lv_i >= 0; lv_i -= 1)
    {
        if (lv_i >= 6) { libNtve_gv__BB_Portraits[lv_cpb[lv_i]] = "Assets\\Custom Icons\\Mod_T3.dds"; }
        else if (lv_i >= 2) { libNtve_gv__BB_Portraits[lv_cpb[lv_i]] = "Assets\\Custom Icons\\Mod_T2.dds"; }
        else { libNtve_gv__BB_Portraits[lv_cpb[lv_i]] = "Assets\\Custom Icons\\Mod_T1.dds"; }
        
        //libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[lv_i]], (StringToText("Invasion - ") + IntToText(lv_hptotal)), PlayerGroupAll());
        //libNtve_gf_SetBossBarCurrentValue2(lv_cpb[lv_i], lv_hptotal / lv_barcount / lv_barcount * (lv_barcount - lv_i), true);
        libNtve_gf_ShowHideBossBar(true, lv_cpb[lv_i]);
        DialogSetTransparency(libNtve_gv__BB_Dialog[lv_cpb[lv_i]], IntToFixed(lv_i + 1) * 4.2);
        for (lv_j = 0; lv_j < lv_rollstepperbar; lv_j += 1)
        {
            lv_rollstepcurrent += 1;
            libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[lv_i]], (StringToText("Invasion - ") + IntToText(20186666 / lv_rollstepcount * lv_rollstepcurrent)+StringToText("/")+IntToText(20186666)), PlayerGroupAll());
            libNtve_gv__BB_Title[lv_cpb[lv_i]] = StringToText("HyperPulse T1 - EXTREME");
            libNtve_gf_SetBossBarCurrentValue2(lv_cpb[lv_i], (lv_hptotal / lv_barcount / lv_rollstepcount * lv_rollstepcurrent), true);
            if (RandomInt(0,1) == 0)
            {
                gv_fakeILDelta += 1;
                TriggerExecute(gt_AdvancedInfestationLevelDisplay, false, false);
                if (RandomInt(0,2) == 1)
                {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MassivePing", RegionRandomPoint(lv_randomregion), ColorWithAlpha(100.00, 10.00, 10.00, 0.00), 1.6, 270.0);
                    PingSetScale(PingLastCreated(), 0.3);
                }
            }
            //Pulse MiniMap
            //lv_x = PointGetX(lv_pingroll);
            //lv_y = PointGetY(lv_pingroll);
            //if (lv_x >= 5.0 && lv_y >= 250.0)
            //{
            //    lv_pingroll = Point(lv_x - 2.5, 251.0);
            //}
            //else if (lv_x < 6.0 && lv_y >= 6.0)
            //{
            //    lv_pingroll = Point(5.0, lv_y - 2.5);
            //}
            //else if (lv_x <= 250.0 && lv_y < 6.0)
            //{
            //    lv_pingroll = Point(lv_x + 2.5, 5.0);
            //}
            //else if (lv_x > 250.0 && lv_y <= 250.0)
            //{
            //    lv_pingroll = Point(251.0, lv_y + 2.5);
            //}
            //else
            //{
            //    lv_pingroll = Point(RandomFixed(15.0, 230.0), 251.0);
            //}
            //PingSetPosition(lv_ping, lv_pingroll);
            Wait(0.0625, c_timeGame);
            if (TimerGetElapsed(lv_music) > 82.5)
            {
                //PingDestroy(lv_ping);
                libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[lv_i]], (StringToText("Invasion - ") + IntToText(20186666)+StringToText("/")+IntToText(20186666)), PlayerGroupAll());
                libNtve_gv__BB_Title[lv_cpb[lv_i]] = StringToText("HyperPulse T1 - EXTREME");
                libNtve_gf_SetBossBarCurrentValue2(lv_cpb[lv_i], (lv_hptotal / lv_barcount), true);
                //Main Cinematic
                UnitPauseAll(true);
                libNtve_gf_MakeUnitInvulnerable(gv_playerHeroes[lv_player], true);
                CinematicFade(false, 0.2, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
                CinematicFade(true, 1.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, false);
                
                
                lv_TUnlockDialog = DialogCreate(700, 400, c_anchorCenter, 0, -200, true);
                lv_TUnlockTechPicture = DialogCreate(150, 150, c_anchorCenter, -200, -180, true);
                
                lv_textlabel = libNtve_gf_CreateDialogItemLabel(lv_TUnlockDialog, 350,200,c_anchorCenter,100,90,StringToText("<s val=\"Chat_Display\">"+"\xe5\x91\xbc\xe5\x8f\xab\xe7\x81\xab\xe5\x8a\x9b\xe6\x94\xaf\xe6\x8f\xb4\xe4\xb8\xad\xe5\xbf\x83\xe5\x8f\x91\xe5\xb0\x84\xe4\xb8\x80\xe6\x9e\x9a\xe6\x88\x98\xe6\x9c\xaf\xe8\xbf\xbd\xe8\xb8\xaa\xe6\xa0\xb8\xe5\xbc\xb9\xef\xbc\x8c\xe6\x89\x93\xe5\x87\xbb\xe7\x9b\xae\xe6\xa0\x87\xe5\x8c\xba\xe5\x9f\x9f\xef\xbc\x88\xe5\x8d\x95\xe4\xbd\x8d\xef\xbc\x89"),Color(100.0,100.0,100.0),true,3.0);
                DialogSetImageVisible(lv_TUnlockTechPicture, false);
                DialogSetVisible(lv_TUnlockTechPicture, PlayerGroupAll(), true);
                DialogSetVisible(lv_TUnlockDialog, PlayerGroupAll(), true);
                DialogSetTitle(lv_TUnlockDialog, StringToText("<s val=\"Military_Title\"><c val=\"FFFFFF\">"+"\xe6\x96\xb0\xe7\xa7\x91\xe6\x8a\x80\xe8\xa7\xa3\xe9\x94\x81"+" - "+"\xe5\x91\xbc\xe5\x8f\xab\xe6\xa0\xb8\xe6\x89\x93\xe5\x87\xbb"));
                libNtve_gf_CreateDialogItemImage(lv_TUnlockTechPicture, DialogGetWidth(lv_TUnlockTechPicture), DialogGetHeight(lv_TUnlockTechPicture), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\btn-ability-terran-radioactive-color.dds", c_triggerImageTypeNormal, false, Color(100.0, 100.0, 100.0), c_triggerBlendModeNormal);
                DialogSetTransparency(lv_TUnlockTechPicture, 30.0);
                DialogSetTransparency(lv_TUnlockDialog, 15.0);
                
                while (TimerGetElapsed(lv_music) < 88.4) { Wait(0.0625, c_timeGame); }
                DialogControlDestroy(lv_textlabel);
                lv_textlabel = libNtve_gf_CreateDialogItemLabel(lv_TUnlockDialog, 350,200,c_anchorCenter,100,90,StringToText("<s val=\"Chat_Display\">"+"\xe5\x8f\x91\xe5\xb0\x84\xe4\xb8\x80\xe6\x9e\x9a\xe9\xab\x98\xe7\xb2\xbe\xe5\xba\xa6\xe5\x88\xb6\xe5\xaf\xbc\xe6\xa0\xb8\xe5\xbc\xb9"+"</n>"+"\xe9\x9d\xa0\xe8\xbf\x91\xe7\x9b\xae\xe6\xa0\x87\xe5\x90\x8e\xe4\xba\xa7\xe7\x94\x9f\xe6\xa0\xb8\xe7\x88\x86\xe7\x82\xb8"+"</n>"+"\xe7\x88\x86\xe7\x82\xb8\xe4\xbc\xa4\xe5\xae\xb3\xef\xbc\x9a"+"1000"),Color(100.0,100.0,100.0),true,3.8);
                Wait(4.2, c_timeGame);
                libNtve_gf_SetDialogItemTextWriteout(gv_playerExperience[0][12], false, PlayerGroupAll());
                DialogControlDestroy(lv_textlabel);
                lv_textlabel = libNtve_gf_CreateDialogItemLabel(lv_TUnlockDialog, 350,200,c_anchorCenter,100,90,StringToText("<s val=\"Chat_Display\"><c val=\"ff12ff\">"+"\xe5\x8f\x91\xe5\xb0\x84\xe4\xb8\x80\xe6\x9e\x9a\xe9\xab\x98\xe7\xb2\xbe\xe5\xba\xa6\xe5\x88\xb6\xe5\xaf\xbc\xe6\xa0\xb8\xe5\xbc\xb9"+"</n>"+"\xe9\x9d\xa0\xe8\xbf\x91\xe7\x9b\xae\xe6\xa0\x87\xe5\x90\x8e\xe4\xba\xa7\xe7\x94\x9f\xe6\xa0\xb8\xe7\x88\x86\xe7\x82\xb8"+"</n>"+"\xe7\x88\x86\xe7\x82\xb8\xe4\xbc\xa4\xe5\xae\xb3\xef\xbc\x9a"+"1000"),Color(100.0,100.0,100.0),false,0.0);
                libNtve_gf_SetDialogItemTextWriteout(gv_playerExperience[0][12], false, PlayerGroupAll());
                for (lv_i = 1; lv_i <= 15; lv_i += 1)
                {
                    DialogControlSetPropertyAsText(lv_textlabel, 1, PlayerGroupAll(), StringToText("<s val=\"Chat_Display\"><c val=\"ff12ff\">"+"\xe5\x8f\x91\xe5\xb0\x84\xe4\xb8\x80\xe6\x9e\x9a\xe9\xab\x98\xe7\xb2\xbe\xe5\xba\xa6\xe5\x88\xb6\xe5\xaf\xbc\xe6\xa0\xb8\xe5\xbc\xb9"+"</n>"+"\xe9\x9d\xa0\xe8\xbf\x91\xe7\x9b\xae\xe6\xa0\x87\xe5\x90\x8e\xe4\xba\xa7\xe7\x94\x9f\xe6\xa0\xb8\xe7\x88\x86\xe7\x82\xb8"+"</n>"+"\xe7\x88\x86\xe7\x82\xb8\xe4\xbc\xa4\xe5\xae\xb3\xef\xbc\x9a"+IntToString(lv_i * 6666 + RandomInt(-2400,2400))));
                    Wait(0.0625, c_timeGame);
                }
                DialogControlSetPropertyAsText(lv_textlabel, 1, PlayerGroupAll(), StringToText("<s val=\"Chat_Display\"><c val=\"ff12ff\">"+"\xe5\x8f\x91\xe5\xb0\x84\xe4\xb8\x80\xe6\x9e\x9a\xe9\xab\x98\xe7\xb2\xbe\xe5\xba\xa6\xe5\x88\xb6\xe5\xaf\xbc\xe6\xa0\xb8\xe5\xbc\xb9"+"</n>"+"\xe9\x9d\xa0\xe8\xbf\x91\xe7\x9b\xae\xe6\xa0\x87\xe5\x90\x8e\xe4\xba\xa7\xe7\x94\x9f\xe6\xa0\xb8\xe7\x88\x86\xe7\x82\xb8"+"</n>"+"\xe7\x88\x86\xe7\x82\xb8\xe4\xbc\xa4\xe5\xae\xb3\xef\xbc\x9a"+"<c val=\"ff00ff\">100000"));
                CinematicFade(false, 0.2, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
                CinematicFade(true, 0.8, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, false);
                Wait(0.5, c_timeGame);
                DialogDestroy(lv_TUnlockDialog);
                DialogDestroy(lv_TUnlockTechPicture);
                
                UnitPauseAll(false);
                libNtve_gf_ShowHideBossBar(false, lv_cpb[0]);
                libNtve_gf_ShowHideBossBar(true, 46);
                libNtve_gf_ShowHideBossBar(true, 47);
                libNtve_gf_ShowHideBossBar(true, 48);
                libNtve_gf_MakeUnitInvulnerable(gv_playerHeroes[lv_player], false);
                gf_LaunchHNuclearMissleToTarget(true, 50.0, gf_CenterAI_HighestHNTS());
                //Give Player HNuclear Designator
                //if (gv_devindex != 0) { lv_player = gv_devindex; }
                if (UnitInventoryCount(gv_playerHeroes[lv_player], c_unitInventoryCountEmpty) == 0) 
                { 
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitInventoryItem(gv_playerHeroes[lv_player], 1)), 0, 0, UnitGetPosition(gv_playerHeroes[lv_player]));
                    UnitRemove(UnitInventoryItem(gv_playerHeroes[lv_player], 1));
                    Wait(0.160, c_timeGame);
                }
                UnitInventoryCreate(gv_playerHeroes[lv_player], "HNuclearDesignator");
                UnitSetOwner(UnitInventoryLastCreated(), 0, true);
                UISetButtonFaceHighlighted(PlayerGroupAll(), "HNuclearDesignator", true);
                //Void Rift Balance Switch D
                gv_voidRiftA = "HERocket";
                if (gv_fakeILDelta > 0)
                {
                    gv_fakeILDelta /= 3;
                    while (gv_fakeILDelta != 0)
                    {
                        if (RandomInt(0, 2) == 1) { gv_fakeILDelta -= 1; TriggerExecute(gt_AdvancedInfestationLevelDisplay, false, false); }
                        Wait(0.0625, c_timeGame);
                    }
                }
                return true;
            }
        }
        libNtve_gf_ShowHideBossBar(false, lv_cpb[lv_i]);
    }
    //gf_TechUnlockDisplay("Assets\\Textures\\btn-ability-terran-radioactive-color.dds", "\xe5\x91\xbc\xe5\x8f\xab\xe6\xa0\xb8\xe6\x89\x93\xe5\x87\xbb");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_2018NewYear_Init()
{
    gt_2018NewYear = TriggerCreate("gt_2018NewYear_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Void Rift
//--------------------------------------------------------------------------------------------------
bool gt_voidRift_Func(bool testConds, bool runActions)
{
    //Void Rift Balance Static Prepare
    string lv_voidRiftB;
    bool lv_Vortex;
    //Void Rift Texture
    
    //"JHERocketills0123"
    lv_voidRiftB = StringSub(gv_voidRiftB, 2, StringLength(gv_voidRiftA) + 1);
    // Actions
    if (!runActions) { return true; }
    
    //Void Rift Test Connection
    if (gv_voidRiftA == lv_voidRiftB) { lv_Vortex = true; }
    //Void Rift Break or Connect
    if (!(lv_Vortex)) { return true; }
    ////Void Rift Transformer
    //UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    //for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    //{
    //    if (!(gf_ItemIsValiable(UnitGetType(UnitGroupLoopCurrent())))) { continue; }
    //    if (!(gf_ItemIsNorble(UnitGetType(UnitGroupLoopCurrent()))))
    //    {
    //        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(40.00, 40.00, 40.00, 0.00), 6, 270.0);
    //        PingSetScale(PingLastCreated(), 0.38);
    //    }
    //    else
    //    {
    //        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.00, 0.00, 100.00, 0.00), 6, 270.0);
    //        PingSetScale(PingLastCreated(), 0.62);
    //    }
    //    PingSetTooltip(PingLastCreated(), UnitGetName(UnitGroupLoopCurrent()));
    //    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
    //}
    //UnitGroupLoopEnd();
    
    //Wait(7.5, c_timeGame);
    
    //Void Rift Shuffle
    UnitGroupLoopBegin(UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MassivePing", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(10.20, 100.00, 90.00, 0.00), 8.0, 270.0);
        PingSetTooltip(PingLastCreated(), UnitGetName(UnitGroupLoopCurrent()));
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        PingSetScale(PingLastCreated(), 0.25);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0, 270.0);
        PingSetTooltip(PingLastCreated(), UnitGetName(UnitGroupLoopCurrent()));
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        PingSetScale(PingLastCreated(), 0.5);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 8.0, 270.0);
        PingSetTooltip(PingLastCreated(), UnitGetName(UnitGroupLoopCurrent()));
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        PingSetScale(PingLastCreated(), 0.5);
    }
    UnitGroupLoopEnd();
    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(gv_undeadGroup);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        if (!(gf_isHighRiskZombie(UnitGroupLoopCurrent()))) { continue; }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "RadarPing", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 10.00, 10.00, 0.00), 7.5, 270.0);
        PingSetTooltip(PingLastCreated(), UnitGetName(UnitGroupLoopCurrent()));
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        PingSetScale(PingLastCreated(), 0.0375);
    }
    UnitGroupLoopEnd();
    Wait(9.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MassivePing", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(10.20, 100.00, 90.00, 0.00), 8.0, 270.0);
        PingSetTooltip(PingLastCreated(), UnitGetName(UnitGroupLoopCurrent()));
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        PingSetScale(PingLastCreated(), 0.25);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0, 270.0);
        PingSetTooltip(PingLastCreated(), UnitGetName(UnitGroupLoopCurrent()));
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        PingSetScale(PingLastCreated(), 0.5);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 8.0, 270.0);
        PingSetTooltip(PingLastCreated(), UnitGetName(UnitGroupLoopCurrent()));
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        PingSetScale(PingLastCreated(), 0.5);
    }
    UnitGroupLoopEnd();
    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(gv_undeadGroup);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        if (!(gf_isHighRiskZombie(UnitGroupLoopCurrent()))) { continue; }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "RadarPing", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 10.00, 10.00, 0.00), 7.5, 270.0);
        PingSetTooltip(PingLastCreated(), UnitGetName(UnitGroupLoopCurrent()));
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        PingSetScale(PingLastCreated(), 0.0375);
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_voidRift_Init()
{
    gv_voidRiftB = "JavelinSkills0123";
    gv_voidRiftA = "HERocket";
    gt_voidRift = TriggerCreate("gt_voidRift_Func");
    TriggerAddEventTimePeriodic(gt_voidRift, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RongYanChong
//--------------------------------------------------------------------------------------------------
bool gv_17summer;
bool gv_17summer2;
bool gv_fakedevmode;
fixed lib50770149_gf_negative(fixed lp_num);
point lib50770149_gf_getProjectionPoint(point lp_point);
point lib50770149_gf_lineZhangAiPoint(point lp_originPoint, point lp_targetPoint);
fixed lib50770149_gf_getProjectionPointHeight(point lp_point);
void libDA0A55AD_gf_weapon_RongYanChong_ZhuangJi(unit lp_originUnit, point lp_originPoint, unit lp_targetUnit, point lp_targetPoint);
point lib50770149_gf_getLineHeightImpactPoint(point lp_originPoint3D, point lp_targetPoint3D, int lp_num);
point lib50770149_gf_jiDianPianYiDianZuoBiaoAnQuan(point lp_point, fixed lp_angle, fixed lp_range);
void lib50770149_gf_playSoundTo3DPoint(point lp_point, soundlink lp_sound, fixed lp_e99FB3E9878F);
unitgroup lib50770149_gf_getAOESizeUnitGroup(int lp_player, point lp_targetPoint, fixed lp_aOEsize, unitfilter lp_aOEtype);
void lib50770149_gf_repelUnit(unit lp_unit, point lp_targetPoint, fixed lp_speedBegin, fixed lp_gravity, bool lp_ifHeightJudge, bool lp_ifFootPointJudge, bool lp_noAttenuation, string lp_zhuangQiangMessage);
void lib50770149_gf_createEffectOnceBSD(point lp_point, fixed lp_angle, string lp_model, int lp_modelChange, string lp_animaStart, string lp_animaStand, string lp_animaDeath, fixed lp_timeScale);
point lib50770149_gf_unit3DPoint(unit lp_unit);
void lib50770149_gf_Camera_ShockCameraRotaX(playergroup lp_players, fixed lp_force, fixed lp_hertz, fixed lp_defTime, fixed lp_time);
trigger gt_RongYanChongBehavior;
struct lib50770149_gs_Assets
{
    fixed lv_gameVar;
    int lv_bankRange;
    int lv_teamTagNum;
    int lv_registTeamTagNum;
    int lv_gameMode;
    int lv_gameDifficulty;
    timer lv_mainUpdateTimer;
    timer lv_subUpdateTimer;
    timer lv_hUDUpdateTimer;
    playergroup lv_userPlayerGroup;
    int lv_effectActorNum;
    bool lv_night;
    unit lv_God;
    actorscope lv_effectActor;
    string[256] lv_keyByChar;
    string[27] lv_ziMuDa;
    string[27] lv_ziMuXiao;
    int[5] lv_moveKey;
    int[32] lv_abilityKey;
    int[32] lv_itemKey;
    bool lv_e794A8E688B7E7958CE99DA2;
    bool lv_e58D95E4BD8D;
    bool lv_e6B581E7A88B;
    fixed[61] lv_levelUpDropMoneySize;
    int[61] lv_levelExp;
    fixed[61] lv_levelGiveExpMultiple;
    fixed[61] lv_diffWordEnemy;
    fixed[61] lv_diffEnemyDensity;
    int[61][5] lv_diffEnemyWordNum;
    fixed lv_unitLevelAddAttSize;
    int lv_e99ABEE5BAA6;
    fixed[7][7] lv_heroOriginAttPoint;
    fixed[7][7] lv_heroUpdateAttPoint;
    fixed[7][7] lv_enemyOriginAttPoint;
    fixed[7][7] lv_enemyUpdateAttPoint;
    fixed[7][7] lv_bossOriginAttPoint;
    fixed[7][7] lv_bossUpdateAttPoint;
    fixed[11] lv_const_MonsterPower;
    fixed[257][257] lv_terrainHeight;
    bool[257][257] lv_terrainSkyShiYe;
    int[257][257] lv_terrainXiePoAngle;
    fixed lv_const_MiniMapQingXieAngle;
    fixed lv_const_MiniMapQingXieSize;
    fixed lv_const_MiniMapQingXieSize2;
    fixed lv_const_PlayerCameraPianYiValue;
    fixed lv_const_PlayerCameraPianYiSpeed;
    int lv_hidUIDialogControlNum;
    int lv_hidUIDialogControlNum2;
    int lv_mainCityNum;
};
lib50770149_gs_Assets lib50770149_gv_assets;
void libDA0A55AD_gf_weapon_RongYanChong_ZhuangJi(unit lp_originUnit, point lp_originPoint, unit lp_targetUnit, point lp_targetPoint)
{
    int auto6D6B5A33_ae;
    int auto6D6B5A33_ai;
    unitgroup autoEB672F6E_g;
    int autoEB672F6E_u;
    // Variable Declarations
    string lv_originUnitType;
    point lv_localTargetPoint;
    point lv_point;
    fixed lv_range;
    fixed lv_angle;
    int lv_bit;
    fixed lv_bitRange;
    fixed lv_maxRange;
    int lv_unitSize;
    fixed[3] lv_damageSize;
    unitgroup lv_unitGroup;
    unit lv_iterator;
    sound lv_sound;
    int lv_a;
    fixed lv_damageramdoma;
    fixed lv_damageramdomb;
    // Variable Initialization
    lv_originUnitType = UnitGetType(lp_originUnit);
    lv_unitGroup = UnitGroupEmpty();
    // Implementation
    lv_damageramdoma = 50.0;
    lv_damageramdomb = 70.0;
    lv_damageSize[0] = 3.0;
    lv_damageSize[1] = 2.2;
    lv_damageSize[2] = 1.4;
    if ((lv_originUnitType == "RongYanChong"))
    {
        lv_unitSize = 0;
        lv_maxRange = 20.0;
        lv_damageramdoma = 50.0;
        lv_damageramdomb = 70.0;
    }
    if ((lv_originUnitType == "RongYanChongM"))
    {
        lv_unitSize = 1;
        lv_maxRange = 18.0;
        lv_damageramdoma = 45.0;
        lv_damageramdomb = 65.0;
    }
    if ((lv_originUnitType == "RongYanChongS"))
    {
        lv_unitSize = 2;
        lv_maxRange = 16.0;
        lv_damageramdoma = 40.0;
        lv_damageramdomb = 60.0;
    }
    UnitIssueOrder(lp_originUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    UnitSetFacing(lp_originUnit, AngleBetweenPoints(lp_originPoint, lp_targetPoint), 0.0);
    //UnitIssueOrder(lp_originUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
    //Wait(0.2, c_timeGame);
    UnitBehaviorAdd(lp_originUnit, "yizhizhuanshen", lp_originUnit, 1);
    UnitIssueOrder(lp_originUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    Wait(0.4, c_timeGame);
    lv_angle = AngleBetweenPoints(lp_originPoint, lp_targetPoint);
    lv_localTargetPoint = lib50770149_gf_getLineHeightImpactPoint(libNtve_gf_PointWithZOffset(lp_originPoint, (PointGetHeight(lp_originPoint) + 0.5)), libNtve_gf_PointWithZOffset(lib50770149_gf_jiDianPianYiDianZuoBiaoAnQuan(lp_originPoint, lv_angle, lv_maxRange), (PointGetHeight(lp_originPoint) + 0.5)), 1);
    lv_range = DistanceBetweenPoints(lp_originPoint, lv_localTargetPoint);
    lv_bitRange = 8.0;
    lv_bit = FixedToInt((lv_range / (lv_bitRange / 16.0)));
    ActorSend(libNtve_gf_MainActorofUnit(lp_originUnit), "AnimPlay Spell Walk,Superior PlayForever -1.000000 -1.000000 2.000000");
    //SoundPlay(SoundLink("Quake_GroundRip", -1), PlayerGroupAll(), 100.0, 0.0);
    lib50770149_gf_playSoundTo3DPoint(lp_originPoint, SoundLink("Quake_GroundRip", -1), (100.0 - IntToFixed((20 * lv_unitSize))));
    lv_sound = SoundLastPlayed();
    Wait(1.0, c_timeGame);
    if (UnitIsAlive(lp_originUnit) == false)
    {
        SoundStop(lv_sound, false);
        ;
        return;
    }
    UnitBehaviorAdd(lp_originUnit, "YiZhiZhanDouAndMove", lp_originUnit, 1);
    auto6D6B5A33_ae = lv_bit;
    auto6D6B5A33_ai = 1;
    lv_a = 1;
    for (; ((auto6D6B5A33_ai >= 0 && lv_a <= auto6D6B5A33_ae) || (auto6D6B5A33_ai <= 0 && lv_a >= auto6D6B5A33_ae)); lv_a += auto6D6B5A33_ai)
    {
        lv_point = PointWithOffsetPolar(lp_originPoint, ((lv_bitRange * 0.0625) * IntToFixed(lv_a)), lv_angle);
        UnitSetPosition(lp_originUnit, lv_point, true);
        lv_unitGroup = lib50770149_gf_getAOESizeUnitGroup(UnitGetOwner(lp_originUnit), lv_point, lv_damageSize[lv_unitSize], UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        autoEB672F6E_g = lv_unitGroup;
        autoEB672F6E_u = 1;
        for (; autoEB672F6E_u <= UnitGroupCount(autoEB672F6E_g, c_unitCountAll); autoEB672F6E_u += BoolToInt(lv_iterator == UnitGroupUnit(autoEB672F6E_g, autoEB672F6E_u)))
        {
            lv_iterator = UnitGroupUnit(autoEB672F6E_g, autoEB672F6E_u);
            lib50770149_gf_playSoundTo3DPoint(lv_point, SoundLink("Baneling_Suicide", -1), 100.0);
            lib50770149_gf_repelUnit(lv_iterator, PointWithOffsetPolar(lv_point, 5.0, AngleBetweenPoints(lv_point, UnitGetPosition(lv_iterator))), 10.0, 0.5, true, true, false, "AnimPlay Hit Hit");
            UnitDamage(lp_originUnit, "CriticalShotBonusFixed", lv_iterator, RandomFixed(lv_damageramdoma, lv_damageramdomb));
            //if (UnitGetType(lv_iterator) == "M200SatchelCharge") { UnitDamage(lp_originUnit, "CriticalShotBonusFixed", lv_iterator, RandomFixed(2400.0, 3200.0)); }
            lib50770149_gf_createEffectOnceBSD(lib50770149_gf_unit3DPoint(lv_iterator), libNtve_gf_RandomAngle(), "VoidRiftTrainBirth", 255, "Birth", "Stand", "Death", 1.0);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.500000");
        }
        Wait(0.0625, c_timeGame);
        if (UnitIsAlive(lp_originUnit) == false)
        {
            SoundStop(lv_sound, false);
            ;
            return;
        }
    }
    UnitSetPosition(lp_originUnit, lv_localTargetPoint, true);
    UnitBehaviorRemove(lp_originUnit, "YiZhiZhanDouAndMove", 1);
    lib50770149_gf_createEffectOnceBSD(lv_localTargetPoint, libNtve_gf_RandomAngle(), "SS_FighterBombScreenEffect", 255, "Birth", "Stand", "Death", 1.0);
    UnitBehaviorRemove(lp_originUnit, "yizhizhuanshen", 1);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale((1.0 - (IntToFixed(lv_unitSize) * 0.2)), (1.0 - (IntToFixed(lv_unitSize) * 0.2)), (1.0 - (IntToFixed(lv_unitSize) * 0.2)), 0.0));
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        if (!(UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]))) { continue; }
        if (DistanceBetweenPoints(UnitGetPosition(gv_playerHeroes[PlayerGroupLoopCurrent()]), lp_targetPoint) <= 30.0)
        {
            lib50770149_gf_Camera_ShockCameraRotaX(PlayerGroupSingle(PlayerGroupLoopCurrent()), (lv_damageSize[lv_unitSize] * 1.0), 0.0625, 0.5, 1.0);
        }
    }
    PlayerGroupLoopEnd();
    SoundStop(lv_sound, false);
    lib50770149_gf_playSoundTo3DPoint(lv_localTargetPoint, SoundLink("Zerg_ExplosionMedium", -1), (100.0 - IntToFixed((20 * lv_unitSize))));
    UnitIssueOrder(lp_originUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    ActorSend(libNtve_gf_MainActorofUnit(lp_originUnit), "AnimClear Spell");
    ActorSend(libNtve_gf_MainActorofUnit(lp_originUnit), "SetVisibility");
    ActorSend(libNtve_gf_MainActorofUnit(lp_originUnit), "Create RongYanChongSiJiaoChaoTian");
    Wait(2.0, c_timeGame);
    if (UnitIsAlive(lp_originUnit) == false)
    {
        return;
    }
    ActorSend(ActorFromScope(ActorScopeFromUnit(lp_originUnit), "RongYanChongSiJiaoChaoTian"), "AnimPlay Spell Walk,Superior,Start PlayForever,NonLooping");
    Wait(1.0, c_timeGame);
    if (UnitIsAlive(lp_originUnit) == false)
    {
        return;
    }
    ActorSend(libNtve_gf_MainActorofUnit(lp_originUnit), "SetVisibility 1");
    ActorSend(ActorFromScope(ActorScopeFromUnit(lp_originUnit), "RongYanChongSiJiaoChaoTian"), "Destroy");
    UnitIssueOrder(lp_originUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        CameraSetValue(PlayerGroupLoopCurrent(), c_cameraValueRoll, 0.0, 0.0625, -1, 10.0);
    }
    PlayerGroupLoopEnd();
}
point lib50770149_gf_getLineHeightImpactPoint(point lp_originPoint3D, point lp_targetPoint3D, int lp_num)
{
    int autoB08A7CEE_Mode;
    fixed[2] autoB08A7CEE_StartPoint;
    fixed autoB08A7CEE_BaseLength;
    fixed[2] autoB08A7CEE_PoseitionAdditional;
    fixed[2][3] autoB08A7CEE_TempPosition;
    int[2] autoB08A7CEE_RoundType;
    lib7084B428_gs_LibWH_VTS_GS_SpatialBeelineStruct autoB08A7CEE_TempBeeline;
    point[2] autoB08A7CEE_TempPoint;
    int autoB08A7CEE_I;
    // Variable Declarations
    point lv_returnPoint;
    point lv_iteratorPoint;
    int lv_iteratorX;
    int lv_iteratorY;
    point[257] lv_point;
    int[257] lv_x;
    int[257] lv_y;
    int lv_numX;
    text lv_text;
    int lv_b;
    int lv_a;
    // Variable Initialization
    // Implementation
    //======================================================================
    // Function : LibWH_FUNC_GS_LoopSeriesSpatialBeelinePointStepByInt
    //======================================================================
    autoB08A7CEE_Mode = 1;//Mode ==0 : Modify X Position
    autoB08A7CEE_StartPoint[0] = PointGetX(lp_originPoint3D);
    autoB08A7CEE_StartPoint[1] = PointGetY(lp_originPoint3D);
    autoB08A7CEE_BaseLength = DistanceSquaredBetweenPoints(lp_originPoint3D, lp_targetPoint3D);
    if (autoB08A7CEE_StartPoint[1] > PointGetY(lp_targetPoint3D))
    {
        autoB08A7CEE_PoseitionAdditional[0] = -1;
        autoB08A7CEE_TempPosition[0][1] = FloorI(autoB08A7CEE_StartPoint[1]);
        autoB08A7CEE_RoundType[0] = -1;
    }
    else if (autoB08A7CEE_StartPoint[1] < PointGetY(lp_targetPoint3D))
    {
        autoB08A7CEE_PoseitionAdditional[0] = 1;
        autoB08A7CEE_TempPosition[0][1] = CeilingI(autoB08A7CEE_StartPoint[1]);
        autoB08A7CEE_RoundType[0] = 0;
    }
    else
    {
        autoB08A7CEE_PoseitionAdditional[0] = 0;
        autoB08A7CEE_TempPosition[0][0] = PointGetX(lp_targetPoint3D);
        autoB08A7CEE_TempPosition[0][1] = PointGetY(lp_targetPoint3D);
        autoB08A7CEE_TempPosition[0][2] = PointGetHeight(lp_targetPoint3D);
        autoB08A7CEE_RoundType[0] = 0;
        autoB08A7CEE_Mode = 0;
    }
    if (autoB08A7CEE_StartPoint[0] > PointGetX(lp_targetPoint3D))
    {
        autoB08A7CEE_PoseitionAdditional[1] = -1;
        autoB08A7CEE_TempPosition[1][0] = FloorI(autoB08A7CEE_StartPoint[0]);
        autoB08A7CEE_RoundType[1] = -1;
    }
    else if (autoB08A7CEE_StartPoint[0] < PointGetX(lp_targetPoint3D))
    {
        autoB08A7CEE_PoseitionAdditional[1] = 1;
        autoB08A7CEE_TempPosition[1][0] = CeilingI(autoB08A7CEE_StartPoint[0]);
        autoB08A7CEE_RoundType[1] = 0;
    }
    else
    {
        autoB08A7CEE_PoseitionAdditional[1] = 0;
        autoB08A7CEE_TempPosition[1][0] = PointGetX(lp_targetPoint3D);
        autoB08A7CEE_TempPosition[1][1] = PointGetY(lp_targetPoint3D);
        autoB08A7CEE_TempPosition[1][2] = PointGetHeight(lp_targetPoint3D);
        autoB08A7CEE_RoundType[1] = 0;
    }
    if (autoB08A7CEE_PoseitionAdditional[0] != 0 || autoB08A7CEE_PoseitionAdditional[1] != 0)
    {
        LibWH_FUNC_GS_GetSpatialBeelineByPoint(lp_originPoint3D, lp_targetPoint3D, autoB08A7CEE_TempBeeline);
        if (autoB08A7CEE_PoseitionAdditional[autoB08A7CEE_Mode] != 0)
        {
            autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][autoB08A7CEE_Mode] = LibWH_FUNC_GS_SpatialBeelineGetXOrYOrZ[autoB08A7CEE_Mode][!autoB08A7CEE_Mode](autoB08A7CEE_TempBeeline, autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][!autoB08A7CEE_Mode]);
            autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][2] = LibWH_FUNC_GS_SpatialBeelineGetXOrYOrZ[2][!autoB08A7CEE_Mode](autoB08A7CEE_TempBeeline, autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][!autoB08A7CEE_Mode]);
        }
        autoB08A7CEE_TempPoint[autoB08A7CEE_Mode] = Point(autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][!autoB08A7CEE_Mode], autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][autoB08A7CEE_Mode]);
        PointSetHeight(autoB08A7CEE_TempPoint[autoB08A7CEE_Mode], autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][2]);
        autoB08A7CEE_Mode = !autoB08A7CEE_Mode;
        for (autoB08A7CEE_I = 0; autoB08A7CEE_I < 512; autoB08A7CEE_I += 1)
        {
            autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][autoB08A7CEE_Mode] = LibWH_FUNC_GS_SpatialBeelineGetXOrYOrZ[autoB08A7CEE_Mode][!autoB08A7CEE_Mode](autoB08A7CEE_TempBeeline, autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][!autoB08A7CEE_Mode]);
            autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][2] = LibWH_FUNC_GS_SpatialBeelineGetXOrYOrZ[2][!autoB08A7CEE_Mode](autoB08A7CEE_TempBeeline, autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][!autoB08A7CEE_Mode]);
            autoB08A7CEE_TempPoint[autoB08A7CEE_Mode] = Point(autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][0], autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][1]);
            PointSetHeight(autoB08A7CEE_TempPoint[autoB08A7CEE_Mode], autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][2]);
            if (DistanceSquaredBetweenPoints(lp_originPoint3D, autoB08A7CEE_TempPoint[0]) < DistanceSquaredBetweenPoints(lp_originPoint3D, autoB08A7CEE_TempPoint[1]))
            {
                autoB08A7CEE_Mode = 0;
                lv_iteratorPoint = autoB08A7CEE_TempPoint[0];
                lv_iteratorX = FloorI(autoB08A7CEE_TempPosition[0][0]);
                lv_iteratorY = FloorI(autoB08A7CEE_TempPosition[0][1]) + autoB08A7CEE_RoundType[0];
            }
            else
            {
                autoB08A7CEE_Mode = 1;
                lv_iteratorPoint = autoB08A7CEE_TempPoint[1]; ;
                lv_iteratorX = FloorI(autoB08A7CEE_TempPosition[1][0]) + autoB08A7CEE_RoundType[1];
                lv_iteratorY = FloorI(autoB08A7CEE_TempPosition[1][1]);
            }
            if (DistanceSquaredBetweenPoints(lp_originPoint3D, autoB08A7CEE_TempPoint[0]) == DistanceSquaredBetweenPoints(lp_originPoint3D, autoB08A7CEE_TempPoint[1]))
            {
                autoB08A7CEE_TempPosition[0][1] += autoB08A7CEE_PoseitionAdditional[0];
                autoB08A7CEE_TempPosition[0][0] = LibWH_FUNC_GS_SpatialBeelineGetXByY(autoB08A7CEE_TempBeeline, autoB08A7CEE_TempPosition[0][1]);
                autoB08A7CEE_TempPoint[0] = Point(autoB08A7CEE_TempPosition[0][0], autoB08A7CEE_TempPosition[0][1]);
            }
            autoB08A7CEE_TempPosition[autoB08A7CEE_Mode][!autoB08A7CEE_Mode] += autoB08A7CEE_PoseitionAdditional[autoB08A7CEE_Mode];
            if (DistanceSquaredBetweenPoints(lp_originPoint3D, autoB08A7CEE_TempPoint[autoB08A7CEE_Mode]) > autoB08A7CEE_BaseLength)
            {
                //Break by Length
                break;
            }
            lv_b = lv_b + 1;
            lv_point[lv_b] = lv_iteratorPoint;
            lv_x[lv_b] = lv_iteratorX;
            lv_y[lv_b] = lv_iteratorY;
            if (((lv_iteratorX >= 0) && (lv_iteratorX <= 256)) && ((lv_iteratorY >= 0) && (lv_iteratorY <= 256)))
            {
                if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_iteratorX][lv_iteratorY] == 0))
                {
                    if ((lib50770149_gv_assets.lv_terrainHeight[lv_iteratorX][lv_iteratorY] >= PointGetHeight(lv_iteratorPoint)))
                    {
                        lv_numX += 1;
                        if ((lv_numX >= lp_num))
                        {
                            lv_returnPoint = lv_iteratorPoint;
                            break;
                        }
                    }
                }
                else
                {
                    if ((lib50770149_gf_getProjectionPointHeight(Point((lv_iteratorX + 0.5), (lv_iteratorY + 0.5))) >= PointGetHeight(lv_iteratorPoint)))
                    {
                        lv_numX += 1;
                        if ((lv_numX >= lp_num))
                        {
                            lv_returnPoint = lv_iteratorPoint;
                            break;
                        }
                    }
                }
            }
        }
    }
    if ((lv_returnPoint != null))
    {
        lv_returnPoint = libNtve_gf_PointWithZOffset(libNtve_gf_PointFacingAngle(PointWithOffsetPolar(lv_returnPoint, 0.01, AngleBetweenPoints(lv_returnPoint, lp_originPoint3D)), PointGetFacing(lv_returnPoint)), PointGetHeight(lv_returnPoint));
        return lv_returnPoint;
    }
    else
    {
        return lp_targetPoint3D;
    }
}
point lib50770149_gf_jiDianPianYiDianZuoBiaoAnQuan(point lp_point, fixed lp_angle, fixed lp_range)
{
    // Variable Declarations
    fixed lv_localRange;
    point lv_returnPoint;
    fixed[5] lv_rangeSize;
    // Variable Initialization
    // Implementation
    lv_localRange = lp_range;
    lv_returnPoint = PointWithOffsetPolar(lp_point, lv_localRange, lp_angle);
    if ((PointGetX(lv_returnPoint) < 0.0))
    {
        lv_returnPoint = Point(0.0, PointGetY(lv_returnPoint));
    }
    if ((PointGetY(lv_returnPoint) < 0.0))
    {
        lv_returnPoint = Point(PointGetX(lv_returnPoint), 0.0);
    }
    if ((PointGetX(lv_returnPoint) > libNtve_gf_WidthOfRegion(RegionEntireMap())))
    {
        lv_returnPoint = Point(libNtve_gf_WidthOfRegion(RegionEntireMap()), PointGetY(lv_returnPoint));
    }
    if ((PointGetY(lv_returnPoint) > libNtve_gf_HeightOfRegion(RegionEntireMap())))
    {
        lv_returnPoint = Point(PointGetX(lv_returnPoint), libNtve_gf_HeightOfRegion(RegionEntireMap()));
    }
    lv_returnPoint = libNtve_gf_PointWithZOffset(libNtve_gf_PointFromPositionAndAngle(lv_returnPoint, PointGetFacing(lp_point)), PointGetHeight(lp_point));
    return lv_returnPoint;
}
void lib50770149_gf_playSoundTo3DPoint(point lp_point, soundlink lp_sound, fixed lp_e99FB3E9878F)
{
    // Implementation
    SoundPlayAtPoint(lp_sound, PlayerGroupActive(), lp_point, PointGetHeight(lp_point), lp_e99FB3E9878F, 0.0);
}
unitgroup lib50770149_gf_getAOESizeUnitGroup(int lp_player, point lp_targetPoint, fixed lp_aOEsize, unitfilter lp_aOEtype)
{
    unitgroup auto100CACB7_g;
    int auto100CACB7_u;
    // Variable Declarations
    unitgroup lv_unitGroup;
    unit lv_unit;
    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();
    // Implementation
    lv_unitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lp_player, c_unitAllianceAny, RegionCircle(lp_targetPoint, (lp_aOEsize + 5.0)), lp_aOEtype, 0);
    auto100CACB7_g = lv_unitGroup;
    auto100CACB7_u = 1;
    for (; auto100CACB7_u <= UnitGroupCount(auto100CACB7_g, c_unitCountAll); auto100CACB7_u += BoolToInt(lv_unit == UnitGroupUnit(auto100CACB7_g, auto100CACB7_u)))
    {
        lv_unit = UnitGroupUnit(auto100CACB7_g, auto100CACB7_u);
        if ((UnitFilterMatch(lv_unit, lp_player, lp_aOEtype) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_unit), lp_targetPoint) > (lp_aOEsize + UnitGetPropertyFixed(lv_unit, c_unitPropRadius, c_unitPropCurrent))))
        {
            UnitGroupRemove(lv_unitGroup, lv_unit);
            continue;
        }
    }
    return lv_unitGroup;
}
point lib50770149_gf_lineZhangAiPoint(point lp_originPoint, point lp_targetPoint)
{
    int auto370AE836_Mode;
    fixed[2] auto370AE836_StartPoint;
    fixed auto370AE836_BaseLength;
    fixed[2] auto370AE836_PoseitionAdditional;
    fixed[2][3] auto370AE836_TempPosition;
    int[2] auto370AE836_RoundType;
    lib7084B428_gs_LibWH_VTS_GS_SpatialBeelineStruct auto370AE836_TempBeeline;
    point[2] auto370AE836_TempPoint;
    int auto370AE836_I;
    // Variable Declarations
    point lv_returnPoint;
    point lv_iteratorPoint;
    int lv_iteratorX;
    int lv_iteratorY;
    // Variable Initialization
    // Implementation
    //======================================================================
    // Function : LibWH_FUNC_GS_LoopSeriesSpatialBeelinePointStepByInt
    //======================================================================
    auto370AE836_Mode = 1;//Mode ==0 : Modify X Position
    auto370AE836_StartPoint[0] = PointGetX(lp_originPoint);
    auto370AE836_StartPoint[1] = PointGetY(lp_originPoint);
    auto370AE836_BaseLength = DistanceSquaredBetweenPoints(lp_originPoint, lp_targetPoint);
    if (auto370AE836_StartPoint[1] > PointGetY(lp_targetPoint))
    {
        auto370AE836_PoseitionAdditional[0] = -1;
        auto370AE836_TempPosition[0][1] = FloorI(auto370AE836_StartPoint[1]);
        auto370AE836_RoundType[0] = -1;
    }
    else if (auto370AE836_StartPoint[1] < PointGetY(lp_targetPoint))
    {
        auto370AE836_PoseitionAdditional[0] = 1;
        auto370AE836_TempPosition[0][1] = CeilingI(auto370AE836_StartPoint[1]);
        auto370AE836_RoundType[0] = 0;
    }
    else
    {
        auto370AE836_PoseitionAdditional[0] = 0;
        auto370AE836_TempPosition[0][0] = PointGetX(lp_targetPoint);
        auto370AE836_TempPosition[0][1] = PointGetY(lp_targetPoint);
        auto370AE836_TempPosition[0][2] = PointGetHeight(lp_targetPoint);
        auto370AE836_RoundType[0] = 0;
        auto370AE836_Mode = 0;
    }
    if (auto370AE836_StartPoint[0] > PointGetX(lp_targetPoint))
    {
        auto370AE836_PoseitionAdditional[1] = -1;
        auto370AE836_TempPosition[1][0] = FloorI(auto370AE836_StartPoint[0]);
        auto370AE836_RoundType[1] = -1;
    }
    else if (auto370AE836_StartPoint[0] < PointGetX(lp_targetPoint))
    {
        auto370AE836_PoseitionAdditional[1] = 1;
        auto370AE836_TempPosition[1][0] = CeilingI(auto370AE836_StartPoint[0]);
        auto370AE836_RoundType[1] = 0;
    }
    else
    {
        auto370AE836_PoseitionAdditional[1] = 0;
        auto370AE836_TempPosition[1][0] = PointGetX(lp_targetPoint);
        auto370AE836_TempPosition[1][1] = PointGetY(lp_targetPoint);
        auto370AE836_TempPosition[1][2] = PointGetHeight(lp_targetPoint);
        auto370AE836_RoundType[1] = 0;
    }
    if (auto370AE836_PoseitionAdditional[0] != 0 || auto370AE836_PoseitionAdditional[1] != 0)
    {
        LibWH_FUNC_GS_GetSpatialBeelineByPoint(lp_originPoint, lp_targetPoint, auto370AE836_TempBeeline);
        if (auto370AE836_PoseitionAdditional[auto370AE836_Mode] != 0)
        {
            auto370AE836_TempPosition[auto370AE836_Mode][auto370AE836_Mode] = LibWH_FUNC_GS_SpatialBeelineGetXOrYOrZ[auto370AE836_Mode][!auto370AE836_Mode](auto370AE836_TempBeeline, auto370AE836_TempPosition[auto370AE836_Mode][!auto370AE836_Mode]);
            auto370AE836_TempPosition[auto370AE836_Mode][2] = LibWH_FUNC_GS_SpatialBeelineGetXOrYOrZ[2][!auto370AE836_Mode](auto370AE836_TempBeeline, auto370AE836_TempPosition[auto370AE836_Mode][!auto370AE836_Mode]);
        }
        auto370AE836_TempPoint[auto370AE836_Mode] = Point(auto370AE836_TempPosition[auto370AE836_Mode][!auto370AE836_Mode], auto370AE836_TempPosition[auto370AE836_Mode][auto370AE836_Mode]);
        PointSetHeight(auto370AE836_TempPoint[auto370AE836_Mode], auto370AE836_TempPosition[auto370AE836_Mode][2]);
        auto370AE836_Mode = !auto370AE836_Mode;
        for (auto370AE836_I = 0; auto370AE836_I < 512; auto370AE836_I += 1)
        {
            auto370AE836_TempPosition[auto370AE836_Mode][auto370AE836_Mode] = LibWH_FUNC_GS_SpatialBeelineGetXOrYOrZ[auto370AE836_Mode][!auto370AE836_Mode](auto370AE836_TempBeeline, auto370AE836_TempPosition[auto370AE836_Mode][!auto370AE836_Mode]);
            auto370AE836_TempPosition[auto370AE836_Mode][2] = LibWH_FUNC_GS_SpatialBeelineGetXOrYOrZ[2][!auto370AE836_Mode](auto370AE836_TempBeeline, auto370AE836_TempPosition[auto370AE836_Mode][!auto370AE836_Mode]);
            auto370AE836_TempPoint[auto370AE836_Mode] = Point(auto370AE836_TempPosition[auto370AE836_Mode][0], auto370AE836_TempPosition[auto370AE836_Mode][1]);
            PointSetHeight(auto370AE836_TempPoint[auto370AE836_Mode], auto370AE836_TempPosition[auto370AE836_Mode][2]);
            if (DistanceSquaredBetweenPoints(lp_originPoint, auto370AE836_TempPoint[0]) < DistanceSquaredBetweenPoints(lp_originPoint, auto370AE836_TempPoint[1]))
            {
                auto370AE836_Mode = 0;
                lv_iteratorPoint = auto370AE836_TempPoint[0];
                lv_iteratorX = FloorI(auto370AE836_TempPosition[0][0]);
                lv_iteratorY = FloorI(auto370AE836_TempPosition[0][1]) + auto370AE836_RoundType[0];
            }
            else
            {
                auto370AE836_Mode = 1;
                lv_iteratorPoint = auto370AE836_TempPoint[1]; ;
                lv_iteratorX = FloorI(auto370AE836_TempPosition[1][0]) + auto370AE836_RoundType[1];
                lv_iteratorY = FloorI(auto370AE836_TempPosition[1][1]);
            }
            if (DistanceSquaredBetweenPoints(lp_originPoint, auto370AE836_TempPoint[0]) == DistanceSquaredBetweenPoints(lp_originPoint, auto370AE836_TempPoint[1]))
            {
                auto370AE836_TempPosition[0][1] += auto370AE836_PoseitionAdditional[0];
                auto370AE836_TempPosition[0][0] = LibWH_FUNC_GS_SpatialBeelineGetXByY(auto370AE836_TempBeeline, auto370AE836_TempPosition[0][1]);
                auto370AE836_TempPoint[0] = Point(auto370AE836_TempPosition[0][0], auto370AE836_TempPosition[0][1]);
            }
            auto370AE836_TempPosition[auto370AE836_Mode][!auto370AE836_Mode] += auto370AE836_PoseitionAdditional[auto370AE836_Mode];
            if (DistanceSquaredBetweenPoints(lp_originPoint, auto370AE836_TempPoint[auto370AE836_Mode]) > auto370AE836_BaseLength)
            {
                //Break by Length
                break;
            }
            if (((lv_iteratorX >= 0) && (lv_iteratorX <= 256)) && ((lv_iteratorY >= 0) && (lv_iteratorY <= 256)))
            {
                if ((PointPathingPassable(Point((IntToFixed(lv_iteratorX) + 0.5), (IntToFixed(lv_iteratorY) + 0.5))) == false))
                {
                    lv_returnPoint = lv_iteratorPoint;
                    break;
                }
            }
        }
    }
    if ((lv_returnPoint != null))
    {
        lv_returnPoint = libNtve_gf_PointWithZOffset(libNtve_gf_PointFacingAngle(PointWithOffsetPolar(lv_returnPoint, 0.01, AngleBetweenPoints(lv_returnPoint, lp_originPoint)), PointGetFacing(lv_returnPoint)), PointGetHeight(lv_returnPoint));
        return lv_returnPoint;
    }
    else
    {
        return lp_targetPoint;
    }
}
void lib50770149_gf_repelUnit(unit lp_unit, point lp_targetPoint, fixed lp_speedBegin, fixed lp_gravity, bool lp_ifHeightJudge, bool lp_ifFootPointJudge, bool lp_noAttenuation, string lp_zhuangQiangMessage)
{
    // Variable Declarations
    point lv_originPoint;
    point lv_localTargetPoint;
    fixed lv_angle;
    fixed lv_range;
    int lv_unitTag;
    // Variable Initialization
    // Implementation
    lv_originPoint = lib50770149_gf_unit3DPoint(lp_unit);
    lv_localTargetPoint = lp_targetPoint;
    if ((lp_ifFootPointJudge == true))
    {
        lv_localTargetPoint = libNtve_gf_PointWithZOffset(lib50770149_gf_lineZhangAiPoint(lv_originPoint, lv_localTargetPoint), PointGetHeight(lv_localTargetPoint));
    }
    if ((lp_ifHeightJudge == true))
    {
        lv_localTargetPoint = libNtve_gf_PointWithZOffset(lib50770149_gf_getLineHeightImpactPoint(libNtve_gf_PointWithZOffset(lv_originPoint, (PointGetHeight(lv_originPoint) + 0.1)), libNtve_gf_PointWithZOffset(lv_localTargetPoint, (PointGetHeight(lv_localTargetPoint) + 0.1)), 1), PointGetHeight(lv_localTargetPoint));
    }
    if ((PointGetHeight(lv_localTargetPoint) < lib50770149_gf_getProjectionPointHeight(lv_localTargetPoint)))
    {
        lv_localTargetPoint = lib50770149_gf_getProjectionPoint(lv_localTargetPoint);
    }
    lv_angle = AngleBetweenPoints(lv_originPoint, lv_localTargetPoint);
    lv_range = DistanceBetweenPoints(lv_originPoint, lv_localTargetPoint);
    lv_unitTag = UnitGetTag(lp_unit);
    //lib50770149_gf_SaveFixed1(true, "UnitRepelSpeed", lv_unitTag, lp_speedBegin);
    //lib50770149_gf_SaveFixed1(true, "UnitRepelNowSpeed", lv_unitTag, lp_speedBegin);
    //lib50770149_gf_SaveFixed1(true, "UnitRepelHeightSpeed", lv_unitTag, (PointGetHeight(lv_localTargetPoint) - PointGetHeight(lv_originPoint)));
    //lib50770149_gf_SaveFixed1(true, "UnitRepelAngle", lv_unitTag, AngleBetweenPoints(lv_originPoint, lv_localTargetPoint));
    //lib50770149_gf_SaveFixed1(true, "UnitRepelMaxRange", lv_unitTag, DistanceBetweenPoints(lv_originPoint, lv_localTargetPoint));
    //lib50770149_gf_SavePoint1(true, "UnitRepelOriginPoint", lv_unitTag, lv_originPoint);
    //lib50770149_gf_SaveBool1(true, "UnitRepelNoAttenuation", lv_unitTag, lp_noAttenuation);
    if ((lp_zhuangQiangMessage != null))
    {
        //lib50770149_gf_SaveString1(true, "UnitRepelMessage", lv_unitTag, lp_zhuangQiangMessage);
    }
    //lib50770149_gf_setUnitCustomValueEnum(lp_unit, 28, 1.0);
    if ((lp_gravity != 0.0))
    {
        //lib50770149_gf_setUnitCustomValueEnum(lp_unit, 27, 1.0);
        //lib50770149_gf_setUnitCustomValueEnum(lp_unit, 25, (lp_gravity * ((100.0 - lib50770149_gf_Core_getUnitCustomValueEnum(lp_unit, 24)) * 0.01)));
    }
    //UnitGroupAdd(lib50770149_gv_units.lv_allRepelUnit, lp_unit);
}
point lib50770149_gf_getProjectionPoint(point lp_point)
{
    int auto7FA37F2E_ae;
    int auto7FA37F2E_ai;
    int autoD67DEBEB_ae;
    int autoD67DEBEB_ai;
    int auto247F2D6B_ae;
    int auto247F2D6B_ai;
    int auto0A09C50D_ae;
    int auto0A09C50D_ai;
    // Variable Declarations
    int lv_localX;
    int lv_localY;
    fixed lv_height;
    point lv_returnPoint;
    int lv_left;
    int lv_right;
    fixed lv_leftHeight;
    fixed lv_rightHeight;
    fixed lv_size;
    int lv_a;
    // Variable Initialization
    lv_localX = FixedToInt(PointGetX(lp_point));
    lv_localY = FixedToInt(PointGetY(lp_point));
    lv_returnPoint = lp_point;
    // Implementation
    if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_localX][lv_localY] == 0))
    {
        lv_height = lib50770149_gv_assets.lv_terrainHeight[lv_localX][lv_localY];
        lv_returnPoint = libNtve_gf_PointWithZOffset(lp_point, lv_height);
        return lv_returnPoint;
    }
    if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_localX][lv_localY] == 2))
    {
        auto247F2D6B_ae = 128;
        auto247F2D6B_ai = 1;
        lv_a = 1;
        for (; ((auto247F2D6B_ai >= 0 && lv_a <= auto247F2D6B_ae) || (auto247F2D6B_ai <= 0 && lv_a >= auto247F2D6B_ae)); lv_a += auto247F2D6B_ai)
        {
            lv_left = (lv_localX - lv_a);
            if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_left][lv_localY] != 2))
            {
                lv_leftHeight = lib50770149_gv_assets.lv_terrainHeight[lv_left][lv_localY];
                break;
            }
        }
        auto0A09C50D_ae = 128;
        auto0A09C50D_ai = 1;
        lv_a = 1;
        for (; ((auto0A09C50D_ai >= 0 && lv_a <= auto0A09C50D_ae) || (auto0A09C50D_ai <= 0 && lv_a >= auto0A09C50D_ae)); lv_a += auto0A09C50D_ai)
        {
            lv_right = (lv_localX + lv_a);
            if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_right][lv_localY] != 2))
            {
                lv_rightHeight = lib50770149_gv_assets.lv_terrainHeight[lv_right][lv_localY];
                break;
            }
        }
        lv_size = ((PointGetX(lp_point) - IntToFixed((lv_left + 1))) / IntToFixed(((lv_right - 1) - lv_left)));
        lv_height = (lv_leftHeight + ((lv_rightHeight - lv_leftHeight) * lv_size));
        lv_returnPoint = libNtve_gf_PointWithZOffset(lp_point, lv_height);
        return lv_returnPoint;
    }
    else
    {
        auto7FA37F2E_ae = 128;
        auto7FA37F2E_ai = 1;
        lv_a = 1;
        for (; ((auto7FA37F2E_ai >= 0 && lv_a <= auto7FA37F2E_ae) || (auto7FA37F2E_ai <= 0 && lv_a >= auto7FA37F2E_ae)); lv_a += auto7FA37F2E_ai)
        {
            lv_left = (lv_localY - lv_a);
            if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_localX][lv_left] != 1))
            {
                lv_leftHeight = lib50770149_gv_assets.lv_terrainHeight[lv_localX][lv_left];
                break;
            }
        }
        autoD67DEBEB_ae = 128;
        autoD67DEBEB_ai = 1;
        lv_a = 1;
        for (; ((autoD67DEBEB_ai >= 0 && lv_a <= autoD67DEBEB_ae) || (autoD67DEBEB_ai <= 0 && lv_a >= autoD67DEBEB_ae)); lv_a += autoD67DEBEB_ai)
        {
            lv_right = (lv_localY + lv_a);
            if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_localX][lv_right] != 1))
            {
                lv_rightHeight = lib50770149_gv_assets.lv_terrainHeight[lv_localX][lv_right];
                break;
            }
        }
        lv_size = ((PointGetY(lp_point) - IntToFixed((lv_left + 1))) / IntToFixed(((lv_right - 1) - lv_left)));
        lv_height = (lv_leftHeight + ((lv_rightHeight - lv_leftHeight) * lv_size));
        lv_returnPoint = libNtve_gf_PointWithZOffset(lp_point, lv_height);
        return lv_returnPoint;
    }
}
void lib50770149_gf_createEffectOnceBSD(point lp_point, fixed lp_angle, string lp_model, int lp_modelChange, string lp_animaStart, string lp_animaStand, string lp_animaDeath, fixed lp_timeScale)
{
    // Variable Declarations
    actor lv_actor;
    // Variable Initialization
    // Implementation
    ActorScopeCreate("");
    lib50770149_gv_assets.lv_effectActor = libNtve_gf_ActorScopeLastCreated();
    ActorCreate(lib50770149_gv_assets.lv_effectActor, "biaozhunBSDmodel", null, null, null);
    lv_actor = libNtve_gf_ActorLastCreated();
    libNtve_gf_MakeModelFaceAngle(lv_actor, lp_angle);
    ActorSend(lv_actor, libNtve_gf_ModelSwap(lp_model, lp_modelChange));
    ActorSend(lv_actor, "AnimBracketStart Effect " + lp_animaStart + " " + lp_animaStand + " " + lp_animaDeath + " ContentPlayOnce " + FixedToString(lp_timeScale, c_fixedPrecisionAny) + " AsTimeScale");
    ActorSend(lv_actor, libNtve_gf_SetPosition(PointGetX(lp_point), PointGetY(lp_point), (PointGetHeight(lp_point) + 8.0)));
}
point lib50770149_gf_unit3DPoint(unit lp_unit)
{
    // Implementation
    return libNtve_gf_PointFacingAngle(libNtve_gf_PointWithZOffset(UnitGetPosition(lp_unit), UnitGetHeight(lp_unit)), UnitGetFacing(lp_unit));
}
trigger auto_lib50770149_gf_Camera_ShockCameraRotaX_Trigger = null;
playergroup auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_players;
fixed auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_force;
fixed auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_hertz;
fixed auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_defTime;
fixed auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_time;
void lib50770149_gf_Camera_ShockCameraRotaX(playergroup lp_players, fixed lp_force, fixed lp_hertz, fixed lp_defTime, fixed lp_time)
{
    auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_players = lp_players;
    auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_force = lp_force;
    auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_hertz = lp_hertz;
    auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_defTime = lp_defTime;
    auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_time = lp_time;
    if (auto_lib50770149_gf_Camera_ShockCameraRotaX_Trigger == null)
    {
        auto_lib50770149_gf_Camera_ShockCameraRotaX_Trigger = TriggerCreate("auto_lib50770149_gf_Camera_ShockCameraRotaX_TriggerFunc");
    }
    TriggerExecute(auto_lib50770149_gf_Camera_ShockCameraRotaX_Trigger, false, false);
}
bool auto_lib50770149_gf_Camera_ShockCameraRotaX_TriggerFunc(bool testConds, bool runActions)
{
    playergroup lp_players = auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_players;
    fixed lp_force = auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_force;
    fixed lp_hertz = auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_hertz;
    fixed lp_defTime = auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_defTime;
    fixed lp_time = auto_lib50770149_gf_Camera_ShockCameraRotaX_lp_time;
    int auto4752C7A0_ae;
    int auto4752C7A0_ai;
    playergroup auto99721A10_g;
    int auto99721A10_p;
    // Variable Declarations
    int lv_player;
    int lv_bit;
    bool lv_bool;
    fixed lv_localForce;
    int lv_a;
    int lv_b;
    // Variable Initialization
    lv_bit = FixedToInt((lp_time / lp_hertz));
    // Implementation
    auto4752C7A0_ae = lv_bit;
    auto4752C7A0_ai = 1;
    lv_a = 1;
    for (; ((auto4752C7A0_ai >= 0 && lv_a <= auto4752C7A0_ae) || (auto4752C7A0_ai <= 0 && lv_a >= auto4752C7A0_ae)); lv_a += auto4752C7A0_ai)
    {
        if ((lv_bool == false))
        {
            lv_bool = true;
        }
        else
        {
            lv_bool = false;
        }
        if ((lv_a >= FixedToInt((lp_defTime / lp_hertz))))
        {
            lv_b += 1;
            lv_localForce = (lp_force - ((lp_force / lv_bit) * (lv_b - 1)));
        }
        else
        {
            lv_localForce = lp_force;
        }
        auto99721A10_g = PlayerGroupActive();
        auto99721A10_p = 1;
        for (; auto99721A10_p <= PlayerGroupCount(auto99721A10_g); auto99721A10_p += BoolToInt(lv_player == PlayerGroupPlayer(auto99721A10_g, auto99721A10_p)))
        {
            lv_player = PlayerGroupPlayer(auto99721A10_g, auto99721A10_p);
            if ((lv_bool == false))
            {
                CameraSetValue(lv_player, c_cameraValueRoll, lib50770149_gf_negative(lv_localForce), lp_hertz, -1, 10.0);
            }
            else
            {
                CameraSetValue(lv_player, c_cameraValueRoll, lv_localForce, lp_hertz, -1, 10.0);
            }
        }
        Wait(lp_hertz, c_timeGame);
    }
    CameraSetValue(lv_player, c_cameraValueRoll, 0.0, 0.0625, -1, 10.0);
    return true;
}
fixed lib50770149_gf_negative(fixed lp_num) {
    // Implementation
    return (lp_num* -1.0);
}
fixed lib50770149_gf_getProjectionPointHeight(point lp_point) {
    int autoCAD9CB99_ae;
int autoCAD9CB99_ai;
int autoF911C6BB_ae;
int autoF911C6BB_ai;
int autoDD784894_ae;
int autoDD784894_ai;
int autoAC8E4A82_ae;
int autoAC8E4A82_ai;
// Variable Declarations
int lv_localX;
int lv_localY;
fixed lv_height;
int lv_left;
int lv_right;
fixed lv_leftHeight;
fixed lv_rightHeight;
fixed lv_size;
int lv_a;
// Variable Initialization
  lv_localX = FixedToInt(PointGetX(lp_point));
    lv_localY = FixedToInt(PointGetY(lp_point));
    // Implementation
    if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_localX][lv_localY] == 0)) {
        lv_height = lib50770149_gv_assets.lv_terrainHeight[lv_localX][lv_localY];
        return lv_height;
    }
    if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_localX][lv_localY] == 2)) {
        autoDD784894_ae = 128;
        autoDD784894_ai = 1;
        lv_a = 1;
        for (; ((autoDD784894_ai >= 0 && lv_a <= autoDD784894_ae) || (autoDD784894_ai <= 0 && lv_a >= autoDD784894_ae)); lv_a += autoDD784894_ai) {
            lv_left = (lv_localX - lv_a);
            if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_left][lv_localY] != 2)) {
                lv_leftHeight = lib50770149_gv_assets.lv_terrainHeight[lv_left][lv_localY];
                break;
            }
        }
        autoAC8E4A82_ae = 128;
        autoAC8E4A82_ai = 1;
        lv_a = 1;
        for (; ((autoAC8E4A82_ai >= 0 && lv_a <= autoAC8E4A82_ae) || (autoAC8E4A82_ai <= 0 && lv_a >= autoAC8E4A82_ae)); lv_a += autoAC8E4A82_ai) {
            lv_right = (lv_localX + lv_a);
            if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_right][lv_localY] != 2)) {
                lv_rightHeight = lib50770149_gv_assets.lv_terrainHeight[lv_right][lv_localY];
                break;
            }
        }
        lv_size = ((PointGetX(lp_point) - IntToFixed((lv_left + 1))) / IntToFixed(((lv_right - 1) - lv_left)));
        lv_height = (lv_leftHeight + ((lv_rightHeight - lv_leftHeight) * lv_size));
        return lv_height;
    }
    else {
        autoCAD9CB99_ae = 128;
        autoCAD9CB99_ai = 1;
        lv_a = 1;
        for (; ((autoCAD9CB99_ai >= 0 && lv_a <= autoCAD9CB99_ae) || (autoCAD9CB99_ai <= 0 && lv_a >= autoCAD9CB99_ae)); lv_a += autoCAD9CB99_ai) {
            lv_left = (lv_localY - lv_a);
            if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_localX][lv_left] != 1)) {
                lv_leftHeight = lib50770149_gv_assets.lv_terrainHeight[lv_localX][lv_left];
                break;
            }
        }
        autoF911C6BB_ae = 128;
        autoF911C6BB_ai = 1;
        lv_a = 1;
        for (; ((autoF911C6BB_ai >= 0 && lv_a <= autoF911C6BB_ae) || (autoF911C6BB_ai <= 0 && lv_a >= autoF911C6BB_ae)); lv_a += autoF911C6BB_ai) {
            lv_right = (lv_localY + lv_a);
            if ((lib50770149_gv_assets.lv_terrainXiePoAngle[lv_localX][lv_right] != 1)) {
                lv_rightHeight = lib50770149_gv_assets.lv_terrainHeight[lv_localX][lv_right];
                break;
            }
        }
        lv_size = ((PointGetY(lp_point) - IntToFixed((lv_left + 1))) / IntToFixed(((lv_right - 1) - lv_left)));
        lv_height = (lv_leftHeight + ((lv_rightHeight - lv_leftHeight) * lv_size));
        return lv_height;
    }
}
//--------------------------------------------------------------------------------------------------
// Trigger:  RongYanChong Behavior
//--------------------------------------------------------------------------------------------------
bool gt_RongYanChongBehavior_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    unit lv_tunit;
    point lv_checkidle;
    point lv_checkidlee;
    string lv_originUnitType;
    fixed lv_maxRange;
    unitgroup lv_playerheroesnearby;
    // Variable Initialization
    // Conditions
    if (testConds)
    {
        if (!(((UnitGetType(EventUnit()) == "RongYanChong") || (UnitGetType(EventUnit()) == "RongYanChongM") || (UnitGetType(EventUnit()) == "RongYanChongS"))))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    lv_originUnitType = UnitGetType(EventUnit());
    Wait(RandomFixed(1.0, 2.0), c_timeGame);
    if ((gv_17summer2 == true) && (lv_originUnitType == "RongYanChong"))
    {
        Wait(10.0, c_timeReal);
    }
    if ((lv_originUnitType == "RongYanChong"))
    {
        lv_maxRange = 18.0;
    }
    if ((lv_originUnitType == "RongYanChongM"))
    {
        lv_maxRange = 12.5;
    }
    if ((lv_originUnitType == "RongYanChongS"))
    {
        lv_maxRange = 10.0;
    }
    if (UnitHasBehavior(EventUnit(), "Region14GO"))
    {
        while (true)
        {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
            if (DistanceBetweenPoints(RegionGetCenter(RegionFromId(14)), UnitGetPosition(EventUnit())) <= 3.0) { UnitBehaviorRemove(EventUnit(), "Region14GO", 1); break; }
            Wait(0.8, c_timeGame);
        }
    }
    lv_maxRange = lv_maxRange - 0.5;
    lv_tunit = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_tunit)), c_orderQueueReplace);
    while (UnitIsAlive(EventUnit()))
    {
        lv_playerheroesnearby = UnitGroupEmpty();
        PlayerGroupLoopBegin(gv_players);
        for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
        {
            if (!(UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]))) { continue; }
            if (DistanceBetweenPoints(UnitGetPosition(gv_playerHeroes[PlayerGroupLoopCurrent()]), (UnitGetPosition(EventUnit()))) <= 40.0)
            {
                UnitGroupAdd(lv_playerheroesnearby, gv_playerHeroes[PlayerGroupLoopCurrent()]);
            }
        }
        PlayerGroupLoopEnd();
        if (UnitGroupCount(lv_playerheroesnearby, c_unitCountAlive) > 0)
        {
            lv_tunit = UnitGroupRandomUnit(lv_playerheroesnearby, c_unitCountAlive);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_tunit)), c_orderQueueReplace);
        }
        lv_checkidle = UnitGetPosition(EventUnit());
        Wait(1.0, c_timeGame);
        lv_checkidlee = UnitGetPosition(EventUnit());
        if (DistanceBetweenPoints(lv_checkidle, lv_checkidlee) <= 0.8)
        {
            libDA0A55AD_gf_weapon_RongYanChong_ZhuangJi(EventUnit(), UnitGetPosition(EventUnit()), gv_playerHeroes[1], PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(8.0, 10.0), RandomFixed(0.0, 360.0)));
            lv_tunit = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_tunit)), c_orderQueueReplace);
        }
        Wait(1.0, c_timeGame);
        lv_playerheroesnearby = UnitGroupEmpty();
        PlayerGroupLoopBegin(gv_players);
        for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
        {
            if (!(UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]))) { continue; }
            if (DistanceBetweenPoints(UnitGetPosition(gv_playerHeroes[PlayerGroupLoopCurrent()]), (UnitGetPosition(EventUnit()))) <= lv_maxRange)
            {
                UnitGroupAdd(lv_playerheroesnearby, gv_playerHeroes[PlayerGroupLoopCurrent()]);
            }
        }
        PlayerGroupLoopEnd();
        if (UnitGroupCount(lv_playerheroesnearby, c_unitCountAlive) > 0)
        {
            lv_tunit = UnitGroupRandomUnit(lv_playerheroesnearby, c_unitCountAlive);
            libDA0A55AD_gf_weapon_RongYanChong_ZhuangJi(EventUnit(), UnitGetPosition(EventUnit()), lv_tunit, UnitGetPosition(lv_tunit));
            lv_tunit = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_tunit)), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RongYanChongBehavior_Init()
{
    gt_RongYanChongBehavior = TriggerCreate("gt_RongYanChongBehavior_Func");
    TriggerEnable(gt_RongYanChongBehavior, false);
    TriggerAddEventUnitRegion(gt_RongYanChongBehavior, null, RegionEntireMap(), true);
}
color[3] gv_cpbcolors;
unit gv_RongYanChong;
trigger gt_ComplexBossBarRongYanChong;
//--------------------------------------------------------------------------------------------------
// Trigger:  Complex Boss Bar - RongYanChong
//--------------------------------------------------------------------------------------------------
bool gt_ComplexBossBarRongYanChong_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    int lv_i;
    int lv_totalhp;
    int lv_hp;
    int[2] lv_cpb;
    // Variable Initialization
    if (testConds)
    {
        if (!(1 == 1))
        {
            return false;
        }
    }
    if (!runActions)
    {
        return true;
    }
    gv_cpbcolors[0] = Color(100.0, 0.0, 0.0);
    gv_cpbcolors[1] = Color(100.0, 66.66, 26.56);
    gv_cpbcolors[2] = Color(50.0, 100.0, 50.0);
    lv_totalhp = UnitGetPropertyInt(gv_RongYanChong, c_unitPropLife, c_unitPropCurrent);
    for (lv_i = 0; lv_i < 2; lv_i += 1)
    {
        if (gv_cpbreg >= 45)
        {
            gv_cpbreg = 10;
        }
        lv_cpb[lv_i] = gv_cpbreg;
        gf_CreateProgressBar(gv_cpbreg, "Assets\\Textures\\decaldarkhazard01_diffuse.dds", StringToText("T0 - Obelisk"), lv_totalhp / 2, PlayerGroupAll(), gv_cpbcolors[lv_i + 1], gv_cpbcolors[lv_i]);
        libNtve_gf_ShowHideBossBar(false, gv_cpbreg);
        gv_cpbreg += 1;
    }
    while (gv_cpbinservice == true) { Wait(1.0, c_timeGame); }
    gv_cpbinservice = true;
    if (gv_mod_tier1 == true) { libNtve_gf_MoveBossBar(lv_cpb[0], c_anchorTop, 0, 150); }
    if (gv_mod_tier1 == true) { libNtve_gf_MoveBossBar(lv_cpb[1], c_anchorTop, 0, 150); }
    while (UnitIsAlive(gv_RongYanChong))
    {
        lv_hp = UnitGetPropertyInt(gv_RongYanChong, c_unitPropLife, c_unitPropCurrent);
        if (lv_hp > lv_totalhp / 2)
        {
            libNtve_gf_ShowHideBossBar(true, lv_cpb[0]);
            libNtve_gf_ShowHideBossBar(false, lv_cpb[1]);
            libNtve_gf_SetBossBarCurrentValue2(lv_cpb[0], (lv_hp - lv_totalhp / 2), true);
            libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[0]], (IntToText(FixedToInt(lv_hp)) + StringExternal("Param/Value/lib_Ntve_22BDA933") + IntToText(lv_totalhp)), PlayerGroupAll());
        }
        else
        {
            libNtve_gf_ShowHideBossBar(false, lv_cpb[0]);
            libNtve_gf_ShowHideBossBar(true, lv_cpb[1]);
            libNtve_gf_SetBossBarCurrentValue2(lv_cpb[1], lv_hp, true);
            libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[1]], (IntToText(FixedToInt(lv_hp)) + StringExternal("Param/Value/lib_Ntve_22BDA933") + IntToText(lv_totalhp)), PlayerGroupAll());
        }
        Wait(0.6, c_timeReal);
    }
    libNtve_gf_ShowHideBossBar(false, lv_cpb[0]);
    libNtve_gf_ShowHideBossBar(false, lv_cpb[1]);
    gv_cpbinservice = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ComplexBossBarRongYanChong_Init()
{
    gt_ComplexBossBarRongYanChong = TriggerCreate("gt_ComplexBossBarRongYanChong_Func");
}
unitgroup gv_RongYanChongUnitGroup;
trigger gt_RongYanChongSiWangFenLie;
//--------------------------------------------------------------------------------------------------
// Trigger: RongYanChong SiWang FenLie
//--------------------------------------------------------------------------------------------------
bool gt_RongYanChongSiWangFenLie_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    point lv_point;
    fixed lv_randomsystem;
    // Variable Initialization
    lv_point = UnitGetPosition(EventUnit());
    // Conditions
    if (testConds)
    {
        if (!((UnitGetType(EventUnit()) == "RongYanChong") || (UnitGetType(EventUnit()) == "RongYanChongM")))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    lv_randomsystem = RandomFixed(0.0, 360.0);
    if (UnitGetType(EventUnit()) == "RongYanChong")
    {
        lv_point = PointWithOffsetPolar(lv_point, 1.5, lv_randomsystem);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RongYanChongM", c_unitCreateIgnorePlacement, 14, lv_point);
        UnitGroupAdd(gv_RongYanChongUnitGroup, UnitLastCreated());      
        UnitBehaviorAdd(UnitLastCreated(), "Cleansing", UnitLastCreated(), 1);
        lv_point = PointWithOffsetPolar(lv_point, 1, -lv_randomsystem);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RongYanChongM", c_unitCreateIgnorePlacement, 14, lv_point);
        UnitGroupAdd(gv_RongYanChongUnitGroup, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "Cleansing", UnitLastCreated(), 1);
    }
    if (UnitGetType(EventUnit()) == "RongYanChongM")
    {
        lv_point = PointWithOffsetPolar(lv_point, 1.2, lv_randomsystem);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RongYanChongS", c_unitCreateIgnorePlacement, 14, lv_point);
        UnitGroupAdd(gv_RongYanChongUnitGroup, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "Cleansing", UnitLastCreated(), 1);
        lv_point = PointWithOffsetPolar(lv_point, 1, -lv_randomsystem);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RongYanChongS", c_unitCreateIgnorePlacement, 14, lv_point);
        UnitGroupAdd(gv_RongYanChongUnitGroup, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "Cleansing", UnitLastCreated(), 1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RongYanChongSiWangFenLie_Init()
{
    gt_RongYanChongSiWangFenLie = TriggerCreate("gt_RongYanChongSiWangFenLie_Func");
    TriggerEnable(gt_RongYanChongSiWangFenLie, false);
    TriggerAddEventUnitDied(gt_RongYanChongSiWangFenLie, null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Electronic Polarity
//--------------------------------------------------------------------------------------------------
bool gv_EPWorking;
void gf_ElectronicPropertyControlling()
{
    int lv_i;
    int lv_j;
    int lv_k;
    int[20] lv_positiveCount;
    const int lv_switchrate = 40;
    int lv_set;
    GameSetLighting("UACDay", 1.0);
    Wait(1.0, c_timeGame);
    while (gv_EPWorking)
    {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1212\">"+"Severe Warning"+": <c val=\"b8edff-f0ffff\">"+"Detecting E-ShockWave Approaching!"));
        SoundPlay(SoundLink("HeavyNuclearMissileAttackChargeUp", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(2.5, c_timeGame);
        SoundPlay(SoundLink("HeavyNuclearMissileAttackChargeUp", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.9, c_timeGame);
        GameSetLighting("BioResonator", 1.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1212-ff00ff\">"+"-"+"Electronic Polarity Shift"+"-"));
        Wait(0.6, c_timeGame);
        PlayerGroupLoopBegin(gv_players);
        for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
        {
            CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 0.5);
        }
        PlayerGroupLoopEnd();
        UnitGroupLoopBegin(gv_heroesGroup);
        for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
        {
            if ((UnitIsAlive(UnitGroupLoopCurrent()) == true))
            {
                if (RandomInt(1, 2) == 1)
                {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "PositivePolarity", UnitGroupLoopCurrent(), 1);
                }
                else
                {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "NegativePolarity", UnitGroupLoopCurrent(), 1);
                }
            }
        }
        UnitGroupLoopEnd();
        GameSetLighting("UACDay", 0.8);
        for (lv_i = 1; lv_i <= lv_switchrate; lv_i += 1)
        {
            for (lv_j = 1; lv_j <= 19; lv_j += 1) { lv_positiveCount[lv_j] = 0; }
            
            UnitGroupLoopBegin(gv_heroesGroup);
            for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
            {
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "PolarityShiftEnergyRegen", 1);
            }
            UnitGroupLoopEnd();
            for (lv_j = 1; lv_j <= 12; lv_j += 1)
            {
                if (!UnitIsAlive(gv_playerHeroes[lv_j])) { continue; }
                for (lv_k = 1; lv_k <= 12; lv_k += 1)
                {
                    if (!UnitIsAlive(gv_playerHeroes[lv_k])) { continue; }
                    if (lv_j == lv_k) { continue; }
                    if (DistanceBetweenPoints(UnitGetPosition(gv_playerHeroes[lv_j]), UnitGetPosition(gv_playerHeroes[lv_k])) > 3.0) { continue; }
                    lv_set = 0;
                    if (UnitHasBehavior(gv_playerHeroes[lv_j], "PositivePolarity")) { lv_set += 1; }
                    if (UnitHasBehavior(gv_playerHeroes[lv_k], "PositivePolarity")) { lv_set += 1; }
                    if (lv_set == 1)
                    {
                        //Negitive Construct
                        UnitDamage(gv_playerHeroes[lv_j], "PolarityShiftDamage", gv_playerHeroes[lv_k], 20.0);
                        UnitDamage(gv_playerHeroes[lv_k], "PolarityShiftDamage", gv_playerHeroes[lv_j], 20.0);
                        UnitSetPropertyFixed(gv_playerHeroes[lv_k], c_unitPropShields, 0.0);
                        lv_positiveCount[lv_j] = -1000;
                        lv_positiveCount[lv_k] = -1000;
                    }
                    else
                    {
                        lv_positiveCount[lv_j] += 1;
                    }
                }
            }
            
            UnitGroupLoopBegin(gv_heroesGroup);
            for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
            {
                lv_j = UnitGetOwner(UnitGroupLoopCurrent());
                if (lv_positiveCount[UnitGetOwner(UnitGroupLoopCurrent())] <= 0) { continue; }
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "PolarityShiftEnergyRegen", UnitGroupLoopCurrent(), 1);
                CatalogFieldValueSet(c_gameCatalogBehavior, "PolarityShiftEnergyRegen", "Modification.VitalRegenArray[Energy]", lv_j, IntToString(lv_positiveCount[lv_j] * 2));
                CatalogFieldValueSet(c_gameCatalogBehavior, "PolarityShiftEnergyRegen", "Modification.RateMultiplierArray[Cooldown]", lv_j, IntToString(lv_positiveCount[lv_j] + 1));
                CatalogFieldValueSet(c_gameCatalogBehavior, "PolarityShiftEnergyRegen", "Modification.RateMultiplierArray[Charge]", lv_j, IntToString(lv_positiveCount[lv_j] + 1));
            }
            UnitGroupLoopEnd();
            Wait(0.5, c_timeGame);
        }
        UnitGroupLoopBegin(gv_heroesGroup);
        for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
        {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "NegativePolarity", 1);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "PositivePolarity", 1);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "PolarityShiftEnergyRegen", 1);
        }
        UnitGroupLoopEnd();
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: LUNATIC
//--------------------------------------------------------------------------------------------------
trigger gt_LUNATICAS;
trigger gt_LUNATIC;
trigger gt_LUNATIC5;
trigger gt_LUNATIC10;
trigger gt_LUNATIC15;
trigger gt_LUNATIC20;
trigger gt_LUNATIC25;
trigger gt_LUNATIC30;
trigger gt_LUNATIC35;
trigger gt_LUNATIC40;
trigger gt_LUNATIC45;
trigger gt_LUNATICTimeout;
trigger gt_LUNATICevacplayerenter;
trigger gt_LUNATICEnd;
trigger gt_LUNATICDarkFail;
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC Dark Fail
//--------------------------------------------------------------------------------------------------
bool gt_LUNATICDarkFail_Func(bool testConds, bool runActions)
{
    sound lv_musicCurrent;
    unitgroup lv_Roaches;
    const int lv_RoachesCount = 15;
    const int lv_SpawnInterval = 8;
    int lv_i;
    int lv_j;
    if (!runActions) { return true; }
    TriggerEnable(gt_RandomFog, false);
    TriggerEnable(gt_WeatherThunderStormEffect, false);
    lv_Roaches = UnitGroupEmpty();
    SoundtrackStop(gv_players, c_soundtrackCategoryMusic, false);
    Wait(0.5, c_timeGame);
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    Wait(1.0, c_timeGame);
    SoundPlay(SoundLink("Terran1V", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_musicCurrent = SoundLastPlayed();
    //gf_SpawnCountDown(215);
    Wait(100.0, c_timeGame);
    gf_EventSetWriteOut(gf_RaiseEvent(StringToText(gv_GreenText + "The Night is Comming" + "..."), 1, 115.0), true, 1.0);
    Wait(115.0, c_timeGame);
    gf_NewChapterNotfy("Dark Fail", "Sensor detected unexpected seismic distruption, Tracking the units below ground.");
    Wait(5.0, c_timeGame);
    GameSetLighting("UACNight", 10.0);
    Wait(5.0, c_timeGame);
    //gf_MissionText(StringExternal("Param/Value/E359B123"));
    Wait(8.5, c_timeGame);
    SoundStop(lv_musicCurrent, true);
    Wait(4.0, c_timeGame);
    //SoundPlay(SoundLink("CAUTION_E", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.4, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"FF00AA\">TACNET Command: >" + "Activate NODs"));
    Wait(0.4, c_timeGame);
    SoundPlay(SoundLink("NODOn", -1), PlayerGroupAll(), 100.0, 0.0);
    GameSetLighting("NODSUpdated", 3.0);
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    Wait(0.2, c_timeGame);
    SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "DarkF", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    //SoundPlay(SoundLink("Music_DangerAlertClustersO", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    SoundPlayOnUnit(SoundLink("EvoMutate_Zergling", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
    TransmissionSendAdvanced(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "AdjutantPortrait", "Talk", SoundLink("Dialogue_TransmissionStart", -1), null, null, 10.0, c_transmissionDurationAdd, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1212\">" + "Detector reveals some special kinds of roaches, structural scanning seems its have harder carapace, but is photophobe."));
    Wait(4.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff00ff\">" + "Temperature: "+FixedToString(RandomFixed(18.0, 26.0), 2)+", Pressure: "+"101kPa"));
    Wait(1.5, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1212\">" + "Further analysis indicates when the intensity of illumination up to "+IntToString(RandomInt(12023,25512))+"cd"+", the harder carapace will degeneration."));
    Wait(2.5, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"80ff80\">" + "Tactical Suggestion: Use Flare Gun!"));
    
    gf_EventSetWriteOut(gf_RaiseEvent(StringToText(gv_RedText + "Use FlareGun" + "</n>" + "Force Carapace Degenerated"), 3, 10.0), true, 2.0);
    gf_EventSetWriteOut(gf_RaiseEvent(StringToText(gv_RedText + "Use FlareGun" + "</n>" + "Force Carapace Degenerated"), 1, 110.0), true, 1.5);
    for (lv_i = 1; lv_i <= 5; lv_i += 1)
    {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(3, "Raisuli", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoachZ", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
        UnitGroupAdd(lv_Roaches, UnitLastCreated());
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
    }
    for (lv_i = 1; lv_i <= 15; lv_i += 1)
    {
        if (lv_i == 13)
        {
            gv_weatherstopImme = true;
            Wait(5.0, c_timeGame);
            gv_weatherstopImme = false;
            gv_fakeweather = true;
            TriggerExecute(gt_WeatherThunderStormEffect, false, false);
        }
        SoundPlay(SoundLink("Roach_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoachZ", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
        UnitGroupAdd(lv_Roaches, UnitLastCreated());
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalRoachZ", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
        UnitGroupAdd(lv_Roaches, UnitLastCreated());
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
        for (lv_j = 1; lv_j <= lv_SpawnInterval * 2; lv_j += 1)
        {
            UnitGroupLoopBegin(lv_Roaches);
            for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
            {
                if (!UnitHasBehavior(UnitGroupLoopCurrent(), "FlareGunSlow"))
                {
                    libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
                }
                else
                {
                    libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
                }
                if (lv_j % 4 == 0)
                {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "RadarPing", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(70.98, 0.00, 0.00, 0.00), 10.0, 90.0);
                    PingSetScale(PingLastCreated(), 0.0375);
                    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
                }
            }
            UnitGroupLoopEnd();
            Wait(0.5, c_timeGame);
        }
    }
    
    UnitGroupLoopBegin(lv_Roaches);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    UnitGroupLoopEnd();
    
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    SoundtrackStop(gv_players, c_soundtrackCategoryMusic, true);
    GameSetLighting("UACStorm", 10.0);
    gf_EventSetWriteOut(gf_RaiseEvent(StringToText(gv_GreenText + "Daytime" + "</n>" + "NODs OFF."), 3, 3.0), true, 1.0);
    Wait(40.0, c_timeGame);
    GameSetLighting("UACDay", 240.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATICDarkFail_Init()
{
    gt_LUNATICDarkFail = TriggerCreate("gt_LUNATICDarkFail_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC AmonShardA~C Drop
//--------------------------------------------------------------------------------------------------
bool gt_LUNATICAS_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    point lv_point;
    string[4] lv_shardname;
    region lv_movementregion;
    unit lv_unit;
    // Variable Initialization
    lv_movementregion = RegionEmpty();
    lv_shardname[1] = "AmonShardA";
    lv_shardname[2] = "AmonShardB";
    lv_shardname[3] = "AmonShardC";
    // Conditions
    if (testConds)
    {
        if (!((gv_gameOver == false)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    Wait(RandomInt(20, 60), c_timeGame);
    RegionAddCircle(lv_movementregion, true, UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)), 8.0);
    RegionAddCircle(lv_movementregion, false, UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)), 6.0);
    lv_point = RegionRandomPoint(lv_movementregion);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1212\">CAUTION: Impact Warning!"));
    Wait(0.5, c_timeReal);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_shardname[RandomInt(1, 3)], 0, 14, lv_point);
    lv_unit = UnitLastCreated();
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_unit), CameraGetTarget(PlayerGroupLoopCurrent())) <= 30.0)) 
        {
            VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(UnitGetPosition(lv_unit), 15), 10.0, false);
            CameraShake(PlayerGroupLoopCurrent(), "Medium", "Earthquake", 0.0, 3.0, 3.0);
            SoundPlayForPlayer(SoundLink("Zurvan_DeathThud", -1), c_maxPlayers, PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
        }
    }
    PlayerGroupLoopEnd();
    
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATICAS_Init()
{
    gt_LUNATICAS = TriggerCreate("gt_LUNATICAS_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC Entry
//--------------------------------------------------------------------------------------------------
bool gt_LUNATIC_Func(bool testConds, bool runActions)
{
    int lv_i;
    fixed lv_time;
    // Actions
    if (!runActions)
    {
        return true;
    }
    gv_fakeweather = true;
    TriggerExecute(gt_WeatherThunderStormEffect, false, false);
    gv_loopType = 2;
    gv_zombieBuffAmount = 1;
    gv_infestationLevel = 1;
    gv_ILAllow = 5;
    TriggerEnable(gt_AdvancedInfestationLevelDisplay, true);
    TriggerExecute(gt_AdvancedInfestationLevelDisplay, false, false);
    gv_HyperPulseAcc = true;
    gv_spawnCount = (gv_spawnCount + UserDataGetInt("GameModes", "LUNATIC", "Spawn Modifier", 1));
    gv_ailmentChance = 6;
    TriggerEnable(gt_RandomFog, false);
    gf_BlendFog(50.0, 50.0, 50.0, 6.0, 1.0, 5.0, 2.0);
    TriggerEnable(gt_WeatherThunderStormEffect, false);
    UnitGroupLoopBegin(UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        //UnitRemove(UnitGroupLoopCurrent());
        UnitCargoCreate(UnitGroupLoopCurrent(), "InfantryRifleman", 1);
        UnitBehaviorAdd(UnitCargoLastCreated(), "AntiGravity", UnitCargoLastCreated(), 1);
        UnitCargoCreate(UnitGroupLoopCurrent(), "InfantryRifleman", 1);
        UnitBehaviorAdd(UnitCargoLastCreated(), "AntiGravity", UnitCargoLastCreated(), 1);
        UnitCargoCreate(UnitGroupLoopCurrent(), "InfantryRifleman", 1);
        UnitBehaviorAdd(UnitCargoLastCreated(), "AntiGravity", UnitCargoLastCreated(), 1);
        UnitCargoCreate(UnitGroupLoopCurrent(), "InfantryRifleman", 1);
        UnitBehaviorAdd(UnitCargoLastCreated(), "AntiGravity", UnitCargoLastCreated(), 1);
        //ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "Create MedicStimDroneBuffGlaze");
        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "Create ShieldActorCY");
        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "SetTeamColor {50,0,255 1.500000} {50,0,255 1.200000}");
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Immunity", UnitGroupLoopCurrent(), 1);
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "LightFilter", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    PlayerModifyPropertyFixed(0, c_playerPropDamageDealtPercent, 0, 200.0);
    PlayerModifyPropertyFixed(0, c_playerPropDamageTakenPercent, 0, 50.0);
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 15, libNtve_ge_AllianceSetting_Enemy);
    }
    PlayerGroupLoopEnd();
    TimerWindowCreate(gv_missiontimer, StringToText("Keep ALIVE!!"), false, false);
    
    gv_missiontimerwindow = TimerWindowLastCreated();
    UnitIssueOrder(UnitFromId(56), Order(AbilityCommand("MetalGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
    //UnitIssueOrder(UnitFromId(1238), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    //UnitIssueOrder(UnitFromId(1239), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    //UnitIssueOrder(UnitFromId(1240), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    //UnitIssueOrder(UnitFromId(1241), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    //UnitIssueOrder(UnitFromId(511), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(425), Order(AbilityCommand("SpacePrisonDoorsThinLeftLowered", 0)), c_orderQueueReplace);
    //TriggerEnable(gt_UndeadSpawningPrologue, false);
    //TriggerEnable(gt_UndeadSpawning1, true);
    //TriggerEnable(gt_UndeadSpawningOutbreak1, true);
    gf_StartSpawnLoop(1, 2);
    gf_StartSpawnLoop(1, 1);
    gf_EventSetWriteOut(gf_RaiseEvent(StringToText(gv_GreenText + "Approaching LandZone."), 3, 3.0), true, 1.0);
    gf_EventSetWriteOut(gf_RaiseEvent(StringToText(gv_GreenText + "Current Game Mode:" + "</n>" + "-LUNATIC-"), 1, 300.0), true, 1.0);
    gf_EventSetWriteOut(gf_RaiseEvent(StringToText("<c val=\"ffff22-ffff00\">" + "Slightly block vision."), 1, 180.0), true, 1.0);
    gv_TempDeltaFadeTarget = -3.0;
    gv_RHPDeltaFadeTarget = 50.0;
    TriggerExecute(gt_EventRaiseController, false, false);
    Wait(15.0, c_timeGame);
    gf_BlendFog(50.0, 50.0, 50.0, 0.0, 1.0, 0.0, 1000.00);
    TriggerExecute(gt_WeaponsItems1, false, false);
    TriggerExecute(gt_WeaponsItems1, false, false);
    gf_MissionText(StringToText("Be Careful everyone, we don't know what we are facing."));
    Wait(4.5, c_timeGame);
    TriggerExecute(gt_WeaponsItems2, false, false);
    TriggerExecute(gt_WeaponsItems2, false, false);
    ObjectiveCreate(StringToText("Keep ALIVE!!"), StringToText("Keep ALIVE!!"), c_objectiveStateActive, true);
    gv_mainObj = ObjectiveLastCreated();
    //gf_ConstructPsiDecimator();
    //UnitBehaviorAdd(gv_Psi, "PositivePolarity", gv_Psi, 1);
    //UnitBehaviorAdd(gv_Pylon, "PositivePolarity", gv_Pylon, 1);
    //UnitBehaviorAdd(gv_PowerLink, "NegativePolarity", gv_PowerLink, 1);
    TriggerEnable(gt_LUNATICTimeout, true);
    TriggerEnable(gt_LUNATIC5, true);
    TriggerEnable(gt_LUNATIC10, true);
    TriggerEnable(gt_LUNATIC15, true);
    TriggerEnable(gt_LUNATIC20, true);
    TriggerEnable(gt_LUNATIC25, true);
    TriggerEnable(gt_LUNATIC30, true);
    TriggerEnable(gt_LUNATIC35, true);
    TriggerEnable(gt_LUNATIC40, true);
    TriggerEnable(gt_LUNATIC45, true);
    Wait(120.0, c_timeGame);
    lv_time = GameGetMissionTime() + 120.0;
    for (lv_i = 6; lv_i <= 20; lv_i += 1)
    {
        gv_ILAllow += 1;
        TriggerExecute(gt_AdvancedInfestationLevelDisplay, false, false);
        Wait(lv_i * 0.0625, c_timeGame);
    }
    while (GameGetMissionTime() < lv_time) { Wait(0.5, c_timeGame); }
    gf_BlendFog(50.0, 50.0, 50.0, 6.0, 1.0, 5.0, 160.0);
    gf_NewBossModeInitialSupplyDrop();
    lv_time = GameGetMissionTime() + 100.0;
    
    while (GameGetMissionTime() < lv_time) { Wait(0.5, c_timeGame); }
    gf_BlendFog(50.0, 50.0, 50.0, 0.0, 1.0, 0.0, 1200.00);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATIC_Init()
{
    gt_LUNATIC = TriggerCreate("gt_LUNATIC_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC 5
//--------------------------------------------------------------------------------------------------
bool gt_LUNATIC5_Func(bool testConds, bool runActions)
{
    int lv_i;
    // Conditions
    if (testConds)
    {
        if (!((gv_gameOver == false)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_StartSpawnLoop(2, 2);
    TriggerEnable(gt_WeaponsItems2, true);
    
    //TriggerEnable(gt_UndeadSpawningOutbreak2, true);
    gv_zombieBuffAmount = 2;
    SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "Music_AmbientTension_Full", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    //gv_playingplayercount = gv_startingplayers;
    gf_SpawnUndead(3, "ZombieWraith", 1);
    gf_SpawnUndead(3, "ZombieWraith", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_EventSetWriteOut(gf_RaiseEvent(StringToText(gv_RedText + "ReEvaluating" + "</n>" + "IL Threshold" + "..."), 3, 7.0), true, 1.5);
    for (lv_i = 21; lv_i <= 40; lv_i += 1)
    {
        gv_ILAllow += 1;
        TriggerExecute(gt_AdvancedInfestationLevelDisplay, false, false);
        Wait(lv_i * 0.225, c_timeGame);
    }
    while (!(gv_gameOver))
    {
        TriggerExecute(gt_WeaponsItems1, false, false);
        Wait(120.0, c_timeGame);
        TriggerExecute(gt_WeaponsItems2, false, false);
        Wait(120.0, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATIC5_Init()
{
    gt_LUNATIC5 = TriggerCreate("gt_LUNATIC5_Func");
    TriggerEnable(gt_LUNATIC5, false);
    TriggerAddEventTimeElapsed(gt_LUNATIC5, 300.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC 10
//--------------------------------------------------------------------------------------------------
bool gt_LUNATIC10_Func(bool testConds, bool runActions)
{
    // Conditions
    if (testConds)
    {
        if (!((gv_gameOver == false)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_RHPDeltaFadeTarget = 50.0;
    gv_zombieBuffAmount = 3;
    gv_zombieBuffAmount = 3;
    gf_SucceedMission(40, StringExternal("Param/Value/BA7D9279"), 0, true);
    TriggerEnable(gt_UndeadSpawningOutbreak2, false);
    //TriggerEnable(gt_UndeadSpawningOutbreak1, true);
    SoundPlay(SoundLink("Event_Hanson02ZombieHowl", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_EventSetWriteOut(gf_RaiseEvent(StringToText(gv_RedText + "ATVX 2.0 " + "Environment" + "</n>" + "Troposphere REF" + " - [" + "Thunderstorm" + "]"), 3, 8.0), true, 2.0);
    gf_EventSetWriteOut(gf_RaiseEvent(StringToText(gv_RedText + "ATVX 2.0 " + "Environment" + "</n>" + "Troposphere REF" + " - [" + "Thunderstorm" + "]"), 1, 40.0), true, 2.0);
    Wait(20.0, c_timeGame);
    gv_RHPDeltaFadeSpeed025s = 0.08;
    GameSetLighting("UACDusk", 200.0);
    libHots_gf_PlaySoundLinkasMusic(SoundLink("Music_ActionScary", -1), true, true);
    gf_SpawnUndead(1, "Raisuli", 1);
    gf_SpawnUndead(1, "Minerva", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Dilophosaur", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Dilophosaur", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gv_weatherstopImme = true;
    Wait(5.0, c_timeGame);
    gv_weatherstopImme = false;
    gv_fakeweather = false;
    TriggerExecute(gt_WeatherThunderStormEffect, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATIC10_Init()
{
    gt_LUNATIC10 = TriggerCreate("gt_LUNATIC10_Func");
    TriggerEnable(gt_LUNATIC10, false);
    TriggerAddEventTimeElapsed(gt_LUNATIC10, 600.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC 15
//--------------------------------------------------------------------------------------------------
bool gt_LUNATIC15_Func(bool testConds, bool runActions)
{
    // Conditions
    if (testConds)
    {
        if (!((gv_gameOver == false)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_SucceedMission(60, StringExternal("Param/Value/BA7D9279"), 0, true);
    gv_zombieBuffAmount = 5;
    libHots_gf_PlaySoundLinkasMusic(SoundLink("Music_DangerAlertPercClusters", -1), true, true);
    
    gf_SpawnUndead(4, "ZombieWraith", 1);
    gf_SpawnUndead(4, "ZombieWraith", 1);
    gf_SpawnUndead(4, "ZombieWraith", 1);
    gf_SpawnUndead(1, "AcidVore", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "ZombieYeti", 1);
    gf_SpawnUndead(3, "ZombieYeti", 1);
    gf_SpawnUndead(3, "ZombieYeti", 1);
    gf_SpawnUndead(3, "ZombieCarrier", 1);
    gf_SpawnUndead(3, "ZombieCarrier", 1);
    gf_SpawnUndead(3, "ZombieCarrier", 1);
    gf_SpawnUndead(3, "ZombieCarrier", 1);
    gf_SpawnUndead(3, "ZombieCarrier", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Arachnathid", 1);
    gf_SpawnUndead(1, "Arachnathid", 1);
    gf_SpawnUndead(1, "AcidVore", 1);
    while (GameGetMissionTime() < 1140) { Wait(RandomFixed(17.0, 25.0), c_timeGame); }
    TriggerExecute(gt_LUNATICDarkFail, false, false);
    GameSetLighting("UACNight", 600.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATIC15_Init()
{
    gt_LUNATIC15 = TriggerCreate("gt_LUNATIC15_Func");
    TriggerEnable(gt_LUNATIC15, false);
    TriggerAddEventTimeElapsed(gt_LUNATIC15, 900.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC 20
//--------------------------------------------------------------------------------------------------
bool gt_LUNATIC20_Func(bool testConds, bool runActions)
{
    // Conditions
    if (testConds)
    {
        if (!((gv_gameOver == false)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_SucceedMission(120, StringExternal("Param/Value/BA7D9279"), 0, true);
    gv_zombieBuffAmount = 7;
    Wait(4.0, c_timeReal);
    
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(2, "Immussilus", 1);
    gf_SpawnUndead(1, "Darreus", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "ArchVile", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(3, "Raisuli", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(2, "Immussilus", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATIC20_Init()
{
    gt_LUNATIC20 = TriggerCreate("gt_LUNATIC20_Func");
    TriggerEnable(gt_LUNATIC20, false);
    TriggerAddEventTimeElapsed(gt_LUNATIC20, 1200.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC 25
//--------------------------------------------------------------------------------------------------
bool gt_LUNATIC25_Func(bool testConds, bool runActions)
{
    // Conditions
    if (testConds)
    {
        if (!((gv_gameOver == false)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    gf_SucceedMission(175, StringExternal("Param/Value/BA7D9279"), 0, true);
    gv_zombieBuffAmount = 8;
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CASOnStation", 1);
    }
    PlayerGroupLoopEnd();
    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnUndead(5, "ZombieWraith", 1);
    gf_SpawnUndead(5, "ZombieWraith", 1);
    gf_SpawnUndead(5, "ZombieWraith", 1);
    gf_SpawnUndead(1, "Ares", 1);
    gf_SpawnUndead(1, "ArchVile", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "ArchVile", 1);
    gf_SpawnUndead(1, "Ares", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "ArchVile", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "ArchVile", 1);
    gf_SpawnUndead(1, "Ares", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATIC25_Init()
{
    gt_LUNATIC25 = TriggerCreate("gt_LUNATIC25_Func");
    TriggerEnable(gt_LUNATIC25, false);
    TriggerAddEventTimeElapsed(gt_LUNATIC25, 1500.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC 30
//--------------------------------------------------------------------------------------------------
bool gt_LUNATIC30_Func(bool testConds, bool runActions)
{
    // Conditions
    if (testConds)
    {
        if (!((gv_gameOver == false)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_SucceedMission(315, StringExternal("Param/Value/BA7D9279"), 0, true);
    
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"FF00AA\">Amon: </c>"+"The Void Reflects my will, and I will your Destruction!"));
    TransmissionSendAdvanced(PlayerGroupAll(), TransmissionSourceFromModel("AmonEx2Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "AmonEx2Portrait", "Talk", SoundLink("pMission_Aiur05_Amon_126", -1), null, null, 8.0, c_transmissionDurationAdd, false);
    Wait(5.0, c_timeReal);
    SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "vocaloid", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_LUNATICAS, true, false);
    gf_StartSpawnLoop(3, 1);
    gf_StartSpawnLoop(3, 2);
    gf_StopSpawnLoop(1, 1);
    //TriggerEnable(gt_UndeadSpawning3, true);
    //TriggerEnable(gt_UndeadSpawningOutbreak2, true);
    SoundPlay(SoundLink("THorner04MusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    Wait(20.0, c_timeGame);
    
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    TriggerExecute(gt_LUNATICAS, true, false);
    TriggerExecute(gt_LUNATICAS, true, false);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(1, "Arachnathid", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(1, "Horror", 1);
    TriggerExecute(gt_LUNATICAS, true, false);
    gf_SpawnUndead(3, "Gourmand", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(1, "Minerva", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(1, "Grotesque", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    Wait(80.0, c_timeGame);
    
    Wait(30.0, c_timeGame);
    TriggerExecute(gt_LUNATICAS, true, false);
    TriggerExecute(gt_LUNATICAS, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATIC30_Init()
{
    gt_LUNATIC30 = TriggerCreate("gt_LUNATIC30_Func");
    TriggerEnable(gt_LUNATIC30, false);
    TriggerAddEventTimeElapsed(gt_LUNATIC30, 1800.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC 35
//--------------------------------------------------------------------------------------------------
bool gt_LUNATIC35_Func(bool testConds, bool runActions)
{
    // Conditions
    if (testConds)
    {
        if (!((gv_gameOver == false)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((gf_NumberofPlayers() != 1)) { gf_SucceedMission(350, StringExternal("Param/Value/BA7D9279"), 0, true); }
    //TriggerEnable(gt_UndeadSpawningOutbreak2, false);
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "PPC", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    //RongYanChong--------------
    TriggerEnable(gt_RongYanChongBehavior, true);
    TriggerEnable(gt_RongYanChongSiWangFenLie, true);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    //UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BOSSWARNING"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RongYanChong", c_unitCreateIgnorePlacement, 14, RegionGetCenter(RegionFromId(3)));
    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
    gv_RongYanChong = UnitLastCreated();
    UnitBehaviorAdd(gv_RongYanChong, "CleansingP", gv_RongYanChong, 1);
    UnitBehaviorAdd(gv_RongYanChong, "SpellImmunity70", gv_RongYanChong, 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_RongYanChong), ColorWithAlpha(91.76, 91.76, 0.00, 0.00), 20.0, 55.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Unit/Name/RongYanChong"));
    PingSetUnit(PingLastCreated(), gv_RongYanChong);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBaseAttack", UnitGetPosition(gv_RongYanChong), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 8.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_RongYanChong);
    TriggerExecute(gt_ComplexBossBarRongYanChong, false, false);
    //RongYanChong End----------
    
    gv_zombieBuffAmount = 9;
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Horror", 1);
    TriggerExecute(gt_LUNATICAS, true, false);
    TriggerExecute(gt_LUNATICAS, true, false);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Grotesque", 1);
    gf_SpawnUndead(1, "RedstoneLavaCritter", 1);
    gf_SpawnUndead(1, "AcidVore", 1);
    gf_SpawnUndead(1, "AcidVore", 1);
    gf_SpawnUndead(1, "AcidVore", 1);
    gf_SpawnUndead(1, "Arachnathid", 1);
    TriggerExecute(gt_LUNATICAS, true, false);
    gf_SpawnUndead(1, "Arachnathid", 1);
    Wait(45.0, c_timeGame);
    
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1212\">Ravensword Main: We have pay high attention to your activity, Get the Nuclear Strike Designator at the Land Zone!"));
    PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(6)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 8.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/84CA9E2C"));
    gf_AirDropItemLoc("HNuclearDesignator", RegionRandomPoint(gv_sensorLZ), 1);
    
    TriggerExecute(gt_LUNATICAS, true, false);
    
    gf_SpawnUndead(1, "Cacumen", 1);
    Wait(120.0, c_timeGame);
    SoundtrackStop(gv_players, c_soundtrackCategoryMusic, false);
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    Wait(0.5, c_timeGame);
    SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "EPPN", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(1.0, c_timeGame);
    UnitGroupLoopBegin(gv_heroesGroup);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true))
        {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "PositivePolarity", UnitGroupLoopCurrent(), 1);
            Wait(0.4, c_timeGame);
        }
    }
    UnitGroupLoopEnd();
    Wait(4.0, c_timeGame);
    UnitGroupLoopBegin(gv_heroesGroup);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true))
        {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "PositivePolarity", 1);
            Wait(0.4, c_timeGame);
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_heroesGroup);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true))
        {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "NegativePolarity", UnitGroupLoopCurrent(), 1);
            Wait(0.4, c_timeGame);
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_heroesGroup);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true))
        {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "NegativePolarity", 1);
            Wait(0.4, c_timeGame);
        }
    }
    UnitGroupLoopEnd();
    gv_EPWorking = true;
    gf_ElectronicPropertyControlling();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATIC35_Init()
{
    gt_LUNATIC35 = TriggerCreate("gt_LUNATIC35_Func");
    TriggerEnable(gt_LUNATIC35, false);
    TriggerAddEventTimeElapsed(gt_LUNATIC35, 2100.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC 40
//--------------------------------------------------------------------------------------------------
bool gt_LUNATIC40_Func(bool testConds, bool runActions)
{
    // Conditions
    if (testConds)
    {
        if (!((gv_gameOver == false)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_zombieBuffAmount = 10;
    if ((gf_NumberofPlayers() != 1)) { gf_SucceedMission(400, StringExternal("Param/Value/BA7D9279"), 0, true); }
    //TriggerEnable(gt_UndeadSpawningTier1, true);
    SoundPlay(SoundLink("THanson02MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "ThresherMaw", 1);
    gf_SpawnUndead(1, "KingDarreus", 1);
    gf_SpawnUndead(1, "ElectricMaw", 1);
    gf_SpawnUndead(1, "Grotesque", 1);
    gf_SpawnUndead(2, "Gargantuan", 1);
    gf_SpawnUndead(2, "Gargantuan", 1);
    gf_SpawnUndead(3, "Gourmand", 1);
    gf_SpawnUndead(1, "Arachnathid", 1);
    gf_SpawnUndead(1, "Ares", 1);
    TriggerExecute(gt_LUNATICAS, true, false);
    
    
    Wait(40.0, c_timeGame);
    
    TriggerExecute(gt_LUNATICAS, true, false);
    
    
    Wait(60.0, c_timeGame);
    
    
    
    
    
    TriggerExecute(gt_LUNATICAS, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATIC40_Init()
{
    gt_LUNATIC40 = TriggerCreate("gt_LUNATIC40_Func");
    TriggerEnable(gt_LUNATIC40, false);
    TriggerAddEventTimeElapsed(gt_LUNATIC40, 2400.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC 45
//--------------------------------------------------------------------------------------------------
bool gt_LUNATIC45_Func(bool testConds, bool runActions)
{
    // Conditions
    if (testConds)
    {
        if (!((gv_gameOver == false)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    if ((gf_NumberofPlayers() != 1)) { gf_SucceedMission(450, StringExternal("Param/Value/BA7D9279"), 0, true); }
    gv_noviceInvasionPoints = 16;
    gv_advancedInvasionPoints = 19;
    gv_masterInvasionPoints = 25;
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    TriggerEnable(gt_ThanatosLoop, true);
    gv_EPWorking = false;
    Wait(5.0, c_timeReal);
    libHots_gf_PlaySoundLinkasMusic(SoundLink("RMX", -1), false, true);
    UnitKill(gv_RongYanChong);
    TriggerEnable(gt_AdvancedInfestationLevelDisplay, true);
    gv_ILAllow = 40 + gf_NumberofPlayers() / 2 * 10;
    TriggerExecute(gt_Tier1EXTRA, false, false);
    //libNtve_gf_CreateUnitsWithDefaultFacing(1, "dbHero09", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
    //UnitBehaviorAdd(UnitLastCreated(), "dbdo09_1_0t_012", UnitLastCreated(), 1);
    //UnitBehaviorAdd(UnitLastCreated(), "dbHero094rAI", UnitLastCreated(), 1);
    //UnitBehaviorAdd(UnitLastCreated(), "dbHero094rAI2", UnitLastCreated(), 1);
    gf_SpawnUndead(1, "Dehaka", 1);
    TriggerExecute(gt_LUNATICAS, true, false);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    TriggerExecute(gt_LUNATICAS, true, false);
    TriggerExecute(gt_LUNATICAS, true, false);
    Wait(5.0, c_timeGame);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Darreus", 1);
    TriggerExecute(gt_LUNATICAS, true, false);
    Wait(60.0, c_timeGame);
    Wait(60.0, c_timeGame);
    TriggerExecute(gt_LUNATICAS, true, false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_LUNATICAS, true, false);
    TriggerExecute(gt_LUNATICAS, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATIC45_Init()
{
    gt_LUNATIC45 = TriggerCreate("gt_LUNATIC45_Func");
    TriggerEnable(gt_LUNATIC45, false);
    TriggerAddEventTimeElapsed(gt_LUNATIC45, 2700.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC Timeout
//--------------------------------------------------------------------------------------------------
bool gt_LUNATICTimeout_Func(bool testConds, bool runActions)
{
    // Conditions
    if (testConds)
    {
        if (!((gv_gameOver == false)))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gv_medevacregion = gv_lZs[RandomInt(5, 5)];
    UnitCreate(1, "ColonistShipFlying", 0, 13, PointWithOffset(RegionGetCenter(gv_medevacregion), -15.0, 0.0), 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalAUC");
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_mEDEVAC = UnitLastCreated();
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        libNtve_gf_ShareVisionofUnit(gv_mEDEVAC, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(gv_medevacregion)), c_orderQueueReplace);
    //TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("VikingAssaultPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", SoundLink("Dialogue_TransmissionStart", -1), StringExternal("Param/Value/A2806A1E"), StringExternal("Param/Value/69C4ED38"), 3.0, c_transmissionDurationAdd, false);
    Wait(11.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(gv_mEDEVAC, true);
    SoundPlay(SoundLink("TRaynor01MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringToText("They Arrived! Get on the Plane NOW!!!"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(gv_missiontimer, 60.0, false, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_medevacregion), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 20.0, 270.0);
    TriggerEnable(gt_LUNATICEnd, true);
    TriggerExecute(gt_LUNATICevacplayerenter, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATICTimeout_Init()
{
    gt_LUNATICTimeout = TriggerCreate("gt_LUNATICTimeout_Func");
    TriggerEnable(gt_LUNATICTimeout, false);
    TriggerAddEventTimeElapsed(gt_LUNATICTimeout, 3000.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC evac player enter
//--------------------------------------------------------------------------------------------------
bool gt_LUNATICevacplayerenter_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    unitgroup lv_extracted;
    // Variable Initialization
    lv_extracted = UnitGroupEmpty();
    // Actions
    if (!runActions)
    {
        return true;
    }
    UnitGroupLoopBegin(gv_heroesGroup);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        UnitGroupAdd(lv_extracted, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    while (true)
    {
        UnitGroupLoopBegin(gv_heroesGroup);
        for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
        {
            if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), gv_medevacregion) == true) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeBiological) == true))
            {
                libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
                libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
                libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
                UnitGroupRemove(lv_extracted, UnitGroupLoopCurrent());
            }
        }
        UnitGroupLoopEnd();
        if ((UnitGroupCount(lv_extracted, c_unitCountAlive) == 0))
        {
            gv_extracted = gf_NumberofPlayers();
            break;
        }
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_LUNATICEnd, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATICevacplayerenter_Init()
{
    gt_LUNATICevacplayerenter = TriggerCreate("gt_LUNATICevacplayerenter_Func");
    TriggerEnable(gt_LUNATICevacplayerenter, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: LUNATIC End
//--------------------------------------------------------------------------------------------------
bool gt_LUNATICEnd_Func(bool testConds, bool runActions)
{
    // Conditions
    if (testConds)
    {
        if (gv_gameOver == true)
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_LUNATICevacplayerenter, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    SoundPlay(SoundLink("TRaynor01MusicOutro", -1), PlayerGroupAll(), 100.0, 0.0);
    //Camera Lock
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        libNtve_gf_MakeUnitInvulnerable(gv_playerHeroes[PlayerGroupLoopCurrent()], true);
        UnitSetState(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitStateTargetable, false);
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(gv_mEDEVAC), 0.0, -1, 10, false);
        CameraLookAtUnit(PlayerGroupLoopCurrent(), gv_mEDEVAC);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
    }
    PlayerGroupLoopEnd();
    //Camera Lock End
    UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    UnitRemove(gv_mEDEVAC);
    UnitPauseAll(true);
    UnitGroupLoopBegin(gv_undeadGroup);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    gv_pauseSpawning = true;
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00081", 0), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(1.0, c_timeGame);
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        gv_gamesWon[13][PlayerGroupLoopCurrent()] += 1;
    }
    PlayerGroupLoopEnd();
    if ((gf_NumberofPlayers() != 1))
    {
        gf_SucceedMission(615, StringExternal("Param/Value/B080669C"), 0, true);
    }
    gv_gameWon = true;
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        gf_SavePlayerProgress(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    gv_gameOver = true;
    gf_DisplayScoreScreen();
    Wait(180.0, c_timeGame);
    PlayerGroupLoopBegin(gv_players);
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
    {
        GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, false, true);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LUNATICEnd_Init()
{
    gt_LUNATICEnd = TriggerCreate("gt_LUNATICEnd_Func");
    TriggerEnable(gt_LUNATICEnd, false);
    TriggerAddEventTimer(gt_LUNATICEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Thanatos Move W
//--------------------------------------------------------------------------------------------------
trigger gt_ThanatosMoveW;
//--------------------------------------------------------------------------------------------------
// Trigger: Thanatos Move W
//--------------------------------------------------------------------------------------------------
bool gt_ThanatosMoveW_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    unit lv_thanatos = EventPlayerEffectUsedUnit(c_effectUnitSource);
    int lv_timer;
    // Variable Initialization
    if (testConds)
    {
        if (!(gv_gamemode == 5))
        {
            return false;
        }
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    while ((UnitIsAlive(lv_thanatos) == true))
    {
        UnitGroupLoopBegin(gv_heroesGroup);
        for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
        {
            if (!(UnitIsAlive(UnitGroupLoopCurrent()))) { continue; }
            if (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_thanatos)) < 30.0)
            {
                UnitIssueOrder(lv_thanatos, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_thanatos), RandomFixed(10.0, 12.0), AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_thanatos)))), c_orderQueueReplace);
                break;
            }
        }
        UnitGroupLoopEnd();
        Wait(1.0, c_timeGame);
        lv_timer += 1;
        if (lv_timer >= gv_thanatosMoveWAILastTime)
        {
            return true;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ThanatosMoveW_Init()
{
    gt_ThanatosMoveW = TriggerCreate("gt_ThanatosMoveW_Func");
    TriggerEnable(gt_ThanatosMoveW, false);
    TriggerAddEventPlayerEffectUsed(gt_ThanatosMoveW, 14, "ThanatosAI");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: M5C2M1 Death Suppress
//--------------------------------------------------------------------------------------------------
unit gv_thanatos;
unit gv_titan;
trigger gt_ComplexBossBarThanatos;
//--------------------------------------------------------------------------------------------------
// Trigger:  Complex Boss Bar - Thanatos
//--------------------------------------------------------------------------------------------------
bool gt_ComplexBossBarThanatos_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    int lv_i;
    int lv_hp;
    int[2] lv_cpb;
    int lv_hptotal;
    // Variable Initialization
    if (testConds)
    {
        
    }
    if (!runActions)
    {
        return true;
    }
    gv_cpbcolors[0] = Color(100.0, 0.0, 0.0);
    gv_cpbcolors[1] = Color(100.0, 66.66, 26.56);
    gv_cpbcolors[2] = Color(50.0, 100.0, 50.0);
    lv_hptotal = UnitGetPropertyInt(gv_Thanatos, c_unitPropLife, c_unitPropCurrent);
    for (lv_i = 0; lv_i < 2; lv_i += 1)
    {
        if (gv_cpbreg >= 45)
        {
            gv_cpbreg = 10;
        }
        lv_cpb[lv_i] = gv_cpbreg;
        gf_CreateProgressBar(gv_cpbreg, "Assets\\Textures\\btn-ability-zerg-infestation.dds", StringToText("Thanatos"), lv_hptotal / 2, PlayerGroupAll(), gv_cpbcolors[lv_i + 1], gv_cpbcolors[lv_i]);
        libNtve_gf_ShowHideBossBar(false, gv_cpbreg);
        gv_cpbreg += 1;
    }
    while (gv_cpbinservice == true) { Wait(1.0, c_timeGame); }
    gv_cpbinservice = true;
    if (gv_mod_tier1 == true) { libNtve_gf_MoveBossBar(lv_cpb[0], c_anchorTop, 0, 150); }
    if (gv_mod_tier1 == true) { libNtve_gf_MoveBossBar(lv_cpb[1], c_anchorTop, 0, 150); }
    while (UnitIsAlive(gv_Thanatos))
    {
        lv_hp = UnitGetPropertyInt(gv_Thanatos, c_unitPropLife, c_unitPropCurrent);
        if (lv_hp > lv_hptotal / 2)
        {
            libNtve_gf_ShowHideBossBar(true, lv_cpb[0]);
            libNtve_gf_ShowHideBossBar(false, lv_cpb[1]);
            libNtve_gf_SetBossBarCurrentValue2(lv_cpb[0], (lv_hp - lv_hptotal / 2), true);
            libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[0]], (IntToText(FixedToInt(lv_hp)) + StringExternal("Param/Value/lib_Ntve_22BDA933") + IntToText(lv_hptotal)), PlayerGroupAll());
        }
        else
        {
            libNtve_gf_ShowHideBossBar(false, lv_cpb[0]);
            libNtve_gf_ShowHideBossBar(true, lv_cpb[1]);
            libNtve_gf_SetBossBarCurrentValue2(lv_cpb[1], lv_hp, true);
            libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[1]], (IntToText(FixedToInt(lv_hp)) + StringExternal("Param/Value/lib_Ntve_22BDA933") + IntToText(FixedToInt(lv_hptotal))), PlayerGroupAll());
        }
        Wait(0.1, c_timeReal);
    }
    libNtve_gf_ShowHideBossBar(false, lv_cpb[0]);
    libNtve_gf_ShowHideBossBar(false, lv_cpb[1]);
    gv_cpbinservice = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ComplexBossBarThanatos_Init()
{
    gt_ComplexBossBarThanatos = TriggerCreate("gt_ComplexBossBarThanatos_Func");
}
trigger gt_ComplexBossBarTitan;
//--------------------------------------------------------------------------------------------------
// Trigger:  Complex Boss Bar - Titan
//--------------------------------------------------------------------------------------------------
bool gt_ComplexBossBarTitan_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    int lv_i;
    int lv_hp;
    int[2] lv_cpb;
    int lv_hptotal;
    // Variable Initialization
    if (testConds)
    {
        
    }
    if (!runActions)
    {
        return true;
    }
    gv_cpbcolors[0] = Color(100.0, 0.0, 0.0);
    gv_cpbcolors[1] = Color(100.0, 66.66, 26.56);
    gv_cpbcolors[2] = Color(50.0, 100.0, 50.0);
    lv_hptotal = UnitGetPropertyInt(gv_Titan, c_unitPropLife, c_unitPropCurrent);
    for (lv_i = 0; lv_i < 2; lv_i += 1)
    {
        if (gv_cpbreg >= 45)
        {
            gv_cpbreg = 10;
        }
        lv_cpb[lv_i] = gv_cpbreg;
        gf_CreateProgressBar(gv_cpbreg, "Assets\\Custom Icons\\Mod_T1.dds", StringToText("Titan"), lv_hptotal / 2, PlayerGroupAll(), gv_cpbcolors[lv_i + 1], gv_cpbcolors[lv_i]);
        libNtve_gf_ShowHideBossBar(false, gv_cpbreg);
        gv_cpbreg += 1;
    }
    if (gv_mod_tier1 == true) { libNtve_gf_MoveBossBar(lv_cpb[0], c_anchorTop, 0, 150); }
    if (gv_mod_tier1 == true) { libNtve_gf_MoveBossBar(lv_cpb[1], c_anchorTop, 0, 150); }
    while (UnitIsAlive(gv_Titan))
    {
        lv_hp = UnitGetPropertyInt(gv_Titan, c_unitPropLife, c_unitPropCurrent);
        if (lv_hp > lv_hptotal / 2)
        {
            libNtve_gf_ShowHideBossBar(true, lv_cpb[0]);
            libNtve_gf_ShowHideBossBar(false, lv_cpb[1]);
            libNtve_gf_SetBossBarCurrentValue2(lv_cpb[0], (lv_hp - lv_hptotal / 2), true);
            libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[0]], (IntToText(FixedToInt(lv_hp)) + StringExternal("Param/Value/lib_Ntve_22BDA933") + IntToText(lv_hptotal)), PlayerGroupAll());
        }
        else
        {
            libNtve_gf_ShowHideBossBar(false, lv_cpb[0]);
            libNtve_gf_ShowHideBossBar(true, lv_cpb[1]);
            libNtve_gf_SetBossBarCurrentValue2(lv_cpb[1], lv_hp, true);
            libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lv_cpb[1]], (IntToText(FixedToInt(lv_hp)) + StringExternal("Param/Value/lib_Ntve_22BDA933") + IntToText(FixedToInt(lv_hptotal))), PlayerGroupAll());
        }
        Wait(0.1, c_timeReal);
    }
    libNtve_gf_ShowHideBossBar(false, lv_cpb[0]);
    libNtve_gf_ShowHideBossBar(false, lv_cpb[1]);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ComplexBossBarTitan_Init()
{
    gt_ComplexBossBarTitan = TriggerCreate("gt_ComplexBossBarTitan_Func");
}
trigger gt_2017Summer;
//--------------------------------------------------------------------------------------------------
// Trigger: 2017 Summer
//--------------------------------------------------------------------------------------------------
bool gt_2017Summer_Func(bool testConds, bool runActions)
{
    // Variable Declarations
    fixed lp_duration;
    timer lv_music;
    int auto15B42A98_ae;
    int auto15B42A98_ai;
    int lv_player;
    int lv_i;
    // Variable Initialization
    if (testConds)
    {
        if (!(gv_gamemode == 5))
        {
            return false;
        }
        
    }
    // Actions
    if (!runActions)
    {
        return true;
    }
    TriggerEnable(gt_ThanatosMoveW, true);
    GameSetPauseable(false);
    SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "ion", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    lp_duration = 5.0;
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 20.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 20.0, lp_duration);
    lv_music = TimerCreate();
    TimerStart(lv_music, 244.0, false, c_timeReal);
    TimerRestart(lv_music);
    TimerPause(lv_music, true);
    TimerPause(lv_music, false);
    libNtve_gf_WaitForTimer(lv_music, 7.0, true);
    gf_BlendFog(0.0, 0.0, 0.0, 60.0, 1.0, 11.0, 17.375);
    libNtve_gf_WaitForTimer(lv_music, 14.0, true);
    gf_SpawnThanatos();
    //gv_criticalShotReal5X = true;
    libNtve_gf_WaitForTimer(lv_music, 28.0, true);
    TriggerExecute(gt_ComplexBossBarThanatos, false, false);
    while (TimerGetElapsed(lv_music) <= 53.0)
    {
        auto15B42A98_ae = 12;
        auto15B42A98_ai = 1;
        lv_player = 1;
        for (; ((auto15B42A98_ai >= 0 && lv_player <= auto15B42A98_ae) || (auto15B42A98_ai <= 0 && lv_player >= auto15B42A98_ae)); lv_player += auto15B42A98_ai)
        {
            VisExploreArea(lv_player, RegionEntireMap(), false, false);
        }
        Wait(0.0625, c_timeReal);
    }
    libNtve_gf_WaitForTimer(lv_music, 55.0, true);
    gv_HyperPulseAcc = true;
    gf_SpawnUndeadIgnoreSupply(1, "AcidVore", 1);
    gf_SpawnUndeadIgnoreSupply(2, "AcidVore", 1);
    gf_SpawnUndeadIgnoreSupply(1, "AcidVore", 2);
    gf_SpawnUndeadIgnoreSupply(6, "Krill", 1);
    gf_SpawnUndeadIgnoreSupply(6, "Krill", 1);
    gf_SpawnUndeadIgnoreSupply(1, "Morbus", 1);
    gf_SpawnUndeadIgnoreSupply(1, "Morbus", 1);
    gf_SpawnUndead(1, "Ares", 1);
    Wait(7.1, c_timeReal);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndead(2, "Baron", 1);
    Wait(7.1, c_timeReal);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(7.1, c_timeReal);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    Wait(7.1, c_timeReal);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndeadIgnoreSupply(3, "ZombieCarrier", 1);
    //Titan GO
    gf_MissionText(StringExternal("Param/Value/75D77D6A"));
    UnitCreate(1, "Terrorzor", 0, 14, RegionRandomPoint(RegionFromId(1)), 0.0);
    UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), 8);
    gv_Titan = UnitLastCreated();
    if (!gv_mod_tier1)
    {
        gv_mod_tier1 = true;
        TriggerExecute(gt_ComplexBossBarTitan, false, false);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_Titan), ColorWithAlpha(50.20, 0.00, 100.00, 0.00), 10.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4E2045EC"));
        PingSetUnit(PingLastCreated(), gv_Titan);
        UnitGroupAdd(gv_undeadGroup, gv_Titan);
        UnitIssueOrder(gv_Titan, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
        gv_mod_tier1 = false;
    }
    else
    {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_Titan), ColorWithAlpha(50.20, 0.00, 100.00, 0.00), 10.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4E2045EC"));
        PingSetUnit(PingLastCreated(), gv_Titan);
        UnitGroupAdd(gv_undeadGroup, gv_Titan);
        UnitIssueOrder(gv_Titan, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        Wait(3.0, c_timeGame);
    }
    
    libNtve_gf_WaitForTimer(lv_music, 86.4, true);
    UnitGroupLoopBegin(UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MassivePing", UnitGetPosition(EventUnit()), ColorWithAlpha(70.98, 0.00, 0.00, 0.00), 8.0, 270.0);
        PingSetScale(PingLastCreated(), 0.3);
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        Wait(0.1, c_timeReal);
    }
    UnitGroupLoopEnd();
    auto15B42A98_ae = 12;
    auto15B42A98_ai = 1;
    lv_player = 1;
    for (; ((auto15B42A98_ai >= 0 && lv_player <= auto15B42A98_ae) || (auto15B42A98_ai <= 0 && lv_player >= auto15B42A98_ae)); lv_player += auto15B42A98_ai)
    {
        VisExploreArea(lv_player, RegionEntireMap(), false, false);
    }
    libNtve_gf_WaitForTimer(lv_music, 98.4, true);
    UnitGroupLoopBegin(gv_undeadGroup);
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "RadarPing", UnitGetPosition(EventUnit()), ColorWithAlpha(70.98, 0.00, 0.00, 0.00), 10.0, 90.0);
        PingSetScale(PingLastCreated(), 0.04);
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        lv_i += 1;
        if (lv_i >= 11)
        {
            Wait(0.0625, c_timeReal);
            lv_i = 0;
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
    {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MassivePing", UnitGetPosition(EventUnit()), ColorWithAlpha(70.98, 0.00, 0.00, 0.00), 8.0, 270.0);
        PingSetScale(PingLastCreated(), 0.4);
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        Wait(0.22, c_timeReal);
    }
    UnitGroupLoopEnd();
    Wait(4.0, c_timeReal);
    auto15B42A98_ae = 12;
    auto15B42A98_ai = 1;
    lv_player = 1;
    for (; ((auto15B42A98_ai >= 0 && lv_player <= auto15B42A98_ae) || (auto15B42A98_ai <= 0 && lv_player >= auto15B42A98_ae)); lv_player += auto15B42A98_ai)
    {
        VisExploreArea(lv_player, RegionEntireMap(), false, false);
    }
    Wait(3.0, c_timeReal);
    while (UnitIsAlive(gv_Thanatos))
    {
        auto15B42A98_ae = 12;
        auto15B42A98_ai = 1;
        lv_player = 1;
        for (; ((auto15B42A98_ai >= 0 && lv_player <= auto15B42A98_ae) || (auto15B42A98_ai <= 0 && lv_player >= auto15B42A98_ae)); lv_player += auto15B42A98_ai)
        {
            VisExploreArea(lv_player, RegionEntireMap(), false, false);
        }
        Wait(1.4, c_timeReal);
        
        UnitGroupLoopBegin(UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
        {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MassivePing", UnitGetPosition(EventUnit()), ColorWithAlpha(70.98, 0.00, 0.00, 0.00), 8.0, 270.0);
            PingSetScale(PingLastCreated(), 0.4);
            PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
            Wait(0.22, c_timeReal);
        }
        UnitGroupLoopEnd();
        
        Wait(1.3, c_timeReal);
        UnitGroupLoopBegin(gv_undeadGroup);
        for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
        {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "RadarPing", UnitGetPosition(EventUnit()), ColorWithAlpha(70.98, 0.00, 0.00, 0.00), 10.0, 90.0);
            PingSetScale(PingLastCreated(), 0.04);
            PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
            lv_i += 1;
            if (lv_i >= 11)
            {
                Wait(0.0625, c_timeReal);
                lv_i = 0;
            }
        }
        UnitGroupLoopEnd();
        Wait(5.8, c_timeReal);
    }
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, lp_duration);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, lp_duration);
    Wait(3.0, c_timeReal);
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    SoundtrackStop(gv_players, c_soundtrackCategoryMusic, false);
    gv_HyperPulseAcc = false;
    GameSetPauseable(true);
    gv_criticalShotReal5X = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_2017Summer_Init()
{
    gt_2017Summer = TriggerCreate("gt_2017Summer_Func");
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    ASCIIUtilInit();
    AESEncryptionInit();
    gt_EventRaiseController_Init(); gt_FadeTempRHP_Init();
    gt_PinganUnitItem_Init();
    gt_T1DamageDealtDisplayGlobal_Init();
    gt_rCDD_Init();
    gt_AdvancedInfestationLevelDisplay_Init();
    gv_HEATImpact = TimerCreate(); gt_BigDamageSpellDamageCount_Init(); gt_BigDamageSpellDamageDisplay_Init(); gt_ATEmpty_Init();
    gt_Tier3Count_Init();
    gt_ItemDes_Init();
    gt_VoteChatHandler_Init();
    gv_cpbreg = 10; gt_ComplexBossBarHighTierX_Init();
    gt_Tier1EXTRA_Init();
    gt_2018NewYear_Init(); gt_HNuclear_InstantDetonate_Init(); gt_HNuclearDesignator_Init(); gt_HNuclear_HALT_Init(); gt_voidRift_Init();
    gt_RongYanChongBehavior_Init(); gt_ComplexBossBarRongYanChong_Init(); gv_RongYanChongUnitGroup = UnitGroupEmpty(); gt_RongYanChongSiWangFenLie_Init();
    gt_LUNATICAS_Init();gt_LUNATIC_Init();gt_LUNATIC5_Init();gt_LUNATIC10_Init();gt_LUNATIC15_Init();gt_LUNATIC20_Init();gt_LUNATIC25_Init();gt_LUNATIC30_Init();gt_LUNATIC35_Init();gt_LUNATIC40_Init();gt_LUNATIC45_Init();gt_LUNATICTimeout_Init();gt_LUNATICevacplayerenter_Init();gt_LUNATICEnd_Init(); gt_LUNATICDarkFail_Init();
    gt_ThanatosMoveW_Init();
    gt_2017Summer_Init();gt_ComplexBossBarTitan_Init();gt_ComplexBossBarThanatos_Init();
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SetupRankSet (int lp_player, int lp_rankset) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_playerdecalunlocked[42][lp_player] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "MechOperatorUnlocked", 1);
    }

    if ((gv_playerdecalunlocked[1][lp_player] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "Vesania30Unlocked", 1);
    }

    if ((gv_achievementUnlocked[32][lp_player] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "Cyborg20Unlocked", 1);
    }

    gv_playerRankChosen[lp_player] = true;
    if ((lp_rankset == 1)) {
        gv_playerRankSet[lp_player] = 1;
        if ((gv_playerExperience[1][lp_player] >= gv_rankXPMin[1][8])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SFCEn", 1);
        }

        if ((gv_playerExperience[1][lp_player] >= gv_rankXPMin[1][11])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SGM", 1);
        }

        if ((gv_playerExperience[1][lp_player] >= gv_rankXPMin[1][12])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CSM", 1);
        }

        if ((gv_playerExperience[1][lp_player] >= gv_rankXPMin[1][13])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SMA", 1);
        }

        if ((gv_playerExperience[1][lp_player] >= gv_rankXPMin[1][14])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CMA1", 1);
        }

    }
    else {
        if ((lp_rankset == 2)) {
            if ((gv_playerExperience[2][lp_player] >= 1)) {
                gv_playerRankSet[lp_player] = 2;
                gv_playerStartingXP[lp_player] = gv_playerExperience[2][lp_player];
                if ((gv_playerExperience[2][lp_player] >= gv_rankXPMin[2][2])) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WO2", 1);
                }

                if ((gv_playerExperience[2][lp_player] >= gv_rankXPMin[2][3])) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WO3", 1);
                }

                if ((gv_playerExperience[2][lp_player] >= gv_rankXPMin[2][4])) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WO4", 1);
                }

                if ((gv_playerExperience[2][lp_player] >= gv_rankXPMin[2][5])) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WO5", 1);
                }

                if ((gv_playerExperience[2][lp_player] >= gv_rankXPMin[2][7])) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "MW2", 1);
                }

            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaObjective, StringExternal("Param/Value/92AC9F1C"));
                gv_playerRankSet[lp_player] = 1;
            }
        }
        else {
            if ((lp_rankset == 3)) {
                if ((gv_playerExperience[3][lp_player] >= 1)) {
                    gv_playerRankSet[lp_player] = 3;
                    gv_playerStartingXP[lp_player] = gv_playerExperience[3][lp_player];
                    if ((gv_playerExperience[3][lp_player] >= gv_rankXPMin[3][2])) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "1LT", 1);
                    }

                    if ((gv_playerExperience[3][lp_player] >= gv_rankXPMin[3][3])) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CPT", 1);
                    }

                    if ((gv_playerExperience[3][lp_player] >= gv_rankXPMin[3][6])) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "COL", 1);
                    }

                    if ((gv_playerExperience[3][lp_player] >= gv_rankXPMin[3][7])) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BGEN", 1);
                    }

                    if ((gv_playerExperience[3][lp_player] >= gv_rankXPMin[3][8])) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "MGEN", 1);
                    }

                    if ((gv_playerExperience[3][lp_player] >= gv_rankXPMin[3][9])) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "LTGEN", 1);
                    }

                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaObjective, StringExternal("Param/Value/8CF77DAB"));
                    gv_playerRankSet[lp_player] = 1;
                }
            }

        }
    }
    gf_UpdateSIDialogforPlayer(lp_player);
    gf_UpdateUnlockableDialog(lp_player);
}

void gf_SetupCommandCard (int lp_player, int lp_listItem) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_listItem == 1)) {
        gv_customCommandCard[lp_player] = true;
    }
    else {
        if ((lp_listItem == 2)) {
            gv_customCommandCard[lp_player] = false;
        }
    }
    gv_customCommandCard[lp_player] = false;
    BankValueSetFromFlag(gv_hotkeyBank[lp_player], "A", "Command Card", gv_customCommandCard[lp_player]);
    BankSave(gv_hotkeyBank[lp_player]);
}

void gf_SetupMos (string lp_newHero, int lp_rounds, fixed lp_reloadBaseTime, int lp_mags, soundlink lp_sound, string lp_heroImage) {
    // Variable Declarations
    int lv_pindex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pindex = UnitGetOwner(EventUnitCreatedUnit());

    // Implementation
    libNtve_gf_ReplaceUnit(EventUnitCreatedUnit(), lp_newHero, libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
    libNtve_gf_SendActorMessageToUnit(libNtve_gf_LastReplacedUnit(), gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);
    UnitGroupAdd(gv_heroesGroup, libNtve_gf_LastReplacedUnit());
    UnitGroupAdd(gv_undeadTargetGroup, libNtve_gf_LastReplacedUnit());
    UnitControlGroupAddUnit(UnitGetOwner(libNtve_gf_LastReplacedUnit()), 1, libNtve_gf_LastReplacedUnit());
    UnitSelect(libNtve_gf_LastReplacedUnit(), UnitGetOwner(libNtve_gf_LastReplacedUnit()), true);
    gv_playerHeroes[lv_pindex] = libNtve_gf_LastReplacedUnit();
    UnitSetCustomValue(libNtve_gf_LastReplacedUnit(), 2, 16.0);
    UnitBehaviorAdd(UnitLastCreated(), "AllyReveal", UnitLastCreated(), 1);
    libNtve_gf_SetDialogItemUnitLink(gv_unlockDialogItems[lv_pindex], UnitGetType(libNtve_gf_LastReplacedUnit()), PlayerGroupAll());
    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_pindex]), gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);
    libNtve_gf_SetDialogItemUnitLink(gv_accessoryDialogItems[lv_pindex], UnitGetType(libNtve_gf_LastReplacedUnit()), PlayerGroupAll());
    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_pindex]), gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);
    gv_magsize[lv_pindex] = lp_rounds;
    gv_reloadbasetime[lv_pindex] = lp_reloadBaseTime;
    PlayerModifyPropertyInt(UnitGetOwner(libNtve_gf_LastReplacedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
    PlayerModifyPropertyInt(UnitGetOwner(libNtve_gf_LastReplacedUnit()), c_playerPropVespene, c_playerPropOperSetTo, lp_mags);
    SoundPlayOnUnit(lp_sound, PlayerGroupAll(), libNtve_gf_LastReplacedUnit(), 0.0, 100.0, 0.0);
    gv_playerHeroImage[UnitGetOwner(libNtve_gf_LastReplacedUnit())] = lp_heroImage;
    if ((gv_playerRankSet[lv_pindex] == 1)) {
        UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "RankModifier", libNtve_gf_LastReplacedUnit(), (gf_GetPlayerRank(lv_pindex) - 1));
    }
    else {
        if ((gv_playerRankSet[lv_pindex] == 2)) {
            UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "RankModifier", libNtve_gf_LastReplacedUnit(), (gf_GetPlayerRank(lv_pindex) + 5));
        }
        else {
            UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "RankModifier", libNtve_gf_LastReplacedUnit(), (gf_GetPlayerRank(lv_pindex) + 4));
        }
    }
    if ((gv_gamemode == 11)) {
        UnitInventoryCreate(libNtve_gf_LastReplacedUnit(), "SecurityArmor");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
    }
}

bool gf_PlayerRandomedCount () {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    playergroup auto3E435F05_g;
    int auto3E435F05_var;

    // Variable Initialization

    // Implementation
    auto3E435F05_g = gv_players;
    auto3E435F05_var = -1;
    while (true) {
        auto3E435F05_var = PlayerGroupNextPlayer(auto3E435F05_g, auto3E435F05_var);
        if (auto3E435F05_var < 0) { break; }
        if ((gv_playerRandomed[auto3E435F05_var] == true)) {
            lv_int += 1;
        }
    }
    if ((lv_int > 4) && (lv_int == PlayerGroupCount(gv_players))) {
        return true;
    }
    return false;
}

bool gf_CheckVotes (int lp_mode) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    int auto4971D538_ae;
    const int auto4971D538_ai = 1;

    // Variable Initialization

    // Implementation
    auto4971D538_ae = gv_modetotal;
    lv_loopint = 1;
    for ( ; ( (auto4971D538_ai >= 0 && lv_loopint <= auto4971D538_ae) || (auto4971D538_ai < 0 && lv_loopint >= auto4971D538_ae) ) ; lv_loopint += auto4971D538_ai ) {
        if ((lp_mode != lv_loopint)) {
            if ((gv_modevote[lp_mode] < gv_modevote[lv_loopint])) {
                return false;
            }

        }

    }
    return true;
}

trigger auto_gf_CountVotes_Trigger = null;

void gf_CountVotes () {
    if (auto_gf_CountVotes_Trigger == null) {
        auto_gf_CountVotes_Trigger = TriggerCreate("auto_gf_CountVotes_TriggerFunc");
    }

    TriggerExecute(auto_gf_CountVotes_Trigger, false, false);
}

bool auto_gf_CountVotes_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_novotes;
    int lv_LoopInt;

    // Automatic Variable Declarations
    const int autoA2864599_ae = 12;
    const int autoA2864599_ai = 1;
    int auto8B7467C2_val;
    const int auto98A1A031_ae = 12;
    const int auto98A1A031_ai = 1;
    int autoE726FA83_ae;
    const int autoE726FA83_ai = 1;
    int auto1C2C5714_val;

    // Variable Initialization
    lv_novotes = true;

    // Implementation
    lv_LoopInt = 1;
    for ( ; ( (autoA2864599_ai >= 0 && lv_LoopInt <= autoA2864599_ae) || (autoA2864599_ai < 0 && lv_LoopInt >= autoA2864599_ae) ) ; lv_LoopInt += autoA2864599_ai ) {
        if ((gv_playermodevote[lv_LoopInt] != 0)) {
            lv_novotes = false;
            break;
        }

    }
    if ((lv_novotes)) {
        auto8B7467C2_val = gv_gamemode;
        if (auto8B7467C2_val == 0) {
            gv_gamemode = 15;
        }
        else if (auto8B7467C2_val == 15) {
            gv_gamemode = 1;
        }
        else if (auto8B7467C2_val == 16) {
            gv_gamemode = 7;
        }
        else if (auto8B7467C2_val == 17) {
            gv_gamemode = 18;
        }
        else {
            gv_gamemode = 1;
        }
    }
    else {
        lv_LoopInt = 1;
        for ( ; ( (auto98A1A031_ai >= 0 && lv_LoopInt <= auto98A1A031_ae) || (auto98A1A031_ai < 0 && lv_LoopInt >= auto98A1A031_ae) ) ; lv_LoopInt += auto98A1A031_ai ) {
            gv_modevote[gv_playermodevote[lv_LoopInt]] = (gv_modevote[gv_playermodevote[lv_LoopInt]] + 1);
        }
        autoE726FA83_ae = gv_modetotal;
        lv_LoopInt = 1;
        for ( ; ( (autoE726FA83_ai >= 0 && lv_LoopInt <= autoE726FA83_ae) || (autoE726FA83_ai < 0 && lv_LoopInt >= autoE726FA83_ae) ) ; lv_LoopInt += autoE726FA83_ai ) {
            if ((gf_CheckVotes(lv_LoopInt) == true)) {
                gv_gamemode = lv_LoopInt;
                break;
            }

        }
    }
    Wait(1.0, c_timeGame);
    auto1C2C5714_val = gv_gamemode;
    if (auto1C2C5714_val == 15) {
        gf_ResetVotes();
        gf_InitModeDialogCampaign();
    }
    else if (auto1C2C5714_val == 16) {
        gf_ResetVotes();
        gf_InitModeDialogSurvival();
    }
    else if (auto1C2C5714_val == 17) {
        gf_ResetVotes();
        gf_InitModeDialogQuickMatch();
    }
    else {
        gf_SetGameMode();
    }
    return true;
}

void gf_ResetVotes () {
    // Variable Declarations
    int lv_LoopInt;

    // Automatic Variable Declarations
    const int auto6B2051C0_ae = 12;
    const int auto6B2051C0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_LoopInt = 1;
    for ( ; ( (auto6B2051C0_ai >= 0 && lv_LoopInt <= auto6B2051C0_ae) || (auto6B2051C0_ai < 0 && lv_LoopInt >= auto6B2051C0_ae) ) ; lv_LoopInt += auto6B2051C0_ai ) {
        gv_playerVoted[lv_LoopInt] = false;
        gv_modevote[gv_playermodevote[lv_LoopInt]] = 0;
        gv_playermodevote[lv_LoopInt] = 0;
    }
}

trigger auto_gf_InitModeDialogCampaign_Trigger = null;

void gf_InitModeDialogCampaign () {
    if (auto_gf_InitModeDialogCampaign_Trigger == null) {
        auto_gf_InitModeDialogCampaign_Trigger = TriggerCreate("auto_gf_InitModeDialogCampaign_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitModeDialogCampaign_Trigger, false, false);
}

bool auto_gf_InitModeDialogCampaign_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(670, 800, c_anchorCenter, 0, -30, false);
    gv_modedialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    gf_CreateDialogItemAny(c_triggerControlTypeImage, DialogLastCreated(), "", 640, 100, c_anchorTop, 0, 0, null, null, "", "Assets\\Textures\\ui_battlenet_glue_coop_commandericon_scanlines.dds", "", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gf_CreateDialogItemAny(c_triggerControlTypeLabel, DialogLastCreated(), "", 740, 105, c_anchorTop, 0, 0, null, StringExternal("Param/Value/0D719D40"), "Military_Title", "", "", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 100.00, 100.00), PlayerGroupAll());
    gf_CreateDifficultyButtonLeft(gv_modedialog, 1, UserDataGetImagePath("GameModes", "Recruit", "Image", 1), 1);
    gf_CreateDifficultyButtonLeft(gv_modedialog, 2, UserDataGetImagePath("GameModes", "Normal", "Image", 1), 2);
    gf_CreateDifficultyButtonLeft(gv_modedialog, 3, UserDataGetImagePath("GameModes", "Hard", "Image", 1), 3);
    gf_CreateDifficultyButtonLeft(gv_modedialog, 4, UserDataGetImagePath("GameModes", "Insane", "Image", 1), 4);
    gf_CreateDifficultyButtonLeft(gv_modedialog, 5, UserDataGetImagePath("GameModes", "Nightmare", "Image", 1), 5);
    gf_CreateDifficultyButtonRight(gv_modedialog, 11, UserDataGetImagePath("GameModes", "PMC", "Image", 1), 1);
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[1], UserDataGetText("GameModes", "Recruit", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[2], UserDataGetText("GameModes", "Normal", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[3], UserDataGetText("GameModes", "Hard", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[4], UserDataGetText("GameModes", "Insane", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[5], UserDataGetText("GameModes", "Nightmare", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[11], UserDataGetText("GameModes", "PMC", "Tooltip", 1), PlayerGroupAll());
    DialogSetVisible(gv_modedialog, PlayerGroupAll(), true);
    TimerWindowCreate(gv_modetimer, StringExternal("Param/Value/745D712C"), true, false);
    TimerStart(gv_modetimer, 20.0, false, c_timeGame);
    gv_modetimeoutwindow = TimerWindowLastCreated();
    gv_beginning = true;
    TriggerEnable(gt_ModeTimerEnd, true);
    return true;
}

trigger auto_gf_InitModeDialogSurvival_Trigger = null;

void gf_InitModeDialogSurvival () {
    if (auto_gf_InitModeDialogSurvival_Trigger == null) {
        auto_gf_InitModeDialogSurvival_Trigger = TriggerCreate("auto_gf_InitModeDialogSurvival_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitModeDialogSurvival_Trigger, false, false);
}

bool auto_gf_InitModeDialogSurvival_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(670, 800, c_anchorCenter, 0, -30, false);
    gv_modedialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    gf_CreateDialogItemAny(c_triggerControlTypeImage, DialogLastCreated(), "", 640, 100, c_anchorTop, 0, 0, null, null, "", "Assets\\Textures\\ui_battlenet_glue_coop_commandericon_scanlines.dds", "", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gf_CreateDialogItemAny(c_triggerControlTypeLabel, DialogLastCreated(), "", 740, 105, c_anchorTop, 0, 0, null, StringExternal("Param/Value/ED243EA5"), "Military_Title", "", "", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 100.00, 100.00), PlayerGroupAll());
    gf_CreateDifficultyButtonLeft(gv_modedialog, 7, UserDataGetImagePath("GameModes", "Survival", "Image", 1), 1);
    gf_CreateDifficultyButtonLeft(gv_modedialog, 8, UserDataGetImagePath("GameModes", "PMC Survival", "Image", 1), 2);
    gf_CreateDifficultyButtonRight(gv_modedialog, 9, UserDataGetImagePath("GameModes", "Boss Mode", "Image", 1), 1);
    gf_CreateDifficultyButtonRight(gv_modedialog, 19, UserDataGetImagePath("GameModes", "Classic Survival", "Image", 1), 2);
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[7], UserDataGetText("GameModes", "Survival", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[8], UserDataGetText("GameModes", "PMC Survival", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[9], UserDataGetText("GameModes", "Boss Mode", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[19], UserDataGetText("GameModes", "Classic Survival", "Tooltip", 1), PlayerGroupAll());
    DialogSetVisible(gv_modedialog, PlayerGroupAll(), true);
    TimerWindowCreate(gv_modetimer, StringExternal("Param/Value/671B3A7D"), true, false);
    TimerStart(gv_modetimer, 20.0, false, c_timeGame);
    gv_modetimeoutwindow = TimerWindowLastCreated();
    gv_beginning = true;
    TriggerEnable(gt_ModeTimerEnd, true);
    return true;
}

trigger auto_gf_InitModeDialogQuickMatch_Trigger = null;

void gf_InitModeDialogQuickMatch () {
    if (auto_gf_InitModeDialogQuickMatch_Trigger == null) {
        auto_gf_InitModeDialogQuickMatch_Trigger = TriggerCreate("auto_gf_InitModeDialogQuickMatch_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitModeDialogQuickMatch_Trigger, false, false);
}

bool auto_gf_InitModeDialogQuickMatch_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(670, 800, c_anchorCenter, 0, -30, false);
    gv_modedialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    gf_CreateDialogItemAny(c_triggerControlTypeImage, DialogLastCreated(), "", 640, 100, c_anchorTop, 0, 0, null, null, "", "Assets\\Textures\\ui_battlenet_glue_coop_commandericon_scanlines.dds", "", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gf_CreateDialogItemAny(c_triggerControlTypeLabel, DialogLastCreated(), "", 740, 105, c_anchorTop, 0, 0, null, StringExternal("Param/Value/BCB7B073"), "Military_Title", "", "", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 100.00, 100.00), PlayerGroupAll());
    gf_CreateDifficultyButtonLeft(gv_modedialog, 18, UserDataGetImagePath("GameModes", "Thalim Holdout", "Image", 1), 1);
    gf_CreateDifficultyButtonRight(gv_modedialog, 19, UserDataGetImagePath("GameModes", "Classic Survival", "Image", 1), 1);
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[18], UserDataGetText("GameModes", "Thalim Holdout", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[19], UserDataGetText("GameModes", "Classic Survival", "Tooltip", 1), PlayerGroupAll());
    DialogSetVisible(gv_modedialog, PlayerGroupAll(), true);
    TimerWindowCreate(gv_modetimer, StringExternal("Param/Value/5C9058F6"), true, false);
    TimerStart(gv_modetimer, 20.0, false, c_timeGame);
    gv_modetimeoutwindow = TimerWindowLastCreated();
    gv_beginning = true;
    TriggerEnable(gt_ModeTimerEnd, true);
    return true;
}

trigger auto_gf_SetGameMode_Trigger = null;

void gf_SetGameMode () {
    if (auto_gf_SetGameMode_Trigger == null) {
        auto_gf_SetGameMode_Trigger = TriggerCreate("auto_gf_SetGameMode_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetGameMode_Trigger, false, false);
}

bool auto_gf_SetGameMode_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_loopint;
    text lv_modifiers;
    int lv_totalxp;
    int lv_totalpoints;
    int lv_totalvotes;
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoF06C4E22_g;
    int autoF06C4E22_var;
    const int auto26717A88_ae = 12;
    const int auto26717A88_ai = 1;
    int auto1B6F358B_ae;
    const int auto1B6F358B_ai = 1;
    const int autoABEBA77C_ae = 5;
    const int autoABEBA77C_ai = 1;
    playergroup autoD62849D6_g;
    int autoD62849D6_var;
    playergroup auto638EFF2D_g;
    int auto638EFF2D_var;
    const int autoC27710DB_ae = 3;
    const int autoC27710DB_ai = 1;
    const int auto09DA308E_ae = 12;
    const int auto09DA308E_ai = 1;
    const int autoBD447513_ae = 0;
    const int autoBD447513_ai = 30;
    const int autoA99FC5BD_ae = -390;
    const int autoA99FC5BD_ai = -30;

    // Variable Initialization

    // Implementation
    DialogSetVisible(gv_modedialog, PlayerGroupAll(), false);
    if ((gv_easterEggFound == true) && ((gv_devingame == true) || (gv_modingame == true))) {
        gf_SetGameMode();
        gv_gamemode = 16;
        autoF06C4E22_g = gv_players;
        autoF06C4E22_var = -1;
        while (true) {
            autoF06C4E22_var = PlayerGroupNextPlayer(autoF06C4E22_g, autoF06C4E22_var);
            if (autoF06C4E22_var < 0) { break; }
            if ((gv_playerExperience[1][autoF06C4E22_var] >= 400)) {
                TipAlertPanelClear(PlayerGroupSingle(autoF06C4E22_var));
            }

            lv_totalxp = gv_playerExperience[1][autoF06C4E22_var];
            lv_totalxp = (lv_totalxp + gv_playerExperience[2][autoF06C4E22_var]);
            lv_totalxp = (lv_totalxp + gv_playerExperience[3][autoF06C4E22_var]);
        }
        gv_spawnCount = (gv_spawnCount + UserDataGetInt("GameModes", "Nightmare", "Spawn Modifier", 1));
        gv_ailmentChance = 6;
    }
    else {
        lv_loopint = 1;
        for ( ; ( (auto26717A88_ai >= 0 && lv_loopint <= auto26717A88_ae) || (auto26717A88_ai < 0 && lv_loopint >= auto26717A88_ae) ) ; lv_loopint += auto26717A88_ai ) {
            gv_modevote[gv_playermodevote[lv_loopint]] = (gv_modevote[gv_playermodevote[lv_loopint]] + 1);
        }
        auto1B6F358B_ae = gv_modetotal;
        lv_loopint = 1;
        for ( ; ( (auto1B6F358B_ai >= 0 && lv_loopint <= auto1B6F358B_ae) || (auto1B6F358B_ai < 0 && lv_loopint >= auto1B6F358B_ae) ) ; lv_loopint += auto1B6F358B_ai ) {
            if ((gf_CheckVotes(lv_loopint) == true)) {
                gv_gamemode = lv_loopint;
                break;
            }

        }
        if ((gv_gamemode == 0)) {
            lv_loopint = 1;
            for ( ; ( (autoABEBA77C_ai >= 0 && lv_loopint <= autoABEBA77C_ae) || (autoABEBA77C_ai < 0 && lv_loopint >= autoABEBA77C_ae) ) ; lv_loopint += autoABEBA77C_ai ) {
                lv_totalpoints = (lv_totalpoints + (lv_loopint * gv_modevote[lv_loopint]));
                lv_totalvotes = (lv_totalvotes + gv_modevote[lv_loopint]);
            }
            lv_totalpoints = (lv_totalpoints / lv_totalvotes);
            gv_gamemode = lv_totalpoints;
        }

        if ((gv_gamemode == 0)) {
            gv_gamemode = 2;
        }
        autoD62849D6_g = gv_players;
        autoD62849D6_var = -1;
        while (true) {
            autoD62849D6_var = PlayerGroupNextPlayer(autoD62849D6_g, autoD62849D6_var);
            if (autoD62849D6_var < 0) { break; }
            lv_totalxp = gv_playerExperience[1][autoD62849D6_var];
            lv_totalxp = (lv_totalxp + gv_playerExperience[2][autoD62849D6_var]);
            lv_totalxp = (lv_totalxp + gv_playerExperience[3][autoD62849D6_var]);
        }
        if ((gv_gamemode > 1) && (gv_gamemode <= 5)) {
            gv_zombieBuffAmount = gv_gamemode;
        }
        else if (((gv_gamemode == 7) || (gv_gamemode == 18) || (gv_gamemode == 19))) {
            gv_zombieBuffAmount = 3;
        }
        else if (((gv_gamemode == 8) || (gv_gamemode == 11))) {
            DialogControlSetEnabled(gv_dialogmodifier[11], PlayerGroupAll(), true);
            gv_zombieBuffAmount = 2;
            auto638EFF2D_g = gv_players;
            auto638EFF2D_var = -1;
            while (true) {
                auto638EFF2D_var = PlayerGroupNextPlayer(auto638EFF2D_g, auto638EFF2D_var);
                if (auto638EFF2D_var < 0) { break; }
                TechTreeUpgradeAddLevel(auto638EFF2D_var, "PMC", 1);
            }
        }
        else if ((gv_gamemode == 9)) {
            gv_zombieBuffAmount = 4;
        }
        else if ((gv_gamemode == 10)) {
            gv_zombieBuffAmount = 2;
        }
        gv_spawnCount = (gv_spawnCount + UserDataGetInt("GameModes", UserDataInstance("GameModes", gv_gamemode), "Spawn Modifier", 1));
        if ((gv_gamemode <= 5)) {
            gv_ailmentChance = (11 - gv_gamemode);
            gv_xpmodifier = (gv_xpmodifier - 0.5);
            gv_xpmodifier = (gv_xpmodifier + (0.25 * IntToFixed(gv_gamemode)));
        }
        if ((gv_gamemode >= 7) && (gv_gamemode <= 12)) {
            gv_ailmentChance = 8;
        }
        if (((gv_gamemode == 13) || (gv_gamemode == 11))) {
            lv_i = 1;
            for ( ; ( (autoC27710DB_ai >= 0 && lv_i <= autoC27710DB_ae) || (autoC27710DB_ai < 0 && lv_i >= autoC27710DB_ae) ) ; lv_i += autoC27710DB_ai ) {
                DialogControlSetEnabled(gv_dialogmodifier[lv_i], PlayerGroupAll(), false);
            }
            DialogControlSetEnabled(gv_dialogmodifier[8], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_dialogmodifier[9], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_dialogmodifier[10], PlayerGroupAll(), false);
        }
        else if ((gv_gamemode == 9)) {
            DialogControlSetEnabled(gv_dialogmodifier[3], PlayerGroupAll(), false);
            DialogControlSetEnabled(gv_dialogmodifier[10], PlayerGroupAll(), false);
        }
        else if (((gv_gamemode == 12))) {
            lv_i = 1;
            for ( ; ( (auto09DA308E_ai >= 0 && lv_i <= auto09DA308E_ae) || (auto09DA308E_ai < 0 && lv_i >= auto09DA308E_ae) ) ; lv_i += auto09DA308E_ai ) {
                DialogControlSetEnabled(gv_dialogmodifier[lv_i], PlayerGroupAll(), false);
            }
        }
    }
    TriggerEnable(gt_ModifierChecked, true);
    if (gv_gamemode == 13) { 
        gv_LUNATICEnable = true;
        libHots_gf_PlaySoundLinkasMusic(SoundLink("TInit", -1), true, true);
    }
    TriggerEnable(gt_ModeTimerEnd, false);
    TriggerEnable(gt_RankSelected, true);
    TriggerEnable(gt_RankModifierSubmit, true);
    DialogSetVisible(gv_rankdialog, PlayerGroupAll(), true);
    if (!gv_LUNATICEnable) { TimerStart(gv_modetimer, 30.0, false, c_timeGame); }
    else { TimerStart(gv_modetimer, 60.0, false, c_timeGame); }
    TimerWindowCreate(gv_modetimer, StringExternal("Param/Value/B2FA7DCB"), true, false);
    gv_modetimeoutwindow = TimerWindowLastCreated();
    TriggerEnable(gt_RankTimerEnd, true);
    DialogCreate(510, 210, c_anchorLeft, -390, 70, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetTitle(DialogLastCreated(), (StringExternal("Param/Value/2FB66ECB") + ((StringExternal("Param/Value/FD698D4F") + UserDataGetText("GameModes", UserDataInstance("GameModes", gv_gamemode), "Name", 1)) + StringExternal("Param/Value/0C1B31FD"))));
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "UI\\beginning_background.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 125, DialogGetHeight(DialogLastCreated()), c_anchorTopLeft, 0, 0, StringToText(""), "UI\\save_border_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_i = -390;
    for ( ; ( (autoBD447513_ai >= 0 && lv_i <= autoBD447513_ae) || (autoBD447513_ai < 0 && lv_i >= autoBD447513_ae) ) ; lv_i += autoBD447513_ai ) {
        DialogSetPosition(DialogLastCreated(), c_anchorLeft, lv_i, 70);
        Wait(0.0625, c_timeGame);
    }
    Wait(0.5, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDebug);
    lv_i = 0;
    for ( ; ( (autoA99FC5BD_ai >= 0 && lv_i <= autoA99FC5BD_ae) || (autoA99FC5BD_ai < 0 && lv_i >= autoA99FC5BD_ae) ) ; lv_i += autoA99FC5BD_ai ) {
        DialogSetPosition(DialogLastCreated(), c_anchorLeft, lv_i, 70);
        Wait(0.0625, c_timeGame);
    }
    DialogDestroy(DialogLastCreated());
    return true;
}

int gf_EventActive () {
    // Variable Declarations
    int lv_month;
    int lv_day;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_month = GetDateTimeMonth(CurrentDateTimeGet());
    lv_day = GetDateTimeDay(CurrentDateTimeGet());
    if ((lv_month == 3) && (lv_day <= 14)) {
        return 1;
        return 0;
    }

    if ((((lv_month == 12) && (lv_day >= 24)) || ((lv_month == 1) && (lv_day <= 4)))) {
        return 2;
        return 0;
    }

    if ((lv_month == 6)) {
        return 3;
        return 0;
    }

    if ((((lv_month == 10) && (lv_day >= 28)) || ((lv_month == 11) && (lv_day <= 4)))) {
        return 4;
        return 0;
    }

    return 0;
}

void gf_SetModifiers () {
    // Variable Declarations
    int lv_weatherModifier;
    text lv_modifiers;
    int lv_xpincrease;
    text lv_tipmodifierlist;
    int lv_i;
    int lv_modifiertotal;

    // Automatic Variable Declarations
    playergroup auto953973FE_g;
    int auto953973FE_var;
    playergroup auto3E0A0406_g;
    int auto3E0A0406_var;
    int autoDF86159F_val;
    const int auto7B2D82A0_ae = 0;
    const int auto7B2D82A0_ai = 30;
    int auto5942681B_val;
    playergroup auto055897F4_g;
    int auto055897F4_var;
    const int auto988A9C4C_ae = -390;
    const int auto988A9C4C_ai = -30;

    // Variable Initialization

    // Implementation
    if (gv_LUNATICEnable) { libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    CatalogFieldValueSet(c_gameCatalogEffect, "HornsDamage", "Amount", 14, "80"); }
    auto953973FE_g = gv_players;
    auto953973FE_var = -1;
    while (true) {
        auto953973FE_var = PlayerGroupNextPlayer(auto953973FE_g, auto953973FE_var);
        if (auto953973FE_var < 0) { break; }
        gf_SetupCommandCard(auto953973FE_var, DialogControlGetSelectedItem(gv_commandCardType, auto953973FE_var));
    }
    if (((gv_modifiervote[1] >= ((PlayerGroupCount(gv_players) / 2) + 1)) || (gv_modifiervote[1] >= ((gv_playerVotesModifiers / 2) + 1))) && (gv_gamemode != 6) && (gv_gamemode != 10) && (gv_gamemode != 11) && (gv_gamemode != 12)) {
        lv_modifiertotal += 1;
        gv_mod_tier3 = true;
        gv_loopType = 1;
        gv_undeadSupplyCap = 250;
        gv_xpmodifier = (gv_xpmodifier + 0.1);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.1);
        lv_xpincrease += 10;
        lv_modifiers = (lv_modifiers + StringExternal("Param/Value/DB2CC28E"));
        lv_tipmodifierlist = (lv_tipmodifierlist + StringExternal("Param/Value/4A34D2BD"));
    }
    else {
        if (((gv_modifiervote[2] >= ((PlayerGroupCount(gv_players) / 2) + 1)) || (gv_modifiervote[2] >= ((gv_playerVotesModifiers / 2) + 1))) && (gv_gamemode != 6) && (gv_gamemode != 10) && (gv_gamemode != 11) && (gv_gamemode != 12)) {
            lv_modifiertotal += 1;
            gv_mod_tier2 = true;
            gv_loopType = 2;
            gv_xpmodifier = (gv_xpmodifier + 0.2);
            gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.2);
            lv_xpincrease += 20;
            lv_modifiers = (lv_modifiers + StringExternal("Param/Value/C6E2F8D9"));
            lv_tipmodifierlist = (lv_tipmodifierlist + StringExternal("Param/Value/014E322C"));
        }
        else {
            if (((gv_modifiervote[3] >= ((PlayerGroupCount(gv_players) / 2) + 1)) || (gv_modifiervote[3] >= ((gv_playerVotesModifiers / 2) + 1))) && (gv_gamemode != 6) && (gv_gamemode != 9) && (gv_gamemode != 10) && (gv_gamemode != 11) && (gv_gamemode != 12)) {
                lv_modifiertotal += 1;
                gv_mod_tier1 = true;
                gf_CommanderBonusPoints();
                gv_loopType = 3;
                gv_xpmodifier = (gv_xpmodifier + 0.3);
                gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.3);
                lv_xpincrease += 30;
                lv_modifiers = (lv_modifiers + StringExternal("Param/Value/66AE81F8"));
                lv_tipmodifierlist = (lv_tipmodifierlist + StringExternal("Param/Value/B26D229B"));
            }
            else {
                if (((gv_modifiervote[10] >= ((PlayerGroupCount(gv_players) / 2) + 1)) || (gv_modifiervote[10] >= ((gv_playerVotesModifiers / 2) + 1))) && (gv_gamemode != 6) && (gv_gamemode != 9) && (gv_gamemode != 10) && (gv_gamemode != 11) && (gv_gamemode != 12)) {
                    lv_modifiertotal += 1;
                    gv_mod_genesis = true;
                    gf_CommanderBonusPoints();
                    gv_loopType = 4;
                    gv_xpmodifier = (gv_xpmodifier + 0.3);
                    gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.3);
                    lv_xpincrease += 30;
                    lv_modifiers = (lv_modifiers + StringExternal("Param/Value/EE2C7542"));
                    lv_tipmodifierlist = (lv_tipmodifierlist + StringExternal("Param/Value/227B4516"));
                }
            }
        }
    }
    if (((gv_modifiervote[9] >= ((PlayerGroupCount(gv_players) / 2) + 1)) || (gv_modifiervote[9] >= ((gv_playerVotesModifiers / 2) + 1))) && (gv_gamemode != 10) && (gv_gamemode != 11) && (gv_gamemode != 12)) {
        lv_modifiertotal += 1;
        libNtve_gf_SetUpgradeLevelForPlayer(14, "UnstoppableT1", 1);
        gv_mod_UT1 = true;
        gv_xpmodifier = (gv_xpmodifier + 0.3);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.3);
        lv_xpincrease += 30;
        lv_modifiers = (lv_modifiers + StringExternal("Param/Value/8F6AA7F1"));
        lv_tipmodifierlist = (lv_tipmodifierlist + StringExternal("Param/Value/8858F1E3"));
    }
    if (((gv_modifiervote[4] >= ((PlayerGroupCount(gv_players) / 2) + 1)) || (gv_modifiervote[4] >= ((gv_playerVotesModifiers / 2) + 1))) && (gv_gamemode != 12)) {
        lv_modifiertotal += 1;
        gv_mod_rifle = true;
        gv_xpmodifier = (gv_xpmodifier + 0.25);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.25);
        lv_xpincrease += 25;
        lv_modifiers = (lv_modifiers + StringExternal("Param/Value/734C1751"));
        lv_tipmodifierlist = (lv_tipmodifierlist + StringExternal("Param/Value/E2E188E1"));
    }
    if (((gv_modifiervote[5] >= ((PlayerGroupCount(gv_players) / 2) + 1)) || (gv_modifiervote[5] >= ((gv_playerVotesModifiers / 2) + 1))) && (gv_gamemode != 10) && (gv_gamemode != 12)) {
        lv_modifiertotal += 1;
        gv_mod_1life = true;
        gv_xpmodifier = (gv_xpmodifier + 0.15);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.15);
        lv_xpincrease += 15;
        lv_modifiers = (lv_modifiers + StringExternal("Param/Value/80A0B9B5"));
        lv_tipmodifierlist = (lv_tipmodifierlist + StringExternal("Param/Value/0D56E3E3"));
    }
    if (((gv_modifiervote[6] >= ((PlayerGroupCount(gv_players) / 2) + 1)) || (gv_modifiervote[6] >= ((gv_playerVotesModifiers / 2) + 1))) && (gv_gamemode != 12)) {
        lv_modifiertotal += 1;
        gv_mod_NoAmmo = true;
        TriggerEnable(gt_DropMagazine, false);
        TriggerEnable(gt_DropMagazineShortage, true);
        auto3E0A0406_g = gv_players;
        auto3E0A0406_var = -1;
        while (true) {
            auto3E0A0406_var = PlayerGroupNextPlayer(auto3E0A0406_g, auto3E0A0406_var);
            if (auto3E0A0406_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto3E0A0406_var, "AmmoShortage", 1);
        }
        gv_xpmodifier = (gv_xpmodifier + 0.3);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.3);
        lv_xpincrease += 30;
        lv_modifiers = (lv_modifiers + StringExternal("Param/Value/E4432EAE"));
        lv_tipmodifierlist = (lv_tipmodifierlist + StringExternal("Param/Value/5A1583DA"));
    }
    if (((gv_modifiervote[7] >= ((PlayerGroupCount(gv_players) / 2) + 1)) || (gv_modifiervote[7] >= ((gv_playerVotesModifiers / 2) + 1))) && (gv_gamemode != 12)) {
        lv_modifiertotal += 1;
        gv_mod_Banana = true;
        gv_ailmentChance -= 4;
        if ((gv_ailmentChance <= 0)) {
            gv_ailmentChance = 1;
        }
        gv_xpmodifier = (gv_xpmodifier + 0.15);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.15);
        lv_xpincrease += 15;
        lv_modifiers = (lv_modifiers + StringExternal("Param/Value/4D204781"));
        lv_tipmodifierlist = (lv_tipmodifierlist + StringExternal("Param/Value/B634A0F6"));
    }
    if (((gv_gamemode == 8) || (gv_gamemode == 11)) && ((gv_modifiervote[11] >= ((PlayerGroupCount(gv_players) / 2) + 1)) || (gv_modifiervote[11] >= ((gv_playerVotesModifiers / 2) + 1)))) {
        lv_modifiertotal += 1;
        gv_mod_elitepmc = true;
        libNtve_gf_SetUpgradeLevelForPlayer(15, "ElitePMC", 1);
        gv_xpmodifier = (gv_xpmodifier + 0.3);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.3);
        lv_xpincrease += 30;
        lv_modifiers = (lv_modifiers + StringExternal("Param/Value/7BDA3412"));
        lv_tipmodifierlist = (lv_tipmodifierlist + StringExternal("Param/Value/194F5AD8"));
    }
    if (((gv_modifiervote[12] >= ((PlayerGroupCount(gv_players) / 2) + 1)) || (gv_modifiervote[12] >= ((gv_playerVotesModifiers / 2) + 1))) && (gv_gamemode != 12)) {
        lv_modifiertotal += 1;
        gv_mod_allrandom = true;
        gv_xpmodifier = (gv_xpmodifier + 0.1);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.1);
        lv_xpincrease += 10;
        lv_modifiers = (lv_modifiers + StringExternal("Param/Value/500A7074"));
        lv_tipmodifierlist = (lv_tipmodifierlist + StringExternal("Param/Value/4AB802FA"));
    }
    if (((gv_modifiervote[8] >= ((PlayerGroupCount(gv_players) / 2) + 1)) || (gv_modifiervote[8] >= ((gv_playerVotesModifiers / 2) + 1))) && (gv_gamemode != 12)) {
        if ((gv_weatherTypeVoted[1] >= ((gv_modifiervote[8] / 2) + 1))) {
            lv_weatherModifier = 0;
        }
        else if ((gv_weatherTypeVoted[2] >= ((gv_modifiervote[8] / 2) + 1))) {
            lv_weatherModifier = 1;
        }
        else if ((gv_weatherTypeVoted[3] >= ((gv_modifiervote[8] / 2) + 1))) {
            lv_weatherModifier = 2;
        }
        else if ((gv_weatherTypeVoted[4] >= ((gv_modifiervote[8] / 2) + 1))) {
            lv_weatherModifier = 3;
        }
        lv_modifiertotal += 1;
        gv_mod_Weather = true;
        TriggerEnable(gt_WeatherThunderStormEffect, false);
        if ((lv_weatherModifier != 0)) {
            gf_RandomWeatherEvent(lv_weatherModifier);
        }
        else {
            gf_RandomWeatherEvent(0);
            gv_xpmodifier = (gv_xpmodifier + 0.2);
            gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.2);
            lv_xpincrease += 20;
        }
        lv_modifiers = (lv_modifiers + (StringExternal("Param/Value/9E8307F6") + gv_weatherType));
        TextExpressionSetToken("Param/Expression/AAD4E683", "A", gv_weatherType);
        lv_tipmodifierlist = (lv_tipmodifierlist + TextExpressionAssemble("Param/Expression/AAD4E683"));
    }
    if ((gv_loopType == 3) && (gv_mod_UT1 == true)) {
        lv_modifiertotal += 1;
        gv_xpmodifier = (gv_xpmodifier + 0.4);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.4);
        lv_xpincrease += 40;
    }
    if ((gv_loopType == 4) && (gv_mod_UT1 == true)) {
        lv_modifiertotal += 1;
        gv_xpmodifier = (gv_xpmodifier + 0.5);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.5);
        lv_xpincrease += 50;
    }
    autoDF86159F_val = gf_EventActive();
    if (autoDF86159F_val == 1) {
        lv_modifiertotal += 1;
        gv_xpmodifier = (gv_xpmodifier + 0.5);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.5);
        lv_xpincrease += 50;
    }
    else if (autoDF86159F_val == 2) {
        lv_modifiertotal += 1;
        gv_xpmodifier = (gv_xpmodifier + 0.4);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.4);
        lv_xpincrease += 40;
    }
    else if (autoDF86159F_val == 3) {
        lv_modifiertotal += 1;
        gv_xpmodifier = (gv_xpmodifier + 0.2);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.2);
        lv_xpincrease += 20;
    }
    else if (autoDF86159F_val == 4) {
        lv_modifiertotal += 1;
        gv_xpmodifier = (gv_xpmodifier + 0.25);
        gv_xpModifierFromMods = (gv_xpModifierFromMods + 0.25);
        lv_xpincrease += 25;
    }
    else {
    }
    if ((lv_modifiertotal >= 1)) {
        DialogCreate(650, (150 + (lv_modifiertotal * 75)), c_anchorLeft, -390, 70, true);
        DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/4E7E7C3F"));
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "UI\\beginning_background.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        if (lv_modifiertotal < 3) { libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 125, DialogGetHeight(DialogLastCreated()), c_anchorTopLeft, 0, 0, StringToText(""), "UI\\save_border_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal); }
        lv_i = -390;
        for ( ; ( (auto7B2D82A0_ai >= 0 && lv_i <= auto7B2D82A0_ae) || (auto7B2D82A0_ai < 0 && lv_i >= auto7B2D82A0_ae) ) ; lv_i += auto7B2D82A0_ai ) {
            DialogSetPosition(DialogLastCreated(), c_anchorLeft, lv_i, 70);
            Wait(0.0625, c_timeGame);
        }
    }
    if (((gf_EventActive() > 0) || (gv_mod_genesis == true) || (gv_mod_tier3 == true) || (gv_mod_tier2 == true) || (gv_mod_tier1 == true) || (gv_mod_rifle == true) || (gv_mod_1life == true) || (gv_mod_NoAmmo == true) || (gv_mod_Banana == true) || (gv_mod_Weather == true) || (gv_mod_UT1 == true) || (gv_mod_allrandom == true) || (gv_mod_elitepmc == true))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/97F22063") + UserDataGetText("GameModes", UserDataInstance("GameModes", gv_gamemode), "Name", 1)));
    }
    if ((gv_mod_tier3 == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/91871856") + StringExternal("Param/Value/811A4702")));
    }
    if ((gv_mod_tier2 == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/87A9FB6C") + StringExternal("Param/Value/D57884E1")));
    }
    if ((gv_mod_tier1 == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/12DA9CB5") + StringExternal("Param/Value/0A07166E")));
    }
    if ((gv_mod_genesis == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/318000C1") + StringExternal("Param/Value/E85A5F5B")));
    }
    if ((gv_mod_rifle == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/9E60D91B") + StringExternal("Param/Value/7F5C8D2B")));
    }
    if ((gv_mod_1life == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/41BDEE5B") + StringExternal("Param/Value/7618D723")));
    }
    if ((gv_mod_elitepmc == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/CB51BCC9") + StringExternal("Param/Value/228CA663")));
    }
    if ((gv_mod_NoAmmo == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/A2BDC827") + StringExternal("Param/Value/C112E5FB")));
    }
    if ((gv_mod_Banana == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/D2707445") + StringExternal("Param/Value/4C9F9591")));
    }
    if ((gv_mod_allrandom == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/BA0C3B7C") + StringExternal("Param/Value/8F8104CF")));
    }
    if ((gv_mod_Weather == true)) {
        if ((lv_weatherModifier == 0)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/2FD6BE82") + StringExternal("Param/Value/9BA5670E")));
        }
        else {
            TextExpressionSetToken("Param/Expression/22774D93", "A", gv_weatherType);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/246B6E65") + TextExpressionAssemble("Param/Expression/22774D93")));
        }
    }
    if ((gv_mod_UT1 == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/8B74D425") + StringExternal("Param/Value/294E0422")));
    }
    if ((gv_mod_tier1 == true) && (gv_mod_UT1 == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/87D2D6E1") + StringExternal("Param/Value/53CB3301")));
    }
    if ((gv_mod_genesis == true) && (gv_mod_UT1 == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/9426BA16") + StringExternal("Param/Value/4AD6430B")));
    }
    auto5942681B_val = gf_EventActive();
    if (auto5942681B_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/4BA91447") + StringExternal("Param/Value/A0FE87AB")));
    }
    else if (auto5942681B_val == 2) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/054BEFBE") + StringExternal("Param/Value/A44CEFC9")));
    }
    else if (auto5942681B_val == 3) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/5F7F7928") + StringExternal("Param/Value/54ABB8F8")));
    }
    else if (auto5942681B_val == 4) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/43908E15") + StringExternal("Param/Value/765990E6")));
    }
    else {
    }
    if ((lv_xpincrease > 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/D4C61B6D") + (IntToText(lv_xpincrease) + StringExternal("Param/Value/0C78A91A"))));
    }
    if ((gv_gamemode == 1) && (gv_xpmodifier > 1.5)) {
        gv_xpmodifier = 1.5;
        gv_xpModifierFromMods = 0.75;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/2650CFE1"));
    }
    if ((gv_gamemode == 2) && (gv_xpmodifier > 1.7)) {
        gv_xpmodifier = 1.7;
        gv_xpModifierFromMods = 0.7;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/79232178"));
    }
    if ((gv_gamemode < 12)) {
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle((UserDataGetText("GameModes", UserDataInstance("GameModes", gv_gamemode), "Name", 1) + lv_tipmodifierlist), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/8BE4E1A4"), UserDataGetText("GameModes", UserDataInstance("GameModes", gv_gamemode), "Name", 1), "Assets\\Textures\\btn-tips-starmap.dds");
    }
    auto055897F4_g = gv_players;
    auto055897F4_var = -1;
    while (true) {
        auto055897F4_var = PlayerGroupNextPlayer(auto055897F4_g, auto055897F4_var);
        if (auto055897F4_var < 0) { break; }
        TipAlertPanelClear(PlayerGroupSingle(auto055897F4_var));
    }
    if ((lv_modifiertotal >= 1)) {
        if ((gv_gamemode <= 5)) {
            gv_xpmodifier = (0.5 + (0.25 * IntToFixed(gv_gamemode)));
        }
        else {
            gv_xpmodifier = 1.0;
        }
        Wait(6.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDebug);
        lv_i = 0;
        for ( ; ( (auto988A9C4C_ai >= 0 && lv_i <= auto988A9C4C_ae) || (auto988A9C4C_ai < 0 && lv_i >= auto988A9C4C_ae) ) ; lv_i += auto988A9C4C_ai ) {
            DialogSetPosition(DialogLastCreated(), c_anchorLeft, lv_i, 70);
            Wait(0.0625, c_timeGame);
        }
        DialogDestroy(DialogLastCreated());
    }
    DialogControlFadeTransparency(gv_backimg2,PlayerGroupAll(),1.5,100.0);
        Wait(1.5, c_timeGame);
        DialogSetVisible(gv_backimg, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_backimg2, PlayerGroupAll(), false);
}

void gf_GameStart () {
    // Variable Declarations
    text lv_modifiers;
    int lv_loopint2;
    int lv_totalxp;
    int lv_loopint;

    // Automatic Variable Declarations
    const int autoC63E6D85_ae = 11;
    const int autoC63E6D85_ai = 1;
    const int auto0DB8FB73_ae = 12;
    const int auto0DB8FB73_ai = 1;
    unitgroup auto2532E051_g;
    int auto2532E051_u;
    unit auto2532E051_var;
    const int autoBD4413C4_ae = 11;
    const int autoBD4413C4_ai = 1;
    const int auto4DB06371_ae = 12;
    const int auto4DB06371_ai = 1;

    // Variable Initialization
    lv_loopint = 1;

    // Implementation
    TriggerEnable(gt_AutoselectHero, true);
    TriggerEnable(gt_GameStartCheckforAllMOS, true);
    TriggerEnable(gt_RankModifierSubmit, false);
    TriggerEnable(gt_RankTimerEnd, false);
    TriggerEnable(gt_ModeSelect, false);
    DialogSetVisible(gv_rankdialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_infoDialog, PlayerGroupAll(), false);
    gf_ResetInfoText();
    if ((gv_gamemode == 13)) {
        gf_CinematicStart();
    }
    else if ((gv_gamemode >= 1) && (gv_gamemode <= 5)) {
        TriggerSendEvent("Setup Story");
    }
    else if (((gv_gamemode == 19) || ((gv_gamemode >= 7) && (gv_gamemode <= 8)))) {
        if ((gv_gamemode == 8)) {
            gv_isrLocations[1] = PointFromId(1714317419);
            gv_isrLocations[2] = PointFromId(90419593);
            gv_isrLocations[3] = PointFromId(234456734);
            gv_isrLocations[4] = PointFromId(451638875);
            gv_isrLocations[5] = PointFromId(924330423);
            gv_isrLocations[6] = PointFromId(1153887659);
            gv_isrLocations[7] = PointFromId(774893140);
            gv_isrLocations[8] = PointFromId(1651779641);
            gv_isrLocations[9] = PointFromId(2015173199);
            gv_isrLocations[10] = PointFromId(1725526751);
            gv_isrLocations[11] = PointFromId(1813941538);
            lv_loopint = 1;
            for ( ; ( (autoC63E6D85_ai >= 0 && lv_loopint <= autoC63E6D85_ae) || (autoC63E6D85_ai < 0 && lv_loopint >= autoC63E6D85_ae) ) ; lv_loopint += autoC63E6D85_ai ) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ISRTower", 0, 0, gv_isrLocations[lv_loopint]);
                gv_isrTowers[lv_loopint] = UnitLastCreated();
                lv_loopint2 = 1;
                for ( ; ( (auto0DB8FB73_ai >= 0 && lv_loopint2 <= auto0DB8FB73_ae) || (auto0DB8FB73_ai < 0 && lv_loopint2 >= auto0DB8FB73_ae) ) ; lv_loopint2 += auto0DB8FB73_ai ) {
                    VisRevealArea(lv_loopint2, RegionCircle(gv_isrLocations[lv_loopint], 2.0), 0.0, false);
                }
            }
        }

        TriggerExecute(gt_StartGameModesTrainingSurvPMCSurvBossMode, true, false);
    }
    else if ((gv_gamemode == 18)) {
        TriggerEnable(gt_RandomFog, false);
        gv_startingLZ = RegionFromId(14);
        gv_phantomBeginning = PointFromId(897414585);
        TriggerExecute(gt_StartGameModesTrainingSurvPMCSurvBossMode, true, false);
    }
    else if ((gv_gamemode == 9)) {
        TriggerEnable(gt_RandomFog, false);
        UnitRemove(UnitFromId(286));
        UnitRemove(UnitFromId(311));
        UnitRemove(UnitFromId(615));
        UnitRemove(UnitFromId(2612));
        UnitRemove(UnitFromId(2471));
        auto2532E051_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2532E051_u = UnitGroupCount(auto2532E051_g, c_unitCountAll);
        for (;; auto2532E051_u -= 1) {
            auto2532E051_var = UnitGroupUnitFromEnd(auto2532E051_g, auto2532E051_u);
            if (auto2532E051_var == null) { break; }
            UnitRemove(auto2532E051_var);
        }
        UnitIssueOrder(UnitFromId(56), Order(AbilityCommand("MetalGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1238), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1239), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1240), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1241), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1928584749), Order(AbilityCommand("MetalGateStraightVerticalLFLowered", 0)), c_orderQueueReplace);
        TriggerExecute(gt_StartGameModesTrainingSurvPMCSurvBossMode, true, false);
    }
    else if ((gv_gamemode == 11)) {
        gv_isrLocations[1] = PointFromId(1714317419);
        gv_isrLocations[2] = PointFromId(90419593);
        gv_isrLocations[3] = PointFromId(234456734);
        gv_isrLocations[4] = PointFromId(451638875);
        gv_isrLocations[5] = PointFromId(924330423);
        gv_isrLocations[6] = PointFromId(1153887659);
        gv_isrLocations[7] = PointFromId(774893140);
        gv_isrLocations[8] = PointFromId(1651779641);
        gv_isrLocations[9] = PointFromId(2015173199);
        gv_isrLocations[10] = PointFromId(1725526751);
        gv_isrLocations[11] = PointFromId(1813941538);
        lv_loopint = 1;
        for ( ; ( (autoBD4413C4_ai >= 0 && lv_loopint <= autoBD4413C4_ae) || (autoBD4413C4_ai < 0 && lv_loopint >= autoBD4413C4_ae) ) ; lv_loopint += autoBD4413C4_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ISRTower", 0, 0, gv_isrLocations[lv_loopint]);
            gv_isrTowers[lv_loopint] = UnitLastCreated();
            lv_loopint2 = 1;
            for ( ; ( (auto4DB06371_ai >= 0 && lv_loopint2 <= auto4DB06371_ae) || (auto4DB06371_ai < 0 && lv_loopint2 >= auto4DB06371_ae) ) ; lv_loopint2 += auto4DB06371_ai ) {
                VisRevealArea(lv_loopint2, RegionCircle(gv_isrLocations[lv_loopint], 2.0), 0.0, false);
            }
        }
        UnitIssueOrder(UnitFromId(425), Order(AbilityCommand("SpacePrisonDoorsThinLeftLowered", 0)), c_orderQueueReplace);
        TriggerSendEvent("Init PMC Campaign");
    }
    else if ((gv_gamemode == 12)) {
        TriggerEnable(gt_AutoselectHero, false);
        gf_SandBoxVoteScreen();
    }
    else if ((gv_gamemode == 15)) {
        gf_CinematicStart();
    }
    TriggerEnable(gt_UndeadIdles, true);
    TriggerEnable(gt_AutomaticReloadMini, true);
    TriggerEnable(gt_PlayerHit, true);
    TriggerEnable(gt_UndeadOrders, true);
    if ((gv_gamemode <= 5)) {
    }
}

void gf_PreparePlanetPortraitZoomIn (string lp_model, camerainfo lp_camera, string lp_light) {
    // Variable Declarations
    string lv_light;

    // Automatic Variable Declarations
    playergroup auto3B613507_g;
    int auto3B613507_var;

    // Variable Initialization

    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    if ((gv_zS_PlanetPortrait == c_invalidPortraitId)) {
        PortraitCreate(0, 0, c_anchorTopLeft, 50, 50, lp_model, "", "Default", false, false);
        gv_zS_PlanetPortrait = PortraitLastCreated();
        PortraitSetOffscreen(gv_zS_PlanetPortrait, true);
        PortraitSetBackgroundVisible(gv_zS_PlanetPortrait, false);
        PortraitSetBorderVisible(gv_zS_PlanetPortrait, false);
        PortraitUseTransition(PortraitLastCreated(), false);
        PortraitWaitForLoad(gv_zS_PlanetPortrait);
    }
    else {
        PortraitSetModel(gv_zS_PlanetPortrait, lp_model, true);
    }
    PortraitSetLight(gv_zS_PlanetPortrait, lv_light);
    PortraitSetPosition(gv_zS_PlanetPortrait, c_anchorTopLeft, 0, 0);
    PortraitSetFullscreen(gv_zS_PlanetPortrait, true);
    PortraitSetOffscreen(gv_zS_PlanetPortrait, false);
    PortraitSetVisible(gv_zS_PlanetPortrait, PlayerGroupAll(), true, true);
    libSwaC_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), true);
    libSwaC_gf_CinematicFade(true, 2.0, Color(0.00, 0.00, 0.00), true);
    gv_zS_PlanetPortraitPlayerCamera = lp_camera;
    auto3B613507_g = PlayerGroupActive();
    auto3B613507_var = -1;
    while (true) {
        auto3B613507_var = PlayerGroupNextPlayer(auto3B613507_g, auto3B613507_var);
        if (auto3B613507_var < 0) { break; }
        CameraApplyInfo(auto3B613507_var, lp_camera, 0.0, -1, 10, true);
        CameraSetValue(auto3B613507_var, c_cameraValueDistance, (CameraInfoGetValue(lp_camera, c_cameraValueDistance) + 100.0), 0.0, -1, 20.0);
    }
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
}

void gf_ZoomInPlanetPortrait () {
    // Automatic Variable Declarations
    playergroup autoFE9404FD_g;
    int autoFE9404FD_var;
    playergroup auto1332875C_g;
    int auto1332875C_var;

    // Implementation
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    autoFE9404FD_g = gv_players;
    autoFE9404FD_var = -1;
    while (true) {
        autoFE9404FD_var = PlayerGroupNextPlayer(autoFE9404FD_g, autoFE9404FD_var);
        if (autoFE9404FD_var < 0) { break; }
        DialogSetVisible(gv_functionaldialog[autoFE9404FD_var], PlayerGroupSingle(autoFE9404FD_var), false);
        DialogSetVisible(gv_sprintBar, PlayerGroupSingle(autoFE9404FD_var), false);
    }
    gf_DisplayUIButtons(false);
    SoundPlayForPlayer(SoundLink("PsiDecimator_ShieldRetreat", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("CharWarfieldWarfield00009", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeGame);
    SoundPlay(SoundLink("UI_Evolutions_PlanetaryZoom", -1), PlayerGroupAll(), 100.0, 0.0);
    ActorSend(ActorFromPortrait(gv_zS_PlanetPortrait), "AnimPlay Custom Spell PlayForever,NonLooping");
    Wait(3.0, c_timeGame);
    auto1332875C_g = PlayerGroupActive();
    auto1332875C_var = -1;
    while (true) {
        auto1332875C_var = PlayerGroupNextPlayer(auto1332875C_g, auto1332875C_var);
        if (auto1332875C_var < 0) { break; }
        CameraSetValue(auto1332875C_var, c_cameraValueDistance, CameraInfoGetValue(gv_zS_PlanetPortraitPlayerCamera, c_cameraValueDistance), 2.0, 100.0, 10.0);
    }
    Wait(1.8, c_timeGame);
}

trigger auto_gf_HidePlanetPortrait_Trigger = null;

void gf_HidePlanetPortrait () {
    if (auto_gf_HidePlanetPortrait_Trigger == null) {
        auto_gf_HidePlanetPortrait_Trigger = TriggerCreate("auto_gf_HidePlanetPortrait_TriggerFunc");
    }

    TriggerExecute(auto_gf_HidePlanetPortrait_Trigger, false, false);
}

bool auto_gf_HidePlanetPortrait_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    PortraitSetOffscreen(gv_zS_PlanetPortrait, true);
    PortraitSetVisible(gv_zS_PlanetPortrait, PlayerGroupAll(), false, false);
    return true;
}

trigger auto_gf_CinematicStart_Trigger = null;

void gf_CinematicStart () {
    if (auto_gf_CinematicStart_Trigger == null) {
        auto_gf_CinematicStart_Trigger = TriggerCreate("auto_gf_CinematicStart_TriggerFunc");
    }

    TriggerExecute(auto_gf_CinematicStart_Trigger, false, false);
}

bool auto_gf_CinematicStart_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    UISetCursorVisible(PlayerGroupAll(), false);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if (gv_mod_tier1||gv_LUNATICEnable) { gf_PreparePlanetPortraitZoomIn("EvolutionPlanetRoachB", CameraInfoFromId(2473), "Agria"); }
        else { gf_PreparePlanetPortraitZoomIn("EvolutionPlanetBanelingA", CameraInfoFromId(2473), "Agria"); }
    gf_ZoomInPlanetPortrait();
    gf_HidePlanetPortrait();
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_StartGameModesTrainingSurvPMCSurvBossMode, true, false);
    return true;
}

void gf_HeroSetup (int lp_player, unit lp_herounit) {
    // Variable Declarations
    int lv_hook;
    int lv_pindex;

    // Automatic Variable Declarations
    string autoFFBDC7E2_val;

    // Variable Initialization
    lv_hook = c_invalidDialogControlId;
    lv_pindex = lp_player;

    // Implementation
    if ((gv_playerHeroes[lv_pindex] != null)) {
        UnitRemove(lp_herounit);
        return ;
    }

    if ((gv_gamemode == 18)) {
        UnitSetPropertyFixed(lp_herounit, c_unitPropLevel, 6.0);
    }

    if (((UnitGetType(gv_playerHeroes[lv_pindex]) != "AH32Viper"))) {
        if ((gv_playerRankSet[lv_pindex] == 1)) {
            UnitBehaviorAdd(lp_herounit, "RankModifier", lp_herounit, (gf_GetPlayerRank(lv_pindex) - 1));
        }
        else {
            if ((gv_playerRankSet[lv_pindex] == 2)) {
                UnitBehaviorAdd(lp_herounit, "RankModifier", lp_herounit, (gf_GetPlayerRank(lv_pindex) + 5));
            }
            else {
                UnitBehaviorAdd(lp_herounit, "RankModifier", lp_herounit, (gf_GetPlayerRank(lv_pindex) + 4));
            }
        }
    }

    CameraLockInput(lv_pindex, false);
    if ((gv_playerRandomed[lv_pindex] == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_pindex), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pindex, false))) + (StringExternal("Param/Value/C05FB49B") + UnitTypeGetName(UnitGetType(lp_herounit)))));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_pindex), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pindex, false))) + (StringExternal("Param/Value/4077D73A") + UnitTypeGetName(UnitGetType(lp_herounit)))));
    }
    libNtve_gf_SendActorMessageToUnit(lp_herounit, gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);
    autoFFBDC7E2_val = UnitGetType(lp_herounit);
    if (autoFFBDC7E2_val == "Rifleman") {
        gv_rifleman = true;
        gv_countRifleman += 1;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/92362E4B") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(31, lv_pindex);
        gf_SetupMosSI(32, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(UnitGetOwner(lp_herounit), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(lp_herounit), c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Marine_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Buttons\\BTNSoldier.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/89CBF422") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/1F5C8BE7") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        if ((TechTreeUpgradeCount(lv_pindex, "MGEN", c_techCountCompleteOnly) == 1)) {
            UnitCreate(1, "InfantryRifleman", c_unitCreateIgnorePlacement, lv_pindex, UnitGetPosition(lp_herounit), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            UnitSelect(UnitLastCreated(), lv_pindex, true);
            UnitControlGroupAddUnit(lv_pindex, 2, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
        }

    }
    else if (autoFFBDC7E2_val == "CommandoHero") {
        gv_commando = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/A823122A") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(57, lv_pindex);
        gf_SetupMosSI(58, lv_pindex);
        gv_magsize[lv_pindex] = 25;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Battlecruiser_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Custom Icons\\CommandoSelect.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/013D9925") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/FFF2DBE2") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "GhostHero") {
        gv_ghost = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/E924AA0E") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(53, lv_pindex);
        gf_SetupMosSI(54, lv_pindex);
        gv_magsize[lv_pindex] = 80;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Ghost_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Ghost_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/58EA0082") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/35F17A93") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "OrbitalSupportSpecialist") {
        gv_orbitalSupportSpecialist = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/7E6441D4") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(63, lv_pindex);
        gf_SetupMosSI(64, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("zUnit_HeroHyperion_Horner_027", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_OSS_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/28CDEBB2") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/675C4315") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "CombatMedic") {
        gv_combatMedic = true;
        gv_medicScoreboard[lv_pindex] = true;
        gv_combatMedics += 1;
        PlayerGroupAdd(gv_medics, lv_pindex);
        PlayerOptionOverride(lv_pindex, "displayunitstatus", "All");
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/EE28A06F") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(33, lv_pindex);
        gf_SetupMosSI(34, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Medic_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Combat_Medic_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/3F20C4DB") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/7C57CF97") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        if ((TechTreeUpgradeCount(lv_pindex, "MGEN", c_techCountCompleteOnly) == 1)) {
            UnitCreate(1, "Infantry68WCombatMedic", c_unitCreateIgnorePlacement, lv_pindex, UnitGetPosition(lp_herounit), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            UnitSelect(UnitLastCreated(), lv_pindex, true);
            UnitControlGroupAddUnit(lv_pindex, 2, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
        }

    }
    else if (autoFFBDC7E2_val == "FireSupportSpecialist") {
        gv_fireSupportSpecialist = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/3C5C8D0B") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(55, lv_pindex);
        gf_SetupMosSI(56, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Hercules_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_FSS_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/47A7B3F6") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/C6EC70A5") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/CommandPanel/CommandButton14/ChargeLabel"));
    }
    else if (autoFFBDC7E2_val == "PlatoonLeader") {
        gv_platoonLeader = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/18C9B4AF") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(47, lv_pindex);
        gf_SetupMosSI(48, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        PlayerGroupAdd(gv_sFAATs, lv_pindex);
        TriggerExecute(gt_InitLNS, true, false);
        SoundPlayOnUnit(SoundLink("Tosh_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_PL_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/B1EECE5F") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/A9F7341E") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "Enforcer") {
        gv_enforcer = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/3238FFE5") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(39, lv_pindex);
        gf_SetupMosSI(40, lv_pindex);
        gv_magsize[lv_pindex] = 25;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Raynor_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Buttons\\Portraits\\BTNSFAAT.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/0097FDC4") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/C02EEB0D") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "LaserEnforcer") {
        gv_laserEnforcer = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/01DBCECF") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(59, lv_pindex);
        gf_SetupMosSI(60, lv_pindex);
        gv_magsize[lv_pindex] = 40;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("WarHound_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Buttons\\BTNMedic.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/77C5E35C") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/F7064E18") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "CombatEngineer") {
        gv_combatEngineer = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/3EAAF917") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(49, lv_pindex);
        gf_SetupMosSI(50, lv_pindex);
        gv_magsize[lv_pindex] = 25;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Swann_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Combat_Engineer_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/B62DF169") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/FD39368D") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "AutomaticRifleman") {
        gv_automaticRifleman = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/43AAEB73") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(35, lv_pindex);
        gf_SetupMosSI(36, lv_pindex);
        gv_magsize[lv_pindex] = 100;
        gv_reloadbasetime[lv_pindex] = 4.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Tychus_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Buttons\\BTNAutoRifle.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/B4014EB0") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/FE242F8F") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "HeavyGunner") {
        gv_heavyGunner = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/64040F8C") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(65, lv_pindex);
        gf_SetupMosSI(66, lv_pindex);
        gv_magsize[lv_pindex] = 100;
        gv_reloadbasetime[lv_pindex] = 6.5;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Viking_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_HG_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectHG, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectHG, gv_playerHeroes[lv_pindex], false, lv_pindex);
        gf_DisplayOverheatBar(true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/149836A8") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/46B15A23") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "Cyborg") {
        gv_cyborgMos = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/AD35829A") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(51, lv_pindex);
        gf_SetupMosSI(52, lv_pindex);
        gv_magsize[lv_pindex] = 35;
        gv_reloadbasetime[lv_pindex] = 4.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Marauder_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Cyborg_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/5B846E75") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/76A1BD7C") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "CavalryScout") {
        gv_calvaryScout = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/288012D2") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(41, lv_pindex);
        gf_SetupMosSI(42, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 4.0;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Diamondback_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Cavalry_Scout_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/FB79BB3B") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/6E313323") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "Flamethrower") {
        gv_flamethrower = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/9B538BDE") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(37, lv_pindex);
        gf_SetupMosSI(38, lv_pindex);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropTerrazine, c_playerPropOperSetTo, 1000);
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeTerrazine, true);
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeVespene, false);
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeMinerals, false);
        gv_playerEncumbrance[lv_pindex] = 2000;
        DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[7], PlayerGroupSingle(lv_pindex), true);
        DialogControlSetVisible(gv_ammoDialogueItems[8], PlayerGroupSingle(lv_pindex), true);
        SoundPlayOnUnit(SoundLink("Firebat_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "firebat.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[8], (StringExternal("Param/Value/6BCDF861") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropTerrazine))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "SquadDesignatedMarksman") {
        gv_sDM = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/DCC59C13") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(43, lv_pindex);
        gf_SetupMosSI(44, lv_pindex);
        gv_magsize[lv_pindex] = 35;
        gv_reloadbasetime[lv_pindex] = 5.0;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Spectre_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Buttons\\Portraits\\BTNMarksman.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/8113B33F") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/3ECB3CA8") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "FarmerAkmaMOS") {
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeVespene, false);
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeMinerals, false);
        gv_playerEncumbrance[lv_pindex] = 2000;
        gv_playerMagMax[lv_pindex] = 3000;
        DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lv_pindex), false);
        SoundPlayOnUnit(SoundLink("THanson01Civilian700005", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\malecivilian1portrait_diff.dds";
    }
    else if (autoFFBDC7E2_val == "DrJashanMOS") {
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeVespene, false);
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeMinerals, false);
        gv_playerEncumbrance[lv_pindex] = 2000;
        gv_playerMagMax[lv_pindex] = 3000;
        DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lv_pindex), false);
        SoundPlayOnUnit(SoundLink("UnitVOScientistScientist00004", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\malecivilian1portrait_diff.dds";
    }
    else if (autoFFBDC7E2_val == "AH32Viper") {
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeVespene, true);
        gv_magsize[lv_pindex] = 500;
        gv_reloadbasetime[lv_pindex] = 8.0;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 25);
        gv_playerEncumbrance[lv_pindex] = 30;
        DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lv_pindex), false);
        SoundPlayOnUnit(SoundLink("Banshee_Attack", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\bansheeportrait_static.dds";
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/5CC853C9") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/48E2741A") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "Specter") {
        gv_specter = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/26CFD1E2") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(61, lv_pindex);
        gf_SetupMosSI(62, lv_pindex);
        gv_magsize[lv_pindex] = 80;
        gv_reloadbasetime[lv_pindex] = 5.0;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Nova_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Specter_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/4ACA6213") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/7AC57D6F") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "JavelinGunnerRework") {
        gv_javelinGunner = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/A33A001B") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(45, lv_pindex);
        gf_SetupMosSI(46, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 4.0;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        CatalogFieldValueSet(c_gameCatalogButton, "BinocularsPL", "Hotkey", lv_pindex, gv_hotkeyBind[6]);
        SoundPlayOnUnit(SoundLink("Hill_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Jav_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/A72D8F51") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/1D5C01BF") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "MechOperator") {
        gv_mechOperator = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/039A5C56") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(67, lv_pindex);
        gf_SetupMosSI(68, lv_pindex);
        gv_magsize[lv_pindex] = 80;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Banshee_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Images\\Mechoperator_static.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/6F6AC5E5") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/68616EFD") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "Vesania30") {
        gv_vesania30 = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/12AA138A") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gv_magsize[lv_pindex] = 30;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Marauder_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\marauder_heavens_coop_portrait_static.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/8CCD8AE5") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/3961158D") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "Cyborg20") {
        gv_cyborg20 = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/DE32591E") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gv_magsize[lv_pindex] = 80;
        gv_reloadbasetime[lv_pindex] = 3.9;
        SoundPlayOnUnit(SoundLink("Marauder_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\ghost_umojan_portrait_static.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        gf_SetupMosSI(71, lv_pindex);
        gf_SetupMosSI(72, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        UnitBehaviorAddPlayer(lp_herounit, "CyborgPickingWeapon", lv_pindex, 1);
        DialogSetVisible(gv_borgWeaponDialog, PlayerGroupSingle(lv_pindex), true);
    }
    else if (autoFFBDC7E2_val == "Spectator") {
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        UnitKill(lp_herounit);
    }
    else if (autoFFBDC7E2_val == "Mercenary") {
        gv_mercenary = true;
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 4.5;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Reaper_Ready", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\reaperportrait_static.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/637C52EF") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/EF4D8099") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoFFBDC7E2_val == "BioSpecialist") {
        gv_bioSpecialist = true;
        gv_magsize[lv_pindex] = 80;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("LabresearchStetmann00017", -1), PlayerGroupAll(), lp_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\stetmann_portrait_static.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/22DF1E8D") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/74FAC37E") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else {
    }
    UnitGroupAdd(gv_heroesGroup, lp_herounit);
    UnitGroupAdd(gv_undeadTargetGroup, lp_herounit);
    UnitControlGroupAddUnit(lv_pindex, 1, lp_herounit);
    UnitSelect(lp_herounit, lv_pindex, true);
    gv_playerHeroes[lv_pindex] = lp_herounit;
    UnitSetCustomValue(lp_herounit, 2, 16.0);
    UnitBehaviorAdd(lp_herounit, "AllyReveal", lp_herounit, 1);
}

void gf_InitializeHeroVars () {
    // Automatic Variable Declarations
    // Implementation
    gv_mOS[0][0] = "MechOperator";
    gv_mOS[0][1] = "MechOperator";
    gv_mOS[1][0] = "RiflemanOld";
    gv_mOS[1][1] = "RiflemanOld2";
    gv_mOS[2][0] = "CombatMedic";
    gv_mOS[2][1] = "CombatMedic2";
    gv_mOS[3][0] = "AutomaticRifleman";
    gv_mOS[3][1] = "AutomaticRifleman2";
    gv_mOS[4][0] = "Flamethrower";
    gv_mOS[4][1] = "Flamethrower2";
    gv_mOS[5][0] = "Enforcer";
    gv_mOS[5][1] = "Enforcer2";
    gv_mOS[6][0] = "CavalryScout";
    gv_mOS[6][1] = "CavalryScout2";
    gv_mOS[7][0] = "SquadDesignatedMarksman";
    gv_mOS[7][1] = "SquadDesignatedMarksman2";
    gv_mOS[8][0] = "JavelinGunnerRework";
    gv_mOS[8][1] = "JavelinGunnerRework";
    gv_mOS[9][0] = "PlatoonLeader";
    gv_mOS[9][1] = "PlatoonLeader2";
    gv_mOS[10][0] = "CombatEngineer";
    gv_mOS[10][1] = "CombatEngineer2";
    gv_mOS[11][0] = "Cyborg";
    gv_mOS[11][1] = "Cyborg2";
    gv_mOS[12][0] = "GhostHero";
    gv_mOS[12][1] = "GhostHero2";
    gv_mOS[13][0] = "FireSupportSpecialist";
    gv_mOS[13][1] = "FireSupportSpecialist2";
    gv_mOS[14][0] = "CommandoHero";
    gv_mOS[14][1] = "CommandoHero2";
    gv_mOS[15][0] = "LaserEnforcer";
    gv_mOS[15][1] = "LaserEnforcer2";
    gv_mOS[16][0] = "Specter";
    gv_mOS[16][1] = "Specter";
    gv_mOS[17][0] = "OrbitalSupportSpecialist";
    gv_mOS[17][1] = "OrbitalSupportSpecialist2";
    gv_mOS[18][0] = "HeavyGunner";
    gv_mOS[18][1] = "HeavyGunner2";
    gv_mOS[19][0] = "Mercenary";
    gv_mOS[19][1] = "Mercenary2";
    gv_mOS[20][0] = "Vesania30";
    gv_mOS[20][1] = "Vesania30";
    gv_mOS[21][0] = "Cyborg20";
    gv_mOS[21][1] = "Cyborg20";
}

trigger auto_gf_LoadCamoDecalBank_Trigger = null;
int auto_gf_LoadCamoDecalBank_lp_player;

void gf_LoadCamoDecalBank (int lp_player) {
    auto_gf_LoadCamoDecalBank_lp_player = lp_player;

    if (auto_gf_LoadCamoDecalBank_Trigger == null) {
        auto_gf_LoadCamoDecalBank_Trigger = TriggerCreate("auto_gf_LoadCamoDecalBank_TriggerFunc");
    }

    TriggerExecute(auto_gf_LoadCamoDecalBank_Trigger, false, false);
}

bool auto_gf_LoadCamoDecalBank_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_LoadCamoDecalBank_lp_player;

    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(gv_hotkeyBank[lp_player], "Unlocks", "C") == true)) {
        gv_camo_Set[lp_player] = BankValueGetAsInt(gv_hotkeyBank[lp_player], "Unlocks", "C");
        if ((gv_playercamounlocked[gv_camo_Set[lp_player]][lp_player] == true)) {
            libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lp_player], libNtve_gf_TextureSelectByID(UserDataGetGameLink("Camos", UserDataInstance("Camos", gv_camo_Set[lp_player]), "Camo", 1)));
            gv_textureValue[EventPlayer()][1] = gv_camo_Set[lp_player];
            if ((gv_textureValue[lp_player][1] == 39)) {
                UnitBehaviorAdd(gv_playerHeroes[lp_player], "GlazeHellFire", gv_playerHeroes[lp_player], 1);
            }
            else {
                if ((gv_textureValue[lp_player][1] == 51)) {
                    UnitBehaviorAdd(gv_playerHeroes[lp_player], "GlazeGhost", gv_playerHeroes[lp_player], 1);
                }
            }
        }
    }
    if ((BankKeyExists(gv_hotkeyBank[lp_player], "Unlocks", "D") == true)) {
        gv_decal_Set[lp_player] = BankValueGetAsInt(gv_hotkeyBank[lp_player], "Unlocks", "D");
        if ((gv_decal_Set[lp_player] == 0)) {
            libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lp_player], gv_rankActorMsg[gv_playerRankSet[lp_player]][gf_GetPlayerRank(lp_player)]);
            gv_textureValue[EventPlayer()][0] = gv_decal_Set[lp_player];
        }
        else {
            if ((gv_playerdecalunlocked[gv_decal_Set[lp_player]][lp_player] == true)) {
                libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lp_player], libNtve_gf_TextureSelectByID(UserDataGetGameLink("Decals", UserDataInstance("Decals", gv_decal_Set[lp_player]), "Decals", 1)));
                gv_textureValue[EventPlayer()][0] = gv_decal_Set[lp_player];
            }
        }
    }
    return true;
}

void gf_BMDDTowerNetwork () {
    // Variable Declarations
    actor lv_actor;
    int lv_int;
    int lv_array;
    point[7] lv_tower;

    // Automatic Variable Declarations
    int auto09F0AC38_ae;
    const int auto09F0AC38_ai = 1;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    lv_tower[0] = PointFromId(1091717075);
    lv_tower[1] = PointFromId(1213289685);
    lv_tower[2] = PointFromId(622183896);
    lv_tower[3] = PointFromId(1530039878);
    lv_tower[4] = PointFromId(85634145);
    lv_tower[5] = PointFromId(226569636);
    lv_tower[6] = PointFromId(375307905);
    gv_sensorcount = (1 + gv_gamemode);

    Wait(3.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D0A9C881"));
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/F32362D0"));
    Wait(4.0, c_timeGame);

    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/142C12D5") + IntToText(gv_sensorcount) + StringExternal("Param/Value/82EEC9AA")));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/5349FBAE"));
    TimerStart(gv_missiontimer, (180.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 5.0)), false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);

    auto09F0AC38_ae = gv_sensorcount;
    lv_int = 1;
    for ( ; ( (auto09F0AC38_ai >= 0 && lv_int <= auto09F0AC38_ae) || (auto09F0AC38_ai < 0 && lv_int >= auto09F0AC38_ae) ) ; lv_int += auto09F0AC38_ai ) {
        while (true) {
            lv_array = RandomInt(0, 6);
            if ((lv_tower[lv_array] != null)) {
                break;
            }
        }
        gv_waterSites[lv_int] = RegionCircle(lv_tower[lv_array], 1.0);
        lv_tower[lv_array] = null;
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_waterSites[lv_int]));
        gv_waterSiteActors[lv_int] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000 0.000000 s");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,0,0 5.000000}");
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_waterSites[lv_int]), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 0.0, 270.0);
        gv_aORegionPings[lv_int] = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/AA8F2508"));
        TextTagCreate(StringExternal("Param/Value/A53260C0"), 12, RegionGetCenter(gv_waterSites[lv_int]), 0.0, true, false, PlayerGroupAll());
        gv_towerTag[lv_int] = TextTagLastCreated();
        TextTagSetTextShadow(gv_towerTag[lv_int], false);
    }
    TriggerEnable(gt_ApproachTower, true);
    Wait(10.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    Wait(25.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    Wait(10.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
}

trigger auto_gf_RepairingTower_Trigger = null;
unit auto_gf_RepairingTower_lp_unit;
region auto_gf_RepairingTower_lp_region;
int auto_gf_RepairingTower_lp_site;

void gf_RepairingTower (unit lp_unit, region lp_region, int lp_site) {
    auto_gf_RepairingTower_lp_unit = lp_unit;
    auto_gf_RepairingTower_lp_region = lp_region;
    auto_gf_RepairingTower_lp_site = lp_site;

    if (auto_gf_RepairingTower_Trigger == null) {
        auto_gf_RepairingTower_Trigger = TriggerCreate("auto_gf_RepairingTower_TriggerFunc");
    }

    TriggerExecute(auto_gf_RepairingTower_Trigger, false, false);
}

bool auto_gf_RepairingTower_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_RepairingTower_lp_unit;
    region lp_region = auto_gf_RepairingTower_lp_region;
    int lp_site = auto_gf_RepairingTower_lp_site;

    // Variable Declarations
    unit lv_u;
    int lv_count;
    int lv_loopint;
    bool lv_leftregion;
    int lv_watersitesremaining;

    // Automatic Variable Declarations
    int auto3E4C717B_ae;
    const int auto3E4C717B_ai = 1;

    // Variable Initialization

    // Implementation
    UnitGroupAdd(gv_waterGatherers, lp_unit);
    UnitBehaviorAdd(lp_unit, "RepairingTower", lp_unit, 1);
    TextTagShow(gv_towerTag[lp_site], PlayerGroupAll(), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(lp_region), Color(0.00, 100.00, 0.00), 3.0, 270.0);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    while (true) {
        if ((UnitHasBehavior(lp_unit, "RepairingTower") == false)) {
            break;
        }

        if ((libNtve_gf_UnitInRegion(lp_unit, lp_region) == true) && (UnitIsAlive(lp_unit) == true)) {
        }
        else {
            TextTagShow(gv_towerTag[lp_site], PlayerGroupAll(), true);
            UnitBehaviorRemove(lp_unit, "RepairingTower", 1);
            UnitGroupRemove(gv_waterGatherers, lp_unit);
            lv_leftregion = true;
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((lv_leftregion == false) && (TriggerIsEnabled(gt_ApproachTower) == true)) {
        gv_towerCount += 1;
        gf_MissionText(StringExternal("Param/Value/5612EAE3"));
        PingDestroy(gv_aORegionPings[lp_site]);
        UnitGroupRemove(gv_waterGatherers, lp_unit);
        ActorSend(gv_waterSiteActors[lp_site], "Destroy");
        TextTagDestroy(gv_towerTag[lp_site]);
        gv_waterSiteActors[lp_site] = null;
        auto3E4C717B_ae = gv_sensorcount;
        lv_loopint = 1;
        for ( ; ( (auto3E4C717B_ai >= 0 && lv_loopint <= auto3E4C717B_ae) || (auto3E4C717B_ai < 0 && lv_loopint >= auto3E4C717B_ae) ) ; lv_loopint += auto3E4C717B_ai ) {
            if ((gv_waterSiteActors[lv_loopint] != null)) {
                lv_watersitesremaining = (lv_watersitesremaining + 1);
            }

        }
        ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/FEBF07A0") + IntToText(lv_watersitesremaining) + StringExternal("Param/Value/E489AC07")));
    }

    return true;
}

void gf_SignalStrengthDialogue (int lp_towersCompleted) {
    // Automatic Variable Declarations
    int autoBEBB9080_val;

    // Implementation
    autoBEBB9080_val = gv_gamemode;
    if (autoBEBB9080_val == 1) {
        if ((lp_towersCompleted == 1)) {
            gf_MissionText(StringExternal("Param/Value/5CB6739A"));
        }
    }
    else if (autoBEBB9080_val == 2) {
        if ((lp_towersCompleted == 1)) {
            gf_MissionText(StringExternal("Param/Value/D6D8C068"));
        }
        else if ((lp_towersCompleted == 2)) {
            gf_MissionText(StringExternal("Param/Value/6E51DEE8"));
        }
    }
    else if (autoBEBB9080_val == 3) {
        if ((lp_towersCompleted == 1)) {
            gf_MissionText(StringExternal("Param/Value/DD7EB5CA"));
        }
        else if ((lp_towersCompleted == 2)) {
            gf_MissionText(StringExternal("Param/Value/3AF4C2CA"));
        }
        else if ((lp_towersCompleted == 3)) {
            gf_MissionText(StringExternal("Param/Value/DFC8EF8B"));
        }
    }
    else if (autoBEBB9080_val == 4) {
        if ((lp_towersCompleted == 1)) {
            gf_MissionText(StringExternal("Param/Value/0F290860"));
        }
        else if ((lp_towersCompleted == 2)) {
            gf_MissionText(StringExternal("Param/Value/8FFE1EC3"));
        }
        else if ((lp_towersCompleted == 3)) {
            gf_MissionText(StringExternal("Param/Value/B6793DF9"));
        }
        else if ((lp_towersCompleted == 4)) {
            gf_MissionText(StringExternal("Param/Value/E2F27387"));
        }
    }
    else if (autoBEBB9080_val == 5) {
        if ((lp_towersCompleted == 1)) {
            gf_MissionText(StringExternal("Param/Value/6B8E0B77"));
        }
        else if ((lp_towersCompleted == 2)) {
            gf_MissionText(StringExternal("Param/Value/7051B857"));
        }
        else if ((lp_towersCompleted == 3)) {
            gf_MissionText(StringExternal("Param/Value/25DE8F72"));
        }
        else if ((lp_towersCompleted == 4)) {
            gf_MissionText(StringExternal("Param/Value/8860F989"));
        }
        else if ((lp_towersCompleted == 5)) {
            gf_MissionText(StringExternal("Param/Value/F2DA4CDB"));
        }
    }
    else {
    }
}

void gf_SporeColonies () {
    // Variable Declarations
    int lv_i;
    int lv_z;
    point lv_point;
    bool lv_allpointsset;
    bool lv_missionfailed;
    int lv_randomstartspawn;

    // Automatic Variable Declarations
    int auto57462A6A_ae;
    const int auto57462A6A_ai = 1;
    int auto2C8BBB6E_n;
    int auto2C8BBB6E_i;
    unitgroup auto0CDFDCA7_g;
    int auto0CDFDCA7_u;
    unit auto0CDFDCA7_var;
    int auto322E3D50_val;
    unitgroup auto51C38CC3_g;
    int auto51C38CC3_u;
    unit auto51C38CC3_var;
    int autoB4BDF553_val;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    RegionAddRegion(RegionFromId(62), RegionFromId(63));
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(6)), 50.0);
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(5)), 50.0);
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(112)), 25.0);
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(198)), 25.0);
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(199)), 25.0);
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(26)), 25.0);
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(163)), 25.0);
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(163)), 25.0);
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(24)), 30.0);
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(25)), 30.0);
    gv_sensorcount = (gv_gamemode + 2);
    gv_weaponcacheregion[1] = RegionFromId(57);
    gv_weaponcacheregion[2] = RegionFromId(58);
    gv_weaponcacheregion[3] = RegionFromId(59);
    gv_weaponcacheregion[4] = RegionFromId(60);
    gv_weaponcacheregion[5] = RegionFromId(61);
    gv_weaponcacheregion[6] = RegionFromId(277);
    gv_weaponcacheregion[7] = RegionFromId(278);
    lv_randomstartspawn = RandomInt(1, gv_sensorcount);
    Wait(3.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/33D5C386"));
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/68D1C9CB"));
    Wait(4.0, c_timeGame);
    auto57462A6A_ae = gv_sensorcount;
    lv_i = 1;
    for ( ; ( (auto57462A6A_ai >= 0 && lv_i <= auto57462A6A_ae) || (auto57462A6A_ai < 0 && lv_i >= auto57462A6A_ae) ) ; lv_i += auto57462A6A_ai ) {
        while ((lv_allpointsset == false)) {
            lv_point = RegionRandomPoint(RegionFromId(62));
            if ((PointPathingPassable(lv_point) == true) && (PointPathingIsConnected(lv_point, PointFromId(1840075581)) == true)) {
                break;
            }
            Wait(0.0625, c_timeGame);
        }
        RegionSetCenter(gv_weaponcacheregion[lv_i], lv_point);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SporeColony", 0, 14, lv_point);
        UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifier", UnitLastCreated(), gv_gamemode);
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        UnitGroupAdd(gv_shadowUnits, UnitLastCreated());
        UnitSetInfoText(UnitLastCreated(), StringToText(""), StringExternal("Param/Value/89213E87"), StringToText(""));
        if ((lv_i == gv_sensorcount)) {
            lv_allpointsset = true;
        }
        Wait(0.1, c_timeGame);
    }
    Wait(1.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/2990231F"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/B750846E"));
    TimerStart(gv_missiontimer, gv_c0FungusCoreDuration, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/3FBE2D17"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(3, 4), RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_shadowUnits, c_unitCountAlive)), 1.5), 0);
    gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(3, 4), RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_shadowUnits, c_unitCountAlive)), 1.5), 0);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(gv_spawnCount, "Hopper", RandomInt(0, 1));
    }
    auto2C8BBB6E_n = FixedToInt((gv_c0FungusCoreDuration / gv_c0FungusCoreInterval));
    for (auto2C8BBB6E_i = 1; auto2C8BBB6E_i <= auto2C8BBB6E_n; auto2C8BBB6E_i += 1) {
        auto0CDFDCA7_g = UnitGroup("SporeColony", 14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0CDFDCA7_u = UnitGroupCount(auto0CDFDCA7_g, c_unitCountAll);
        for (;; auto0CDFDCA7_u -= 1) {
            auto0CDFDCA7_var = UnitGroupUnitFromEnd(auto0CDFDCA7_g, auto0CDFDCA7_u);
            if (auto0CDFDCA7_var == null) { break; }
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(auto0CDFDCA7_var), ColorWithAlpha(100.00, 0.00, 0.00, 49.02), 5.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D910FE27"));
            PingSetUnit(PingLastCreated(), auto0CDFDCA7_var);
            auto322E3D50_val = gv_gamemode;
            if (auto322E3D50_val == 1) {
                if ((libNtve_gf_RandomPercent() <= 2.0)) {
                    gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(1, 2), RegionCircle(UnitGetPosition(auto0CDFDCA7_var), 1.5), 0);
                }
            }
            else if (auto322E3D50_val == 2) {
                if ((libNtve_gf_RandomPercent() <= 4.0)) {
                    gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(1, 2), RegionCircle(UnitGetPosition(auto0CDFDCA7_var), 1.5), 0);
                }
            }
            else if (auto322E3D50_val == 3) {
                if ((libNtve_gf_RandomPercent() <= 6.0)) {
                    gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(2, 4), RegionCircle(UnitGetPosition(auto0CDFDCA7_var), 1.5), 0);
                }
            }
            else if (auto322E3D50_val == 4) {
                if ((libNtve_gf_RandomPercent() <= 8.0)) {
                    gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(3, 5), RegionCircle(UnitGetPosition(auto0CDFDCA7_var), 1.5), 0);
                }
            }
            else if (auto322E3D50_val == 5) {
                if ((libNtve_gf_RandomPercent() <= 10.0)) {
                    gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(4, 6), RegionCircle(UnitGetPosition(auto0CDFDCA7_var), 1.5), 0);
                }
            }
            else {
                gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(5, 6), RegionCircle(UnitGetPosition(auto0CDFDCA7_var), 1.5), 0);
            }
        }
        if ((UnitGroupCount(UnitGroup("SporeColony", 14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }
        Wait(gv_c0FungusCoreInterval, c_timeGame);
    }
    if ((UnitGroupCount(UnitGroup("SporeColony", 14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        gf_SucceedMission(60, StringExternal("Param/Value/82250FE7"), -1, false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_UpdateMissionCompletionTracker(true);
    }
    else {
        gf_MissionText(StringExternal("Param/Value/9E0EE4AD"));
        lv_missionfailed = true;
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_FailMission(45, StringExternal("Param/Value/70A62567"), 1);
        gf_UpdateMissionCompletionTracker(false);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    if ((gv_missionAutostart == true) && (gv_gamemode == 5)) {
        gf_SentryGuns();
    }
    else {
        if ((gv_missionAutostart == true) && (RandomInt(0, 1) == 1)) {
            gf_SentryGuns();
        }
        else {
            gf_QuarantineCivilians();
        }
    }
    if ((lv_missionfailed == true)) {
        gf_MissionText(StringExternal("Param/Value/920BA7F6"));
        while ((gv_gameOver == false) && (UnitGroupCount(gv_shadowUnits, c_unitCountAlive) > 1)) {
            auto51C38CC3_g = UnitGroup("SporeColony", 14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto51C38CC3_u = UnitGroupCount(auto51C38CC3_g, c_unitCountAll);
            for (;; auto51C38CC3_u -= 1) {
                auto51C38CC3_var = UnitGroupUnitFromEnd(auto51C38CC3_g, auto51C38CC3_u);
                if (auto51C38CC3_var == null) { break; }
                autoB4BDF553_val = gv_gamemode;
                if (autoB4BDF553_val == 1) {
                    if ((libNtve_gf_RandomPercent() < 3.0)) {
                        gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(1, 2), RegionCircle(UnitGetPosition(auto51C38CC3_var), 1.5), 0);
                    }
                }
                else if (autoB4BDF553_val == 2) {
                    if ((libNtve_gf_RandomPercent() < 6.0)) {
                        gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(1, 2), RegionCircle(UnitGetPosition(auto51C38CC3_var), 1.5), 0);
                    }
                }
                else if (autoB4BDF553_val == 3) {
                    if ((libNtve_gf_RandomPercent() < 9.0)) {
                        gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(2, 4), RegionCircle(UnitGetPosition(auto51C38CC3_var), 1.5), 0);
                    }
                }
                else if (autoB4BDF553_val == 4) {
                    if ((libNtve_gf_RandomPercent() < 12.0)) {
                        gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(3, 5), RegionCircle(UnitGetPosition(auto51C38CC3_var), 1.5), 0);
                    }
                }
                else if (autoB4BDF553_val == 5) {
                    if ((libNtve_gf_RandomPercent() < 15.0)) {
                        gf_SpawnUndeadInRegionUseForNestedLoops("Hopper", RandomInt(4, 6), RegionCircle(UnitGetPosition(auto51C38CC3_var), 1.5), 0);
                    }
                }
                else {
                }
            }
            Wait(60.0, c_timeReal);
        }
    }
}

trigger auto_gf_SentryGuns_Trigger = null;

void gf_SentryGuns () {
    if (auto_gf_SentryGuns_Trigger == null) {
        auto_gf_SentryGuns_Trigger = TriggerCreate("auto_gf_SentryGuns_TriggerFunc");
    }

    TriggerExecute(auto_gf_SentryGuns_Trigger, false, false);
}

bool auto_gf_SentryGuns_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    unit lv_droppod;
    fixed lv_timeout;

    // Automatic Variable Declarations
    int auto95A48DB9_ae;
    const int auto95A48DB9_ai = 1;
    int autoD5F35A64_ae;
    const int autoD5F35A64_ai = 1;
    unitgroup auto69508752_g;
    int auto69508752_u;
    unit auto69508752_var;
    int autoEEE31197_ae;
    const int autoEEE31197_ai = 1;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    gv_highlanders[1] = RegionFromId(142);
    gv_highlanders[2] = RegionFromId(312);
    gv_highlanders[3] = RegionFromId(313);
    gv_highlanders[4] = RegionFromId(182);
    gv_highlanders[5] = RegionFromId(184);
    gv_highlanders[6] = RegionFromId(183);
    gv_highlanders[7] = RegionFromId(185);
    gv_highlanders[8] = RegionFromId(186);
    gv_sensorLZ = gv_lZs[RandomInt(1, 5)];
    Wait(RandomInt(20, 30), c_timeGame);
    gf_MissionText(StringExternal("Param/Value/660E11FA"));
    Wait(11.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/F9D4F749"));
    Wait(24.0, c_timeGame);
    if ((gv_gamemode >= 1) && (gv_gamemode <= 5)) {
        gv_sensorcount = (gv_gamemode + 3);
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/C9FF35C5"));
    }
    else {
        gv_sensorcount = 4;
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/008DA83F"));
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/C981E9CE") + IntToText(gv_sensorcount) + StringExternal("Param/Value/027DE755")));
    auto95A48DB9_ae = gv_sensorcount;
    lv_loopint = 1;
    for ( ; ( (auto95A48DB9_ai >= 0 && lv_loopint <= auto95A48DB9_ae) || (auto95A48DB9_ai < 0 && lv_loopint >= auto95A48DB9_ae) ) ; lv_loopint += auto95A48DB9_ai ) {
        gv_sentrySet[lv_loopint] = false;
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_sensorLZ), ColorWithAlpha(100.00, 50.20, 0.00, 49.41), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/25428566"));
    gv_sensorpings[0] = PingLastCreated();
    lv_timeout = (255.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 5.0));
    TimerStart(gv_missiontimer2, (270.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 5.0)), false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow2, StringExternal("Param/Value/0C4189CB"));
    TimerWindowShow(gv_missiontimerwindow2, PlayerGroupAll(), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, RegionGetCenter(gv_sensorLZ));
    lv_droppod = UnitLastCreated();
    UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
    Wait(5.0, c_timeGame);
    UnitKill(lv_droppod);
    autoD5F35A64_ae = gv_sensorcount;
    lv_loopint = 1;
    for ( ; ( (autoD5F35A64_ai >= 0 && lv_loopint <= autoD5F35A64_ae) || (autoD5F35A64_ai < 0 && lv_loopint >= autoD5F35A64_ae) ) ; lv_loopint += autoD5F35A64_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGun2", 0, 0, RegionGetCenter(gv_sensorLZ));
        gv_sentryGuns[lv_loopint] = UnitLastCreated();
        libNtve_gf_MakeUnitInvulnerable(gv_sentryGuns[lv_loopint], true);
        gf_MissionItemPingAddItem(UnitLastCreated());
        UnitGroupAdd(gv_simpleMissionItems, UnitLastCreated());
        UnitGroupAdd(gv_prologueSentries, UnitLastCreated());
    }
    auto69508752_g = gv_prologueSentries;
    auto69508752_u = UnitGroupCount(auto69508752_g, c_unitCountAll);
    for (;; auto69508752_u -= 1) {
        auto69508752_var = UnitGroupUnitFromEnd(auto69508752_g, auto69508752_u);
        if (auto69508752_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto69508752_var, true);
    }
    TriggerEnable(gt_SentryGunTimeEnd, true);
    TriggerEnable(gt_PickUpSentryGuns, true);
    TriggerEnable(gt_PlaceSentryGuns, true);
    TriggerEnable(gt_SentryGunPlacementArea, true);
    libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_sensorLZ));
    gv_sensorbeacon = libNtve_gf_ActorLastCreated();
    Wait(2.0, c_timeGame);
    UnitRemove(lv_droppod);
    autoEEE31197_ae = gv_sensorcount;
    lv_loopint = 1;
    for ( ; ( (autoEEE31197_ai >= 0 && lv_loopint <= autoEEE31197_ae) || (autoEEE31197_ai < 0 && lv_loopint >= autoEEE31197_ae) ) ; lv_loopint += autoEEE31197_ai ) {
        libNtve_gf_CreateModelAtPoint("ChallengeShield", RegionGetCenter(gv_highlanders[lv_loopint]));
        gv_placementArea[lv_loopint] = libNtve_gf_ActorLastCreated();
        gf_ScalePlacementArea(lv_loopint);
        TextTagCreate(StringExternal("Param/Value/E663163B"), 20, RegionGetCenter(gv_highlanders[lv_loopint]), 1.0, false, false, PlayerGroupAll());
        gv_placementAreaText[lv_loopint] = TextTagLastCreated();
        TextTagSetTextShadow(gv_placementAreaText[lv_loopint], false);
    }
    return true;
}

void gf_ScalePlacementArea (int lp_region) {
    // Automatic Variable Declarations
    // Implementation
    ActorSend(gv_placementArea[lp_region], "SetScale 0.500000");
    ActorSend(gv_placementArea[lp_region], "SetVisibility");
}

trigger auto_gf_QuarantineCivilians_Trigger = null;

void gf_QuarantineCivilians () {
    if (auto_gf_QuarantineCivilians_Trigger == null) {
        auto_gf_QuarantineCivilians_Trigger = TriggerCreate("auto_gf_QuarantineCivilians_TriggerFunc");
    }

    TriggerExecute(auto_gf_QuarantineCivilians_Trigger, false, false);
}

bool auto_gf_QuarantineCivilians_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    region lv_randomCivGroup;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    gv_aORegions[1] = RegionFromId(249);
    gv_aORegions[2] = RegionFromId(251);
    gv_aORegions[3] = RegionFromId(250);
    gv_randomRegion = gv_aORegions[RandomInt(1, 3)];
    Wait(RandomInt(20, 30), c_timeGame);
    gf_MissionText(StringExternal("Param/Value/C1EB1A82"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/1BE3E7D8"));
    TimerStart(gv_missiontimer, (240.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 5.0)), false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/1F26EE40"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_randomRegion), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_missionping = PingLastCreated();
    PingSetTooltip(gv_missionping, StringExternal("Param/Value/077D7F73"));
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", RegionGetCenter(gv_randomRegion));
    gv_placerMarkers[1] = libNtve_gf_ActorLastCreated();
    TriggerEnable(gt_InspectCivilians, true);
    TriggerEnable(gt_InfectedCivilianTimeEnd, true);
    return true;
}

trigger auto_gf_DrMorrowText_Trigger = null;

void gf_DrMorrowText () {
    if (auto_gf_DrMorrowText_Trigger == null) {
        auto_gf_DrMorrowText_Trigger = TriggerCreate("auto_gf_DrMorrowText_TriggerFunc");
    }

    TriggerExecute(auto_gf_DrMorrowText_Trigger, false, false);
}

bool auto_gf_DrMorrowText_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoEA2811BE_val;

    // Implementation
    gf_SkipActionsIfGameOver();
    autoEA2811BE_val = gv_civiliansQuarantined;
    if (autoEA2811BE_val == 1) {
        gf_MissionText(StringExternal("Param/Value/7E5C3981"));
    }
    else if (autoEA2811BE_val == 4) {
        gf_MissionText(StringExternal("Param/Value/FF9A3A07"));
    }
    else if (autoEA2811BE_val == 7) {
        gf_MissionText(StringExternal("Param/Value/A268ADEC"));
    }
    else {
    }
    return true;
}

void gf_CivilianPing (unit lp_item) {
    // Variable Declarations
    int lv_ping;
    int lv_ping2;
    int lv_carryingitem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;
    lv_ping2 = c_invalidPingId;
    lv_carryingitem = UnitGetOwner(UnitInventoryUnit(lp_item));

    // Implementation
    if ((UnitGroupHasUnit(gv_missionItemPingItems, lp_item) == false)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_item), ColorWithAlpha(100.00, 0.00, 0.00, 49.41), 0.0, 270.0);
        lv_ping = PingLastCreated();
        PingSetTooltip(lv_ping, StringExternal("Param/Value/D6245F54"));
        PingSetScale(lv_ping, 0.5);
        PingSetUnit(lv_ping, lp_item);
        libHots_gf_StorePingForUnit(lp_item, 1, lv_ping);
        UnitGroupAdd(gv_missionItemPingItems, lp_item);
    }
}

void gf_DefendBalaad () {
    int init_i;

    // Variable Declarations
    int[4] lv_bunkerPings;
    int lv_LoopInteger;

    // Automatic Variable Declarations
    playergroup auto65074421_g;
    int auto65074421_var;
    unitgroup autoD5CD1043_g;
    int autoD5CD1043_u;
    unit autoD5CD1043_var;
    unitgroup autoC1F9D52D_g;
    int autoC1F9D52D_u;
    unit autoC1F9D52D_var;
    const int auto2594BAE4_ae = 3;
    const int auto2594BAE4_ai = 1;
    unitgroup autoB98F38DD_g;
    int autoB98F38DD_u;
    unit autoB98F38DD_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_bunkerPings[init_i] = c_invalidPingId;
    }

    // Implementation
    gf_SkipActionsIfGameOver();
    gv_tCPSpawns[0] = RegionFromId(235);
    gv_tCPSpawns[1] = RegionFromId(178);
    gv_tCPSpawns[2] = RegionFromId(309);
    gv_tCPSpawns[3] = RegionFromId(8);
    gv_bunkersLost = 0;
    Wait(20.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/105A93FB"));
    Wait(5.0, c_timeGame);
    PingCreate(PlayerGroupAll(), "BeaconRallyPing", RegionGetCenter(RegionFromId(6)), ColorWithAlpha(92.94, 32.16, 2.75, 0.00), 0.0);
    gv_supplyPing = PingLastCreated();
    PingSetTooltip(gv_supplyPing, StringExternal("Param/Value/DB64ABF3"));
    gf_LandPhantom(RegionGetCenter(RegionFromId(6)));
    Wait(12.0, c_timeGame);
    auto65074421_g = gv_players;
    auto65074421_var = -1;
    while (true) {
        auto65074421_var = PlayerGroupNextPlayer(auto65074421_g, auto65074421_var);
        if (auto65074421_var < 0) { break; }
        if ((RandomInt(0, 100) >= 75) && (TechTreeUpgradeCount(auto65074421_var, "SpecialForces", c_techCountCompleteOnly) == 0)) {
            UnitCreate(1, gf_randomminitype(), c_unitCreateIgnorePlacement, auto65074421_var, PointWithOffsetPolar(RegionGetCenter(RegionFromId(6)), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
        }
    }
    Wait(5.0, c_timeGame);
    gf_TakeoffPhantom();
    gf_AirDropItemLoc("Magazines", RegionRandomPoint(RegionFromId(6)), 1);
    gf_AirDropItemLoc("Magazines", RegionRandomPoint(RegionFromId(6)), 1);
    gf_AirDropItemLoc("Magazines", RegionRandomPoint(RegionFromId(6)), 1);
    gf_AirDropItemLoc("Magazines", RegionRandomPoint(RegionFromId(6)), 1);
    gf_AirDropItemLoc("Magazines", RegionRandomPoint(RegionFromId(6)), 1);
    gf_AirDropItemLoc("Magazines", RegionRandomPoint(RegionFromId(6)), 1);
    gf_AirDropItemLoc("FirstAidKit", RegionRandomPoint(RegionFromId(6)), 1);
    gf_AirDropItemLoc("FirstAidKit", RegionRandomPoint(RegionFromId(6)), 1);
    gf_AirDropItemLoc("QuikClot", RegionRandomPoint(RegionFromId(6)), 1);
    gf_AirDropItemLoc("QuikClot", RegionRandomPoint(RegionFromId(6)), 1);
    gf_AirDropItemLoc("MK44SentryGunPacked", RegionRandomPoint(RegionFromId(6)), 1);
    gf_AirDropItemLoc("MK44SentryGunPacked", RegionRandomPoint(RegionFromId(6)), 1);
    Wait(8.0, c_timeGame);
    PingDestroy(gv_supplyPing);
    if ((gv_prologueOutbreak == false)) {
        TriggerEnable(gt_UndeadSpawningPrologue, false);
    }
    gf_MissionText(StringExternal("Param/Value/DC475EB2"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/0912B7CA"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/A2A0E9C9"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(UnitFromId(1479446397)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0295059E"));
    lv_bunkerPings[0] = PingLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(UnitFromId(1669777111)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A5C0EF01"));
    lv_bunkerPings[1] = PingLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(UnitFromId(1821781536)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/82A4B3AE"));
    lv_bunkerPings[2] = PingLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(UnitFromId(449830515)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7B38AAE7"));
    lv_bunkerPings[3] = PingLastCreated();

    autoD5CD1043_g = gv_bunkerGroup;
    autoD5CD1043_u = UnitGroupCount(autoD5CD1043_g, c_unitCountAll);
    for (;; autoD5CD1043_u -= 1) {
        autoD5CD1043_var = UnitGroupUnitFromEnd(autoD5CD1043_g, autoD5CD1043_u);
        if (autoD5CD1043_var == null) { break; }
        UnitCargoCreate(autoD5CD1043_var, "InfantryRifleman", 1);
        UnitGroupAdd(gv_bunkerSoldiers, UnitCargoLastCreated());
        UnitSetTeamColorIndex(autoD5CD1043_var, 0);
        UnitCargoCreate(autoD5CD1043_var, "InfantryRifleman", 1);
        UnitGroupAdd(gv_bunkerSoldiers, UnitCargoLastCreated());
        UnitSetTeamColorIndex(autoD5CD1043_var, 0);
        UnitCargoCreate(autoD5CD1043_var, "InfantryRifleman", 1);
        UnitGroupAdd(gv_bunkerSoldiers, UnitCargoLastCreated());
        UnitSetTeamColorIndex(autoD5CD1043_var, 0);
        UnitCargoCreate(autoD5CD1043_var, "InfantryRifleman", 1);
        UnitGroupAdd(gv_bunkerSoldiers, UnitCargoLastCreated());
        UnitSetTeamColorIndex(autoD5CD1043_var, 0);
    }
    autoC1F9D52D_g = gv_bunkerSoldiers;
    autoC1F9D52D_u = UnitGroupCount(autoC1F9D52D_g, c_unitCountAll);
    for (;; autoC1F9D52D_u -= 1) {
        autoC1F9D52D_var = UnitGroupUnitFromEnd(autoC1F9D52D_g, autoC1F9D52D_u);
        if (autoC1F9D52D_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoC1F9D52D_var, "TextureSelectById DecalUSFlag2");
    }
    Wait(12.0, c_timeGame);
    lv_LoopInteger = 0;
    for ( ; ( (auto2594BAE4_ai >= 0 && lv_LoopInteger <= auto2594BAE4_ae) || (auto2594BAE4_ai < 0 && lv_LoopInteger >= auto2594BAE4_ae) ) ; lv_LoopInteger += auto2594BAE4_ai ) {
        PingDestroy(lv_bunkerPings[lv_LoopInteger]);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/B2BFF3A6"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/BFED2E70"));
    Wait(2.0, c_timeGame);
    TriggerEnable(gt_DefendBalaadBunkerCount, true);
    TriggerEnable(gt_DefendBalaadTimeEnd, true);
    TimerStart(gv_missiontimer, 180.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/64FA8713"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    autoB98F38DD_g = gv_bunkerGroup;
    autoB98F38DD_u = UnitGroupCount(autoB98F38DD_g, c_unitCountAll);
    for (;; autoB98F38DD_u -= 1) {
        autoB98F38DD_var = UnitGroupUnitFromEnd(autoB98F38DD_g, autoB98F38DD_u);
        if (autoB98F38DD_var == null) { break; }
        gf_MissionItemPingAddItem(autoB98F38DD_var);
        libNtve_gf_MakeUnitInvulnerable(autoB98F38DD_var, false);
        libE6C8C21C_gf_RegisterUnitDiesEvent(gt_DefendBalaadBunkerCount, autoB98F38DD_var);
    }
    libNtve_gf_WaitForTimer(gv_missiontimer, 5.0, true);
    gf_BalaadSpawns(RandomInt(0, 3), "Zombie", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Zombie", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Zombie", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Zombie", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Unburied", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Unburied", gv_spawnCount);
    Wait(5.0, c_timeGame);
    gf_BalaadSpawns(RandomInt(0, 3), "Unburied", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Glutton", (gv_spawnCount / 2));
    gf_BalaadSpawns(RandomInt(0, 3), "Glutton", (gv_spawnCount / 2));
    gf_BalaadSpawns(RandomInt(0, 3), "Glutton", (gv_spawnCount / 2));
    gf_BalaadSpawns(RandomInt(0, 3), "InfestedCivilian", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "InfestedCivilian", gv_spawnCount);
    Wait(5.0, c_timeGame);
    gf_BalaadSpawns(RandomInt(0, 3), "InfestedCivilian", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "InfestedCivilian", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "InfestedCivilian", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Glutton", (gv_spawnCount / 2));
    gf_BalaadSpawns(RandomInt(0, 3), "Boomer", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Boomer", gv_spawnCount);
    Wait(5.0, c_timeGame);
    gf_BalaadSpawns(RandomInt(0, 3), "Charger", 2);
    gf_BalaadSpawns(RandomInt(0, 3), "Charger", 2);
    gf_BalaadSpawns(RandomInt(0, 3), "Charger", 2);
    gf_BalaadSpawns(RandomInt(0, 3), "Glutton", (gv_spawnCount / 2));
    gf_BalaadSpawns(RandomInt(0, 3), "Glutton", (gv_spawnCount / 2));
    if ((gv_gamemode >= 3)) {
        gf_BalaadSpawns(RandomInt(0, 3), "Horror", 1);
        gf_BalaadSpawns(RandomInt(0, 3), "Horror", 1);
    }
    libNtve_gf_WaitForTimer(gv_missiontimer, 60.0, true);
    if ((gv_gamemode >= 3)) {
        gf_BalaadSpawns(RandomInt(0, 3), "Spitter", 2);
        gf_BalaadSpawns(RandomInt(0, 3), "Spitter", 2);
        gf_BalaadSpawns(RandomInt(0, 3), "Charger", 3);
        gf_BalaadSpawns(RandomInt(0, 3), "Krill", gv_spawnCount);
        gf_BalaadSpawns(RandomInt(0, 3), "Krill", gv_spawnCount);
        gf_BalaadSpawns(RandomInt(0, 3), "Krill", gv_spawnCount);
        gf_BalaadSpawns(RandomInt(0, 3), "ZombieCarrier", 2);
        gf_BalaadSpawns(RandomInt(0, 3), "ZombieCarrier", 2);
    }

    Wait(5.0, c_timeGame);
    gf_BalaadSpawns(RandomInt(0, 3), "Boomer", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "ZombieYeti", 2);
    gf_BalaadSpawns(RandomInt(0, 3), "ZombieCarrier", 2);
    gf_BalaadSpawns(RandomInt(0, 3), "InfestedCivilian", gv_spawnCount);
    Wait(5.0, c_timeGame);
    gf_BalaadSpawns(RandomInt(0, 3), "Risen", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Risen", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Turned", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Turned", gv_spawnCount);
    if ((gv_gamemode >= 3)) {
        gf_BalaadSpawns(RandomInt(0, 3), "Bruchus", 1);
        gf_BalaadSpawns(RandomInt(0, 3), "Bruchus", 1);
        gf_BalaadSpawns(RandomInt(0, 3), "Charger", 1);
        gf_BalaadSpawns(RandomInt(0, 3), "Glutton", (gv_spawnCount / 2));
    }

    libNtve_gf_WaitForTimer(gv_missiontimer, 90.0, true);
    gf_BalaadSpawns(RandomInt(0, 3), "Bruchus", 1);
    gf_BalaadSpawns(RandomInt(0, 3), "Bruchus", 1);
    gf_BalaadSpawns(RandomInt(0, 3), "Zombie", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Zombie", gv_spawnCount);
    Wait(5.0, c_timeGame);
    gf_BalaadSpawns(RandomInt(0, 3), "Zombie", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Glutton", (gv_spawnCount / 2));
    gf_BalaadSpawns(RandomInt(0, 3), "InfestedCivilian", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Risen", gv_spawnCount);
    Wait(5.0, c_timeGame);
    gf_BalaadSpawns(RandomInt(0, 3), "Glutton", (gv_spawnCount / 2));
    gf_BalaadSpawns(RandomInt(0, 3), "Turned", gv_spawnCount);
    if ((gv_gamemode >= 3)) {
        gf_BalaadSpawns(RandomInt(0, 3), "Cursed", 1);
        gf_BalaadSpawns(RandomInt(0, 3), "Cursed", 1);
        gf_BalaadSpawns(RandomInt(0, 3), "Cursed", 1);
    }

    libNtve_gf_WaitForTimer(gv_missiontimer, 130.0, true);
    gf_BalaadSpawns(RandomInt(0, 3), "InfestedCivilian", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Risen", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Risen", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Turned", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Zombie", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Zombie", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Zombie", gv_spawnCount);
    gf_BalaadSpawns(RandomInt(0, 3), "Charger", 2);
    if ((gv_gamemode >= 4)) {
        gf_BalaadSpawns(RandomInt(0, 3), "Hunter", 2);
        gf_BalaadSpawns(RandomInt(0, 3), "Hunter", 2);
        gf_BalaadSpawns(RandomInt(0, 3), "Cursed", 1);
        gf_BalaadSpawns(RandomInt(0, 3), "Gourmand", 1);
        gf_BalaadSpawns(RandomInt(0, 3), "Gourmand", 1);
    }

    if ((gv_gamemode >= 5)) {
        gf_BalaadSpawns(RandomInt(0, 3), "Raisuli", 1);
        gf_BalaadSpawns(RandomInt(0, 3), "Raisuli", 1);
    }

}

void gf_BalaadSpawns (int lp_tCP, string lp_type, int lp_count) {
    // Variable Declarations
    unitgroup lv_bunkerAssault;
    int lv_currentsupply;

    // Automatic Variable Declarations
    int auto674BAAE5_n;
    int auto674BAAE5_i;
    unitgroup auto211C5B65_g;
    int auto211C5B65_u;
    unit auto211C5B65_var;

    // Variable Initialization
    lv_bunkerAssault = UnitGroupEmpty();

    // Implementation
    lv_currentsupply = (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) + lp_count);
    if ((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1) && ((lv_currentsupply <= gv_undeadSupplyCap) || (UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true))) {
        auto674BAAE5_n = lp_count;
        for (auto674BAAE5_i = 1; auto674BAAE5_i <= auto674BAAE5_n; auto674BAAE5_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_type, 0, 14, RegionRandomPoint(gv_tCPSpawns[lp_tCP]));
            UnitGroupAdd(lv_bunkerAssault, UnitLastCreated());
            Wait(RandomFixed(0.03, 0.1), c_timeGame);
        }
        UnitGroupAddUnitGroup(gv_undeadGroup, lv_bunkerAssault);
        UnitGroupIssueOrder(lv_bunkerAssault, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(9))), c_orderQueueReplace);
        auto211C5B65_g = lv_bunkerAssault;
        auto211C5B65_u = UnitGroupCount(auto211C5B65_g, c_unitCountAll);
        for (;; auto211C5B65_u -= 1) {
            auto211C5B65_var = UnitGroupUnitFromEnd(auto211C5B65_g, auto211C5B65_u);
            if (auto211C5B65_var == null) { break; }
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(auto211C5B65_var, "PlayerHandicap", auto211C5B65_var, (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(auto211C5B65_var, "PlayerModifier", auto211C5B65_var, PlayerGroupCount(gv_players));
            }
            if ((gv_gamemode > 1) && (gv_gamemode <= 5)) {
                if ((UnitTypeTestAttribute(UnitGetType(auto211C5B65_var), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(auto211C5B65_var, "DifficultyModifierBoss", auto211C5B65_var, gv_zombieBuffAmount);
                    if ((gv_chapter1 == true)) {
                        UnitGroupAdd(gv_MissionT1s, auto211C5B65_var);
                    }
                }
                else {
                    UnitBehaviorAdd(auto211C5B65_var, "DifficultyModifier", auto211C5B65_var, gv_zombieBuffAmount);
                }
            }
            else {
                if ((UnitTypeTestAttribute(UnitGetType(auto211C5B65_var), c_unitAttributeMassive) == true)) {
                    if ((gv_chapter1 == true)) {
                        UnitGroupAdd(gv_MissionT1s, auto211C5B65_var);
                    }
                }

            }
        }
    }
}

void gf_Chapter1Defend () {
    // Automatic Variable Declarations
    // Implementation
    gf_SkipActionsIfGameOver();
    gf_SwitchSolarToHigh();
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOn();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/D785C5AF"), StringExternal("Param/Value/B03A246A"), 7.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/BF666E88"), 0, true);
    Wait(7.0, c_timeGame);
    GameSetLighting("UACDay", 0.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOff();
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/8A97583A"));
    Wait(6.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/67EF49FE"));
    Wait(5.0, c_timeGame);
    if ((gv_missionAutostart == true)) {
        gf_KillIntrudingT1s();
    }
}

trigger auto_gf_KillIntrudingT1s_Trigger = null;

void gf_KillIntrudingT1s () {
    if (auto_gf_KillIntrudingT1s_Trigger == null) {
        auto_gf_KillIntrudingT1s_Trigger = TriggerCreate("auto_gf_KillIntrudingT1s_TriggerFunc");
    }

    TriggerExecute(auto_gf_KillIntrudingT1s_Trigger, false, false);
}

bool auto_gf_KillIntrudingT1s_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB4F0E90A_val;
    int auto15FEF8C8_n;
    int auto15FEF8C8_i;
    unitgroup autoF9BF9D09_g;
    int autoF9BF9D09_u;
    unit autoF9BF9D09_var;

    // Implementation
    gf_SkipActionsIfGameOver();
    gv_tCPSpawns[1] = RegionFromId(235);
    gv_chapter1 = true;
    Wait(20.0, c_timeGame);
    autoB4F0E90A_val = gv_gamemode;
    if (autoB4F0E90A_val == 1) {
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gourmand", 1);
    }
    else if (autoB4F0E90A_val == 2) {
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gargantuan", 1);
    }
    else if (autoB4F0E90A_val == 3) {
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gargantuan", 1);
        gf_BalaadSpawns(0, "Metasis", 1);
    }
    else if (autoB4F0E90A_val == 4) {
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gargantuan", 1);
        gf_BalaadSpawns(0, "Gargantuan", 1);
        gf_BalaadSpawns(0, "Metasis", 1);
        if ((gv_averageXP > 200000)) {
            gf_BalaadSpawns(0, "Metasis", 1);
            gf_MissionText(StringExternal("Param/Value/883BE596"));
        }
    }
    else if (autoB4F0E90A_val == 5) {
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gourmand", 1);
        gf_BalaadSpawns(0, "Gargantuan", 1);
        gf_BalaadSpawns(0, "Gargantuan", 1);
        gf_BalaadSpawns(0, "Metasis", 1);
        gf_BalaadSpawns(0, "Metasis", 1);
        if ((gv_averageXP > 300000)) {
            gf_BalaadSpawns(0, "Gourmand", 1);
            gf_BalaadSpawns(0, "Gargantuan", 1);
            gf_MissionText(StringExternal("Param/Value/736C2EA3"));
        }
    }
    else {
    }
    gf_StartSpawnLoop(1, gv_loopType);
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/2EE6462F"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/6A4F79EE"));
    TimerStart(gv_missiontimer, gv_c0T1Duration, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/41A140BF"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    auto15FEF8C8_n = FixedToInt((gv_c0KillT1Duration / gv_c0T1Interval));
    for (auto15FEF8C8_i = 1; auto15FEF8C8_i <= auto15FEF8C8_n; auto15FEF8C8_i += 1) {
        autoF9BF9D09_g = gv_MissionT1s;
        autoF9BF9D09_u = UnitGroupCount(autoF9BF9D09_g, c_unitCountAll);
        for (;; autoF9BF9D09_u -= 1) {
            autoF9BF9D09_var = UnitGroupUnitFromEnd(autoF9BF9D09_g, autoF9BF9D09_u);
            if (autoF9BF9D09_var == null) { break; }
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(autoF9BF9D09_var), ColorWithAlpha(100.00, 0.00, 0.00, 49.02), gv_pingRate, 270.0);
            PingSetUnit(PingLastCreated(), autoF9BF9D09_var);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D9159E46"));
        }
        if ((UnitGroupCount(gv_MissionT1s, c_unitCountAlive) == 0)) {
            break;
        }
        Wait(gv_c0T1Interval, c_timeGame);
    }
    if ((UnitGroupCount(gv_MissionT1s, c_unitCountAlive) == 0)) {
        gf_UpdateMissionCompletionTracker(true);
        gf_MissionText(StringExternal("Param/Value/E3966D17"));
        gf_SucceedMission(100, StringExternal("Param/Value/8AA38DF6"), -1, false);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    }
    else {
        gf_UpdateMissionCompletionTracker(false);
        gf_MissionText(StringExternal("Param/Value/11FC032E"));
        gf_FailMission(75, StringExternal("Param/Value/6E8264C1"), 1);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        gf_IntrudingT1sPenaltySpawn();
    }
    if ((UnitGroupCount(gv_bunkerSoldiers, c_unitCountAlive) >= 1)) {
        gf_MissionText(StringExternal("Param/Value/D36B3C08"));
        gf_BunkerSoldiersOrder();
    }

    if ((gv_missionAutostart == true)) {
        gf_EscortCivilians();
    }
    return true;
}

void gf_IntrudingT1sPenaltySpawn () {
    // Automatic Variable Declarations
    // Implementation
    gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(1, "ZombieImpaler", 5);
        gf_SpawnUndead(RandomInt(1, 3), "Spitter", 7);
        gf_SpawnUndead(gv_spawnCount, "Risen", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
    }
    else {
        gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    }
    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(RandomInt(1, 3), "Spitter", 9);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    }
    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead(gv_spawnCount, "Glutton", 6);
        gf_SpawnUndead(1, "Gourmand", 1);
    }
}

void gf_BunkerSoldiersOrder () {
    // Automatic Variable Declarations
    unitgroup autoB4155357_g;
    int autoB4155357_u;
    unit autoB4155357_var;

    // Implementation
    UnitGroupIssueOrder(gv_bunkerGroup, Order(AbilityCommand("BunkerTransport", 1)), c_orderQueueReplace);
    Wait(3.0, c_timeReal);
    UnitGroupIssueOrder(gv_bunkerSoldiers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1788)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_bunkerSoldiers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1786)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_bunkerSoldiers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1777)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_bunkerSoldiers, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1778)), c_orderQueueAddToEnd);
    autoB4155357_g = gv_bunkerSoldiers;
    autoB4155357_u = UnitGroupCount(autoB4155357_g, c_unitCountAll);
    for (;; autoB4155357_u -= 1) {
        autoB4155357_var = UnitGroupUnitFromEnd(autoB4155357_g, autoB4155357_u);
        if (autoB4155357_var == null) { break; }
        UnitIssueOrder(autoB4155357_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(25))), c_orderQueueAddToEnd);
        Wait(0.05, c_timeGame);
    }
}

void gf_EscortCivilians () {
    // Variable Declarations
    int lv_i;
    int lv_z;

    // Automatic Variable Declarations
    unitgroup auto79AF54E2_g;
    int auto79AF54E2_u;
    unit auto79AF54E2_var;
    unitgroup autoCF78F83B_g;
    int autoCF78F83B_u;
    unit autoCF78F83B_var;
    int auto163503F6_n;
    int auto163503F6_i;
    int auto5F2E920D_n;
    int auto5F2E920D_i;
    int auto4ACA0033_n;
    int auto4ACA0033_i;
    const int auto769765E2_n = 2;
    int auto769765E2_i;
    int autoAE6AA820_n;
    int autoAE6AA820_i;
    const int autoE5E27D51_n = 2;
    int autoE5E27D51_i;
    int autoAC0B865F_n;
    int autoAC0B865F_i;
    unitgroup autoE9AF206A_g;
    int autoE9AF206A_u;
    unit autoE9AF206A_var;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    gv_findsurvivorchat1[1] = StringExternal("Param/Value/8DFA2A62");
    gv_findsurvivorchat1[2] = StringExternal("Param/Value/0008FBBB");
    gv_findsurvivorchat1[3] = StringExternal("Param/Value/70CE32BF");
    gv_findsurvivorchat1[4] = StringExternal("Param/Value/31D10823");
    gv_findsurvivorchat1[5] = StringExternal("Param/Value/DB6655B6");
    gv_findsurvivorchat2[1] = StringExternal("Param/Value/AC302612");
    gv_findsurvivorchat2[2] = StringExternal("Param/Value/5C83EACD");
    gv_findsurvivorchat2[3] = StringExternal("Param/Value/E364A3E2");
    gv_findsurvivorchat2[4] = StringExternal("Param/Value/CBB3AED1");
    gv_findsurvivorchat2[5] = StringExternal("Param/Value/9D9E7E25");
    Wait(RandomInt(20, 30), c_timeGame);
    gf_MissionText(StringExternal("Param/Value/A5E117AC"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/4451DCC0"));
    Wait(5.0, c_timeGame);
    auto79AF54E2_g = UnitGroup("Civilian", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto79AF54E2_u = UnitGroupCount(auto79AF54E2_g, c_unitCountAll);
    for (;; auto79AF54E2_u -= 1) {
        auto79AF54E2_var = UnitGroupUnitFromEnd(auto79AF54E2_g, auto79AF54E2_u);
        if (auto79AF54E2_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto79AF54E2_var, RegionFromId(24)) == false)) {
            UnitGroupAdd(gv_escortCivilians, auto79AF54E2_var);
            libNtve_gf_MakeUnitInvulnerable(auto79AF54E2_var, true);
        }

    }
    autoCF78F83B_g = UnitGroup("CivilianFemale", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCF78F83B_u = UnitGroupCount(autoCF78F83B_g, c_unitCountAll);
    for (;; autoCF78F83B_u -= 1) {
        autoCF78F83B_var = UnitGroupUnitFromEnd(autoCF78F83B_g, autoCF78F83B_u);
        if (autoCF78F83B_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoCF78F83B_var, RegionFromId(24)) == false)) {
            UnitGroupAdd(gv_escortCivilians, autoCF78F83B_var);
            libNtve_gf_MakeUnitInvulnerable(autoCF78F83B_var, true);
        }

    }

    auto163503F6_n = RandomInt(2, 3);
    for (auto163503F6_i = 1; auto163503F6_i <= auto163503F6_n; auto163503F6_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_RandomCivilianType(), 0, 0, PointFromId(2040590794));
        UnitGroupAdd(gv_escortCivilians, UnitLastCreated());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    }

    auto5F2E920D_n = RandomInt(2, 3);
    for (auto5F2E920D_i = 1; auto5F2E920D_i <= auto5F2E920D_n; auto5F2E920D_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_RandomCivilianType(), 0, 0, PointFromId(2098675460));
        UnitGroupAdd(gv_escortCivilians, UnitLastCreated());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    }

    auto4ACA0033_n = RandomInt(2, 3);
    for (auto4ACA0033_i = 1; auto4ACA0033_i <= auto4ACA0033_n; auto4ACA0033_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_RandomCivilianType(), 0, 0, PointFromId(2010091246));
        UnitGroupAdd(gv_escortCivilians, UnitLastCreated());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    }

    for (auto769765E2_i = 1; auto769765E2_i <= auto769765E2_n; auto769765E2_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_RandomCivilianType(), 0, 0, PointFromId(1979));
        UnitGroupAdd(gv_escortCivilians, UnitLastCreated());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    }

    autoAE6AA820_n = RandomInt(3, 4);
    for (autoAE6AA820_i = 1; autoAE6AA820_i <= autoAE6AA820_n; autoAE6AA820_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_RandomCivilianType(), 0, 0, PointFromId(42637420));
        UnitGroupAdd(gv_escortCivilians, UnitLastCreated());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_RandomCivilianType(), 0, 0, PointFromId(1993));
    UnitGroupAdd(gv_escortCivilians, UnitLastCreated());
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);

    for (autoE5E27D51_i = 1; autoE5E27D51_i <= autoE5E27D51_n; autoE5E27D51_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_RandomCivilianType(), 0, 0, PointFromId(1928));
        UnitGroupAdd(gv_escortCivilians, UnitLastCreated());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    }

    if ((gv_gamemode >= 4)) {
        autoAC0B865F_n = RandomInt(2, 3);
        for (autoAC0B865F_i = 1; autoAC0B865F_i <= autoAC0B865F_n; autoAC0B865F_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_RandomCivilianType(), 0, 0, PointFromId(824473058));
            UnitGroupAdd(gv_escortCivilians, UnitLastCreated());
            libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        }
    }

    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/9459CD84"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/24A98617"));
    TimerStart(gv_missiontimer, (240.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 5.0)), false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/8B02EB02"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(24)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/91DC6F11"));
    gv_missionping = PingLastCreated();
    TriggerEnable(gt_ContactCivilian, true);
    TriggerEnable(gt_CivilianDies, true);
    TriggerEnable(gt_CivilianEntersThalim, true);
    TriggerEnable(gt_EscortCiviliansTimeEnd, true);
    autoE9AF206A_g = gv_escortCivilians;
    autoE9AF206A_u = UnitGroupCount(autoE9AF206A_g, c_unitCountAll);
    for (;; autoE9AF206A_u -= 1) {
        autoE9AF206A_var = UnitGroupUnitFromEnd(autoE9AF206A_g, autoE9AF206A_u);
        if (autoE9AF206A_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoE9AF206A_var, false);
        gf_MissionItemPingAddItem(autoE9AF206A_var);
        UnitBehaviorAdd(autoE9AF206A_var, "CivilianEscort", autoE9AF206A_var, 1);
    }
    if ((gv_missionAutostart == true)) {
        gf_WanderingSoldier();
    }
}

trigger auto_gf_WanderingSoldier_Trigger = null;

void gf_WanderingSoldier () {
    if (auto_gf_WanderingSoldier_Trigger == null) {
        auto_gf_WanderingSoldier_Trigger = TriggerCreate("auto_gf_WanderingSoldier_TriggerFunc");
    }

    TriggerExecute(auto_gf_WanderingSoldier_Trigger, false, false);
}

bool auto_gf_WanderingSoldier_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gf_SkipActionsIfGameOver();
    Wait(RandomInt(120, 360), c_timeGame);
    gf_MissionText(StringExternal("Param/Value/C9AA2E43"));
    Wait(15.0, c_timeGame);
    ObjectiveSetState(gv_optionalObj, c_objectiveStateActive);
    ObjectiveSetName(gv_optionalObj, StringExternal("Param/Value/D409649A"));
    ObjectiveSetDescription(gv_optionalObj, StringExternal("Param/Value/34C74551"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Spy", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(gv_spawnRegion));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById CamoLightning");
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalSilver");
    gv_rASpy = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_rASpy, true);
    UnitBehaviorAdd(gv_rASpy, "PermanentlyCloaked", gv_rASpy, 1);
    TriggerEnable(gt_SoldierLocated, true);
    while ((TriggerIsEnabled(gt_SoldierLocated) == true) && (gv_gameOver == false)) {
        UnitIssueOrder(gv_rASpy, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
        Wait(14.0, c_timeReal);
    }
    return true;
}

trigger auto_gf_EscortLabAssistant_Trigger = null;

void gf_EscortLabAssistant () {
    if (auto_gf_EscortLabAssistant_Trigger == null) {
        auto_gf_EscortLabAssistant_Trigger = TriggerCreate("auto_gf_EscortLabAssistant_TriggerFunc");
    }

    TriggerExecute(auto_gf_EscortLabAssistant_Trigger, false, false);
}

bool auto_gf_EscortLabAssistant_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomSites;
    int lv_loopint;
    int lv_integer;
    bool[9] lv_siloset;
    bool lv_silosallset;
    int lv_count;

    // Automatic Variable Declarations
    playergroup auto99C596DA_g;
    int auto99C596DA_var;
    int autoAC8EEA37_ae;
    const int autoAC8EEA37_ai = 1;
    const int auto5A1B8154_ae = 8;
    const int auto5A1B8154_ai = 1;
    int auto226F38A3_val;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    Wait(RandomInt(30, 40), c_timeGame);
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/41BBCB54"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/38BDBE5C"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/FAE401B1"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DrRosen", 0, 0, RegionGetCenter(RegionFromId(179)));
    gv_drMorrow = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_drMorrow, true);
    UnitBehaviorAdd(gv_drMorrow, "KevlarBodyArmor", gv_drMorrow, 1);
    UnitGroupAdd(gv_dr, gv_drMorrow);
    UnitGroupAdd(gv_undeadTargetGroup, gv_drMorrow);
    libNtve_gf_PauseUnit(gv_drMorrow, true);
    lv_randomSites = RandomInt(1, 4);
    if ((lv_randomSites == 1)) {
        gv_silos[3] = RegionFromId(214);
        gv_silos[1] = RegionFromId(213);
        gv_silos[2] = RegionFromId(216);
        gv_silos[4] = RegionFromId(212);
        gv_silos[5] = RegionFromId(218);
        gv_silos[6] = RegionFromId(215);
        gv_silos[7] = RegionFromId(217);
        gv_silos[8] = RegionFromId(37);
    }
    else if ((lv_randomSites == 2)) {
        gv_silos[2] = RegionFromId(215);
        gv_silos[1] = RegionFromId(217);
        gv_silos[3] = RegionFromId(214);
        gv_silos[4] = RegionFromId(212);
        gv_silos[5] = RegionFromId(213);
        gv_silos[6] = RegionFromId(216);
        gv_silos[7] = RegionFromId(218);
        gv_silos[8] = RegionFromId(37);
    }
    else if ((lv_randomSites == 3)) {
        gv_silos[3] = RegionFromId(214);
        gv_silos[1] = RegionFromId(212);
        gv_silos[2] = RegionFromId(217);
        gv_silos[4] = RegionFromId(215);
        gv_silos[5] = RegionFromId(216);
        gv_silos[6] = RegionFromId(218);
        gv_silos[7] = RegionFromId(213);
        gv_silos[8] = RegionFromId(37);
    }
    else if ((lv_randomSites == 4)) {
        gv_silos[4] = RegionFromId(215);
        gv_silos[1] = RegionFromId(216);
        gv_silos[2] = RegionFromId(214);
        gv_silos[3] = RegionFromId(213);
        gv_silos[5] = RegionFromId(218);
        gv_silos[6] = RegionFromId(217);
        gv_silos[7] = RegionFromId(212);
        gv_silos[8] = RegionFromId(37);
    }
    if ((gv_gamemode == 1)) {
        gv_silocount = 4;
    }
    else if ((gv_gamemode == 2)) {
        gv_silocount = 5;
    }
    else if ((gv_gamemode == 3)) {
        gv_silocount = 6;
    }
    else if ((gv_gamemode == 4)) {
        gv_silocount = 7;
    }
    else if ((gv_gamemode == 5)) {
        gv_silocount = 8;
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_drMorrow), ColorWithAlpha(100.00, 50.20, 0.00, 49.02), 0.0, 270.0);
    gv_missionping = PingLastCreated();
    PingSetTooltip(gv_missionping, StringExternal("Param/Value/B4E471DC"));
    PingSetScale(PingLastCreated(), 0.75);
    PingSetUnit(gv_missionping, gv_drMorrow);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/DD42F24B"));
    TriggerEnable(gt_MeetLabAssistant, true);
    while ((TriggerIsEnabled(gt_MeetLabAssistant) == true) && (lv_count < 65)) {
        lv_count += 1;
        Wait(1.0, c_timeGame);
    }
    gf_MissionText(StringExternal("Param/Value/9139C535"));
    TriggerEnable(gt_MeetLabAssistant, false);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/DE3378CE"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/26D8455C"));
    auto99C596DA_g = gv_players;
    auto99C596DA_var = -1;
    while (true) {
        auto99C596DA_var = PlayerGroupNextPlayer(auto99C596DA_g, auto99C596DA_var);
        if (auto99C596DA_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(gv_drMorrow, true, auto99C596DA_var);
    }
    autoAC8EEA37_ae = gv_silocount;
    lv_loopint = 1;
    for ( ; ( (autoAC8EEA37_ai >= 0 && lv_loopint <= autoAC8EEA37_ae) || (autoAC8EEA37_ai < 0 && lv_loopint >= autoAC8EEA37_ae) ) ; lv_loopint += autoAC8EEA37_ai ) {
        lv_integer = 1;
        for ( ; ( (auto5A1B8154_ai >= 0 && lv_integer <= auto5A1B8154_ae) || (auto5A1B8154_ai < 0 && lv_integer >= auto5A1B8154_ae) ) ; lv_integer += auto5A1B8154_ai ) {
            if ((gv_silonext[lv_loopint] == null)) {
                if ((lv_siloset[lv_integer] == false)) {
                    gv_silonext[lv_loopint] = gv_silos[lv_integer];
                    lv_siloset[lv_integer] = true;
                    break;
                }
            }
        }
    }
    libNtve_gf_PauseUnit(gv_drMorrow, false);
    libNtve_gf_MakeUnitInvulnerable(gv_drMorrow, false);
    TriggerEnable(gt_LabAssistantSiteLoop, true);
    TriggerEnable(gt_LabAssistantDies, true);
    Wait(45.0, c_timeGame);
    auto226F38A3_val = gv_gamemode;
    if (auto226F38A3_val == 1) {
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(6, "Glutton", 1);
    }
    else if (auto226F38A3_val == 2) {
        gf_SpawnUndead(1, "Cursed", 2);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(1, "Bruchus", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        Wait(40.0, c_timeGame);
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
    }
    else if (auto226F38A3_val == 3) {
        gf_SpawnUndead(1, "Cursed", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Bruchus", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(1, "Dilophosaur", 3);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        Wait(35.0, c_timeGame);
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
    }
    else if (auto226F38A3_val == 4) {
        gf_SpawnUndead(2, "Cursed", 1);
        gf_SpawnUndead(1, "Horror", 2);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(2, "Bruchus", 1);
        gf_SpawnUndead(2, "Lacerti", 1);
        gf_SpawnUndead(1, "Dilophosaur", 2);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(30.0, c_timeGame);
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
    }
    else if (auto226F38A3_val == 5) {
        gf_SpawnUndead(3, "Cursed", 1);
        gf_SpawnUndead(1, "Horror", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        Wait(40.0, c_timeGame);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(40.0, c_timeGame);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(3, "Bruchus", 1);
        gf_SpawnUndead(2, "Lacerti", 1);
        gf_SpawnUndead(1, "Dilophosaur", 1);
        gf_SpawnUndead(1, "Minerva", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(40.0, c_timeGame);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(40.0, c_timeGame);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(40.0, c_timeGame);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        Wait(45.0, c_timeGame);
        gf_SpawnUndead(1, "Gargantuan", 1);
        gf_SpawnUndead(1, "Gargantuan", 1);
        gf_SpawnUndead(1, "Gargantuan", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        Wait(40.0, c_timeGame);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }
    else {
    }
    return true;
}

trigger auto_gf_EscortReinforcements_Trigger = null;

void gf_EscortReinforcements () {
    if (auto_gf_EscortReinforcements_Trigger == null) {
        auto_gf_EscortReinforcements_Trigger = TriggerCreate("auto_gf_EscortReinforcements_TriggerFunc");
    }

    TriggerExecute(auto_gf_EscortReinforcements_Trigger, false, false);
}

bool auto_gf_EscortReinforcements_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoA57675A6_ae = 5;
    const int autoA57675A6_ai = 1;
    playergroup auto68ECEE4D_g;
    int auto68ECEE4D_var;
    const int auto233C0BB2_ae = 2;
    const int auto233C0BB2_ai = 1;
    const int auto97749AEB_ae = 3;
    const int auto97749AEB_ai = 1;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    Wait(30.0, c_timeGame);
    TriggerEnable(gt_EscortReinforcementsEnd, true);
    gf_MissionText(StringExternal("Param/Value/CCC1E4FC"));
    gv_convoyset = RandomInt(1, 3);
    if ((gv_convoyset == 1)) {
        gv_convoystartend[1][1] = RegionFromId(17);
        gv_convoyroutes[1][1] = PointFromId(1776);
        gv_convoyroutes[1][2] = PointFromId(1777);
        gv_convoyroutes[1][3] = PointFromId(1778);
        gv_convoyroutes[1][4] = PointFromId(1779);
        gv_convoyroutes[1][5] = PointFromId(1780);
        gv_convoyroutes[1][6] = PointFromId(1781);
        gv_convoyroutes[1][7] = PointFromId(1782);
        gv_convoyroutes[1][8] = PointFromId(1783);
        gv_convoyroutes[1][9] = PointFromId(1784);
        gv_convoystartend[1][2] = RegionFromId(18);
        gv_convoymax = 9;
    }
    else if ((gv_convoyset == 2)) {
        gv_convoystartend[2][1] = RegionFromId(41);
        gv_convoyroutes[2][1] = PointFromId(1785);
        gv_convoyroutes[2][2] = PointFromId(1786);
        gv_convoyroutes[2][3] = PointFromId(1787);
        gv_convoyroutes[2][4] = PointFromId(1788);
        gv_convoyroutes[2][5] = PointFromId(1789);
        gv_convoyroutes[2][6] = PointFromId(1790);
        gv_convoyroutes[2][7] = PointFromId(1791);
        gv_convoyroutes[2][8] = PointFromId(1792);
        gv_convoyroutes[2][9] = PointFromId(1782);
        gv_convoyroutes[2][10] = PointFromId(1783);
        gv_convoyroutes[2][11] = PointFromId(1784);
        gv_convoystartend[2][2] = RegionFromId(18);
        gv_convoymax = 11;
    }
    else if ((gv_convoyset == 3)) {
        gv_convoystartend[3][1] = RegionFromId(19);
        gv_convoyroutes[3][1] = PointFromId(1793);
        gv_convoyroutes[3][2] = PointFromId(1788);
        gv_convoyroutes[3][3] = PointFromId(1789);
        gv_convoyroutes[3][4] = PointFromId(1790);
        gv_convoyroutes[3][5] = PointFromId(1791);
        gv_convoyroutes[3][6] = PointFromId(1792);
        gv_convoyroutes[3][7] = PointFromId(1782);
        gv_convoyroutes[3][8] = PointFromId(1783);
        gv_convoyroutes[3][9] = PointFromId(1784);
        gv_convoystartend[3][2] = RegionFromId(18);
        gv_convoymax = 9;
    }
    Wait(15.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_convoystartend[gv_convoyset][1]), ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 15.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/342F3AA6"));
    Wait(20.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/2596417C"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/0D4BD5BC"));
    TriggerEnable(gt_ReinforcementVehicleDies, true);
    gv_pauseSpawning = true;
    lv_i = 1;
    for ( ; ( (autoA57675A6_ai >= 0 && lv_i <= autoA57675A6_ae) || (autoA57675A6_ai < 0 && lv_i >= autoA57675A6_ae) ) ; lv_i += autoA57675A6_ai ) {
        if ((lv_i == 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "LAV25Recon", c_unitCreateIgnorePlacement, 13, RegionGetCenter(gv_convoystartend[gv_convoyset][1]), gv_convoyroutes[gv_convoyset][1]);
            UnitBehaviorAdd(UnitLastCreated(), "LAV25ConvoySpeed", UnitLastCreated(), 1);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_convoystartend[gv_convoyset][1]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
            PingSetUnit(PingLastCreated(), UnitLastCreated());
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A2020B06"));
            gv_missionping = PingLastCreated();
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "LMTV", c_unitCreateIgnorePlacement, 13, RegionGetCenter(gv_convoystartend[gv_convoyset][1]), gv_convoyroutes[gv_convoyset][1]);
        }
        auto68ECEE4D_g = gv_players;
        auto68ECEE4D_var = -1;
        while (true) {
            auto68ECEE4D_var = PlayerGroupNextPlayer(auto68ECEE4D_g, auto68ECEE4D_var);
            if (auto68ECEE4D_var < 0) { break; }
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, auto68ECEE4D_var);
        }
        UnitGroupAdd(gv_convoy, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
        if (((lv_i == 1) || (lv_i == 2))) {
            libNtve_gf_UnitCreateFacingPoint(1, "InfantryAutomaticRifleman", c_unitCreateIgnorePlacement, 13, gv_convoyroutes[gv_convoyset][1], gv_convoyroutes[gv_convoyset][1]);
            if ((RandomInt(0, 2) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "M41SAW", UnitLastCreated(), 1);
            }
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "InfantryRifleman", c_unitCreateIgnorePlacement, 13, gv_convoyroutes[gv_convoyset][1], gv_convoyroutes[gv_convoyset][1]);
            UnitBehaviorAdd(UnitLastCreated(), "BurstFire", UnitLastCreated(), 1);
            if ((RandomInt(0, 2) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "StynerSPR", UnitLastCreated(), 1);
            }
        }
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        if ((lv_i < 5)) {
            Wait(10.0, c_timeGame);
        }
        else {
            Wait(5.0, c_timeGame);
        }
        TriggerExecute(gt_EscortReinforcmentsLoop, true, false);
    }
    gv_convoy_Set = true;
    TriggerEnable(gt_EscortReinforcmentsLoop, true);
    lv_i = 1;
    for ( ; ( (auto233C0BB2_ai >= 0 && lv_i <= auto233C0BB2_ae) || (auto233C0BB2_ai < 0 && lv_i >= auto233C0BB2_ae) ) ; lv_i += auto233C0BB2_ai ) {
        if ((lv_i == 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Infantry68WCombatMedic", c_unitCreateIgnorePlacement, 13, gv_convoyroutes[gv_convoyset][1], gv_convoyroutes[gv_convoyset][1]);
            if ((RandomInt(0, 2) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "HK42", UnitLastCreated(), 1);
            }
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "InfantryRifleman", c_unitCreateIgnorePlacement, 13, gv_convoyroutes[gv_convoyset][1], gv_convoyroutes[gv_convoyset][1]);
            if ((RandomInt(0, 2) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "BurstFire", UnitLastCreated(), 1);
            }
        }
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        Wait(0.1, c_timeGame);
    }
    lv_i = 1;
    for ( ; ( (auto97749AEB_ai >= 0 && lv_i <= auto97749AEB_ae) || (auto97749AEB_ai < 0 && lv_i >= auto97749AEB_ae) ) ; lv_i += auto97749AEB_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "InfantryRifleman", c_unitCreateIgnorePlacement, 13, gv_convoyroutes[gv_convoyset][1], gv_convoyroutes[gv_convoyset][1]);
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "BurstFire", UnitLastCreated(), 1);
        }
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        Wait(0.1, c_timeGame);
    }
    TriggerEnable(gt_ReinforcementsLeave, true);
    gv_pauseSpawning = false;
    Wait(RandomFixed(30.0, 45.0), c_timeGame);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Boomer", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Cursed", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    Wait(15.0, c_timeGame);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(1, "Arachnathid", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
    }
    Wait(RandomFixed(15.0, 20.0), c_timeGame);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(1, "Horror", 1);
        gf_SpawnUndead(2, "ZombieWraith", 1);
        gf_SpawnUndead(1, "Gargantuan", 1);
    }
    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        gf_SpawnUndead(3, "Leaper", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
    }
    Wait(RandomFixed(15.0, 20.0), c_timeGame);
    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(1, "Gargantuan", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(5, "Cursed", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(2, "AcidVore", 2);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
    }
    return true;
}

trigger auto_gf_ProtectAH25Hunters_Trigger = null;

void gf_ProtectAH25Hunters () {
    if (auto_gf_ProtectAH25Hunters_Trigger == null) {
        auto_gf_ProtectAH25Hunters_Trigger = TriggerCreate("auto_gf_ProtectAH25Hunters_TriggerFunc");
    }

    TriggerExecute(auto_gf_ProtectAH25Hunters_Trigger, false, false);
}

bool auto_gf_ProtectAH25Hunters_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randombaysselected;
    int lv_int;
    int lv_helilandpoint;
    bool[7] lv_bayused;
    region lv_dropArea1;
    region lv_dropArea2;
    actor lv_mark;
    unit lv_droppod;

    // Automatic Variable Declarations
    const int auto50399EF9_ae = 6;
    const int auto50399EF9_ai = 1;
    playergroup auto2A88E8A1_g;
    int auto2A88E8A1_var;
    unitgroup autoBA5F9109_g;
    int autoBA5F9109_u;
    unit autoBA5F9109_var;
    unitgroup autoEDEEB2C5_g;
    int autoEDEEB2C5_u;
    unit autoEDEEB2C5_var;
    unitgroup auto23864660_g;
    int auto23864660_u;
    unit auto23864660_var;
    playergroup autoD25C2A16_g;
    int autoD25C2A16_var;
    unitgroup auto3F14B345_g;
    int auto3F14B345_u;
    unit auto3F14B345_var;
    const int auto67DF7E0B_ae = 3;
    const int auto67DF7E0B_ai = 1;
    const int autoCDE30CD1_ae = 6;
    const int autoCDE30CD1_ai = 1;

    // Variable Initialization
    lv_dropArea1 = RegionFromId(15);
    lv_dropArea2 = RegionFromId(16);

    // Implementation
    gf_SkipActionsIfGameOver();
    gv_aORegions[1] = RegionFromId(67);
    gv_aORegions[2] = RegionFromId(70);
    gv_aORegions[3] = RegionFromId(71);
    gv_aORegions[4] = RegionFromId(72);
    gv_aORegions[5] = RegionFromId(68);
    gv_aORegions[6] = RegionFromId(69);
    Wait(30.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/2DB454D0"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/E5B149BA"));
    Wait(9.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/68508703"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/5BDF3AF7"));
    TriggerEnable(gt_HelicopterKilled, true);
    TriggerSendEvent("H Spawns");
    while ((lv_randombaysselected != 2)) {
        lv_helilandpoint = RandomInt(1, 6);
        lv_int = 1;
        for ( ; ( (auto50399EF9_ai >= 0 && lv_int <= auto50399EF9_ae) || (auto50399EF9_ai < 0 && lv_int >= auto50399EF9_ae) ) ; lv_int += auto50399EF9_ai ) {
            if ((lv_int == lv_helilandpoint) && (lv_bayused[lv_int] == false)) {
                lv_randombaysselected += 1;
                UnitCreate(1, "AH25Hunter", 0, 0, RegionGetCenter(RegionFromId(54)), 0.0);
                UnitAbilityEnable(UnitLastCreated(), "HurricaneMissiles", false);
                UnitAbilityEnable(UnitLastCreated(), "HurricaneMissilesHero", false);
                UnitBehaviorRemove(UnitLastCreated(), "HurricaneAI", 1);
                UnitSetInfoText(UnitLastCreated(), StringToText(""), StringExternal("Param/Value/D5EA1898"), StringToText(""));
                UnitBehaviorAdd(UnitLastCreated(), "Invulnerable", UnitLastCreated(), 1);
                if ((lv_randombaysselected == 1)) {
                    gv_uSHeliUnit[1] = UnitLastCreated();
                }
                else {
                    gv_uSHeliUnit[2] = UnitLastCreated();
                }
                UnitGroupAdd(gv_uSHelis, UnitLastCreated());
                UnitSetHeight(UnitLastCreated(), 7.0, 0.0);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
                PingSetUnit(PingLastCreated(), UnitLastCreated());
                PingSetTooltip(PingLastCreated(), UnitGetName(UnitLastCreated()));
                PingSetScale(PingLastCreated(), 0.75);
                if ((lv_randombaysselected == 1)) {
                    gv_highlanderpings[1] = PingLastCreated();
                }
                else {
                    gv_highlanderpings[2] = PingLastCreated();
                }
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_aORegions[lv_int])), c_orderQueueReplace);
                lv_bayused[lv_int] = true;
            }
            Wait(0.1, c_timeGame);
        }
    }
    auto2A88E8A1_g = gv_players;
    auto2A88E8A1_var = -1;
    while (true) {
        auto2A88E8A1_var = PlayerGroupNextPlayer(auto2A88E8A1_g, auto2A88E8A1_var);
        if (auto2A88E8A1_var < 0) { break; }
        autoBA5F9109_g = gv_uSHelis;
        autoBA5F9109_u = UnitGroupCount(autoBA5F9109_g, c_unitCountAll);
        for (;; autoBA5F9109_u -= 1) {
            autoBA5F9109_var = UnitGroupUnitFromEnd(autoBA5F9109_g, autoBA5F9109_u);
            if (autoBA5F9109_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(autoBA5F9109_var, true, auto2A88E8A1_var);
        }
    }
    Wait(40.0, c_timeGame);
    UnitSetFacing(gv_uSHeliUnit[1], libNtve_gf_RandomAngle(), 1.0);
    UnitSetFacing(gv_uSHeliUnit[2], libNtve_gf_RandomAngle(), 1.0);
    autoEDEEB2C5_g = gv_uSHelis;
    autoEDEEB2C5_u = UnitGroupCount(autoEDEEB2C5_g, c_unitCountAll);
    for (;; autoEDEEB2C5_u -= 1) {
        autoEDEEB2C5_var = UnitGroupUnitFromEnd(autoEDEEB2C5_g, autoEDEEB2C5_u);
        if (autoEDEEB2C5_var == null) { break; }
        UnitSetHeight(autoEDEEB2C5_var, 0.7, 3.0);
    }
    Wait(4.0, c_timeGame);
    auto23864660_g = gv_uSHelis;
    auto23864660_u = UnitGroupCount(auto23864660_g, c_unitCountAll);
    for (;; auto23864660_u -= 1) {
        auto23864660_var = UnitGroupUnitFromEnd(auto23864660_g, auto23864660_u);
        if (auto23864660_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto23864660_var), "SoundSetMuted 1 0");
        ActorSend(libNtve_gf_MainActorofUnit(auto23864660_var), "AnimSetPausedAll");
        ActorSend(libNtve_gf_MainActorofUnit(auto23864660_var), "SoundSetPaused 1 0");
        UnitBehaviorAdd(auto23864660_var, "Unpowered2", auto23864660_var, 1);
        UnitBehaviorRemove(auto23864660_var, "Invulnerable", 1);
    }
    Wait(2.0, c_timeGame);
    autoD25C2A16_g = gv_players;
    autoD25C2A16_var = -1;
    while (true) {
        autoD25C2A16_var = PlayerGroupNextPlayer(autoD25C2A16_g, autoD25C2A16_var);
        if (autoD25C2A16_var < 0) { break; }
        auto3F14B345_g = gv_uSHelis;
        auto3F14B345_u = UnitGroupCount(auto3F14B345_g, c_unitCountAll);
        for (;; auto3F14B345_u -= 1) {
            auto3F14B345_var = UnitGroupUnitFromEnd(auto3F14B345_g, auto3F14B345_u);
            if (auto3F14B345_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(auto3F14B345_var, false, autoD25C2A16_var);
        }
    }
    if ((RandomInt(0, 1) == 1)) {
        gv_sensorLZ = lv_dropArea1;
    }
    else {
        gv_sensorLZ = lv_dropArea2;
    }
    TimerStart(gv_missiontimer, 210.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/187BB444"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    Wait(210.0, c_timeGame);
    if ((TriggerIsEnabled(gt_HelicopterKilled) == false)) {
        return true;
    }
    gf_MissionText(StringExternal("Param/Value/D6D67C27"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_sensorLZ), ColorWithAlpha(100.00, 50.20, 0.00, 49.02), 0.0, 270.0);
    gv_sensorpings[0] = PingLastCreated();
    PingSetTooltip(gv_sensorpings[0], StringExternal("Param/Value/4C662AF1"));
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/C49ED613"));
    TimerStart(gv_missiontimer, 180.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/5C58C273"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_PickUpFuelContainers, true);
    TriggerEnable(gt_HelicopterEnd, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, RegionGetCenter(gv_sensorLZ));
    lv_droppod = UnitLastCreated();
    UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
    Wait(5.0, c_timeGame);
    UnitKill(lv_droppod);
    if ((UnitGroupCount(gv_uSHelis, c_unitCountAlive) == 2)) {
        lv_int = 1;
        for ( ; ( (autoCDE30CD1_ai >= 0 && lv_int <= autoCDE30CD1_ae) || (autoCDE30CD1_ai < 0 && lv_int >= autoCDE30CD1_ae) ) ; lv_int += autoCDE30CD1_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FuelContainer", 0, 0, RegionGetCenter(gv_sensorLZ));
            gv_sentryGuns[lv_int] = UnitLastCreated();
            libNtve_gf_MakeUnitInvulnerable(gv_sentryGuns[lv_int], true);
            gf_MissionItemPingAddItem(UnitLastCreated());
        }
    }
    else {
        lv_int = 1;
        for ( ; ( (auto67DF7E0B_ai >= 0 && lv_int <= auto67DF7E0B_ae) || (auto67DF7E0B_ai < 0 && lv_int >= auto67DF7E0B_ae) ) ; lv_int += auto67DF7E0B_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FuelContainer", 0, 0, RegionGetCenter(gv_sensorLZ));
            gv_sentryGuns[lv_int] = UnitLastCreated();
            libNtve_gf_MakeUnitInvulnerable(gv_sentryGuns[lv_int], true);
            gf_MissionItemPingAddItem(UnitLastCreated());
        }
    }
    libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_sensorLZ));
    gv_sensorbeacon = libNtve_gf_ActorLastCreated();
    Wait(2.0, c_timeGame);
    UnitRemove(lv_droppod);
    return true;
}

trigger auto_gf_DeliverFuel_Trigger = null;
unit auto_gf_DeliverFuel_lp_fuel;
int auto_gf_DeliverFuel_lp_bay;

void gf_DeliverFuel (unit lp_fuel, int lp_bay) {
    auto_gf_DeliverFuel_lp_fuel = lp_fuel;
    auto_gf_DeliverFuel_lp_bay = lp_bay;

    if (auto_gf_DeliverFuel_Trigger == null) {
        auto_gf_DeliverFuel_Trigger = TriggerCreate("auto_gf_DeliverFuel_TriggerFunc");
    }

    TriggerExecute(auto_gf_DeliverFuel_Trigger, false, false);
}

bool auto_gf_DeliverFuel_TriggerFunc (bool testConds, bool runActions) {
    unit lp_fuel = auto_gf_DeliverFuel_lp_fuel;
    int lp_bay = auto_gf_DeliverFuel_lp_bay;

    // Variable Declarations
    int lv_int;
    int lv_loopint;

    // Automatic Variable Declarations
    const int auto27DB5A00_ae = 2;
    const int auto27DB5A00_ai = 1;
    unitgroup auto71019615_g;
    int auto71019615_u;
    unit auto71019615_var;
    playergroup auto43F4652F_g;
    int auto43F4652F_var;

    // Variable Initialization

    // Implementation
    UnitRemove(lp_fuel);
    gf_MissionItemPingRemoveItem(lp_fuel);
    gv_fuelAmount[lp_bay] += 1;
    if ((gv_fuelAmount[lp_bay] == 3)) {
        gv_aORegionsSearched[lp_bay] = true;
        lv_int = 1;
        for ( ; ( (auto27DB5A00_ai >= 0 && lv_int <= auto27DB5A00_ae) || (auto27DB5A00_ai < 0 && lv_int >= auto27DB5A00_ae) ) ; lv_int += auto27DB5A00_ai ) {
            auto71019615_g = UnitGroup(UnitGetType(UnitGroupUnit(gv_uSHelis, lv_int)), 0, gv_aORegions[lp_bay], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto71019615_u = UnitGroupCount(auto71019615_g, c_unitCountAll);
            for (;; auto71019615_u -= 1) {
                auto71019615_var = UnitGroupUnitFromEnd(auto71019615_g, auto71019615_u);
                if (auto71019615_var == null) { break; }
                if ((auto71019615_var == gv_uSHeliUnit[lv_int])) {
                    libNtve_gf_MakeUnitInvulnerable(auto71019615_var, true);
                    gf_MissionText(StringExternal("Param/Value/14DE28BA"));
                    PingDestroy(gv_highlanderpings[lv_int]);
                    UnitWeaponRemove(auto71019615_var, "30mmChainGun");
                    auto43F4652F_g = gv_players;
                    auto43F4652F_var = -1;
                    while (true) {
                        auto43F4652F_var = PlayerGroupNextPlayer(auto43F4652F_g, auto43F4652F_var);
                        if (auto43F4652F_var < 0) { break; }
                        libNtve_gf_ShareVisionofUnit(auto71019615_var, true, auto43F4652F_var);
                    }
                    ActorSend(libNtve_gf_MainActorofUnit(auto71019615_var), "SoundSetMuted 0 0");
                    ActorSend(libNtve_gf_MainActorofUnit(auto71019615_var), "AnimSetPausedAll 0");
                    ActorSend(libNtve_gf_MainActorofUnit(auto71019615_var), "SoundSetPaused 0 0");
                    UnitBehaviorAdd(auto71019615_var, "Unpowered", auto71019615_var, 1);
                    UnitBehaviorRemove(auto71019615_var, "Unpowered", 1);
                    Wait(3.0, c_timeGame);
                    gf_MissionText(StringExternal("Param/Value/8D2E4FFA"));
                    UnitSetHeight(auto71019615_var, 20.0, 5.0);
                    Wait(3.0, c_timeGame);
                    ActorSend(libNtve_gf_MainActorofUnit(auto71019615_var), "SetOpacity 0.000000 2.000000 op");
                    Wait(2.0, c_timeGame);
                    libNtve_gf_ShowHideUnit(auto71019615_var, false);
                    UnitGroupRemove(gv_uSHelis, auto71019615_var);
                }
                Wait(0.0625, c_timeGame);
            }
        }
    }
    return true;
}

void gf_Chapter2Courage () {
    // Variable Declarations
    int lv_chance;

    // Automatic Variable Declarations
    int auto8DF02E08_val;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOn();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/679E2CDE"), StringExternal("Param/Value/C896C1E4"), 7.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/8B114B31"), 0, true);
    Wait(7.0, c_timeGame);
    GameSetLighting("UACDay", 0.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOff();
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(8.0, c_timeGame);
    gf_StartSpawnLoop(2, gv_loopType);
    lv_chance = RandomInt(1, 2);
    if ((gv_gamemode == 5)) {
        lv_chance = 3;
    }
    if ((gv_missionAutostart == true)) {
        auto8DF02E08_val = lv_chance;
        if (auto8DF02E08_val == 1) {
            gf_IntoTheDarkness();
        }
        else if (auto8DF02E08_val == 2) {
            gf_MarchOfTheDead();
        }
        else if (auto8DF02E08_val == 3) {
            gf_IntoTheDarkMarch();
        }
        else {
        }
    }
}

void gf_IntoTheDarkness () {
    // Variable Declarations
    int lv_int;
    unit lv_thanatos;

    // Automatic Variable Declarations
    playergroup auto99B8BA22_g;
    int auto99B8BA22_var;

    // Variable Initialization

    // Implementation
    gv_fogevent = true;
    gf_MissionText(StringExternal("Param/Value/EA684B0A"));
    auto99B8BA22_g = gv_players;
    auto99B8BA22_var = -1;
    while (true) {
        auto99B8BA22_var = PlayerGroupNextPlayer(auto99B8BA22_g, auto99B8BA22_var);
        if (auto99B8BA22_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto99B8BA22_var, "CASOnStation", 1);
    }
    Wait(5.0, c_timeGame);
    GameSetLighting("Darkness", 10.0);
    SoundPlay(SoundLink("DarknessFalls", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("THorner04MusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/3869CF53"));
    SoundPlay(SoundLink("HybridF_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/646D3FA3"));
    Wait(9.0, c_timeGame);
    gf_SpawnUndead(3, "Licker", 1);
    gf_SpawnThanatos();
    lv_thanatos = UnitLastCreated();
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/A43A1FC4"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/3E7B70B8"));
    while (!((UnitIsAlive(lv_thanatos) == false) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    SoundPlay(SoundLink("HybridADeath", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(2.0, c_timeGame);
    gf_SucceedMission(75, StringExternal("Param/Value/9B02A6D5"), 0, false);
    gf_UpdateMissionCompletionTracker(true);
    Wait(2.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/ADE64034"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(2.0, c_timeGame);
    GameSetLighting("UACDay", 10.0);
    gv_fogevent = false;
    Wait(20.0, c_timeGame);
    if ((gv_missionAutostart == true) && (RandomInt(0, 1) == 1)) {
        gf_Apiaries();
    }
    else {
        gf_RechargeGenerators();
    }
}

void gf_MarchOfTheDead () {
    // Variable Declarations
    fixed lv_titanLife;
    region lv_titanRadius;
    point lv_tempPoint;
    int lv_titanNext;
    point[5] lv_titanPoints;
    unit lv_titan;
    bool lv_missionFailed;
    int lv_chance;

    // Automatic Variable Declarations
    int autoD67B0453_n;
    int autoD67B0453_i;
    int autoBAE66761_n;
    int autoBAE66761_i;
    int auto571D09E4_n;
    int auto571D09E4_i;
    int auto713719F2_val;

    // Variable Initialization
    lv_chance = RandomInt(1, 3);

    // Implementation
    gf_SkipActionsIfGameOver();
    lv_titanPoints[0] = PointFromId(1788);
    lv_titanPoints[1] = PointFromId(1791);
    lv_titanPoints[2] = PointFromId(1792);
    lv_titanPoints[3] = PointFromId(2320);
    lv_titanPoints[4] = PointFromId(2507);
    SoundPlay(SoundLink("TValerian02BMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringExternal("Param/Value/75D77D6A"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/B45A9B9F"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/270788CA"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/F1A46986"));
    UnitCreate(1, "Terrorzor", 0, 14, RegionRandomPoint(RegionFromId(1)), 0.0);
    UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
    lv_titan = UnitLastCreated();
    gv_Titan = lv_titan;
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(lv_titan), ColorWithAlpha(50.20, 0.00, 100.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4E2045EC"));
    PingSetUnit(PingLastCreated(), lv_titan);
    gv_optionalObjPings[0] = PingLastCreated();
    while ((UnitIsAlive(lv_titan) == true)) {
        if ((RandomInt(0, 4) == 4)) {
            UnitIssueOrder(lv_titan, OrderTargetingPoint(AbilityCommand("move", 0), lv_titanPoints[lv_titanNext]), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lv_titan, OrderTargetingPoint(AbilityCommand("attack", 0), lv_titanPoints[lv_titanNext]), c_orderQueueReplace);
        }
        if ((UnitIsAlive(lv_titan) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_titan), lv_titanPoints[lv_titanNext]) < 8.0)) {
            if ((lv_titanNext == 4)) {
                lv_missionFailed = true;
                lv_titanLife = UnitGetPropertyFixed(lv_titan, c_unitPropLifePercent, c_unitPropCurrent);
                PingDestroy(gv_optionalObjPings[0]);
                UnitRemove(lv_titan);
                ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
                gf_UpdateMissionCompletionTracker(false);
                if ((lv_titanLife <= 10.0)) {
                    gf_MissionText(StringExternal("Param/Value/3C7BA80F"));
                    Wait(5.0, c_timeGame);
                    gf_SucceedMission(10, StringExternal("Param/Value/9FB993AD"), 0, false);
                }
                else if ((lv_titanLife <= 33.0)) {
                    gf_MissionText(StringExternal("Param/Value/18A7A10A"));
                    Wait(5.0, c_timeGame);
                    gf_SucceedMission(10, StringExternal("Param/Value/0F580F67"), 0, false);
                }
                else if ((lv_titanLife <= 66.0)) {
                    gf_MissionText(StringExternal("Param/Value/3D45CDDA"));
                    Wait(5.0, c_timeGame);
                    gf_SucceedMission(10, StringExternal("Param/Value/8F2C8595"), 0, false);
                }
                else if ((lv_titanLife > 66.0)) {
                    gf_MissionText(StringExternal("Param/Value/1F9CE919"));
                    Wait(5.0, c_timeGame);
                }
                ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
                break;
            }
            else {
                lv_titanNext += 1;
                lv_titanRadius = RegionCircle(UnitGetPosition(lv_titan), 10.0);
                autoD67B0453_n = RandomInt(8, 12);
                for (autoD67B0453_i = 1; autoD67B0453_i <= autoD67B0453_n; autoD67B0453_i += 1) {
                    lv_tempPoint = RegionRandomPoint(lv_titanRadius);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_tempPoint);
                    UnitCreate(1, "Eel", 0, 14, lv_tempPoint, libNtve_gf_RandomAngle());
                    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
                    libE6C8C21C_gf_RegisterUnitDiesEvent(gt_PlayerKills, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("Attack", 0), UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)), c_orderQueueReplace);
                }
                autoBAE66761_n = RandomInt(1, 2);
                for (autoBAE66761_i = 1; autoBAE66761_i <= autoBAE66761_n; autoBAE66761_i += 1) {
                    lv_tempPoint = RegionRandomPoint(lv_titanRadius);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_tempPoint);
                    UnitCreate(1, "Charger", 0, 14, lv_tempPoint, libNtve_gf_RandomAngle());
                    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
                    libE6C8C21C_gf_RegisterUnitDiesEvent(gt_PlayerKills, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("Attack", 0), UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)), c_orderQueueReplace);
                }
                auto571D09E4_n = RandomInt(4, 8);
                for (auto571D09E4_i = 1; auto571D09E4_i <= auto571D09E4_n; auto571D09E4_i += 1) {
                    lv_tempPoint = RegionRandomPoint(lv_titanRadius);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_tempPoint);
                    UnitCreate(1, "Crab", 0, 14, lv_tempPoint, libNtve_gf_RandomAngle());
                    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
                    libE6C8C21C_gf_RegisterUnitDiesEvent(gt_PlayerKills, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("Attack", 0), UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)), c_orderQueueReplace);
                }
            }
        }

        Wait(5.0, c_timeGame);
    }
    if ((lv_missionFailed == false)) {
        gf_UpdateMissionCompletionTracker(true);
        gf_SucceedMission(50, StringExternal("Param/Value/54F7DAC9"), 0, false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        PingDestroy(gv_optionalObjPings[0]);
        Wait(10.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/7FDD6A63"));
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    }
    Wait(30.0, c_timeGame);
    if ((gv_missionAutostart == true)) {
        auto713719F2_val = lv_chance;
        if (auto713719F2_val == 1) {
            gf_RechargeGenerators();
        }
        else if (auto713719F2_val == 2) {
            gf_BiosphereSilos();
        }
        else if (auto713719F2_val == 3) {
            gf_Apiaries();
        }
        else {
            gf_BiosphereSilos();
        }
    }
}

void gf_IntoTheDarkMarch () {
    // Variable Declarations
    int lv_Integer;
    int lv_Player;
    timer lv_Timer;

    // Automatic Variable Declarations
    playergroup auto6269C837_g;
    int auto6269C837_var;
    const int auto0679B839_ae = 12;
    const int auto0679B839_ai = 1;
    int auto52D833DC_val;
    int auto85CAFFC4_val;
    unitgroup autoA4FC535A_g;
    int autoA4FC535A_u;
    unit autoA4FC535A_var;
    const int auto688A5353_ae = 12;
    const int auto688A5353_ai = 1;
    unitgroup auto568C4C87_g;
    int auto568C4C87_u;
    unit auto568C4C87_var;
    playergroup auto480A6B83_g;
    int auto480A6B83_var;

    // Variable Initialization
    lv_Timer = TimerCreate();

    // Implementation
    GameSetPauseable(false);
    libHots_gf_PlaySoundLinkasMusic(SoundLink("ion", -1), false, true);
    gf_MissionText(StringExternal("Param/Value/5C3CEAC2"));
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/F1BA7405"));
    Wait(10.0, c_timeGame);
    TimerStart(lv_Timer, 244.0, false, c_timeReal);
    gf_MissionText(StringExternal("Param/Value/4CCDC898"));
    auto6269C837_g = gv_players;
    auto6269C837_var = -1;
    while (true) {
        auto6269C837_var = PlayerGroupNextPlayer(auto6269C837_g, auto6269C837_var);
        if (auto6269C837_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto6269C837_var, "CASOnStation", 1);
    }

    libNtve_gf_WaitForTimer(lv_Timer, 7.0, true);
    GameSetLighting("Darkness", 10.0);
    gv_fogevent = true;

    TriggerEnable(gt_ThanatosMove, true);
    libNtve_gf_WaitForTimer(lv_Timer, 14.0, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Thanatos", 0, 14, RegionRandomPoint(RegionEntireMap()));
    gv_Thanatos = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
    gv_infestationLevel += 2;
    libNtve_gf_WaitForTimer(lv_Timer, 21.0, true);
    TriggerExecute(gt_ThanatosHealthBar, true, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/EEA317EB"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/FAA7B5DC"));

    while ((TimerGetElapsed(lv_Timer) <= 53.0)) {
        lv_Player = 1;
        for ( ; ( (auto0679B839_ai >= 0 && lv_Player <= auto0679B839_ae) || (auto0679B839_ai < 0 && lv_Player >= auto0679B839_ae) ) ; lv_Player += auto0679B839_ai ) {
            VisExploreArea(lv_Player, RegionEntireMap(), false, false);
        }
        Wait(0.5, c_timeReal);
    }
    lv_Integer = RandomInt(0, 2);
    auto52D833DC_val = lv_Integer;
    if (auto52D833DC_val == 0) {
        gf_MissionText(StringExternal("Param/Value/690FC0CB"));
    }
    else if (auto52D833DC_val == 1) {
        gf_MissionText(StringExternal("Param/Value/8FB84FD8"));
    }
    else if (auto52D833DC_val == 2) {
        gf_MissionText(StringExternal("Param/Value/722F2021"));
    }
    else {
    }

    libNtve_gf_WaitForTimer(lv_Timer, 55.0, true);
    gv_HyperPulseSpawns = true;
    gf_SpawnUndeadIgnoreSupply(1, "AcidVore", 1);
    gf_SpawnUndeadIgnoreSupply(1, "AcidVore", 1);
    gf_SpawnUndeadIgnoreSupply(1, "AcidVore", 1);
    gf_SpawnUndeadIgnoreSupply(1, "AcidVore", 2);
    gf_SpawnUndeadIgnoreSupply(6, "Krill", 1);
    gf_SpawnUndeadIgnoreSupply(6, "Krill", 1);
    gf_SpawnUndeadIgnoreSupply(1, "Morbus", 1);
    gf_SpawnUndeadIgnoreSupply(1, "Morbus", 1);
    gf_SpawnUndead(1, "Ares", 1);
    Wait(8.0, c_timeReal);

    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    auto85CAFFC4_val = lv_Integer;
    if (auto85CAFFC4_val == 0) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 14, RegionRandomPoint(RegionFromId(118)));
    }
    else if (auto85CAFFC4_val == 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 14, RegionRandomPoint(RegionFromId(121)));
    }
    else if (auto85CAFFC4_val == 2) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Terrorzor", 0, 14, RegionRandomPoint(RegionFromId(120)));
    }
    else {
    }
    gv_Titan = UnitLastCreated();
    UnitBehaviorAdd(gv_Titan, "DifficultyModifierBoss", gv_Titan, gv_zombieBuffAmount);
    TriggerExecute(gt_TitanHealthBar, true, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_Titan), ColorWithAlpha(50.20, 0.00, 100.00, 0.00), 10.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D8A957F1"));
    PingSetUnit(PingLastCreated(), gv_Titan);

    UnitGroupAdd(gv_undeadGroup, gv_Titan);
    UnitIssueOrder(gv_Titan, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    ObjectiveSetState(gv_secondObj, c_objectiveStateActive);
    ObjectiveSetName(gv_secondObj, StringExternal("Param/Value/A24BB28F"));
    ObjectiveSetDescription(gv_secondObj, StringExternal("Param/Value/BB124249"));

    Wait(8.0, c_timeReal);

    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Baron", 1);
    gf_SpawnUndead(1, "Baron", 1);
    gf_SpawnUndead(1, "Baron", 1);
    gf_SpawnUndead(1, "Baron", 1);
    Wait(8.0, c_timeReal);

    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ZombieCarrier", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ZombieCarrier", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ZombieCarrier", 1);
    Wait(8.0, c_timeReal);

    libNtve_gf_WaitForTimer(lv_Timer, 92.0, true);
    autoA4FC535A_g = gv_undeadGroup;
    autoA4FC535A_u = UnitGroupCount(autoA4FC535A_g, c_unitCountAll);
    for (;; autoA4FC535A_u -= 1) {
        autoA4FC535A_var = UnitGroupUnitFromEnd(autoA4FC535A_g, autoA4FC535A_u);
        if (autoA4FC535A_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(autoA4FC535A_var), c_unitAttributeMassive)) && (UnitIsAlive(autoA4FC535A_var))) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MassivePing", UnitGetPosition(autoA4FC535A_var), ColorWithAlpha(70.59, 0.00, 0.00, 0.00), 8.0, 270.0);
            PingSetScale(PingLastCreated(), 0.3);
            PingSetUnit(PingLastCreated(), autoA4FC535A_var);
            Wait(0.1, c_timeReal);
        }

    }

    libNtve_gf_WaitForTimer(lv_Timer, 104.0, true);
    while ((gv_gameOver == false) && ((UnitIsAlive(gv_Thanatos)) || (UnitIsAlive(gv_Titan)))) {
        lv_Player = 1;
        for ( ; ( (auto688A5353_ai >= 0 && lv_Player <= auto688A5353_ae) || (auto688A5353_ai < 0 && lv_Player >= auto688A5353_ae) ) ; lv_Player += auto688A5353_ai ) {
            VisExploreArea(lv_Player, RegionEntireMap(), false, false);
        }
        Wait(1.5, c_timeReal);
        auto568C4C87_g = gv_undeadGroup;
        auto568C4C87_u = UnitGroupCount(auto568C4C87_g, c_unitCountAll);
        for (;; auto568C4C87_u -= 1) {
            auto568C4C87_var = UnitGroupUnitFromEnd(auto568C4C87_g, auto568C4C87_u);
            if (auto568C4C87_var == null) { break; }
            if ((UnitTypeTestAttribute(UnitGetType(auto568C4C87_var), c_unitAttributeMassive)) && (UnitIsAlive(auto568C4C87_var))) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MassivePing", UnitGetPosition(auto568C4C87_var), ColorWithAlpha(70.59, 0.00, 0.00, 0.00), 8.0, 270.0);
                PingSetScale(PingLastCreated(), 0.3);
                PingSetUnit(PingLastCreated(), auto568C4C87_var);
                Wait(0.1, c_timeReal);
            }

        }

        Wait(8.0, c_timeReal);
    }
    SoundPlay(SoundLink("HybridADeath", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    gf_SucceedMission(75, StringExternal("Param/Value/0D140BA8"), 0, false);
    gf_UpdateMissionCompletionTracker(true);
    Wait(2.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/BE29878E"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    ObjectiveSetState(gv_secondObj, c_objectiveStateHidden);
    gv_HyperPulseSpawns = false;
    GameSetPauseable(true);
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    Wait(2.0, c_timeGame);
    GameSetLighting("UACDay", 10.0);
    gv_fogevent = false;
    if ((gv_iSREnabled == true)) {
        auto480A6B83_g = PlayerGroupAll();
        auto480A6B83_var = -1;
        while (true) {
            auto480A6B83_var = PlayerGroupNextPlayer(auto480A6B83_g, auto480A6B83_var);
            if (auto480A6B83_var < 0) { break; }
            VisExploreArea(auto480A6B83_var, RegionEntireMap(), true, false);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/D6399B42"));
    }

    Wait(20.0, c_timeGame);
    if ((gv_missionAutostart == true) && (RandomInt(0, 2) == 1)) {
        gf_Apiaries();
    }
    else {
        if ((gv_missionAutostart == true) && (RandomInt(0, 1) == 1)) {
            gf_BiosphereSilos();
        }
        else {
            gf_RechargeGenerators();
        }
    }
}

void gf_Apiaries () {
    int init_i;

    // Variable Declarations
    int lv_loopint2;
    int lv_loopint;
    int[21] lv_apiPings;
    unitgroup lv_apiaries;
    region lv_spawnRegion;
    int lv_apiaryCount;
    int lv_count;

    // Automatic Variable Declarations
    unitgroup auto9402E4B0_g;
    int auto9402E4B0_u;
    unit auto9402E4B0_var;
    const int auto2B2C82BC_n = 8;
    int auto2B2C82BC_i;
    unitgroup autoD2EFC941_g;
    int autoD2EFC941_u;
    unit autoD2EFC941_var;
    unitgroup auto26E6F666_g;
    int auto26E6F666_u;
    unit auto26E6F666_var;
    int autoE92EB18C_n;
    int autoE92EB18C_i;

    // Variable Initialization
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lv_apiPings[init_i] = c_invalidPingId;
    }
    lv_apiaries = UnitGroupEmpty();
    lv_spawnRegion = RegionEmpty();
    lv_count = 60;

    // Implementation
    gf_SkipActionsIfGameOver();
    Wait(20.0, c_timeGame);
    RegionAddRegion(lv_spawnRegion, RegionFromId(62));
    auto9402E4B0_g = gv_heroesGroup;
    auto9402E4B0_u = UnitGroupCount(auto9402E4B0_g, c_unitCountAll);
    for (;; auto9402E4B0_u -= 1) {
        auto9402E4B0_var = UnitGroupUnitFromEnd(auto9402E4B0_g, auto9402E4B0_u);
        if (auto9402E4B0_var == null) { break; }
        RegionAddCircle(lv_spawnRegion, false, UnitGetPosition(auto9402E4B0_var), 20.0);
    }
    SoundPlay(SoundLink("TValerian02BMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringExternal("Param/Value/AFA2CC24"));
    Wait(7.0, c_timeGame);
    for (auto2B2C82BC_i = 1; auto2B2C82BC_i <= auto2B2C82BC_n; auto2B2C82BC_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Apiary", c_unitCreateIgnorePlacement, 14, RegionRandomPoint(lv_spawnRegion));
        UnitGroupAdd(lv_apiaries, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CritterWander", UnitLastCreated(), 1);
    }
    lv_apiaryCount = UnitGroupCount(lv_apiaries, c_unitCountAlive);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/35F4DFAC") + IntToText(lv_apiaryCount) + StringExternal("Param/Value/31A1E5AB")));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/A2C1D658"));
    TimerStart(gv_missiontimer, 240.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/612D2F61"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    while ((gv_gameOver == false)) {
        if ((TimerGetRemaining(gv_missiontimer) == 0.0)) {
            TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
            gf_UpdateMissionCompletionTracker(false);
            gf_FailMission((UnitGroupCount(lv_apiaries, c_unitCountAlive) * 5), StringExternal("Param/Value/5F68983A"), 1);
            break;
        }
        else {
            if ((UnitGroupCount(lv_apiaries, c_unitCountAlive) == 0)) {
                TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
                ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
                gf_UpdateMissionCompletionTracker(true);
                break;
            }
        }
        if (((ModI(lv_count, 15) == 0))) {
            lv_loopint = 0;
            autoD2EFC941_g = lv_apiaries;
            autoD2EFC941_u = UnitGroupCount(autoD2EFC941_g, c_unitCountAll);
            for (;; autoD2EFC941_u -= 1) {
                autoD2EFC941_var = UnitGroupUnitFromEnd(autoD2EFC941_g, autoD2EFC941_u);
                if (autoD2EFC941_var == null) { break; }
                lv_loopint += 1;
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(autoD2EFC941_var), ColorWithAlpha(50.20, 0.00, 100.00, 0.00), 3.0, 270.0);
            }
        }
        if ((lv_count == 60)) {
            auto26E6F666_g = lv_apiaries;
            auto26E6F666_u = UnitGroupCount(auto26E6F666_g, c_unitCountAll);
            for (;; auto26E6F666_u -= 1) {
                auto26E6F666_var = UnitGroupUnitFromEnd(auto26E6F666_g, auto26E6F666_u);
                if (auto26E6F666_var == null) { break; }
                libNtve_gf_CreateUnitsWithDefaultFacing((gv_spawnCount / 3), "Swarmer", 0, 14, UnitGetPosition(auto26E6F666_var));
                UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
            }
            lv_count = 0;
        }
        if ((UnitGroupCount(lv_apiaries, c_unitCountAlive) < lv_apiaryCount)) {
            autoE92EB18C_n = (lv_apiaryCount - UnitGroupCount(lv_apiaries, c_unitCountAlive));
            for (autoE92EB18C_i = 1; autoE92EB18C_i <= autoE92EB18C_n; autoE92EB18C_i += 1) {
                gf_SucceedMission(8, StringExternal("Param/Value/2C074674"), 0, false);
            }
            lv_apiaryCount = UnitGroupCount(lv_apiaries, c_unitCountAlive);
            ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/7AEA1827") + IntToText(lv_apiaryCount) + StringExternal("Param/Value/D95885A9")));
        }
        lv_count += 1;
        Wait(1.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    if ((gv_missionAutostart == true)) {
        gf_ExtractVIPs();
    }
}

void gf_RechargeGenerators () {
    // Variable Declarations
    int lv_int;
    bool lv_continue;

    // Automatic Variable Declarations
    const int autoFB4E19B8_ae = 3;
    const int autoFB4E19B8_ai = 1;
    const int auto1CC01AA2_ae = 3;
    const int auto1CC01AA2_ai = 1;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    Wait(20.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/F4FE18F2"));
    Wait(9.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/0E3252CB"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/82C2F523"));
    gv_generators[1] = UnitFromId(2579);
    gv_generators[2] = UnitFromId(582);
    gv_generators[3] = UnitFromId(2575);
    TriggerEnable(gt_ApproachGenerator, true);
    TriggerEnable(gt_GeneratorPowered, true);
    TimerStart(gv_missiontimer, 240.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/01AF62EA"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_GeneratorTimeEnd, true);
    lv_int = 1;
    for ( ; ( (autoFB4E19B8_ai >= 0 && lv_int <= autoFB4E19B8_ae) || (autoFB4E19B8_ai < 0 && lv_int >= autoFB4E19B8_ae) ) ; lv_int += autoFB4E19B8_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), gv_pingNumeral[lv_int], UnitGetPosition(gv_generators[lv_int]), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B016F55E"));
        gv_optionalObjPings[lv_int] = PingLastCreated();
        if ((gv_gamemode == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(3, 5), "Parasite", 0, 14, UnitGetPosition(gv_generators[lv_int]));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(6, 9), "Parasite", 0, 14, UnitGetPosition(gv_generators[lv_int]));
        }
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_generators[lv_int]), c_orderQueueReplace);
        UnitBehaviorAdd(gv_generators[lv_int], "GeneratorLeech", gv_generators[lv_int], 1);
    }
    TriggerSendEvent("Power Generator");
    while (true) {
        lv_continue = true;
        lv_int = 1;
        for ( ; ( (auto1CC01AA2_ai >= 0 && lv_int <= auto1CC01AA2_ae) || (auto1CC01AA2_ai < 0 && lv_int >= auto1CC01AA2_ae) ) ; lv_int += auto1CC01AA2_ai ) {
            if ((UnitGetPropertyFixed(gv_generators[lv_int], c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0)) {
                lv_continue = false;
                UnitCreate(RandomInt(4, 6), "Parasite", 0, 14, UnitGetPosition(gv_generators[lv_int]), libNtve_gf_RandomAngle());
                UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
            }
        }
        if ((lv_continue == true)) {
            break;
        }
        Wait(60.0, c_timeGame);
    }
}

void gf_BiosphereSilos () {
    // Variable Declarations
    int lv_loopint;
    unit lv_droppod;
    region lv_lz;
    int lv_penalty;

    // Automatic Variable Declarations
    const int auto15587008_ae = 3;
    const int auto15587008_ai = 1;
    const int autoF63DEE0A_ae = 3;
    const int autoF63DEE0A_ai = 1;

    // Variable Initialization
    lv_lz = gv_lZs[RandomInt(1, 5)];
    lv_penalty = 1;

    // Implementation
    gf_SkipActionsIfGameOver();
    Wait(20.0, c_timeGame);
    while (!((gv_fogevent == false))) {
        Wait(5.0, c_timeGame);
    }
    gv_fogevent = true;
    GameSetLighting("Darkness", 10.0);
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/E359B123"));
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(1, "Horror", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    }
    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    }
    gf_MissionText(StringExternal("Param/Value/DAA43639"));
    Wait(9.0, c_timeGame);
    TriggerEnable(gt_ApproachBDS, true);
    TriggerEnable(gt_AcquireBDS, true);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/8869E11B"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/16D8AF8B"));
    SoundPlay(SoundLink("Darkness", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, RegionGetCenter(lv_lz));
    lv_droppod = UnitLastCreated();
    UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
    Wait(5.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(lv_lz), ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    gv_bDSPings[0] = PingLastCreated();
    UnitKill(lv_droppod);
    lv_loopint = 1;
    for ( ; ( (auto15587008_ai >= 0 && lv_loopint <= auto15587008_ae) || (auto15587008_ai < 0 && lv_loopint >= auto15587008_ae) ) ; lv_loopint += auto15587008_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "EnergyBattery", 0, 0, PointWithOffsetPolar(RegionGetCenter(lv_lz), RandomFixed(0.0, 1.0), libNtve_gf_RandomAngle()));
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        gf_MissionItemPingAddItem(UnitLastCreated());
    }
    gv_bDSRegion[1] = RegionFromId(104);
    gv_bDSRegion[2] = RegionFromId(105);
    gv_bDSRegion[3] = RegionFromId(106);
    lv_loopint = 1;
    for ( ; ( (autoF63DEE0A_ai >= 0 && lv_loopint <= autoF63DEE0A_ae) || (autoF63DEE0A_ai < 0 && lv_loopint >= autoF63DEE0A_ae) ) ; lv_loopint += autoF63DEE0A_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BDS", 0, 0, RegionGetCenter(gv_bDSRegion[lv_loopint]));
        gv_bDS[lv_loopint] = UnitLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(gv_bDSRegion[lv_loopint]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_bDSPings[lv_loopint] = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/911776C8"));
    }
    Wait(420.0, c_timeGame);
    while ((TriggerIsEnabled(gt_ApproachBDS) == true)) {
        if ((lv_penalty == 1)) {
            gf_MissionText(StringExternal("Param/Value/5758DC21"));
        }
        else if (true) {
            gf_MissionText(StringExternal("Param/Value/4CEC41EA"));
        }
        gf_SpawnUndead((lv_penalty * 2), "StalkerZombie", 1);
        gf_SpawnUndead((lv_penalty * gv_spawnCount), "Shredder", 1);
        gf_SpawnUndead((lv_penalty * gv_spawnCount), "Krill", 1);
        gf_SpawnUndead((lv_penalty * 2), "Lacerti", 1);
        gf_SpawnUndead(lv_penalty, "Arachnathid", 1);
        lv_penalty += 1;
        Wait(180.0, c_timeGame);
    }
}

void gf_ExtractVIPs () {
    // Variable Declarations
    int lv_regionMax;
    int lv_int;
    int lv_vipStartDelay;

    // Automatic Variable Declarations
    int auto8E6DD4D1_ae;
    const int auto8E6DD4D1_ai = 1;

    // Variable Initialization
    lv_regionMax = 3;

    // Implementation
    gf_SkipActionsIfGameOver();
    if ((gv_drRosenKilled == true)) {
        lv_regionMax = 2;
    }
    gv_aORegions[1] = RegionFromId(159);
    gv_aORegions[2] = RegionFromId(279);
    gv_aORegions[3] = RegionFromId(179);
    gv_aORegionsSearched[1] = false;
    gv_aORegionsSearched[2] = false;
    gv_aORegionsSearched[3] = false;
    gv_extractionCount = 0;
    gf_MissionText(StringExternal("Param/Value/BA4BD575"));
    PingCreate(PlayerGroupAll(), "BeaconRallyPing", RegionGetCenter(RegionFromId(16)), ColorWithAlpha(92.94, 32.16, 2.75, 0.00), 15.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/980B0916"));
    gf_AirDropItemLoc("KineticIntegrator", RegionRandomPoint(RegionFromId(13)), 1);
    gf_AirDropItemLoc("FragGrenade", RegionRandomPoint(RegionFromId(13)), 1);
    gf_AirDropItemLoc("FragGrenade", RegionRandomPoint(RegionFromId(13)), 1);
    gf_AirDropItemLoc("HK42", RegionRandomPoint(RegionFromId(13)), 3);
    gf_AirDropItemLoc("HK42", RegionRandomPoint(RegionFromId(13)), 1);
    gf_AirDropItemLoc("FirstAidKit", RegionRandomPoint(RegionFromId(13)), 1);
    gf_AirDropItemLoc("FlareGun", RegionRandomPoint(RegionFromId(13)), 2);
    gf_AirDropItemLoc("FlareGun", RegionRandomPoint(RegionFromId(13)), 2);
    gf_AirDropItemLoc("ExplosiveCharge", RegionRandomPoint(RegionFromId(13)), 1);
    gf_AirDropItemLoc("MGL", RegionRandomPoint(RegionFromId(13)), 1);
    gf_AirDropItemLoc("MGL", RegionRandomPoint(RegionFromId(13)), 2);
    gf_AirDropItemLoc("QuikClot", RegionRandomPoint(RegionFromId(13)), 2);
    gf_AirDropItemLoc("QuikClot", RegionRandomPoint(RegionFromId(13)), 2);
    Wait(22.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/CE9B16E2"));
    Wait(12.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/B93A6BD7"));
    Wait(12.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/EB35914E"));
    TriggerEnable(gt_VIPKilled, true);
    auto8E6DD4D1_ae = lv_regionMax;
    lv_int = 1;
    for ( ; ( (auto8E6DD4D1_ai >= 0 && lv_int <= auto8E6DD4D1_ae) || (auto8E6DD4D1_ai < 0 && lv_int >= auto8E6DD4D1_ae) ) ; lv_int += auto8E6DD4D1_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_aORegions[lv_int]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_aORegionPings[lv_int] = PingLastCreated();
        PingSetScale(gv_aORegionPings[lv_int], 0.75);
        PingSetTooltip(gv_aORegionPings[lv_int], StringExternal("Param/Value/F237CAE5"));
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", RegionGetCenter(gv_aORegions[lv_int]));
        gv_placerMarkers[lv_int] = libNtve_gf_ActorLastCreated();
        if ((lv_int == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Windsor", 0, 0, RegionGetCenter(gv_aORegions[lv_int]));
            gv_colWindsor = UnitLastCreated();
            libNtve_gf_MakeUnitInvulnerable(gv_colWindsor, true);
            gf_MissionItemPingAddItem(UnitLastCreated());
            libE6C8C21C_gf_RegisterUnitDiesEvent(gt_VIPKilled, UnitLastCreated());
            UnitGroupAdd(gv_vIPs, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        }
        else if ((lv_int == 2)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChiefScarland", 0, 0, RegionGetCenter(gv_aORegions[lv_int]));
            gv_policeChief = UnitLastCreated();
            libNtve_gf_MakeUnitInvulnerable(gv_policeChief, true);
            libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), "Spell");
            gf_MissionItemPingAddItem(UnitLastCreated());
            libE6C8C21C_gf_RegisterUnitDiesEvent(gt_VIPKilled, UnitLastCreated());
            UnitGroupAdd(gv_vIPs, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        }
        else if ((lv_int == 3)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DrRosen", 0, 0, RegionGetCenter(gv_aORegions[lv_int]));
            gv_drMorrow = UnitLastCreated();
            libNtve_gf_MakeUnitInvulnerable(gv_drMorrow, true);
            gf_MissionItemPingAddItem(UnitLastCreated());
            libE6C8C21C_gf_RegisterUnitDiesEvent(gt_VIPKilled, UnitLastCreated());
            UnitGroupAdd(gv_vIPs, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        }
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/19585124"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/874EC1D8"));
    gv_medevacregion = gv_lZs[2];
    gf_LandPhantom(RegionGetCenter(RegionFromId(15)));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(15)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_supplyPing = PingLastCreated();
    PingSetTooltip(gv_supplyPing, StringExternal("Param/Value/077DD6E6"));
    TimerStart(gv_missiontimer, 330.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/9F731755"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_VIPTimeEnd, true);
    TriggerEnable(gt_VIPSite, true);
    TriggerEnable(gt_VIPMovementLoop, true);
    TriggerEnable(gt_VIPExtracted, true);
    Wait(20.0, c_timeGame);
    if ((gv_missionAutostart == true)) {
        gf_ReconnaissanceDrone();
    }
}

void gf_VIPBossSpawn () {
    // Variable Declarations
    point[4] lv_bossSpawns;
    region[5] lv_thalSpawns;
    unitgroup lv_spawnGroup;

    // Automatic Variable Declarations
    int auto3E024EC0_val;
    const int autoB26BA989_n = 2;
    int autoB26BA989_i;
    const int autoB5E84C4B_n = 2;
    int autoB5E84C4B_i;
    const int auto762DF0F3_n = 2;
    int auto762DF0F3_i;
    const int auto13C9AAC3_n = 2;
    int auto13C9AAC3_i;
    const int autoE70B177F_n = 2;
    int autoE70B177F_i;
    const int autoC10EF7EA_n = 2;
    int autoC10EF7EA_i;

    // Variable Initialization
    lv_spawnGroup = UnitGroupEmpty();

    // Implementation
    lv_bossSpawns[1] = PointFromId(200295712);
    lv_bossSpawns[2] = PointFromId(1608860516);
    lv_bossSpawns[3] = PointFromId(2016269167);
    lv_thalSpawns[1] = RegionFromId(155);
    lv_thalSpawns[2] = RegionFromId(154);
    lv_thalSpawns[3] = RegionFromId(156);
    lv_thalSpawns[4] = RegionFromId(160);
    auto3E024EC0_val = RandomInt(1, 3);
    if (auto3E024EC0_val == 1) {
        gf_SpawnUndead(2, "ZombieYeti", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Minerva", 0, 14, lv_bossSpawns[RandomInt(1, 3)]);
        UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
        if ((gv_gamemode >= 2)) {
            for (autoB26BA989_i = 1; autoB26BA989_i <= autoB26BA989_n; autoB26BA989_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZombieYeti", 0, 14, RegionRandomPoint(lv_thalSpawns[RandomInt(1, 4)]));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZombieYeti", 0, 14, UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
            }
        }

        if ((gv_gamemode >= 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "IrradiatedYeti", 0, 14, RegionRandomPoint(lv_thalSpawns[RandomInt(1, 4)]));
            UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "IrradiatedYeti", 0, 14, UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
        }

        if ((gv_gamemode == 5)) {
            for (autoB5E84C4B_i = 1; autoB5E84C4B_i <= autoB5E84C4B_n; autoB5E84C4B_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "IrradiatedYeti", 0, 14, RegionRandomPoint(lv_thalSpawns[RandomInt(1, 4)]));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "IrradiatedYeti", 0, 14, UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
            }
        }

        Wait(RandomFixed(0.03, 0.1), c_timeGame);
        UnitGroupAddUnitGroup(gv_undeadGroup, lv_spawnGroup);
        UnitGroupIssueOrder(lv_spawnGroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
    else if (auto3E024EC0_val == 2) {
        gf_SpawnUndead(2, "Hunter", 1);
        gf_SpawnUndead(2, "Hunter", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ares", 0, 14, lv_bossSpawns[RandomInt(1, 3)]);
        UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
        if ((gv_gamemode >= 2)) {
            for (auto762DF0F3_i = 1; auto762DF0F3_i <= auto762DF0F3_n; auto762DF0F3_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hunter", 0, 14, RegionRandomPoint(lv_thalSpawns[RandomInt(1, 4)]));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hunter", 0, 14, UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hunter", 0, 14, UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
            }
        }

        if ((gv_gamemode >= 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BloodHunter", 0, 14, RegionRandomPoint(lv_thalSpawns[RandomInt(1, 4)]));
            UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BloodHunter", 0, 14, UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
        }

        if ((gv_gamemode == 5)) {
            for (auto13C9AAC3_i = 1; auto13C9AAC3_i <= auto13C9AAC3_n; auto13C9AAC3_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "BloodHunter", 0, 14, RegionRandomPoint(lv_thalSpawns[RandomInt(1, 4)]));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "BloodHunter", 0, 14, UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
            }
        }

        Wait(RandomFixed(0.03, 0.1), c_timeGame);
        UnitGroupAddUnitGroup(gv_undeadGroup, lv_spawnGroup);
        UnitGroupIssueOrder(lv_spawnGroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
    else if (auto3E024EC0_val == 3) {
        gf_SpawnUndead(2, "Gourmand", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Grotesque", 0, 14, lv_bossSpawns[RandomInt(1, 3)]);
        UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
        if ((gv_gamemode >= 2)) {
            for (autoE70B177F_i = 1; autoE70B177F_i <= autoE70B177F_n; autoE70B177F_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gourmand", 0, 14, RegionRandomPoint(lv_thalSpawns[RandomInt(1, 4)]));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
            }
        }

        if ((gv_gamemode >= 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gourmand", 0, 14, RegionRandomPoint(lv_thalSpawns[RandomInt(1, 4)]));
            UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gargantuan", 0, 14, RegionRandomPoint(lv_thalSpawns[RandomInt(1, 4)]));
            UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
        }

        if ((gv_gamemode == 5)) {
            for (autoC10EF7EA_i = 1; autoC10EF7EA_i <= autoC10EF7EA_n; autoC10EF7EA_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gourmand", 0, 14, RegionRandomPoint(lv_thalSpawns[RandomInt(1, 4)]));
                UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gargantuan", 0, 14, RegionRandomPoint(lv_thalSpawns[RandomInt(1, 4)]));
            UnitGroupAdd(lv_spawnGroup, UnitLastCreated());
        }

        Wait(RandomFixed(0.03, 0.1), c_timeGame);
        UnitGroupAddUnitGroup(gv_undeadGroup, lv_spawnGroup);
        UnitGroupIssueOrder(lv_spawnGroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
    else {
    }
}

void gf_ReconnaissanceDrone () {
    // Variable Declarations
    point lv_point;
    int lv_random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    Wait(RandomInt(60, 350), c_timeGame);
    gf_MissionText(StringExternal("Param/Value/CF96BA52"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/6E790AC6"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/CEBE6550"));
    Wait(7.0, c_timeGame);
    lv_point = RegionRandomPoint(RegionFromId(158));
    RegionSetCenter(RegionFromId(234), lv_point);
    gv_reconDroneRepaired = false;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ReconnaissanceDrone", c_unitCreateIgnorePlacement, 0, lv_point);
    gv_reconnaissanceDrone = UnitLastCreated();
    UnitSetState(gv_reconnaissanceDrone, c_unitStateInvulnerable, true);
    UnitSetPropertyFixed(gv_reconnaissanceDrone, c_unitPropLifePercent, 10.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_reconnaissanceDrone), "Disabled", "Work Start", c_animFlagPlayForever, c_animTimeDefault);
    UnitSetHeight(gv_reconnaissanceDrone, 0.0, 0.0);
    TimerStart(gv_missiontimer2, 360.0, false, c_timeGame);
    ObjectiveSetState(gv_optionalObj, c_objectiveStateActive);
    TextExpressionSetToken("Param/Expression/0D6407EA", "A", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_missiontimer2))), Color(0.00, 100.00, 50.20)));
    ObjectiveSetName(gv_optionalObj, TextExpressionAssemble("Param/Expression/0D6407EA"));
    ObjectiveSetDescription(gv_optionalObj, StringExternal("Param/Value/D3BC94B5"));
    TimerPause(gv_missiontimer2, true);
    Wait(3.0, c_timeGame);
    TimerPause(gv_missiontimer2, false);
    TriggerEnable(gt_ReconnaissanceDroneFound, true);
    while ((gv_reconDroneFound == false)) {
        TextExpressionSetToken("Param/Expression/953982D0", "A", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_missiontimer2))), Color(0.00, 100.00, 50.20)));
        ObjectiveSetName(gv_optionalObj, TextExpressionAssemble("Param/Expression/953982D0"));
        if ((TimerGetRemaining(gv_missiontimer2) == 0.0)) {
            TriggerEnable(gt_ReconnaissanceDroneFound, false);
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((gv_reconDroneFound == false)) {
        UnitRemove(gv_reconnaissanceDrone);
        ObjectiveSetState(gv_optionalObj, c_objectiveStateFailed);
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
    }
}

trigger auto_gf_ReconDroneLaserDesignateUnit_Trigger = null;
unit auto_gf_ReconDroneLaserDesignateUnit_lp_targetUnit;

void gf_ReconDroneLaserDesignateUnit (unit lp_targetUnit) {
    auto_gf_ReconDroneLaserDesignateUnit_lp_targetUnit = lp_targetUnit;

    if (auto_gf_ReconDroneLaserDesignateUnit_Trigger == null) {
        auto_gf_ReconDroneLaserDesignateUnit_Trigger = TriggerCreate("auto_gf_ReconDroneLaserDesignateUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_ReconDroneLaserDesignateUnit_Trigger, false, false);
}

bool auto_gf_ReconDroneLaserDesignateUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_targetUnit = auto_gf_ReconDroneLaserDesignateUnit_lp_targetUnit;

    // Variable Declarations
    unit[13] lv_model;

    // Automatic Variable Declarations
    playergroup auto932DDB09_g;
    int auto932DDB09_var;
    playergroup autoA1CAE23F_g;
    int autoA1CAE23F_var;

    // Variable Initialization

    // Implementation
    UnitGroupAdd(gv_laserDesignatorTarget, lp_targetUnit);
    UnitBehaviorAdd(lp_targetUnit, "LaserDesignator", gv_reconnaissanceDrone, 1);
    auto932DDB09_g = gv_players;
    auto932DDB09_var = -1;
    while (true) {
        auto932DDB09_var = PlayerGroupNextPlayer(auto932DDB09_g, auto932DDB09_var);
        if (auto932DDB09_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(lp_targetUnit, true, auto932DDB09_var);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LaserDesignatedPoint", c_unitCreateIgnorePlacement, auto932DDB09_var, UnitGetPosition(lp_targetUnit));
        lv_model[auto932DDB09_var] = UnitLastCreated();
        UnitCreateEffectUnit(UnitLastCreated(), "LaserDesignatedAttackPoint", lp_targetUnit);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (TextWithColor(UnitTypeGetName(UnitGetType(lp_targetUnit)), Color(50.20, 0.00, 50.20)) + StringExternal("Param/Value/1B02C6A0")));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(lp_targetUnit), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 4.0, 270.0);
    PingSetUnit(PingLastCreated(), lp_targetUnit);
    while (!((UnitHasBehavior(lp_targetUnit, "LaserDesignator") == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitGroupRemove(gv_laserDesignatorTarget, lp_targetUnit);
    autoA1CAE23F_g = gv_players;
    autoA1CAE23F_var = -1;
    while (true) {
        autoA1CAE23F_var = PlayerGroupNextPlayer(autoA1CAE23F_g, autoA1CAE23F_var);
        if (autoA1CAE23F_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(lp_targetUnit, false, autoA1CAE23F_var);
        UnitRemove(lv_model[autoA1CAE23F_var]);
    }
    return true;
}

trigger auto_gf_DasdanRetreats_Trigger = null;

void gf_DasdanRetreats () {
    if (auto_gf_DasdanRetreats_Trigger == null) {
        auto_gf_DasdanRetreats_Trigger = TriggerCreate("auto_gf_DasdanRetreats_TriggerFunc");
    }

    TriggerExecute(auto_gf_DasdanRetreats_Trigger, false, false);
}

bool auto_gf_DasdanRetreats_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    unitgroup auto2DC8D3AE_g;
    int auto2DC8D3AE_u;
    unit auto2DC8D3AE_var;
    playergroup auto3CC941FF_g;
    int auto3CC941FF_var;
    const int auto166EFD58_n = 3;
    int auto166EFD58_i;
    unitgroup auto9AC2F08C_g;
    int auto9AC2F08C_u;
    unit auto9AC2F08C_var;
    unitgroup auto97AA1C64_g;
    int auto97AA1C64_u;
    unit auto97AA1C64_var;
    unitgroup auto87D18B3C_g;
    int auto87D18B3C_u;
    unit auto87D18B3C_var;
    unitgroup auto5D9DCE20_g;
    int auto5D9DCE20_u;
    unit auto5D9DCE20_var;
    unitgroup auto105CEF7B_g;
    int auto105CEF7B_u;
    unit auto105CEF7B_var;
    int auto004E2638_n;
    int auto004E2638_i;
    const int auto7793F7FB_ae = 5;
    const int auto7793F7FB_ai = 1;
    playergroup autoFA6DD107_g;
    int autoFA6DD107_var;
    int auto91846D38_n;
    int auto91846D38_i;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    gv_convoyvehiclessafe = 0;
    auto2DC8D3AE_g = gv_convoy;
    auto2DC8D3AE_u = UnitGroupCount(auto2DC8D3AE_g, c_unitCountAll);
    for (;; auto2DC8D3AE_u -= 1) {
        auto2DC8D3AE_var = UnitGroupUnitFromEnd(auto2DC8D3AE_g, auto2DC8D3AE_u);
        if (auto2DC8D3AE_var == null) { break; }
        UnitGroupRemove(gv_convoy, auto2DC8D3AE_var);
    }
    Wait(RandomFixed(20.0, 30.0), c_timeGame);
    gf_LandPhantom(RegionGetCenter(RegionFromId(14)));
    gf_MissionText(StringExternal("Param/Value/204212B8"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_lastlandedphantom), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 12.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_lastlandedphantom);
    Wait(12.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_lastlandedphantom), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 12.0, 270.0);
    auto3CC941FF_g = gv_players;
    auto3CC941FF_var = -1;
    while (true) {
        auto3CC941FF_var = PlayerGroupNextPlayer(auto3CC941FF_g, auto3CC941FF_var);
        if (auto3CC941FF_var < 0) { break; }
        if ((RandomInt(0, 100) >= 75) && (TechTreeUpgradeCount(auto3CC941FF_var, "SpecialForces", c_techCountCompleteOnly) == 0)) {
            UnitCreate(1, gf_randomminitype(), c_unitCreateIgnorePlacement, auto3CC941FF_var, PointWithOffsetPolar(RegionGetCenter(RegionFromId(14)), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
        }
    }
    for (auto166EFD58_i = 1; auto166EFD58_i <= auto166EFD58_n; auto166EFD58_i += 1) {
        UnitCreate(1, "MK44SentryGunPacked", 0, 0, PointWithOffsetPolar(RegionGetCenter(RegionFromId(14)), 4.0, libNtve_gf_RandomAngle()), 0.0);
    }
    Wait(5.0, c_timeGame);
    gf_TakeoffPhantom();
    UnitCreate(1, gf_RandomPoliceType(), 0, 0, RegionRandomPoint(RegionFromId(25)), 0.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitCreate(1, gf_RandomPoliceType(), 0, 0, RegionRandomPoint(RegionFromId(25)), 0.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitCreate(1, gf_RandomPoliceType(), 0, 0, RegionRandomPoint(RegionFromId(25)), 0.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitCreate(1, gf_RandomPoliceType(), 0, 0, RegionRandomPoint(RegionFromId(25)), 0.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitCreate(1, gf_RandomPoliceType(), 0, 0, RegionRandomPoint(RegionFromId(25)), 0.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitCreate(1, gf_RandomPoliceType(), 0, 0, RegionRandomPoint(RegionFromId(25)), 0.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);

    auto9AC2F08C_g = UnitGroup("Civilian", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9AC2F08C_u = UnitGroupCount(auto9AC2F08C_g, c_unitCountAll);
    for (;; auto9AC2F08C_u -= 1) {
        auto9AC2F08C_var = UnitGroupUnitFromEnd(auto9AC2F08C_g, auto9AC2F08C_u);
        if (auto9AC2F08C_var == null) { break; }
        UnitGroupAdd(gv_civilians, auto9AC2F08C_var);
    }
    auto97AA1C64_g = UnitGroup("CivilianFemale", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto97AA1C64_u = UnitGroupCount(auto97AA1C64_g, c_unitCountAll);
    for (;; auto97AA1C64_u -= 1) {
        auto97AA1C64_var = UnitGroupUnitFromEnd(auto97AA1C64_g, auto97AA1C64_u);
        if (auto97AA1C64_var == null) { break; }
        UnitGroupAdd(gv_civilians, auto97AA1C64_var);
    }
    auto87D18B3C_g = UnitGroup("PoliceOfficer", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto87D18B3C_u = UnitGroupCount(auto87D18B3C_g, c_unitCountAll);
    for (;; auto87D18B3C_u -= 1) {
        auto87D18B3C_var = UnitGroupUnitFromEnd(auto87D18B3C_g, auto87D18B3C_u);
        if (auto87D18B3C_var == null) { break; }
        UnitGroupAdd(gv_civilians, auto87D18B3C_var);
    }
    auto5D9DCE20_g = UnitGroup("PoliceOfficerShotgun", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5D9DCE20_u = UnitGroupCount(auto5D9DCE20_g, c_unitCountAll);
    for (;; auto5D9DCE20_u -= 1) {
        auto5D9DCE20_var = UnitGroupUnitFromEnd(auto5D9DCE20_g, auto5D9DCE20_u);
        if (auto5D9DCE20_var == null) { break; }
        UnitGroupAdd(gv_civilians, auto5D9DCE20_var);
    }
    gf_MissionText(StringExternal("Param/Value/7CDCDFF8"));
    Wait(12.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/AED8482D"));
    Wait(15.0, c_timeGame);
    auto105CEF7B_g = UnitGroup("Bunker", c_playerAny, RegionRect(0.0, 150.0, 200.0, 250.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto105CEF7B_u = UnitGroupCount(auto105CEF7B_g, c_unitCountAll);
    for (;; auto105CEF7B_u -= 1) {
        auto105CEF7B_var = UnitGroupUnitFromEnd(auto105CEF7B_g, auto105CEF7B_u);
        if (auto105CEF7B_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto105CEF7B_var, false);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/4A559BFE"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/997BA666"));
    TriggerEnable(gt_RefugeeConvoyEnd, true);
    Wait(15.0, c_timeGame);
    gf_SpawnUndead(1, "Gourmand", 1);
    Wait(15.0, c_timeGame);
    gf_SpawnUndead(1, "Arachnathid", 1);
    gv_refugeesInRoute = true;
    TriggerEnable(gt_RefugeeDies, true);
    SoundPlay(SoundLink("THorner04MusicEventAA", -1), PlayerGroupAll(), 100.0, 0.0);
    while ((gv_refugeeCount != 3)) {
        if ((gv_refugeesInRoute == true)) {
            gf_SpawnRefugees();
            gf_SpawnUndead(1, "Gourmand", 1);
            if ((gv_gamemode >= 3)) {
                gf_SpawnUndead(1, "Lacerti", 2);
                gf_SpawnUndead(1, "Raisuli", 2);
                gf_SpawnUndead(3, "Hunter", 2);
            }
            auto004E2638_n = gv_gamemode;
            for (auto004E2638_i = 1; auto004E2638_i <= auto004E2638_n; auto004E2638_i += 1) {
                gf_SpawnUndead(1, "Morbus", 2);
                gf_SpawnUndead(3, "Swollen", 2);
                gf_SpawnUndead(3, "Swollen", 2);
                gf_SpawnUndead(1, "Spitter", 2);
                gf_SpawnUndead(1, "Cursed", 3);
                gf_SpawnUndead(20, "Hopper", 5);
            }
        }
        Wait(5.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/3C62ADF7"));
    gf_SpawnRefugees();
    if ((gv_averageXP >= 50000)) {
        gf_SpawnUndead(1, "Metasis", 1);
    }
    if ((gv_averageXP >= 80000)) {
        gf_SpawnUndead(1, "Grotesque", 1);
    }
    gf_StartSpawnLoop(3, gv_loopType);
    TriggerEnable(gt_WeaponsItems2, true);
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/4EC09CC0"));
    Wait(5.0, c_timeGame);
    gv_convoy_Set = false;
    gv_patrolroute[1] = PointFromId(2326);
    gv_patrolroute[2] = PointFromId(1793);
    gv_patrolroute[3] = PointFromId(1788);
    gv_patrolroute[4] = PointFromId(1787);
    gv_patrolroute[5] = PointFromId(1786);
    gv_patrolroute[6] = PointFromId(1785);
    gv_patrolroute[7] = PointFromId(1777);
    gv_patrolroute[8] = PointFromId(1778);
    gv_patrolroute[9] = PointFromId(2324);
    gv_patrolroute[10] = PointFromId(2323);
    gv_patrolroute[11] = PointFromId(2322);
    gv_patrolroute[12] = PointFromId(2631);
    gv_patrolmax = 12;
    gv_pauseSpawning = true;
    gv_convoyfinal = false;
    gv_convoyvehiclessafe = 0;
    Wait(25.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/B4BD60FF"));
    ObjectiveSetState(gv_secondObj, c_objectiveStateActive);
    ObjectiveSetName(gv_secondObj, StringExternal("Param/Value/0F1679D7"));
    ObjectiveSetDescription(gv_secondObj, StringExternal("Param/Value/2FFD2BF1"));
    TriggerEnable(gt_RefugeeConvoyDies, true);
    TriggerEnable(gt_RefugeeConvoyLeave, true);
    TriggerEnable(gt_RefugeeConvoyLoop, true);
    UnitGroupClear(gv_convoy);
    lv_loopint = 1;
    for ( ; ( (auto7793F7FB_ai >= 0 && lv_loopint <= auto7793F7FB_ae) || (auto7793F7FB_ai < 0 && lv_loopint >= auto7793F7FB_ae) ) ; lv_loopint += auto7793F7FB_ai ) {
        if ((lv_loopint == 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "ColonistTransport", c_unitCreateIgnorePlacement, 13, RegionGetCenter(RegionFromId(19)), gv_patrolroute[gv_patrolnext]);
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "LMTV", c_unitCreateIgnorePlacement, 13, RegionGetCenter(RegionFromId(19)), gv_patrolroute[gv_patrolnext]);
        }
        autoFA6DD107_g = PlayerGroupAll();
        autoFA6DD107_var = -1;
        while (true) {
            autoFA6DD107_var = PlayerGroupNextPlayer(autoFA6DD107_g, autoFA6DD107_var);
            if (autoFA6DD107_var < 0) { break; }
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, autoFA6DD107_var);
        }
        UnitGroupAdd(gv_convoy, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_patrolroute[gv_patrolnext]), c_orderQueueReplace);
        if ((lv_loopint == 1)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(19)), ColorWithAlpha(0.00, 50.20, 50.20, 0.00), 0.0, 270.0);
            PingSetUnit(PingLastCreated(), UnitLastCreated());
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1B22B4F1"));
            gv_missionping = PingLastCreated();
        }

        if ((lv_loopint < 4)) {
            Wait(10.0, c_timeGame);
        }
        else {
            if ((lv_loopint < 5)) {
                Wait(5.0, c_timeGame);
            }

        }
    }
    gv_convoy_Set = true;
    gv_pauseSpawning = false;
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Raisuli", 2);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
    }
    auto91846D38_n = gv_gamemode;
    for (auto91846D38_i = 1; auto91846D38_i <= auto91846D38_n; auto91846D38_i += 1) {
        Wait(10.0, c_timeGame);
        gf_SpawnUndead(1, "Morbus", 3);
        gf_SpawnUndead(1, "Raisuli", 3);
        gf_SpawnUndead(1, "Cursed", 3);
        gf_SpawnUndead(2, "Bruchus", 2);
        gf_SpawnUndead(7, "Glutton", 2);
        Wait(10.0, c_timeGame);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndeadImmediate(4, "Charger", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Boomer", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Risen", 1);
    }
    Wait(40.0, c_timeGame);
    if ((gv_gamemode >= 4)) {
        gf_MissionText(StringExternal("Param/Value/FD1B1039"));
        gf_SpawnUndead(1, "Darreus", 1);
    }
    return true;
}

trigger auto_gf_SpawnRefugees_Trigger = null;

void gf_SpawnRefugees () {
    if (auto_gf_SpawnRefugees_Trigger == null) {
        auto_gf_SpawnRefugees_Trigger = TriggerCreate("auto_gf_SpawnRefugees_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnRefugees_Trigger, false, false);
}

bool auto_gf_SpawnRefugees_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    region[5] lv_otherEntrances;
    int lv_ping;
    unitgroup lv_refugees;
    unitgroup lv_refugees2;
    int lv_refugeessaved;
    int lv_loopint;

    // Automatic Variable Declarations
    const int auto3F87E3B2_ae = 4;
    const int auto3F87E3B2_ai = 1;
    int autoE247C56B_n;
    int autoE247C56B_i;
    unitgroup auto04E2BD54_g;
    int auto04E2BD54_u;
    unit auto04E2BD54_var;
    playergroup autoD1522B8B_g;
    int autoD1522B8B_var;
    unitgroup autoED4971D7_g;
    int autoED4971D7_u;
    unit autoED4971D7_var;
    unitgroup auto10C7C218_g;
    int auto10C7C218_u;
    unit auto10C7C218_var;
    playergroup auto08A70A4E_g;
    int auto08A70A4E_var;
    unitgroup autoDA3A07CE_g;
    int autoDA3A07CE_u;
    unit autoDA3A07CE_var;

    // Variable Initialization
    lv_ping = c_invalidPingId;
    lv_refugees = UnitGroupEmpty();
    lv_refugees2 = UnitGroupEmpty();

    // Implementation
    gv_refugeesInRoute = false;
    lv_otherEntrances[1] = RegionFromId(17);
    lv_otherEntrances[2] = RegionFromId(130);
    lv_otherEntrances[3] = RegionFromId(141);
    lv_otherEntrances[4] = RegionFromId(161);
    SoundPlay(SoundLink("BridgeToStarMapTransition", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_refugeeCount < 3)) {
        gf_MissionText(StringExternal("Param/Value/1F65254A"));
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(18)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 5.0, 270.0);
    lv_loopint = 1;
    for ( ; ( (auto3F87E3B2_ai >= 0 && lv_loopint <= auto3F87E3B2_ae) || (auto3F87E3B2_ai < 0 && lv_loopint >= auto3F87E3B2_ae) ) ; lv_loopint += auto3F87E3B2_ai ) {
        UnitCreate(RandomInt(2, 3), "Civilian", 0, 0, RegionGetCenter(lv_otherEntrances[lv_loopint]), 270.0);
        UnitGroupAddUnitGroup(gv_civilians, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_refugees2, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(gv_refugeegroup, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(gv_undeadTargetGroup, UnitLastCreatedGroup());
        UnitGroupIssueOrder(lv_refugees2, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueAddToEnd);
    }
    Wait(5.0, c_timeGame);
    UnitCreate(RandomInt(7, 9), "Civilian", 0, 0, RegionGetCenter(RegionFromId(18)), 180.0);
    UnitGroupAddUnitGroup(gv_civilians, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_refugees, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(gv_refugeegroup, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(gv_undeadTargetGroup, UnitLastCreatedGroup());
    autoE247C56B_n = RandomInt(4, 5);
    for (autoE247C56B_i = 1; autoE247C56B_i <= autoE247C56B_n; autoE247C56B_i += 1) {
        UnitCreate(1, gf_RandomPoliceType(), 0, 0, RegionGetCenter(RegionFromId(18)), 180.0);
        UnitGroupAddUnitGroup(gv_civilians, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_refugees, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(gv_refugeegroup, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(gv_undeadTargetGroup, UnitLastCreatedGroup());
        auto04E2BD54_g = UnitLastCreatedGroup();
        auto04E2BD54_u = UnitGroupCount(auto04E2BD54_g, c_unitCountAll);
        for (;; auto04E2BD54_u -= 1) {
            auto04E2BD54_var = UnitGroupUnitFromEnd(auto04E2BD54_g, auto04E2BD54_u);
            if (auto04E2BD54_var == null) { break; }
            UnitBehaviorAdd(auto04E2BD54_var, "EscortingSlow", auto04E2BD54_var, 1);
        }
    }
    UnitGroupIssueOrder(lv_refugees, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(380563015)), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_refugees, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(788332978)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(lv_refugees, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1790566390)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(lv_refugees, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1654046853)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(lv_refugees, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueAddToEnd);
    autoD1522B8B_g = gv_players;
    autoD1522B8B_var = -1;
    while (true) {
        autoD1522B8B_var = PlayerGroupNextPlayer(autoD1522B8B_g, autoD1522B8B_var);
        if (autoD1522B8B_var < 0) { break; }
        autoED4971D7_g = lv_refugees;
        autoED4971D7_u = UnitGroupCount(autoED4971D7_g, c_unitCountAll);
        for (;; autoED4971D7_u -= 1) {
            autoED4971D7_var = UnitGroupUnitFromEnd(autoED4971D7_g, autoED4971D7_u);
            if (autoED4971D7_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(autoED4971D7_var, true, autoD1522B8B_var);
        }
    }
    while (true) {
        if ((UnitGroupCount(lv_refugees, c_unitCountAlive) == 0) && (UnitGroupCount(lv_refugees2, c_unitCountAlive) == 0)) {
            gv_refugeeCount += 1;
            gf_MissionText((IntToText(lv_refugeessaved) + StringExternal("Param/Value/8B761E72")));
            lv_refugees = null;
            break;
        }
        auto10C7C218_g = lv_refugees;
        auto10C7C218_u = UnitGroupCount(auto10C7C218_g, c_unitCountAll);
        for (;; auto10C7C218_u -= 1) {
            auto10C7C218_var = UnitGroupUnitFromEnd(auto10C7C218_g, auto10C7C218_u);
            if (auto10C7C218_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto10C7C218_var, RegionFromId(24)) == true)) {
                gf_MissionItemPingRemoveItem(auto10C7C218_var);
                UnitGroupRemove(lv_refugees, auto10C7C218_var);
                UnitGroupRemove(gv_refugeegroup, auto10C7C218_var);
                UnitGroupRemove(gv_undeadTargetGroup, auto10C7C218_var);
                auto08A70A4E_g = gv_players;
                auto08A70A4E_var = -1;
                while (true) {
                    auto08A70A4E_var = PlayerGroupNextPlayer(auto08A70A4E_g, auto08A70A4E_var);
                    if (auto08A70A4E_var < 0) { break; }
                    libNtve_gf_ShareVisionofUnit(auto10C7C218_var, false, auto08A70A4E_var);
                }
                if (((UnitGetType(auto10C7C218_var) == "PoliceOfficer") || (UnitGetType(auto10C7C218_var) == "PoliceOfficerShotgun"))) {
                    UnitIssueOrder(auto10C7C218_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(25))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(auto10C7C218_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
                }
                UnitGroupAdd(gv_wanderers[RandomInt(1, 2)], auto10C7C218_var);
                lv_refugeessaved += 1;
            }
        }
        autoDA3A07CE_g = lv_refugees2;
        autoDA3A07CE_u = UnitGroupCount(autoDA3A07CE_g, c_unitCountAll);
        for (;; autoDA3A07CE_u -= 1) {
            autoDA3A07CE_var = UnitGroupUnitFromEnd(autoDA3A07CE_g, autoDA3A07CE_u);
            if (autoDA3A07CE_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(autoDA3A07CE_var, RegionFromId(24)) == true)) {
                UnitGroupRemove(lv_refugees2, autoDA3A07CE_var);
                UnitGroupRemove(gv_refugeegroup, autoDA3A07CE_var);
                UnitGroupRemove(gv_undeadTargetGroup, autoDA3A07CE_var);
                UnitIssueOrder(autoDA3A07CE_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
                UnitGroupAdd(gv_wanderers[RandomInt(1, 2)], autoDA3A07CE_var);
                lv_refugeessaved += 1;
            }
        }
        Wait(3.0, c_timeGame);
    }
    if ((gv_refugeeCount < 3)) {
        Wait(RandomInt(30, 45), c_timeGame);
        gv_refugeesInRoute = true;
    }
    return true;
}

void gf_TakeoffPhantomSpef (unit lp_Unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lp_Unit, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lp_Unit, true);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(lp_Unit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(8.0, c_timeGame);
    UnitRemove(lp_Unit);
}

void gf_Chapter3DarkSkies () {
    // Automatic Variable Declarations
    unitgroup auto91F43640_g;
    int auto91F43640_u;
    unit auto91F43640_var;
    unitgroup auto2A850ABE_g;
    int auto2A850ABE_u;
    unit auto2A850ABE_var;
    unitgroup autoB8744A02_g;
    int autoB8744A02_u;
    unit autoB8744A02_var;
    unitgroup autoC1FDFB2E_g;
    int autoC1FDFB2E_u;
    unit autoC1FDFB2E_var;
    unitgroup auto6B798FE9_g;
    int auto6B798FE9_u;
    unit auto6B798FE9_var;
    playergroup auto78C67307_g;
    int auto78C67307_var;
    playergroup auto82023260_g;
    int auto82023260_var;
    unitgroup auto9268358B_g;
    int auto9268358B_u;
    unit auto9268358B_var;
    playergroup autoEECF6772_g;
    int autoEECF6772_var;
    unitgroup auto9F2343B5_g;
    int auto9F2343B5_u;
    unit auto9F2343B5_var;
    playergroup autoA94000C8_g;
    int autoA94000C8_var;
    playergroup auto7E45526B_g;
    int auto7E45526B_var;

    // Implementation
    gf_SkipActionsIfGameOver();
    gf_SwitchSolarToNormal();
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOn();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    auto91F43640_g = gv_heroesGroup;
    auto91F43640_u = UnitGroupCount(auto91F43640_g, c_unitCountAll);
    for (;; auto91F43640_u -= 1) {
        auto91F43640_var = UnitGroupUnitFromEnd(auto91F43640_g, auto91F43640_u);
        if (auto91F43640_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto91F43640_var, false);
    }
    auto2A850ABE_g = gv_playerLNs;
    auto2A850ABE_u = UnitGroupCount(auto2A850ABE_g, c_unitCountAll);
    for (;; auto2A850ABE_u -= 1) {
        auto2A850ABE_var = UnitGroupUnitFromEnd(auto2A850ABE_g, auto2A850ABE_u);
        if (auto2A850ABE_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto2A850ABE_var, false);
        UnitGroupAdd(gv_transitionalgroup, auto2A850ABE_var);
    }
    autoB8744A02_g = gv_playerminis;
    autoB8744A02_u = UnitGroupCount(autoB8744A02_g, c_unitCountAll);
    for (;; autoB8744A02_u -= 1) {
        autoB8744A02_var = UnitGroupUnitFromEnd(autoB8744A02_g, autoB8744A02_u);
        if (autoB8744A02_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoB8744A02_var, false);
        UnitGroupAdd(gv_transitionalgroup, autoB8744A02_var);
    }
    TriggerEnable(gt_PlayerKills, false);
    autoC1FDFB2E_g = gv_lNavailable;
    autoC1FDFB2E_u = UnitGroupCount(autoC1FDFB2E_g, c_unitCountAll);
    for (;; autoC1FDFB2E_u -= 1) {
        autoC1FDFB2E_var = UnitGroupUnitFromEnd(autoC1FDFB2E_g, autoC1FDFB2E_u);
        if (autoC1FDFB2E_var == null) { break; }
        UnitBehaviorRemove(autoC1FDFB2E_var, "LNInvulnerability", 1);
        UnitKill(autoC1FDFB2E_var);
    }
    auto6B798FE9_g = gv_undeadGroup;
    auto6B798FE9_u = UnitGroupCount(auto6B798FE9_g, c_unitCountAll);
    for (;; auto6B798FE9_u -= 1) {
        auto6B798FE9_var = UnitGroupUnitFromEnd(auto6B798FE9_g, auto6B798FE9_u);
        if (auto6B798FE9_var == null) { break; }
        UnitKill(auto6B798FE9_var);
    }
    TriggerEnable(gt_PlayerKills, true);
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/0ACA84F7"), StringExternal("Param/Value/5AEEA936"), 7.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/8E973411"), 0, true);
    Wait(7.0, c_timeGame);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/98D935B6"), StringExternal("Param/Value/BDB5344A"), 8.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    Wait(8.0, c_timeGame);
    UIShowTextCrawl(PlayerGroupAll(), StringToText(""), StringExternal("Param/Value/9F896666"), 8.5, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    Wait(8.5, c_timeGame);
    UIShowTextCrawl(PlayerGroupAll(), StringToText(""), StringExternal("Param/Value/2F3D0522"), 8.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    Wait(8.0, c_timeGame);
    GameSetLighting("UACDusk", 0.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOff();
    gv_pauseSpawning = true;
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FlareGun", 0, 0, RegionRandomPoint(RegionFromId(76)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmmoCase", 0, 0, RegionRandomPoint(RegionFromId(76)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmmoCase", 0, 0, RegionRandomPoint(RegionFromId(76)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGunPacked", 0, 0, RegionRandomPoint(RegionFromId(76)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGunPacked", 0, 0, RegionRandomPoint(RegionFromId(76)));
    libNtve_gf_SetAlliance(13, 15, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    auto78C67307_g = gv_players;
    auto78C67307_var = -1;
    while (true) {
        auto78C67307_var = PlayerGroupNextPlayer(auto78C67307_g, auto78C67307_var);
        if (auto78C67307_var < 0) { break; }
        libNtve_gf_SetAlliance(auto78C67307_var, 15, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    SoundPlay(SoundLink("TRaynor01MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    auto82023260_g = PlayerGroupAll();
    auto82023260_var = -1;
    while (true) {
        auto82023260_var = PlayerGroupNextPlayer(auto82023260_g, auto82023260_var);
        if (auto82023260_var < 0) { break; }
        CameraApplyInfo(auto82023260_var, CameraInfoFromId(2564), 0.0, -1, 10, true);
        CameraLockInput(auto82023260_var, true);
    }
    auto9268358B_g = gv_heroesGroup;
    auto9268358B_u = UnitGroupCount(auto9268358B_g, c_unitCountAll);
    for (;; auto9268358B_u -= 1) {
        auto9268358B_var = UnitGroupUnitFromEnd(auto9268358B_g, auto9268358B_u);
        if (auto9268358B_var == null) { break; }
        if ((UnitIsAlive(auto9268358B_var) == false) && (gv_mod_1life == false)) {
            UnitCreateEffectUnit(auto9268358B_var, "ReviveModifyUnit", auto9268358B_var);
            Wait(0.1, c_timeGame);
        }
        if ((UnitIsAlive(auto9268358B_var) == true)) {
            UnitSetPosition(auto9268358B_var, RegionRandomPoint(RegionFromId(31)), false);
            UnitSetPropertyFixed(auto9268358B_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(auto9268358B_var, c_unitPropEnergyPercent, 100.0);
            if (((UnitHasBehavior2(auto9268358B_var, "Prone") == true) || (UnitHasBehavior2(auto9268358B_var, "Prone2") == true))) {
                UnitIssueOrder(auto9268358B_var, Order(AbilityCommand("Prone", 0)), c_orderQueueReplace);
            }
            UnitIssueOrder(auto9268358B_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionGetCenter(RegionFromId(76)), 4.0, (30.0 * IntToFixed(UnitGetOwner(auto9268358B_var))))), c_orderQueueReplace);
        }
        libNtve_gf_PauseUnit(auto9268358B_var, false);
        libNtve_gf_ShowHideUnit(auto9268358B_var, true);
        libNtve_gf_MakeUnitInvulnerable(auto9268358B_var, false);
    }
    autoEECF6772_g = gv_players;
    autoEECF6772_var = -1;
    while (true) {
        autoEECF6772_var = PlayerGroupNextPlayer(autoEECF6772_g, autoEECF6772_var);
        if (autoEECF6772_var < 0) { break; }
        if ((RandomInt(0, 100) >= 75) && (TechTreeUpgradeCount(autoEECF6772_var, "SpecialForces", c_techCountCompleteOnly) == 0)) {
            UnitCreate(1, gf_randomminitype(), c_unitCreateIgnorePlacement, autoEECF6772_var, PointWithOffsetPolar(RegionGetCenter(RegionFromId(31)), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(76))), c_orderQueueReplace);
        }
    }
    auto9F2343B5_g = gv_transitionalgroup;
    auto9F2343B5_u = UnitGroupCount(auto9F2343B5_g, c_unitCountAll);
    for (;; auto9F2343B5_u -= 1) {
        auto9F2343B5_var = UnitGroupUnitFromEnd(auto9F2343B5_g, auto9F2343B5_u);
        if (auto9F2343B5_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto9F2343B5_var, false);
        UnitSetPropertyFixed(auto9F2343B5_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto9F2343B5_var, c_unitPropEnergyPercent, 100.0);
        libNtve_gf_PauseUnit(auto9F2343B5_var, false);
        libNtve_gf_ShowHideUnit(auto9F2343B5_var, true);
        UnitSetPosition(auto9F2343B5_var, RegionRandomPoint(RegionFromId(19)), false);
        if ((UnitHasBehavior2(auto9F2343B5_var, "Prone") == true)) {
            UnitIssueOrder(auto9F2343B5_var, Order(AbilityCommand("Prone", 0)), c_orderQueueReplace);
        }
        UnitIssueOrder(auto9F2343B5_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(76))), c_orderQueueReplace);
    }
    gf_MissionText(StringExternal("Param/Value/44F5A4EF"));
    Wait(6.5, c_timeGame);
    autoA94000C8_g = PlayerGroupAll();
    autoA94000C8_var = -1;
    while (true) {
        autoA94000C8_var = PlayerGroupNextPlayer(autoA94000C8_g, autoA94000C8_var);
        if (autoA94000C8_var < 0) { break; }
        CameraApplyInfo(autoA94000C8_var, CameraInfoFromId(2565), 6.0, -1, 10, true);
    }
    Wait(2.5, c_timeGame);
    auto7E45526B_g = gv_players;
    auto7E45526B_var = -1;
    while (true) {
        auto7E45526B_var = PlayerGroupNextPlayer(auto7E45526B_g, auto7E45526B_var);
        if (auto7E45526B_var < 0) { break; }
        CameraLockInput(auto7E45526B_var, false);
    }
    Wait(3.5, c_timeGame);
    if ((gv_missionAutostart == true)) {
        gf_Heliport();
    }
}

void gf_Heliport () {
    // Variable Declarations
    region[5] lv_heliportDockingBay;
    int lv_currentBay;
    int lv_int;
    int lv_landedPhantoms;

    // Automatic Variable Declarations
    unitgroup auto0B88E536_g;
    int auto0B88E536_u;
    unit auto0B88E536_var;
    const int auto6C3A62CE_ae = 2;
    const int auto6C3A62CE_ai = 1;
    const int autoCC062EE8_ae = 2;
    const int autoCC062EE8_ai = 1;
    const int autoB5DBAD4A_ae = 2;
    const int autoB5DBAD4A_ai = 1;
    const int autoD705E70D_ae = 2;
    const int autoD705E70D_ai = 1;
    const int autoA8F36511_ae = 2;
    const int autoA8F36511_ai = 1;
    const int auto020CA46C_ae = 2;
    const int auto020CA46C_ai = 1;
    const int autoD923E006_ae = 2;
    const int autoD923E006_ai = 1;
    const int autoDF6801FD_ae = 2;
    const int autoDF6801FD_ai = 1;
    const int auto41B9FC91_ae = 2;
    const int auto41B9FC91_ai = 1;
    const int auto24A5B9B9_ae = 2;
    const int auto24A5B9B9_ai = 1;
    const int autoFD3C16F6_ae = 2;
    const int autoFD3C16F6_ai = 1;
    const int autoEF019C84_ae = 2;
    const int autoEF019C84_ai = 1;

    // Variable Initialization

    // Implementation
    lv_heliportDockingBay[1] = RegionFromId(67);
    lv_heliportDockingBay[2] = RegionFromId(70);
    lv_heliportDockingBay[3] = RegionFromId(71);
    lv_heliportDockingBay[4] = RegionFromId(72);
    auto0B88E536_g = gv_patrol;
    auto0B88E536_u = UnitGroupCount(auto0B88E536_g, c_unitCountAll);
    for (;; auto0B88E536_u -= 1) {
        auto0B88E536_var = UnitGroupUnitFromEnd(auto0B88E536_g, auto0B88E536_u);
        if (auto0B88E536_var == null) { break; }
        UnitGroupRemove(gv_patrol, auto0B88E536_var);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/A87AFCE8"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/76FCDC6B"));
    Wait(4.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/6C687914"));
    Wait(8.0, c_timeGame);
    gv_pauseSpawning = false;
    TimerStart(gv_missiontimer, 45.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/57DE65D5"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    Wait(45.0, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gf_SkipActionsIfGameOver();
    lv_currentBay = RandomInt(1, 4);
    gf_LandPhantom(RegionGetCenter(lv_heliportDockingBay[lv_currentBay]));
    gf_MissionText(StringExternal("Param/Value/0C30E7BC"));
    Wait(10.0, c_timeGame);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_lastlandedphantom), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 8.0, 270.0);
    lv_int = 1;
    for ( ; ( (auto6C3A62CE_ai >= 0 && lv_int <= auto6C3A62CE_ae) || (auto6C3A62CE_ai < 0 && lv_int >= auto6C3A62CE_ae) ) ; lv_int += auto6C3A62CE_ai ) {
        UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportDockingBay[lv_currentBay]), 270.0);
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(74));
        Wait(1.0, c_timeGame);
    }
    gf_MissionText(StringExternal("Param/Value/767C29DD"));
    lv_int = 1;
    for ( ; ( (autoCC062EE8_ai >= 0 && lv_int <= autoCC062EE8_ae) || (autoCC062EE8_ai < 0 && lv_int >= autoCC062EE8_ae) ) ; lv_int += autoCC062EE8_ai ) {
        UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportDockingBay[lv_currentBay]), 270.0);
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(75));
        Wait(1.0, c_timeGame);
    }
    lv_int = 1;
    for ( ; ( (autoB5DBAD4A_ai >= 0 && lv_int <= autoB5DBAD4A_ae) || (autoB5DBAD4A_ai < 0 && lv_int >= autoB5DBAD4A_ae) ) ; lv_int += autoB5DBAD4A_ai ) {
        UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportDockingBay[lv_currentBay]), 270.0);
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(68));
        Wait(1.0, c_timeGame);
    }
    lv_int = 1;
    for ( ; ( (autoD705E70D_ai >= 0 && lv_int <= autoD705E70D_ae) || (autoD705E70D_ai < 0 && lv_int >= autoD705E70D_ae) ) ; lv_int += autoD705E70D_ai ) {
        UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportDockingBay[lv_currentBay]), 270.0);
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(69));
        Wait(1.0, c_timeGame);
    }
    Wait(8.0, c_timeGame);
    gf_TakeoffPhantom();
    gf_SpawnUndead(1, "Minerva", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
    }
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
    }
    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Gargantuan", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead(2, "AcidVore", 2);
        gf_SpawnUndead(1, "Darreus", 1);
    }
    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(1, "Arachnathid", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(2, "AcidVore", 2);
        gf_SpawnUndead(1, "Darreus", 1);
    }
    TimerStart(gv_missiontimer, 45.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/FD747C71"));
    Wait(45.0, c_timeGame);
    gf_SkipActionsIfGameOver();
    if ((UnitGroupCount(UnitGroup(null, 14, RegionFromId(126), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) <= 8) && (UnitGroupCount(UnitGroup(null, 14, RegionFromId(126), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        gf_MissionText(StringExternal("Param/Value/607F87B0"));
        lv_currentBay = RandomInt(1, 4);
        lv_landedPhantoms += 1;
        gf_LandPhantom(RegionGetCenter(lv_heliportDockingBay[lv_currentBay]));
        Wait(10.0, c_timeGame);
        gf_SucceedMission(25, StringExternal("Param/Value/71ECD4DE"), -1, false);
        SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_lastlandedphantom), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 8.0, 270.0);
        lv_int = 1;
        for ( ; ( (autoA8F36511_ai >= 0 && lv_int <= autoA8F36511_ae) || (autoA8F36511_ai < 0 && lv_int >= autoA8F36511_ae) ) ; lv_int += autoA8F36511_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportDockingBay[lv_currentBay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(74));
            Wait(1.0, c_timeGame);
        }
        lv_int = 1;
        for ( ; ( (auto020CA46C_ai >= 0 && lv_int <= auto020CA46C_ae) || (auto020CA46C_ai < 0 && lv_int >= auto020CA46C_ae) ) ; lv_int += auto020CA46C_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportDockingBay[lv_currentBay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(75));
            Wait(1.0, c_timeGame);
        }
        lv_int = 1;
        for ( ; ( (autoD923E006_ai >= 0 && lv_int <= autoD923E006_ae) || (autoD923E006_ai < 0 && lv_int >= autoD923E006_ae) ) ; lv_int += autoD923E006_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportDockingBay[lv_currentBay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(68));
            Wait(1.0, c_timeGame);
        }
        lv_int = 1;
        for ( ; ( (autoDF6801FD_ai >= 0 && lv_int <= autoDF6801FD_ae) || (autoDF6801FD_ai < 0 && lv_int >= autoDF6801FD_ae) ) ; lv_int += autoDF6801FD_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportDockingBay[lv_currentBay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(69));
            Wait(1.0, c_timeGame);
        }
        Wait(8.0, c_timeGame);
        gf_TakeoffPhantom();
    }
    else {
        gf_MissionText(StringExternal("Param/Value/DABA5C4D"));
        gv_infestationLevel += 1;
    }
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "AcidVore", 3);
    gf_SpawnUndead(20, "Hopper", 1);
    gf_SpawnUndead(1, "Arachnathid", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(1, "Darreus", 1);
        gf_SpawnUndead(1, "Ares", 1);
        gf_SpawnUndead(1, "Darreus", 1);
    }
    TimerStart(gv_missiontimer, 45.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/80990020"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    Wait(45.0, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gf_SkipActionsIfGameOver();
    if ((UnitGroupCount(UnitGroup(null, 14, RegionFromId(126), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) <= 8) && (UnitGroupCount(UnitGroup(null, 14, RegionFromId(126), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
        gf_MissionText(StringExternal("Param/Value/DD553E53"));
        lv_currentBay = RandomInt(1, 4);
        lv_landedPhantoms += 1;
        gf_LandPhantom(RegionGetCenter(lv_heliportDockingBay[lv_currentBay]));
        Wait(10.0, c_timeGame);
        gf_SucceedMission(25, StringExternal("Param/Value/05AB0EB2"), -1, false);
        SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_lastlandedphantom), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 8.0, 270.0);
        lv_int = 1;
        for ( ; ( (auto41B9FC91_ai >= 0 && lv_int <= auto41B9FC91_ae) || (auto41B9FC91_ai < 0 && lv_int >= auto41B9FC91_ae) ) ; lv_int += auto41B9FC91_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportDockingBay[lv_currentBay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(74));
            Wait(1.0, c_timeGame);
        }
        lv_int = 1;
        for ( ; ( (auto24A5B9B9_ai >= 0 && lv_int <= auto24A5B9B9_ae) || (auto24A5B9B9_ai < 0 && lv_int >= auto24A5B9B9_ae) ) ; lv_int += auto24A5B9B9_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportDockingBay[lv_currentBay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(75));
            Wait(1.0, c_timeGame);
        }
        lv_int = 1;
        for ( ; ( (autoFD3C16F6_ai >= 0 && lv_int <= autoFD3C16F6_ae) || (autoFD3C16F6_ai < 0 && lv_int >= autoFD3C16F6_ae) ) ; lv_int += autoFD3C16F6_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportDockingBay[lv_currentBay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(68));
            Wait(1.0, c_timeGame);
        }
        lv_int = 1;
        for ( ; ( (autoEF019C84_ai >= 0 && lv_int <= autoEF019C84_ae) || (autoEF019C84_ai < 0 && lv_int >= autoEF019C84_ae) ) ; lv_int += autoEF019C84_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportDockingBay[lv_currentBay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(69));
            Wait(1.0, c_timeGame);
        }
        Wait(8.0, c_timeGame);
        gf_TakeoffPhantom();
    }
    else {
        gf_MissionText(StringExternal("Param/Value/8770FA59"));
        gv_infestationLevel += 1;
    }
    if ((lv_landedPhantoms >= 1)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    }
    else {
        gf_UpdateMissionCompletionTracker(false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    if ((gv_missionAutostart == true)) {
        gf_DarkSky();
    }
}

void gf_DarkSky () {
    // Automatic Variable Declarations
    playergroup auto2C738D6C_g;
    int auto2C738D6C_var;

    // Implementation
    gf_SkipActionsIfGameOver();
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/338D0144"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/880E9679"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/96F756CC"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/AA0B1850"));
    Wait(20.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/3AE6B3B4"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D1930A73"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/0F5CC379"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/76816484"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/41D7FB8B"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D85302E9"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D49C0EC6"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/551E3F4A"));
    Wait(7.0, c_timeGame);
    auto2C738D6C_g = gv_players;
    auto2C738D6C_var = -1;
    while (true) {
        auto2C738D6C_var = PlayerGroupNextPlayer(auto2C738D6C_g, auto2C738D6C_var);
        if (auto2C738D6C_var < 0) { break; }
        gv_playermodevote[auto2C738D6C_var] = 0;
    }
    DialogCreate(300, 350, c_anchorTopLeft, 0, 100, true);
    gv_dsdialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_dsdialog, 250, 150, c_anchorTop, 0, 25, StringExternal("Param/Value/456D9516"), StringExternal("Param/Value/89A7C170"), "");
    gv_dsdialogbuttons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_dsdialog, 250, 150, c_anchorBottom, 0, 25, StringExternal("Param/Value/9B0791F7"), StringExternal("Param/Value/B5E2D94D"), "");
    gv_dsdialogbuttons[2] = DialogControlLastCreated();
    DialogSetVisible(gv_dsdialog, PlayerGroupAll(), true);
    TimerStart(gv_missiontimer, 40.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/06691435"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_DSVoteEnd, true);
    TriggerEnable(gt_DSDialogButton, true);
}

trigger auto_gf_SearchThalimHomes_Trigger = null;

void gf_SearchThalimHomes () {
    if (auto_gf_SearchThalimHomes_Trigger == null) {
        auto_gf_SearchThalimHomes_Trigger = TriggerCreate("auto_gf_SearchThalimHomes_TriggerFunc");
    }

    TriggerExecute(auto_gf_SearchThalimHomes_Trigger, false, false);
}

bool auto_gf_SearchThalimHomes_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    const int autoF23E6FDF_ae = 8;
    const int autoF23E6FDF_ai = 1;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    gv_helpDS = true;
    if ((gv_gamemode == 5)) {
        UnitCreate(1, "M1A3Abrams", 0, 0, RegionGetCenter(RegionFromId(124)), 270.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
        gv_sentryGuns[1] = UnitLastCreated();
        UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
        UnitCreate(1, "M2BradleyIFV", 0, 0, RegionGetCenter(RegionFromId(123)), 0.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
        gv_sentryGuns[2] = UnitLastCreated();
        UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
        UnitCreate(1, "M2BradleyIFV", 0, 0, RegionGetCenter(RegionFromId(125)), 0.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
        gv_sentryGuns[3] = UnitLastCreated();
        UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    }
    else {
        UnitCreate(1, "CombatWalker", 0, 0, RegionGetCenter(RegionFromId(124)), 315.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
        gv_sentryGuns[1] = UnitLastCreated();
        UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
        UnitCreate(1, "CombatWalker", 0, 0, RegionGetCenter(RegionFromId(123)), 270.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
        gv_sentryGuns[2] = UnitLastCreated();
        UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
        UnitCreate(1, "CombatWalker", 0, 0, RegionGetCenter(RegionFromId(125)), 180.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
        gv_sentryGuns[3] = UnitLastCreated();
        UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    }
    gv_highlanders[1] = RegionFromId(283);
    gv_highlanders[2] = RegionFromId(284);
    gv_highlanders[3] = RegionFromId(285);
    gv_highlanders[4] = RegionFromId(286);
    gv_highlanders[5] = RegionFromId(287);
    gv_highlanders[6] = RegionFromId(288);
    gv_highlanders[7] = RegionFromId(289);
    gv_highlanders[8] = RegionFromId(290);
    gv_aORegionsSearched[1] = false;
    gv_aORegionsSearched[2] = false;
    gv_aORegionsSearched[3] = false;
    gv_aORegionsSearched[4] = false;
    gv_aORegionsSearched[5] = false;
    gv_aORegionsSearched[6] = false;
    gv_aORegionsSearched[7] = false;
    gv_aORegionsSearched[8] = false;
    gf_MissionText(StringExternal("Param/Value/E498D9BC"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/BC858F6A"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/18F45879"));
    Wait(7.0, c_timeGame);
    lv_loopint = 1;
    for ( ; ( (autoF23E6FDF_ai >= 0 && lv_loopint <= autoF23E6FDF_ae) || (autoF23E6FDF_ai < 0 && lv_loopint >= autoF23E6FDF_ae) ) ; lv_loopint += autoF23E6FDF_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_highlanders[lv_loopint]), ColorWithAlpha(0.00, 50.20, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E39A20D2"));
        gv_highlanderpings[lv_loopint] = PingLastCreated();
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_highlanders[lv_loopint]));
        gv_waterSiteActors[lv_loopint] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000 0.000000 s");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {0,255,64 5.000000}");
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/1FE6C787"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/862FFAF2"));
    TriggerEnable(gt_SearchHome, true);
    return true;
}

void gf_FindKeyCard () {
    // Variable Declarations
    unit lv_livid;
    bool lv_lividfound;
    bool lv_continue;

    // Automatic Variable Declarations
    unitgroup auto28E14AA3_g;
    int auto28E14AA3_u;
    unit auto28E14AA3_var;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    gf_MissionText(StringExternal("Param/Value/A3D368BC"));
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/4CAEF2C2"));
    Wait(8.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(179)), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0B6492C8"));
    gv_missionping = PingLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(RegionFromId(179)));
    gv_waterSiteActors[1] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000 0.000000 s");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {0,255,64 5.000000}");
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/644DB220"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/8FC357FF"));
    TimerStart(gv_missiontimer, 90.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/70161BE9"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    while (true) {
        auto28E14AA3_g = gv_heroesGroup;
        auto28E14AA3_u = UnitGroupCount(auto28E14AA3_g, c_unitCountAll);
        for (;; auto28E14AA3_u -= 1) {
            auto28E14AA3_var = UnitGroupUnitFromEnd(auto28E14AA3_g, auto28E14AA3_u);
            if (auto28E14AA3_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(auto28E14AA3_var, RegionFromId(179)) == true)) {
                lv_continue = true;
            }
        }
        if (((TimerGetRemaining(gv_missiontimer) == 0.0) || (lv_continue == true))) {
            break;
        }
        Wait(1.0, c_timeGame);
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroy(gv_missionping);
    libNtve_gf_KillModel(gv_waterSiteActors[1]);
    gf_SpawnUndead(1, "Arachnathid", 1);
    if ((TimerGetRemaining(gv_missiontimer) == 0.0)) {
        gf_MissionText(StringExternal("Param/Value/6C59C809"));
        gf_FailMission(10, StringExternal("Param/Value/23287508"), 4);
        gf_UpdateMissionCompletionTracker(false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    }
    else {
        gf_UpdateMissionCompletionTracker(true);
        gf_MissionText(StringExternal("Param/Value/2869255C"));
        gf_SucceedMission(15, StringExternal("Param/Value/42F70541"), 0, false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Livid", 0, 14, RegionRandomPoint(RegionFromId(84)));
    lv_livid = UnitLastCreated();
    Wait(RandomFixed(0.03, 0.1), c_timeGame);
    UnitGroupAdd(gv_undeadGroup, lv_livid);
    UnitIssueOrder(lv_livid, OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    if ((PlayerGroupCount(gv_players) <= 3)) {
        UnitBehaviorAdd(lv_livid, "PlayerHandicap", lv_livid, (4 - PlayerGroupCount(gv_players)));
    }
    else {
        UnitBehaviorAdd(lv_livid, "PlayerModifier", lv_livid, PlayerGroupCount(gv_players));
    }
    UnitBehaviorAdd(lv_livid, "DifficultyModifierBoss", lv_livid, gv_zombieBuffAmount);

    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringExternal("Param/Value/0E3096EA"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(lv_livid), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 15.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_livid);
    Wait(1.5, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/BE6AB04C"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/42F3C873"));
    while (true) {
        if ((UnitIsAlive(lv_livid) == false)) {
            break;
        }
        Wait(1.0, c_timeGame);
    }
    gf_SucceedMission(47, StringExternal("Param/Value/AF597C4B"), 0, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_UpdateMissionCompletionTracker(true);
    gf_SpawnUndead(1, "Gourmand", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(gv_spawnCount, "Glutton", 1);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Risen", 1);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(3.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/6A858828"));
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/9BF96D19"));
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/B32ED9E9"));
    Wait(8.0, c_timeGame);
    if ((gv_missionAutostart == true)) {
        gf_FindKineticEnergyCapacitors();
    }
}

void gf_FindKineticEnergyCapacitors () {
    // Variable Declarations
    int lv_kecspawnregion;
    point lv_kecspawnpoint;
    point lv_kecspawnpointsafe;
    int lv_loopint;
    int lv_kecrand;
    int[4] lv_kECPing;
    unit[4] lv_kECs;
    point[4] lv_kECSP;
    bool[4] lv_kECRegionEnabled;
    bool[4] lv_kECfound;
    bool lv_allfound;
    int lv_regioncount;

    // Automatic Variable Declarations
    const int auto7E372D6B_ae = 3;
    const int auto7E372D6B_ai = 1;
    const int auto35B47530_n = 16;
    int auto35B47530_i;
    const int auto58839FE9_n = 3;
    int auto58839FE9_i;
    const int autoEB5BE35B_ae = 7;
    const int autoEB5BE35B_ai = 1;
    const int auto9827693C_ae = 3;
    const int auto9827693C_ai = 1;
    const int autoDCE10CF5_ae = 7;
    const int autoDCE10CF5_ai = 1;

    // Variable Initialization
    lv_kecspawnpointsafe = RegionGetCenter(RegionFromId(132));
    lv_regioncount = 7;

    // Implementation
    gf_SkipActionsIfGameOver();
    gv_highlanders[1] = RegionFromId(132);
    gv_highlanders[2] = RegionFromId(30);
    gv_highlanders[3] = RegionFromId(134);
    gv_highlanders[4] = RegionFromId(38);
    gv_highlanders[5] = RegionFromId(133);
    gv_highlanders[6] = RegionFromId(21);
    gv_highlanders[7] = RegionFromId(34);
    gv_aORegionsSearched[1] = false;
    gv_aORegionsSearched[2] = false;
    gv_aORegionsSearched[3] = false;
    gv_sensorcount = 0;
    if ((gv_gamemode == 5)) {
        gf_MissionText(StringExternal("Param/Value/D18141BD"));
    }
    else {
        gf_MissionText(StringExternal("Param/Value/B3E8E1C6"));
    }
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D43C208B"));
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/AD75EE9E"));
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/8255AD27"));
    TriggerEnable(gt_FungusCoreSpawns, true);
    TriggerSendEvent("Fungus Spawns");
    Wait(12.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/AADE9C37"));
    Wait(12.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/40517B17"));
    Wait(8.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/B2AAFFCF"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/B8CD1DE2"));
    lv_loopint = 1;
    for ( ; ( (auto7E372D6B_ai >= 0 && lv_loopint <= auto7E372D6B_ae) || (auto7E372D6B_ai < 0 && lv_loopint >= auto7E372D6B_ae) ) ; lv_loopint += auto7E372D6B_ai ) {
        for (auto35B47530_i = 1; auto35B47530_i <= auto35B47530_n; auto35B47530_i += 1) {
            lv_kecrand = RandomInt(1, lv_regioncount);
            lv_kecspawnregion = lv_kecrand;
            lv_kecspawnpoint = RegionRandomPoint(gv_highlanders[lv_kecspawnregion]);
            if ((PointPathingPassable(lv_kecspawnpoint) == true) && (PointPathingIsConnected(lv_kecspawnpoint, lv_kecspawnpointsafe) == true)) {
                break;
            }
            lv_kecspawnpoint = null;
            Wait(0.0625, c_timeGame);
        }
        if ((lv_kecspawnpoint == null)) {
            lv_kecspawnpoint = lv_kecspawnpointsafe;
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KEC", c_unitCreateIgnorePlacement, 0, lv_kecspawnpoint);
        lv_kECs[lv_loopint] = UnitLastCreated();
        lv_kECSP[lv_loopint] = UnitGetPosition(UnitLastCreated());
        lv_kECRegionEnabled[lv_loopint] = true;
        lv_kECPing[lv_loopint] = lv_kecrand;
        lv_regioncount -= 1;
    }
    for (auto58839FE9_i = 1; auto58839FE9_i <= auto58839FE9_n; auto58839FE9_i += 1) {
    }
    TimerStart(gv_missiontimer, (360.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 6.0)), false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/1AF11DE1"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    lv_loopint = 1;
    for ( ; ( (autoEB5BE35B_ai >= 0 && lv_loopint <= autoEB5BE35B_ae) || (autoEB5BE35B_ai < 0 && lv_loopint >= autoEB5BE35B_ae) ) ; lv_loopint += autoEB5BE35B_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_highlanders[lv_loopint]), ColorWithAlpha(0.00, 50.20, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/81B3B556"));
        gv_highlanderpings[lv_loopint] = PingLastCreated();
    }
    while (true) {
        lv_loopint = 1;
        for ( ; ( (auto9827693C_ai >= 0 && lv_loopint <= auto9827693C_ae) || (auto9827693C_ai < 0 && lv_loopint >= auto9827693C_ae) ) ; lv_loopint += auto9827693C_ai ) {
            if ((lv_kECRegionEnabled[lv_loopint] == true)) {
                if ((UnitGetPosition(lv_kECs[lv_loopint]) != lv_kECSP[lv_loopint]) && (gv_sensorset[lv_loopint] == false)) {
                    lv_kECRegionEnabled[lv_loopint] = false;
                    gv_sensorset[lv_loopint] = true;
                    gv_sensorcount += 1;
                    gf_SucceedMission(12, StringExternal("Param/Value/B804B550"), -1, false);
                    UnitRemove(lv_kECs[lv_loopint]);
                    PingDestroy(gv_highlanderpings[lv_kECPing[lv_loopint]]);
                    break;
                }
            }
        }
        lv_allfound = true;
        if ((gv_sensorcount < 3)) {
            lv_allfound = false;
        }
        if (((lv_allfound == true) || (TimerGetRemaining(gv_missiontimer) <= 1.0))) {
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((gv_sensorcount >= 2)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    }
    else {
        gf_UpdateMissionCompletionTracker(false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gv_infestationLevel += 2;
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    UnitRemove(lv_kECs[1]);
    UnitRemove(lv_kECs[2]);
    UnitRemove(lv_kECs[3]);
    lv_loopint = 1;
    for ( ; ( (autoDCE10CF5_ai >= 0 && lv_loopint <= autoDCE10CF5_ae) || (autoDCE10CF5_ai < 0 && lv_loopint >= autoDCE10CF5_ae) ) ; lv_loopint += autoDCE10CF5_ai ) {
        PingDestroy(gv_highlanderpings[lv_loopint]);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    if ((gv_missionAutostart == true)) {
        gf_EscortDarkSky();
    }
}

void gf_EscortDarkSky () {
    // Variable Declarations
    unit[4] lv_operators;
    int lv_loopint;
    region[4] lv_motorpool;
    bool lv_continue;
    region[13] lv_guslaniguards;
    int lv_count;

    // Automatic Variable Declarations
    const int auto2077E3E1_ae = 27;
    const int auto2077E3E1_ai = 1;
    int autoEC84E078_ae;
    const int autoEC84E078_ai = 1;
    int autoD7F93242_ae;
    const int autoD7F93242_ai = 1;
    int autoAA398AB3_ae;
    const int autoAA398AB3_ai = 1;

    // Variable Initialization
    lv_continue = true;

    // Implementation
    lv_motorpool[1] = RegionFromId(124);
    lv_motorpool[2] = RegionFromId(123);
    lv_motorpool[3] = RegionFromId(125);
    lv_guslaniguards[1] = RegionFromId(143);
    lv_guslaniguards[2] = RegionFromId(146);
    lv_guslaniguards[3] = RegionFromId(292);
    lv_guslaniguards[4] = RegionFromId(144);
    lv_guslaniguards[5] = RegionFromId(145);
    lv_guslaniguards[6] = RegionFromId(291);
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/FD8C89C0"));
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/B6E842DF"));
    Wait(15.0, c_timeGame);
    if ((gv_sensorcount == 0)) {
        gf_ProtectBioResonator();
        return ;
    }
    gf_MissionText(StringExternal("Param/Value/EEDADEC6"));
    Wait(8.0, c_timeGame);
    gf_USArmyEscortActions();
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(19)), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 8.0, 270.0);
    lv_loopint = 1;
    for ( ; ( (auto2077E3E1_ai >= 0 && lv_loopint <= auto2077E3E1_ae) || (auto2077E3E1_ai < 0 && lv_loopint >= auto2077E3E1_ae) ) ; lv_loopint += auto2077E3E1_ai ) {
        UnitCreate(1, gf_randomminitype(), 0, 15, RegionGetCenter(RegionFromId(19)), 90.0);
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        gf_DSSkin(UnitLastCreated());
        if ((lv_loopint >= 1) && (lv_loopint <= 4)) {
            gf_MoveToGuardPos(UnitLastCreated(), lv_guslaniguards[1]);
        }
        else if (((lv_loopint == 5))) {
            gf_MoveToGuardPos(UnitLastCreated(), lv_guslaniguards[1]);
            if ((gv_gamemode == 5)) {
                UnitCreate(1, "M2BradleyIFV", 0, 15, RegionGetCenter(RegionFromId(19)), 90.0);
                UnitGroupAdd(gv_patrol, UnitLastCreated());
                UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
                gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(45));
                gf_DSSkin(UnitLastCreated());
            }

        }
        else if ((lv_loopint >= 6) && (lv_loopint <= 9)) {
            gf_MoveToGuardPos(UnitLastCreated(), lv_guslaniguards[2]);
        }
        else if ((lv_loopint >= 10) && (lv_loopint <= 13)) {
            gf_MoveToGuardPos(UnitLastCreated(), lv_guslaniguards[3]);
        }
        else if ((lv_loopint >= 14) && (lv_loopint <= 17)) {
            gf_MoveToGuardPos(UnitLastCreated(), lv_guslaniguards[4]);
        }
        else if (((lv_loopint == 18))) {
            gf_MoveToGuardPos(UnitLastCreated(), lv_guslaniguards[4]);
            if ((gv_gamemode == 5)) {
                UnitCreate(1, "LAV25Recon", 0, 15, RegionGetCenter(RegionFromId(19)), 90.0);
                UnitGroupAdd(gv_patrol, UnitLastCreated());
                UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
                gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(46));
                gf_DSSkin(UnitLastCreated());
            }

        }
        else if ((lv_loopint >= 19) && (lv_loopint <= 22)) {
            gf_MoveToGuardPos(UnitLastCreated(), lv_guslaniguards[5]);
        }
        else if ((lv_loopint >= 23) && (lv_loopint <= 26)) {
            gf_MoveToGuardPos(UnitLastCreated(), lv_guslaniguards[6]);
        }
        else if (((lv_loopint == 27))) {
            gf_MoveToGuardPos(UnitLastCreated(), lv_guslaniguards[6]);
            if ((gv_gamemode == 5)) {
                UnitCreate(1, "LAV25Recon", 0, 15, RegionGetCenter(RegionFromId(19)), 90.0);
                UnitGroupAdd(gv_patrol, UnitLastCreated());
                UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
                gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(47));
                gf_DSSkin(UnitLastCreated());
            }

        }
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/AF21134F"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/C4CB05AD"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(19)), ColorWithAlpha(32.55, 32.55, 100.00, 0.00), 15.0, 270.0);
    Wait(12.0, c_timeGame);
    autoEC84E078_ae = gv_sensorcount;
    lv_loopint = 1;
    for ( ; ( (autoEC84E078_ai >= 0 && lv_loopint <= autoEC84E078_ae) || (autoEC84E078_ai < 0 && lv_loopint >= autoEC84E078_ae) ) ; lv_loopint += autoEC84E078_ai ) {
        UnitCreate(1, "CombatEngineerMini", 0, 15, RegionRandomPoint(RegionFromId(19)), 90.0);
        lv_operators[lv_loopint] = UnitLastCreated();
        gf_MissionItemPingAddItem(UnitLastCreated());
        gf_DSSkin(UnitLastCreated());
        gf_MoveToGuardPos(UnitLastCreated(), lv_motorpool[lv_loopint]);
        Wait(1.0, c_timeGame);
    }
    while (true) {
        autoD7F93242_ae = gv_sensorcount;
        lv_loopint = 1;
        for ( ; ( (autoD7F93242_ai >= 0 && lv_loopint <= autoD7F93242_ae) || (autoD7F93242_ai < 0 && lv_loopint >= autoD7F93242_ae) ) ; lv_loopint += autoD7F93242_ai ) {
            if ((libNtve_gf_UnitInRegion(lv_operators[lv_loopint], lv_motorpool[lv_loopint]) == true)) {
                gf_MissionItemPingRemoveItem(lv_operators[lv_loopint]);
                gf_SucceedMission(14, StringExternal("Param/Value/E008841B"), 0, false);
                UnitRemove(lv_operators[lv_loopint]);
                UnitSetOwner(gv_sentryGuns[lv_loopint], 15, false);
                UnitBehaviorRemove(gv_sentryGuns[lv_loopint], "Unpowered", 1);
                UnitGroupAdd(gv_undeadTargetGroup, gv_sentryGuns[lv_loopint]);
                SoundPlayOnUnit(SoundLink("Raynor_PenetratorRoundChargeUp", -1), PlayerGroupAll(), gv_sentryGuns[lv_loopint], 1.0, 100.0, 0.0);
                gf_MoveToGuardPos(gv_sentryGuns[lv_loopint], lv_guslaniguards[lv_loopint]);
                lv_count += 1;
            }
        }
        lv_continue = true;
        autoAA398AB3_ae = gv_sensorcount;
        lv_loopint = 1;
        for ( ; ( (autoAA398AB3_ai >= 0 && lv_loopint <= autoAA398AB3_ae) || (autoAA398AB3_ai < 0 && lv_loopint >= autoAA398AB3_ae) ) ; lv_loopint += autoAA398AB3_ai ) {
            if ((UnitIsAlive(lv_operators[lv_loopint]) == true)) {
                lv_continue = false;
            }
            else {
                gf_MissionItemPingRemoveItem(lv_operators[lv_loopint]);
            }
        }
        if ((lv_continue == true)) {
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((lv_count >= 1)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    }
    else {
        gf_UpdateMissionCompletionTracker(false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(15.0, c_timeGame);
    if ((gv_missionAutostart == true)) {
        gf_ProtectBioResonator();
    }
}

trigger auto_gf_DSSkin_Trigger = null;
unit auto_gf_DSSkin_lp_dSUnit;

void gf_DSSkin (unit lp_dSUnit) {
    auto_gf_DSSkin_lp_dSUnit = lp_dSUnit;

    if (auto_gf_DSSkin_Trigger == null) {
        auto_gf_DSSkin_Trigger = TriggerCreate("auto_gf_DSSkin_TriggerFunc");
    }

    TriggerExecute(auto_gf_DSSkin_Trigger, false, false);
}

bool auto_gf_DSSkin_TriggerFunc (bool testConds, bool runActions) {
    unit lp_dSUnit = auto_gf_DSSkin_lp_dSUnit;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_dSUnit, "TextureSelectById CamoWhiteTiger");
    libNtve_gf_SendActorMessageToUnit(lp_dSUnit, "TextureSelectById DecalDS");
    UnitSetInfoTip(lp_dSUnit, StringExternal("Param/Value/AC4EC115"));
    return true;
}

void gf_ProtectBioResonator () {
    // Variable Declarations
    int lv_loopint;
    unit[4] lv_dsdropships;
    unit lv_bioResonator;
    int lv_ping;

    // Automatic Variable Declarations
    const int auto6F8A34B9_ae = 6;
    const int auto6F8A34B9_ai = 1;
    const int autoDCBB1CA9_n = 4;
    int autoDCBB1CA9_i;
    unitgroup autoD19F1656_g;
    int autoD19F1656_u;
    unit autoD19F1656_var;
    const int auto1B50259B_n = 5;
    int auto1B50259B_i;
    unitgroup auto6D092C3A_g;
    int auto6D092C3A_u;
    unit auto6D092C3A_var;
    int auto08F18808_val;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    gf_MissionText(StringExternal("Param/Value/8EE53D31"));
    UnitCreate(1, "BioResonator2", c_unitCreateIgnorePlacement, 15, PointFromId(381), 270.0);
    UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
    lv_bioResonator = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_bioResonator, true);
    if ((gv_gamemode == 5)) {
        libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", 0, 15, PointWithOffset(RegionGetCenter(RegionFromId(40)), -12.0, RandomFixed(-4.0, 4.0)), RegionGetCenter(RegionFromId(40)));
        lv_dsdropships[1] = UnitLastCreated();
        UnitIssueOrder(lv_dsdropships[1], OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(RegionFromId(40))), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(lv_dsdropships[1], true);
        libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", 0, 15, PointWithOffset(RegionGetCenter(RegionFromId(42)), -12.0, RandomFixed(-4.0, 4.0)), RegionGetCenter(RegionFromId(42)));
        lv_dsdropships[2] = UnitLastCreated();
        UnitIssueOrder(lv_dsdropships[2], OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(RegionFromId(42))), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(lv_dsdropships[2], true);
        libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", 0, 15, PointWithOffset(RegionGetCenter(RegionFromId(44)), -12.0, RandomFixed(-4.0, 4.0)), RegionGetCenter(RegionFromId(44)));
        lv_dsdropships[3] = UnitLastCreated();
        UnitIssueOrder(lv_dsdropships[3], OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(RegionFromId(44))), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(lv_dsdropships[3], true);
        Wait(10.0, c_timeGame);
        lv_loopint = 1;
        for ( ; ( (auto6F8A34B9_ai >= 0 && lv_loopint <= auto6F8A34B9_ae) || (auto6F8A34B9_ai < 0 && lv_loopint >= auto6F8A34B9_ae) ) ; lv_loopint += auto6F8A34B9_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 15, RegionGetCenter(RegionFromId(40)), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            gf_DSSkin(UnitLastCreated());
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(20));
            UnitCreate(1, gf_randomminitype(), 0, 15, RegionGetCenter(RegionFromId(42)), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            gf_DSSkin(UnitLastCreated());
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(22));
            UnitCreate(1, gf_randomminitype(), 0, 15, RegionGetCenter(RegionFromId(44)), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            gf_DSSkin(UnitLastCreated());
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(10));
            UnitCreate(1, gf_randomminitype(), 0, 15, RegionGetCenter(RegionFromId(40)), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            gf_DSSkin(UnitLastCreated());
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(23));
            UnitCreate(1, gf_randomminitype(), 0, 15, RegionGetCenter(RegionFromId(42)), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            gf_DSSkin(UnitLastCreated());
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(27));
            UnitCreate(1, gf_randomminitype(), 0, 15, RegionGetCenter(RegionFromId(44)), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            gf_DSSkin(UnitLastCreated());
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(11));
            Wait(1.0, c_timeGame);
        }
        UnitCreate(1, "CombatWalker", 0, 15, RegionGetCenter(RegionFromId(40)), 180.0);
        gf_DSSkin(UnitLastCreated());
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(23));
        UnitCreate(1, "CombatWalker", 0, 15, RegionGetCenter(RegionFromId(42)), 180.0);
        gf_DSSkin(UnitLastCreated());
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(27));
        UnitCreate(1, "CombatWalker", 0, 15, RegionGetCenter(RegionFromId(44)), 180.0);
        gf_DSSkin(UnitLastCreated());
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(10));
        Wait(8.0, c_timeGame);
        gf_TakeoffPhantomSpef(lv_dsdropships[1]);
        gf_TakeoffPhantomSpef(lv_dsdropships[2]);
        gf_TakeoffPhantomSpef(lv_dsdropships[3]);
    }
    else {
        Wait(5.0, c_timeGame);
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(381), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 0.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetScale(lv_ping, 0.75);
    PingSetTooltip(lv_ping, StringExternal("Param/Value/C0368C84"));
    SoundPlayOnUnit(SoundLink("Purifier_PrePlanetCrackerEnergyBuildUp", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/6CC71F23"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/980FA6F1"));
    gf_ShowHideProgressBar(true);
    gf_SetProgressBarMax((260.0 + (gv_gamemode * 10.0)));
    gf_SetProgressBarIncrement(1.0);
    gf_SetProgressBarTitle(StringExternal("Param/Value/504B6575"));
    gf_StartProgressBarLoop(true);
    libNtve_gf_MakeUnitInvulnerable(lv_bioResonator, false);
    if ((gv_missionCompleted == gv_totalMissions) && (gv_gamemode == 5)) {
        gv_epilogueEarned = true;
        gf_MissionText(StringExternal("Param/Value/438AC1D6"));
    }

    gf_BioResonatorSpawns();
    while (true) {
        if ((UnitIsAlive(lv_bioResonator) == false) && (gv_gameOver == false)) {
            gv_pauseSpawning = true;
            libNtve_gf_MakeUnitInvulnerable(lv_bioResonator, true);
            PingDestroy(lv_ping);
            gf_ShowHideProgressBar(false);
            gf_FailMission(15, StringExternal("Param/Value/7D5903E1"), 8);
            gf_UpdateMissionCompletionTracker(false);
            Wait(1.0, c_timeGame);
            gf_MissionText(StringExternal("Param/Value/C20A8DAF"));
            Wait(5.0, c_timeGame);
            libNtve_gf_CreateModelAtPoint("BioResExplode", PointFromId(381));
            libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
            GameSetLighting("BioResonator", 1.0);
            GameSetSpeedValue(c_gameSpeedSlower);
            SoundPlay(SoundLink("Raynor_MorosDeviceStart", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundPlay(SoundLink("Terran_ExplosionLarge", -1), PlayerGroupAll(), 100.0, 0.0);
            TriggerEnable(gt_PlayerKills, false);
            for (autoDCBB1CA9_i = 1; autoDCBB1CA9_i <= autoDCBB1CA9_n; autoDCBB1CA9_i += 1) {
                autoD19F1656_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                autoD19F1656_u = UnitGroupCount(autoD19F1656_g, c_unitCountAll);
                for (;; autoD19F1656_u -= 1) {
                    autoD19F1656_var = UnitGroupUnitFromEnd(autoD19F1656_g, autoD19F1656_u);
                    if (autoD19F1656_var == null) { break; }
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(autoD19F1656_var));
                    UnitKill(autoD19F1656_var);
                }
                Wait(1.0, c_timeGame);
            }
            Wait(5.0, c_timeGame);
            GameSetSpeedValue(c_gameSpeedNormal);
            break;
        }
        if ((UnitIsAlive(lv_bioResonator) == true) && (gv_progressBarBool == false) && (gv_gameOver == false)) {
            gv_pauseSpawning = true;
            PingDestroy(lv_ping);
            gf_ShowHideProgressBar(false);
            gf_SucceedMission(200, StringExternal("Param/Value/034AEDF5"), -4, false);
            gf_UpdateMissionCompletionTracker(true);
            Wait(5.0, c_timeGame);
            gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/47337DD9"), 0, true);
            SoundPlayOnUnit(SoundLink("Purifier_PrePlanetCrackerEnergySwirl", -1), PlayerGroupAll(), lv_bioResonator, 0.0, 100.0, 0.0);
            GameSetLighting("BioResonator", 1.0);
            libNtve_gf_CreateModelAtPoint("EnergyNovaShockwave", UnitGetPosition(lv_bioResonator));
            GameSetSpeedValue(c_gameSpeedSlower);
            SoundPlay(SoundLink("Raynor_MorosDeviceStart", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundPlay(SoundLink("Terran_ExplosionLarge", -1), PlayerGroupAll(), 100.0, 0.0);
            TriggerEnable(gt_PlayerKills, false);
            for (auto1B50259B_i = 1; auto1B50259B_i <= auto1B50259B_n; auto1B50259B_i += 1) {
                auto6D092C3A_g = gv_undeadGroup;
                auto6D092C3A_u = UnitGroupCount(auto6D092C3A_g, c_unitCountAll);
                for (;; auto6D092C3A_u -= 1) {
                    auto6D092C3A_var = UnitGroupUnitFromEnd(auto6D092C3A_g, auto6D092C3A_u);
                    if (auto6D092C3A_var == null) { break; }
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(auto6D092C3A_var));
                    UnitKill(auto6D092C3A_var);
                }
                Wait(1.0, c_timeGame);
            }
            TriggerEnable(gt_PlayerKills, true);
            Wait(5.0, c_timeGame);
            GameSetSpeedValue(c_gameSpeedNormal);
            GameSetLighting("UACDay", 10.0);
            if ((gv_missionAutostart == true) && (gv_gamemode == 5) && (gv_epilogueEarned == true)) {
                TriggerExecute(gt_PhantomArrivesDS, true, false);
            }
            Wait(2.0, c_timeGame);
            if ((gv_missionCompleted == gv_totalMissions)) {
                gv_perfectionCompletion = true;
                gf_DisplayObjectiveMissionCounter(ge_ObjectiveMissionType_Completed);
            }
            auto08F18808_val = gv_gamemode;
            if (auto08F18808_val == 1) {
                gv_gameModeUnlocks[0][1] = true;
            }
            else if (auto08F18808_val == 2) {
                gv_gameModeUnlocks[1][1] = true;
            }
            else if (auto08F18808_val == 3) {
                gv_gameModeUnlocks[2][1] = true;
            }
            else if (auto08F18808_val == 4) {
                gv_gameModeUnlocks[3][1] = true;
            }
            else if (auto08F18808_val == 5) {
                gv_gameModeUnlocks[4][1] = true;
            }
            else {
            }
            if ((gv_missionAutostart == true) && (gv_epilogueEarned == false)) {
                TriggerExecute(gt_UACGameEnd, true, false);
            }
            break;
        }
        Wait(1.0, c_timeGame);
    }
}

trigger auto_gf_BioResonatorSpawns_Trigger = null;

void gf_BioResonatorSpawns () {
    if (auto_gf_BioResonatorSpawns_Trigger == null) {
        auto_gf_BioResonatorSpawns_Trigger = TriggerCreate("auto_gf_BioResonatorSpawns_TriggerFunc");
    }

    TriggerExecute(auto_gf_BioResonatorSpawns_Trigger, false, false);
}

bool auto_gf_BioResonatorSpawns_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    Wait(10.0, c_timeGame);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "Immussilus", 1);
    gf_SpawnUndead(2, "Immussilus", 1);
    gf_SpawnUndead(3, "Lacerti", 1);
    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(2, "ZombieYeti", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(1, "Ares", 1);
    }
    Wait(60.0, c_timeGame);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(2, "ZombieYeti", 1);
        gf_SpawnUndead(3, "Lacerti", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
    }
    Wait(45.0, c_timeGame);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "Arachnathid", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(1, "Cacumen", 1);
    gf_SpawnUndead(1, "Grotesque", 1);
    gf_SpawnUndead(1, "Minerva", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(6, "Krill", 1);
        gf_SpawnUndead(2, "Dilophosaur", 1);
        gf_SpawnUndead(1, "Livid", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(1, "Minerva", 1);
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
        gf_SpawnUndead(2, "Lacerti", 1);
        gf_SpawnUndead(2, "AcidVore", 1);
    }
    Wait(30.0, c_timeGame);
    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(1, "RedstoneLavaCritter", 1);
        gf_SpawnUndead(1, "Ares", 1);
        gf_SpawnUndead(2, "ThresherMaw", 1);
        gf_SpawnUndead(1, "Darreus", 1);
        gf_SpawnUndead(1, "Metasis", 1);
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(2, "AcidVore", 1);
    }
    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(6, "Krill", 1);
        gf_SpawnUndead(1, "KingDarreus", 1);
        gf_SpawnUndead(1, "Metasis", 1);
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(2, "ElectricMaw", 1);
        gf_SpawnUndead(1, "Ares", 1);
    }
    return true;
}

trigger auto_gf_SeismicDisturbance_Trigger = null;

void gf_SeismicDisturbance () {
    if (auto_gf_SeismicDisturbance_Trigger == null) {
        auto_gf_SeismicDisturbance_Trigger = TriggerCreate("auto_gf_SeismicDisturbance_TriggerFunc");
    }

    TriggerExecute(auto_gf_SeismicDisturbance_Trigger, false, false);
}

bool auto_gf_SeismicDisturbance_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_int;
    int lv_loopint;
    timer lv_nydusTimer;
    int lv_nydusTimerWindow;

    // Automatic Variable Declarations
    const int auto7948D622_ae = 3;
    const int auto7948D622_ai = 1;
    const int auto961F0E75_ae = 3;
    const int auto961F0E75_ai = 1;
    const int auto6016CA48_ae = 3;
    const int auto6016CA48_ai = 1;
    unitgroup auto3075D979_g;
    int auto3075D979_u;
    unit auto3075D979_var;
    const int auto6642A433_ae = 3;
    const int auto6642A433_ai = 1;
    const int autoFDF58A71_ae = 3;
    const int autoFDF58A71_ai = 1;
    unitgroup auto77D771EC_g;
    int auto77D771EC_u;
    unitgroup autoD3F9890F_g;
    int autoD3F9890F_u;

    // Variable Initialization
    lv_nydusTimer = TimerCreate();
    lv_nydusTimerWindow = c_timerWindowNone;

    // Implementation
    gf_MissionText(StringExternal("Param/Value/16D8E4CC"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/CEF7376B"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/9AB5F25C"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/2538CCA7"));
    Wait(5.0, c_timeGame);
    gv_seismicSpawns[1] = RegionFromId(171);
    gv_seismicSpawns[2] = RegionFromId(170);
    gv_seismicSpawns[3] = RegionFromId(172);
    lv_loopint = 1;
    for ( ; ( (auto7948D622_ai >= 0 && lv_loopint <= auto7948D622_ae) || (auto7948D622_ai < 0 && lv_loopint >= auto7948D622_ae) ) ; lv_loopint += auto7948D622_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SeismicHole2", c_unitCreateIgnorePlacement, 14, RegionGetCenter(gv_seismicSpawns[lv_loopint]));
        UnitSetInfoText(UnitLastCreated(), StringToText(""), StringExternal("Param/Value/30ACB679"), StringToText(""));
        gv_seismicHoles[lv_loopint] = UnitLastCreated();
        SoundPlay(SoundLink("NydusWorm_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    TriggerEnable(gt_SeismicSpawnLoop, true);
    gv_seismicDisturbanceKilled[1] = false;
    gv_seismicDisturbanceKilled[2] = false;
    gv_seismicDisturbanceKilled[3] = false;
    gv_satchelCount = 0;
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/FED9F11C"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/21F6FE53"));
    TimerStart(gv_missiontimer, (300.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 6.0)), false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/DB4D0A79"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    lv_loopint = 1;
    for ( ; ( (auto961F0E75_ai >= 0 && lv_loopint <= auto961F0E75_ae) || (auto961F0E75_ai < 0 && lv_loopint >= auto961F0E75_ae) ) ; lv_loopint += auto961F0E75_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_seismicSpawns[lv_loopint]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/95C71E47"));
        gv_seismicPings[lv_loopint] = PingLastCreated();
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(68)), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9619F88C"));
    gv_missionping = PingLastCreated();
    TriggerEnable(gt_DestroySatchelSpawnPing, true);
    lv_loopint = 1;
    for ( ; ( (auto6016CA48_ai >= 0 && lv_loopint <= auto6016CA48_ae) || (auto6016CA48_ai < 0 && lv_loopint >= auto6016CA48_ae) ) ; lv_loopint += auto6016CA48_ai ) {
        UnitCreate(1, "SatchelCharge", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(RegionFromId(68)), 270.0);
        gv_satchels[lv_loopint] = UnitLastCreated();
        libNtve_gf_MakeUnitInvulnerable(gv_satchels[lv_loopint], true);
        gf_MissionItemPingAddItem(UnitLastCreated());
        UnitGroupAdd(gv_simpleMissionItems, UnitLastCreated());
        UnitGroupAdd(gv_seismicSatchel, UnitLastCreated());
    }
    TriggerEnable(gt_Satchel, true);
    auto3075D979_g = gv_seismicSatchel;
    auto3075D979_u = UnitGroupCount(auto3075D979_g, c_unitCountAll);
    for (;; auto3075D979_u -= 1) {
        auto3075D979_var = UnitGroupUnitFromEnd(auto3075D979_g, auto3075D979_u);
        if (auto3075D979_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto3075D979_var, true);
    }
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    while (!(((TimerGetRemaining(gv_missiontimer) <= 0.5) || (TriggerIsEnabled(gt_Satchel) == false)))) {
        Wait(1.0, c_timeGame);
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    if ((gv_seismicDisturbanceKilled[1] == true) && (gv_seismicDisturbanceKilled[2] == true) && (gv_seismicDisturbanceKilled[3] == true)) {
        lv_loopint = 1;
        for ( ; ( (autoFDF58A71_ai >= 0 && lv_loopint <= autoFDF58A71_ae) || (autoFDF58A71_ai < 0 && lv_loopint >= autoFDF58A71_ae) ) ; lv_loopint += autoFDF58A71_ai ) {
            PingDestroy(gv_seismicPings[lv_loopint]);
        }
        auto77D771EC_g = gv_simpleMissionItems;
        auto77D771EC_u = UnitGroupCount(auto77D771EC_g, c_unitCountAll);
        for (;; auto77D771EC_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto77D771EC_g, auto77D771EC_u);
            if (lv_unit == null) { break; }
            gf_MissionItemPingRemoveItem(lv_unit);
            UnitRemove(lv_unit);
        }
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_Satchel, false);
        TriggerEnable(gt_DestroySatchelSpawnPing, false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        PingDestroy(gv_missionping);
        gf_FailMission(12, StringExternal("Param/Value/7E5B23EE"), 1);
        gf_UpdateMissionCompletionTracker(false);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        TriggerEnable(gt_SeismicSpawnLoop, false);
        if ((gv_seismicDisturbanceKilled[1] == false)) {
            gf_SpawnUndeadInRegion("Eel", RandomInt(10, 30), RegionFromId(175), 1);
        }

        if ((gv_seismicDisturbanceKilled[2] == false)) {
            gf_SpawnUndeadInRegion("Eel", RandomInt(10, 30), RegionFromId(176), 2);
        }

        if ((gv_seismicDisturbanceKilled[3] == false)) {
            gf_SpawnUndeadInRegion("Eel", RandomInt(10, 30), RegionFromId(177), 3);
        }

        lv_loopint = 1;
        for ( ; ( (auto6642A433_ai >= 0 && lv_loopint <= auto6642A433_ae) || (auto6642A433_ai < 0 && lv_loopint >= auto6642A433_ae) ) ; lv_loopint += auto6642A433_ai ) {
            UnitRemove(gv_seismicHoles[lv_loopint]);
            PingDestroy(gv_seismicPings[lv_loopint]);
            UnitRemove(gv_satchels[lv_loopint]);
        }
        UnitRemove(EventUnitInventoryItem());
        autoD3F9890F_g = gv_simpleMissionItems;
        autoD3F9890F_u = UnitGroupCount(autoD3F9890F_g, c_unitCountAll);
        for (;; autoD3F9890F_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoD3F9890F_g, autoD3F9890F_u);
            if (lv_unit == null) { break; }
            gf_MissionItemPingRemoveItem(lv_unit);
        }
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        if ((gv_missionAutostart == true)) {
            gf_SecureLZs();
        }
    }
    return true;
}

void gf_ThresherMaws () {
    // Automatic Variable Declarations
    playergroup autoFC262C2B_g;
    int autoFC262C2B_var;

    // Implementation
    gf_SkipActionsIfGameOver();
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(RandomFixed(7.5, 12.5), c_timeGame);
    gf_MissionText(StringExternal("Param/Value/49641D5A"));
    Wait(5.0, c_timeGame);
    autoFC262C2B_g = gv_players;
    autoFC262C2B_var = -1;
    while (true) {
        autoFC262C2B_var = PlayerGroupNextPlayer(autoFC262C2B_g, autoFC262C2B_var);
        if (autoFC262C2B_var < 0) { break; }
        CameraShakeStart(autoFC262C2B_var, c_cameraPositionTarget, c_cameraDirectionXY, 2.0, 40.0, 2.0, 2.3);
    }
    SoundPlay(SoundLink("Cut_Zurvan_ZAppears_EarthShake", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Cut_Zurvan_SpellARoar", -1), PlayerGroupAll(), 40.0, 0.0);
    Wait(1.5, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/7B126C03"));
    Wait(2.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/57F36066"));
    Wait(1.5, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/E9F0F848"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ThresherMaw", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
    UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
    UnitGroupAdd(gv_seismicBoss, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ThresherMaw", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
    UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
    UnitGroupAdd(gv_seismicBoss, UnitLastCreated());
    if ((gv_gamemode >= 4)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElectricMaw", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
        UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
        UnitGroupAdd(gv_seismicBoss, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElectricMaw", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
        UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
        UnitGroupAdd(gv_seismicBoss, UnitLastCreated());
    }
    if ((gv_gamemode >= 5)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElectricMaw", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
        UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
        UnitGroupAdd(gv_seismicBoss, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ThresherMaw", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
        UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
        UnitGroupAdd(gv_seismicBoss, UnitLastCreated());
    }
    if ((gv_mod_tier1 == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElectricMaw", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
        UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
        UnitGroupAdd(gv_seismicBoss, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ThresherMaw", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
        UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
        UnitGroupAdd(gv_seismicBoss, UnitLastCreated());
    }
    Wait(3.0, c_timeGame);
    UnitGroupAddUnitGroup(gv_undeadGroup, gv_seismicBoss);
    UnitGroupIssueOrder(gv_seismicBoss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    while (true) {
        if ((UnitGroupCount(gv_seismicBoss, c_unitCountAlive) != 0) && (gv_gameOver == false)) {
        }
        else {
            gf_UpdateMissionCompletionTracker(true);
            gf_SucceedMission(45, StringExternal("Param/Value/64313236"), 0, false);
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
            Wait(5.0, c_timeGame);
            ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
            break;
        }
        Wait(10.0, c_timeGame);
    }
    if ((gv_missionAutostart == true)) {
        gf_SecureLZs();
    }
}

trigger auto_gf_FungusCores_Trigger = null;

void gf_FungusCores () {
    if (auto_gf_FungusCores_Trigger == null) {
        auto_gf_FungusCores_Trigger = TriggerCreate("auto_gf_FungusCores_TriggerFunc");
    }

    TriggerExecute(auto_gf_FungusCores_Trigger, false, false);
}

bool auto_gf_FungusCores_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_coremax;
    int lv_int;
    int lv_loopint;
    string lv_fungusstring;
    region[10] lv_fungusregion;
    int lv_chance;

    // Automatic Variable Declarations
    int auto026B0B13_ae;
    const int auto026B0B13_ai = 1;
    unitgroup autoB0888A34_g;
    int autoB0888A34_u;
    unit autoB0888A34_var;
    int autoF8069DE1_val;

    // Variable Initialization
    lv_fungusstring = "123456789";
    lv_chance = RandomInt(1, 3);

    // Implementation
    gf_SkipActionsIfGameOver();
    TriggerEnable(gt_FungusCoreSpawns, true);
    gv_aORegions[1] = RegionFromId(148);
    gv_aORegions[2] = RegionFromId(37);
    gv_aORegions[3] = RegionFromId(36);
    gv_aORegions[4] = RegionFromId(89);
    gv_aORegions[5] = RegionFromId(34);
    gv_aORegions[6] = RegionFromId(82);
    gv_aORegions[7] = RegionFromId(90);
    gv_aORegions[8] = RegionFromId(105);
    gv_aORegions[9] = RegionFromId(92);
    Wait(22.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/E301D6DB"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/29C732CA"));
    TriggerSendEvent("Fungus Spawns");
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D09919FC"));
    Wait(7.0, c_timeGame);
    lv_coremax = (4 + gv_gamemode);
    auto026B0B13_ae = lv_coremax;
    lv_loopint = 1;
    for ( ; ( (auto026B0B13_ai >= 0 && lv_loopint <= auto026B0B13_ae) || (auto026B0B13_ai < 0 && lv_loopint >= auto026B0B13_ae) ) ; lv_loopint += auto026B0B13_ai ) {
        lv_int = RandomInt(1, StringLength(lv_fungusstring));
        lv_fungusregion[lv_loopint] = gv_aORegions[StringToInt(StringSub(lv_fungusstring, lv_int, lv_int))];
        if ((lv_int == 1)) {
            lv_fungusstring = StringSub(lv_fungusstring, 2, StringLength(lv_fungusstring));
        }
        else {
            lv_fungusstring = (StringSub(lv_fungusstring, 1, (lv_int - 1)) + StringSub(lv_fungusstring, (lv_int + 1), StringLength(lv_fungusstring)));
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FungusCore", c_unitCreateIgnorePlacement, 14, RegionRandomPoint(lv_fungusregion[lv_loopint]));
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitGroupAdd(gv_fungusCores, UnitLastCreated());
        UnitSetInfoText(UnitLastCreated(), StringToText(""), StringExternal("Param/Value/E3CA92DA"), StringToText(""));
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/73E911C3"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/7A012E70"));
    while (!((gv_pauseSpawning == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedstoneLavaCritter", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
        UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
        UnitGroupAdd(gv_infernus, UnitLastCreated());
        gv_infestationLevel += 1;
    }
    libNtve_gf_ChangeUnitDamage(UnitGroupUnit(gv_infernus, 1), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    TriggerEnable(gt_InfernusIsAttacked, true);
    UnitGroupAdd(gv_undeadGroup, UnitGroupUnit(gv_infernus, 1));
    UnitIssueOrder(UnitGroupUnit(gv_infernus, 1), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    while (((UnitGroupCount(gv_fungusCores, c_unitCountAlive) != 0) || (UnitIsAlive(UnitGroupUnit(gv_infernus, 1)) == true))) {
        autoB0888A34_g = gv_fungusCores;
        autoB0888A34_u = UnitGroupCount(autoB0888A34_g, c_unitCountAll);
        for (;; autoB0888A34_u -= 1) {
            autoB0888A34_var = UnitGroupUnitFromEnd(autoB0888A34_g, autoB0888A34_u);
            if (autoB0888A34_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(autoB0888A34_var, false);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(autoB0888A34_var), ColorWithAlpha(50.20, 0.00, 100.00, 49.02), gv_pingRate, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/30FC51AF"));
            PingSetUnit(PingLastCreated(), autoB0888A34_var);
        }
        autoF8069DE1_val = gv_gamemode;
        if (autoF8069DE1_val == 1) {
            if ((UnitGroupCount(gv_fungusCores, c_unitCountAlive) <= 2)) {
                libNtve_gf_ChangeUnitDamage(UnitGroupUnit(gv_infernus, 1), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            }
        }
        else if (autoF8069DE1_val == 2) {
            if ((UnitGroupCount(gv_fungusCores, c_unitCountAlive) == 3)) {
                libNtve_gf_ChangeUnitDamage(UnitGroupUnit(gv_infernus, 1), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
            }
            if ((UnitGroupCount(gv_fungusCores, c_unitCountAlive) <= 2)) {
                libNtve_gf_ChangeUnitDamage(UnitGroupUnit(gv_infernus, 1), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            }
        }
        else if (autoF8069DE1_val == 3) {
            if ((UnitGroupCount(gv_fungusCores, c_unitCountAlive) == 3)) {
                libNtve_gf_ChangeUnitDamage(UnitGroupUnit(gv_infernus, 1), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
            }
            if ((UnitGroupCount(gv_fungusCores, c_unitCountAlive) <= 2)) {
                libNtve_gf_ChangeUnitDamage(UnitGroupUnit(gv_infernus, 1), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            }
        }
        else if (autoF8069DE1_val == 4) {
            if ((UnitGroupCount(gv_fungusCores, c_unitCountAlive) == 4)) {
                libNtve_gf_ChangeUnitDamage(UnitGroupUnit(gv_infernus, 1), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
            }
            if ((UnitGroupCount(gv_fungusCores, c_unitCountAlive) <= 2)) {
                libNtve_gf_ChangeUnitDamage(UnitGroupUnit(gv_infernus, 1), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            }
        }
        else if (autoF8069DE1_val == 5) {
            if ((UnitGroupCount(gv_fungusCores, c_unitCountAlive) == 4)) {
                libNtve_gf_ChangeUnitDamage(UnitGroupUnit(gv_infernus, 1), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
            }
            if ((UnitGroupCount(gv_fungusCores, c_unitCountAlive) <= 2)) {
                libNtve_gf_ChangeUnitDamage(UnitGroupUnit(gv_infernus, 1), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
            }
        }
        else {
        }
        Wait(5.0, c_timeGame);
    }
    while (!((UnitIsAlive(UnitGroupUnit(gv_infernus, 1)) == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_SucceedMission(60, StringExternal("Param/Value/B2F4EDFD"), -1, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_UpdateMissionCompletionTracker(true);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    if ((gv_missionAutostart == true)) {
        gf_SecureLZs();
    }
    return true;
}

void gf_SecureLZs () {
    // Variable Declarations
    int lv_loopint;
    int lv_int;
    string lv_lzstring;
    int lv_lzstringlength;
    timer lv_lZTimer;
    int lv_lZTimerWindow;

    // Automatic Variable Declarations
    const int autoE6215A48_ae = 8;
    const int autoE6215A48_ai = 1;

    // Variable Initialization
    lv_lzstring = "12345";
    lv_lZTimer = TimerCreate();
    lv_lZTimerWindow = c_timerWindowNone;

    // Implementation
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/76116D2E"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/07BD72FE"));
    Wait(7.0, c_timeGame);
    if ((gv_missionAutostart == true)) {
        gf_EscortEngineers();
    }
    lv_loopint = 6;
    for ( ; ( (autoE6215A48_ai >= 0 && lv_loopint <= autoE6215A48_ae) || (autoE6215A48_ai < 0 && lv_loopint >= autoE6215A48_ae) ) ; lv_loopint += autoE6215A48_ai ) {
        gv_aORegionsSearched[lv_loopint] = false;
        lv_int = RandomInt(1, StringLength(lv_lzstring));
        gv_highlanders[lv_loopint] = gv_lZs[StringToInt(StringSub(lv_lzstring, lv_int, lv_int))];
        if ((lv_int == 1)) {
            lv_lzstring = StringSub(lv_lzstring, 2, StringLength(lv_lzstring));
        }
        else {
            lv_lzstring = (StringSub(lv_lzstring, 1, (lv_int - 1)) + StringSub(lv_lzstring, (lv_int + 1), StringLength(lv_lzstring)));
        }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_highlanders[lv_loopint]), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/048B9185"));
        gv_highlanderpings[lv_loopint] = PingLastCreated();
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/C0792C9B"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/337739CC"));
    TimerStart(lv_lZTimer, (200.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 6.0)), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/42EE8A31"), true, false);
    lv_lZTimerWindow = TimerWindowLastCreated();
    TimerWindowShow(lv_lZTimerWindow, PlayerGroupAll(), true);
    TriggerEnable(gt_EnterLZ, true);
    Wait(2.0, c_timeGame);
    if ((gv_missionAutostart == true)) {
        gf_AirThreats();
    }
    while (!(((TimerGetRemaining(lv_lZTimer) <= 0.5) || (TriggerIsEnabled(gt_EnterLZ) == false)))) {
        Wait(1.0, c_timeGame);
    }
    TimerWindowShow(lv_lZTimerWindow, PlayerGroupAll(), false);
    if ((gv_aORegionsSearched[6] == true) && (gv_aORegionsSearched[7] == true) && (gv_aORegionsSearched[8] == true)) {
    }
    else {
        gf_FailMission(5, StringExternal("Param/Value/59BE3A6A"), 5);
        gf_UpdateMissionCompletionTracker(false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        TriggerEnable(gt_EnterLZ, false);
        gv_missioncomplete[2] = true;
    }
}

trigger auto_gf_AirThreats_Trigger = null;

void gf_AirThreats () {
    if (auto_gf_AirThreats_Trigger == null) {
        auto_gf_AirThreats_Trigger = TriggerCreate("auto_gf_AirThreats_TriggerFunc");
    }

    TriggerExecute(auto_gf_AirThreats_Trigger, false, false);
}

bool auto_gf_AirThreats_TriggerFunc (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[3] lv_airthreats;
    unit[3] lv_airboss;
    bool[3] lv_threatsdestroyed;
    timer lv_airTimer;
    int lv_airTimerWindow;

    // Automatic Variable Declarations
    playergroup auto5749916B_g;
    int auto5749916B_var;
    int auto1B7293B7_n;
    int auto1B7293B7_i;
    int auto17D0E01E_n;
    int auto17D0E01E_i;
    playergroup autoD8FB8D1D_g;
    int autoD8FB8D1D_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_airthreats[init_i] = UnitGroupEmpty();
    }
    lv_airTimer = TimerCreate();
    lv_airTimerWindow = c_timerWindowNone;

    // Implementation
    Wait(15.0, c_timeGame);
    auto5749916B_g = gv_players;
    auto5749916B_var = -1;
    while (true) {
        auto5749916B_var = PlayerGroupNextPlayer(auto5749916B_g, auto5749916B_var);
        if (auto5749916B_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto5749916B_var, "CASOnStation", -1);
    }
    gf_MissionText(StringExternal("Param/Value/68A6A4FC"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_secondObj, c_objectiveStateActive);
    ObjectiveSetName(gv_secondObj, StringExternal("Param/Value/AA095F69"));
    ObjectiveSetDescription(gv_secondObj, StringExternal("Param/Value/4E00F8F6"));
    TimerStart(lv_airTimer, (300.0 - (IntToFixed(gv_gamemode) * 6.0)), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/402CAA24"), true, false);
    lv_airTimerWindow = TimerWindowLastCreated();
    TimerWindowShow(lv_airTimerWindow, PlayerGroupAll(), true);
    auto1B7293B7_n = (gv_gamemode + 3);
    for (auto1B7293B7_i = 1; auto1B7293B7_i <= auto1B7293B7_n; auto1B7293B7_i += 1) {
        UnitCreate(7, "Gargoyle", 0, 14, RegionRandomPoint(RegionFromId(1)), 270.0);
        UnitGroupAddUnitGroup(lv_airthreats[1], UnitLastCreatedGroup());
        UnitCreate(1, "Immussilus", 0, 14, UnitGroupCenterOfGroup(lv_airthreats[1]), 270.0);
        UnitGroupAddUnitGroup(lv_airthreats[1], UnitLastCreatedGroup());
    }
    lv_airboss[1] = UnitLastCreated();
    auto17D0E01E_n = (gv_gamemode + 3);
    for (auto17D0E01E_i = 1; auto17D0E01E_i <= auto17D0E01E_n; auto17D0E01E_i += 1) {
        UnitCreate(15, "Shredder", 0, 14, RegionRandomPoint(RegionFromId(1)), 270.0);
        UnitGroupAddUnitGroup(lv_airthreats[2], UnitLastCreatedGroup());
        UnitCreate(1, "Metasis", 0, 14, UnitGroupCenterOfGroup(lv_airthreats[2]), 270.0);
        UnitGroupAddUnitGroup(lv_airthreats[2], UnitLastCreatedGroup());
    }
    lv_airboss[2] = UnitLastCreated();
    while (true) {
        if ((UnitGroupCount(lv_airthreats[1], c_unitCountAlive) == 0) && (lv_threatsdestroyed[1] == false)) {
            lv_threatsdestroyed[1] = true;
        }
        else {
            if ((UnitGroupCount(lv_airthreats[1], c_unitCountAlive) > 0)) {
                UnitGroupIssueOrder(lv_airthreats[1], OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(62))), c_orderQueueReplace);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitGroupRandomUnit(lv_airthreats[1], c_unitCountAlive)), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 5.0, 270.0);
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A748A0DF"));
            }
        }
        if ((UnitGroupCount(lv_airthreats[2], c_unitCountAlive) == 0) && (lv_threatsdestroyed[2] == false)) {
            lv_threatsdestroyed[2] = true;
        }
        else {
            if ((UnitGroupCount(lv_airthreats[2], c_unitCountAlive) > 0)) {
                UnitGroupIssueOrder(lv_airthreats[2], OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(63))), c_orderQueueReplace);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitGroupRandomUnit(lv_airthreats[2], c_unitCountAlive)), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 5.0, 270.0);
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/DC2EFDCF"));
            }
        }
        if ((lv_threatsdestroyed[1] == true) && (lv_threatsdestroyed[2] == true)) {
            gf_UpdateMissionCompletionTracker(true);
            gf_SucceedMission(30, StringExternal("Param/Value/548FAC95"), -2, false);
            ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
            TimerWindowShow(lv_airTimerWindow, PlayerGroupAll(), false);
            gv_missioncomplete[3] = true;
            break;
        }
        else {
            if ((TimerGetRemaining(lv_airTimer) <= 0.5)) {
                ObjectiveSetState(gv_secondObj, c_objectiveStateFailed);
                gf_UpdateMissionCompletionTracker(false);
                TimerWindowShow(lv_airTimerWindow, PlayerGroupAll(), false);
                gv_missioncomplete[3] = true;
                break;
            }

        }
        Wait(5.0, c_timeGame);
    }
    while (!((UnitGroupCount(lv_airthreats[1], c_unitCountAlive) == 0) && (UnitGroupCount(lv_airthreats[2], c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gv_skiesclear = true;
    gf_SpawnItemLoc("LLDR", 1, Point(9.0, 158.0));
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringExternal("Param/Value/31DDDC90"));
    Wait(5.0, c_timeGame);
    autoD8FB8D1D_g = gv_players;
    autoD8FB8D1D_var = -1;
    while (true) {
        autoD8FB8D1D_var = PlayerGroupNextPlayer(autoD8FB8D1D_g, autoD8FB8D1D_var);
        if (autoD8FB8D1D_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoD8FB8D1D_var, "CASOnStation", 1);
    }
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/80836AE1"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", Point(9.0, 158.0), ColorWithAlpha(0.00, 50.20, 50.20, 0.00), 45.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9EAEB7FD"));
    return true;
}

trigger auto_gf_EscortEngineers_Trigger = null;

void gf_EscortEngineers () {
    if (auto_gf_EscortEngineers_Trigger == null) {
        auto_gf_EscortEngineers_Trigger = TriggerCreate("auto_gf_EscortEngineers_TriggerFunc");
    }

    TriggerExecute(auto_gf_EscortEngineers_Trigger, false, false);
}

bool auto_gf_EscortEngineers_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit[4] lv_operators;
    int lv_loopint;
    region[4] lv_motorpool;
    bool lv_continue;
    region[7] lv_cityguards;
    int lv_count;

    // Automatic Variable Declarations
    const int auto2198400D_ae = 3;
    const int auto2198400D_ai = 1;
    const int auto60E5A9DF_ae = 3;
    const int auto60E5A9DF_ai = 1;
    const int auto430377E2_ae = 3;
    const int auto430377E2_ai = 1;

    // Variable Initialization
    lv_continue = true;

    // Implementation
    UnitCreate(1, "M2BradleyIFV", 0, 0, RegionGetCenter(RegionFromId(124)), 0.0);
    UnitAbilityEnable(UnitLastCreated(), "TOWMissile", false);
    UnitWeaponRemove(UnitLastCreated(), "M242BushmasterHE");
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    gv_sentryGuns[1] = UnitLastCreated();
    UnitCreate(1, "LAV25Recon", 0, 0, RegionGetCenter(RegionFromId(123)), 270.0);
    UnitBehaviorAdd(UnitLastCreated(), "Plus1MS", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    gv_sentryGuns[2] = UnitLastCreated();
    UnitCreate(1, "ColonistTransport", 0, 0, RegionGetCenter(RegionFromId(125)), 180.0);
    UnitBehaviorAdd(UnitLastCreated(), "Plus1MS", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    gv_sentryGuns[3] = UnitLastCreated();
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/FD217EC4"));
    while (!((gv_missioncomplete[2] == true) && (gv_missioncomplete[3] == true))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    ObjectiveSetState(gv_secondObj, c_objectiveStateHidden);
    Wait(8.0, c_timeGame);
    lv_motorpool[1] = RegionFromId(124);
    lv_motorpool[2] = RegionFromId(123);
    lv_motorpool[3] = RegionFromId(125);
    lv_cityguards[1] = RegionFromId(143);
    lv_cityguards[2] = RegionFromId(144);
    lv_cityguards[3] = RegionFromId(145);
    lv_cityguards[4] = RegionFromId(146);
    gf_MissionText(StringExternal("Param/Value/2EC374F2"));
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/79B6D2F0"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D50E1BA5"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/C3D3F7A7"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/AC8AB30B"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(19)), ColorWithAlpha(32.55, 32.55, 100.00, 0.00), 15.0, 270.0);
    gf_USArmyEscortActions();
    Wait(23.0, c_timeReal);
    lv_loopint = 1;
    for ( ; ( (auto2198400D_ai >= 0 && lv_loopint <= auto2198400D_ae) || (auto2198400D_ai < 0 && lv_loopint >= auto2198400D_ae) ) ; lv_loopint += auto2198400D_ai ) {
        UnitCreate(1, "CombatEngineerMini", 0, 13, RegionRandomPoint(RegionFromId(19)), 90.0);
        UnitBehaviorAdd(UnitLastCreated(), "DriverInvulnerability", UnitLastCreated(), 1);
        lv_operators[lv_loopint] = UnitLastCreated();
        gf_MissionItemPingAddItem(UnitLastCreated());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById VikingWoodland");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(lv_motorpool[lv_loopint])), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    while (true) {
        lv_loopint = 1;
        for ( ; ( (auto60E5A9DF_ai >= 0 && lv_loopint <= auto60E5A9DF_ae) || (auto60E5A9DF_ai < 0 && lv_loopint >= auto60E5A9DF_ae) ) ; lv_loopint += auto60E5A9DF_ai ) {
            if ((lv_operators[lv_loopint] == null)) {
                TextExpressionSetToken("Param/Expression/E9AE3378", "A", StringExternal("Param/Value/30FAD3AA"));
                gf_MissionText(TextExpressionAssemble("Param/Expression/E9AE3378"));
                continue;
            }
            else {
                if ((libNtve_gf_UnitInRegion(lv_operators[lv_loopint], lv_motorpool[lv_loopint]) == true)) {
                    lv_count += 1;
                    gf_MissionItemPingRemoveItem(lv_operators[lv_loopint]);
                    gf_SucceedMission(14, StringExternal("Param/Value/A81DC593"), 0, false);
                    UnitRemove(lv_operators[lv_loopint]);
                    lv_operators[lv_loopint] = null;
                    UnitSetOwner(gv_sentryGuns[lv_loopint], 13, false);
                    UnitBehaviorRemove(gv_sentryGuns[lv_loopint], "Unpowered", 1);
                    UnitGroupAdd(gv_undeadTargetGroup, gv_sentryGuns[lv_loopint]);
                    if ((lv_loopint == 1)) {
                        UnitAbilityEnable(gv_sentryGuns[lv_loopint], "TOWMissile", true);
                        UnitWeaponAdd(gv_sentryGuns[lv_loopint], "M242BushmasterHE", "BradleyTurret");
                    }
                    libNtve_gf_MakeUnitInvulnerable(gv_sentryGuns[lv_loopint], false);
                    SoundPlayOnUnit(SoundLink("Raynor_PenetratorRoundChargeUp", -1), PlayerGroupAll(), gv_sentryGuns[lv_loopint], 1.0, 100.0, 0.0);
                    gf_MoveToGuardPos(gv_sentryGuns[lv_loopint], lv_cityguards[lv_loopint]);
                }
            }
        }
        lv_continue = true;
        lv_loopint = 1;
        for ( ; ( (auto430377E2_ai >= 0 && lv_loopint <= auto430377E2_ae) || (auto430377E2_ai < 0 && lv_loopint >= auto430377E2_ae) ) ; lv_loopint += auto430377E2_ai ) {
            if ((UnitIsAlive(lv_operators[lv_loopint]) == true)) {
                lv_continue = false;
            }
            else {
                gf_MissionItemPingRemoveItem(lv_operators[lv_loopint]);
            }
        }
        if ((lv_continue == true)) {
            break;
        }
        Wait(2.0, c_timeGame);
    }
    if ((lv_count >= 1)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_UpdateMissionCompletionTracker(true);
    }
    else {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_UpdateMissionCompletionTracker(false);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(15.0, c_timeGame);
    if ((gv_missionAutostart == true)) {
        gf_T1Arrival();
    }
    return true;
}

void gf_USArmyEscortActions () {
    // Automatic Variable Declarations
    unitgroup auto25001C99_g;
    int auto25001C99_u;
    unit auto25001C99_var;
    int autoF8F0BD5E_val;

    // Implementation
    UnitGroupIssueOrder(gv_patrol, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(2326)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_patrol, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1788)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_patrol, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1787)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_patrol, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1785)), c_orderQueueAddToEnd);
    auto25001C99_g = gv_patrol;
    auto25001C99_u = UnitGroupCount(auto25001C99_g, c_unitCountAll);
    for (;; auto25001C99_u -= 1) {
        auto25001C99_var = UnitGroupUnitFromEnd(auto25001C99_g, auto25001C99_u);
        if (auto25001C99_var == null) { break; }
        Wait(0.5, c_timeReal);
        autoF8F0BD5E_val = RandomInt(0, 3);
        if (autoF8F0BD5E_val == 0) {
            UnitIssueOrder(auto25001C99_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(143))), c_orderQueueAddToEnd);
        }
        else if (autoF8F0BD5E_val == 1) {
            UnitIssueOrder(auto25001C99_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(144))), c_orderQueueAddToEnd);
        }
        else if (autoF8F0BD5E_val == 2) {
            UnitIssueOrder(auto25001C99_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(145))), c_orderQueueAddToEnd);
        }
        else if (autoF8F0BD5E_val == 3) {
            UnitIssueOrder(auto25001C99_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(146))), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(auto25001C99_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(143))), c_orderQueueAddToEnd);
        }
    }
}

void gf_T1Arrival () {
    // Variable Declarations
    unitgroup lv_tier1s;
    region[4] lv_guslaniguards;
    bool lv_threadsActive;

    // Automatic Variable Declarations
    unitgroup autoA12B097C_g;
    int autoA12B097C_u;
    unit autoA12B097C_var;
    unitgroup autoD7E39BA6_g;
    int autoD7E39BA6_u;
    unit autoD7E39BA6_var;
    unitgroup auto87454962_g;
    int auto87454962_u;
    unit auto87454962_var;
    int auto39EC4182_val;

    // Variable Initialization
    lv_tier1s = UnitGroupEmpty();
    lv_threadsActive = true;

    // Implementation
    lv_guslaniguards[1] = RegionFromId(143);
    lv_guslaniguards[2] = RegionFromId(146);
    lv_guslaniguards[3] = RegionFromId(292);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gf_MissionText(StringExternal("Param/Value/453595D8"));
    Wait(3.5, c_timeGame);
    autoA12B097C_g = gv_patrol;
    autoA12B097C_u = UnitGroupCount(autoA12B097C_g, c_unitCountAll);
    for (;; autoA12B097C_u -= 1) {
        autoA12B097C_var = UnitGroupUnitFromEnd(autoA12B097C_g, autoA12B097C_u);
        if (autoA12B097C_var == null) { break; }
        gf_MoveToGuardPos(autoA12B097C_var, lv_guslaniguards[RandomInt(1, 3)]);
    }
    SoundPlay(SoundLink("TZeratul01MusicEventCC", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_gamemode == 5)) {
        Wait(40.0, c_timeGame);
    }
    else {
        Wait(50.0, c_timeGame);
    }
    SoundPlay(SoundLink("THanson03AMusicEventC", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_StopSpawnLoop(1, gv_loopType);
    gf_StopSpawnLoop(2, gv_loopType);
    gf_StopSpawnLoop(3, gv_loopType);
    if ((gv_missionCompleted == gv_totalMissions) && (gv_gamemode == 5)) {
        gv_epilogueEarned = true;
        if ((gv_gamemode >= 4)) {
            gf_MissionText(StringExternal("Param/Value/FE3A430D"));
        }
        else {
            gf_MissionText(StringExternal("Param/Value/194F2BC8"));
        }
        Wait(10.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/D28B1D24"));
        if ((gv_gamemode >= 4)) {
            TimerStart(gv_missiontimer, 300.0, false, c_timeGame);
        }
        else {
            TimerStart(gv_missiontimer, 600.0, false, c_timeGame);
        }
        TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/8E839C53"));
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
        TriggerEnable(gt_T1TimerEnd, true);
    }
    else {
        ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/16C45AFB"));
    }
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/12021982"));
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "Arachnathid", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(1, "Cacumen", 1);
    gf_SpawnUndead(1, "Grotesque", 1);
    gf_SpawnUndead(2, "Lacerti", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(6, "Krill", 1);
        gf_SpawnUndead(2, "Dilophosaur", 1);
        gf_SpawnUndead(1, "Livid", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(1, "Minerva", 1);
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    }
    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(2, "Lacerti", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        gf_SpawnUndead(1, "Ares", 1);
    }
    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(6, "Krill", 1);
        gf_SpawnUndead(1, "KingDarreus", 1);
        gf_SpawnUndead(1, "Metasis", 1);
        gf_SpawnUndead(1, "Immussilus", 1);
    }
    Wait(5.0, c_timeGame);
    autoD7E39BA6_g = UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD7E39BA6_u = UnitGroupCount(autoD7E39BA6_g, c_unitCountAll);
    for (;; autoD7E39BA6_u -= 1) {
        autoD7E39BA6_var = UnitGroupUnitFromEnd(autoD7E39BA6_g, autoD7E39BA6_u);
        if (autoD7E39BA6_var == null) { break; }
        UnitGroupAdd(gv_finaltier1s, autoD7E39BA6_var);
    }
    gv_HighTierXUnitGroup = UnitGroupEmpty();
    gv_HighTierXUnitGroup = gv_finaltier1s;
    TriggerExecute(gt_ComplexBossBarHighTierX, false, false);
    while (true) {
        auto87454962_g = gv_finaltier1s;
        auto87454962_u = UnitGroupCount(auto87454962_g, c_unitCountAll);
        for (;; auto87454962_u -= 1) {
            auto87454962_var = UnitGroupUnitFromEnd(auto87454962_g, auto87454962_u);
            if (auto87454962_var == null) { break; }
            if ((UnitIsAlive(auto87454962_var) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(auto87454962_var), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), gv_pingRate, 270.0);
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/49F48452"));
            }
            else {
                UnitGroupRemove(gv_finaltier1s, auto87454962_var);
            }
        }
        if ((UnitGroupCount(gv_finaltier1s, c_unitCountAlive) == 0) && (gv_gameOver == false) && (gv_tier1Threads <= 0)) {
            break;
        }

        if ((gv_tier1Threads <= 0) && (lv_threadsActive == true)) {
            gv_pauseSpawning = true;
            lv_threadsActive = false;
        }

        Wait(12.0, c_timeGame);
    }
    gf_SucceedMission(250, StringExternal("Param/Value/4FCE67F3"), -3, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_UpdateMissionCompletionTracker(true);
    Wait(5.0, c_timeGame);
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/36FD4995"), 0, true);
    if ((gv_missionAutostart == true) && (gv_gamemode == 5) && (gv_epilogueEarned == true)) {
        TriggerEnable(gt_T1TimerEnd, false);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        TriggerExecute(gt_PhantomArrives, true, false);
    }
    if ((gv_missionCompleted == gv_totalMissions)) {
        gv_perfectionCompletion = true;
        gf_DisplayObjectiveMissionCounter(ge_ObjectiveMissionType_Completed);
    }
    auto39EC4182_val = gv_gamemode;
    if (auto39EC4182_val == 1) {
        gv_gameModeUnlocks[0][1] = true;
    }
    else if (auto39EC4182_val == 2) {
        gv_gameModeUnlocks[1][1] = true;
    }
    else if (auto39EC4182_val == 3) {
        gv_gameModeUnlocks[2][1] = true;
    }
    else if (auto39EC4182_val == 4) {
        gv_gameModeUnlocks[3][1] = true;
    }
    else if (auto39EC4182_val == 5) {
        gv_gameModeUnlocks[4][1] = true;
    }
    else {
    }
    if ((gv_missionAutostart == true) && (gv_epilogueEarned == false)) {
        TriggerExecute(gt_UACGameEnd, true, false);
    }
}

void gf_SpawnSmithy () {
    // Variable Declarations
    int lv_loopint;
    int lv_randomspawn;
    unit lv_dummytmp;

    // Automatic Variable Declarations
    const int auto49EBE947_ae = 15;
    const int auto49EBE947_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_smithySpawned == false)) {
        libNtve_gf_StopTimer(gv_bossTimer);
        TimerWindowShow(gv_bossTimerWindow, PlayerGroupAll(), false);
        if ((gv_smithyStage == 1)) {
            gv_smithySpawns[1] = true;
            lv_randomspawn = RandomInt(1, 3);
            if ((lv_randomspawn == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedSmithy", 0, 14, PointFromId(1104736160));
            }
            else if ((lv_randomspawn == 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedSmithy", 0, 14, PointFromId(415954637));
            }
            else if ((lv_randomspawn == 3)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedSmithy", 0, 14, PointFromId(887459197));
            }
        }
        else if ((gv_smithyStage == 2)) {
            gv_smithySpawns[2] = true;
            lv_randomspawn = RandomInt(1, 3);
            if ((lv_randomspawn == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedSmithy", 0, 14, PointFromId(857200173));
            }
            else if ((lv_randomspawn == 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedSmithy", 0, 14, PointFromId(2083441693));
            }
            else if ((lv_randomspawn == 3)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedSmithy", 0, 14, PointFromId(887459197));
            }
        }
        else if ((gv_smithyStage == 3)) {
            gv_smithySpawns[3] = true;
            lv_randomspawn = RandomInt(1, 2);
            if ((lv_randomspawn == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedSmithy", 0, 14, PointFromId(1041072035));
            }
            else if ((lv_randomspawn == 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedSmithy", 0, 14, PointFromId(2083441693));
            }
        }
        else if ((gv_smithyStage == 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedSmithy", 0, 14, RegionGetCenter(RegionFromId(81)));
            UnitBehaviorAdd(UnitLastCreated(), "DoomsdayBeamTarget", UnitLastCreated(), 1);
            lv_loopint = 0;
            for ( ; ( (auto49EBE947_ai >= 0 && lv_loopint <= auto49EBE947_ae) || (auto49EBE947_ai < 0 && lv_loopint >= auto49EBE947_ae) ) ; lv_loopint += auto49EBE947_ai ) {
                libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, lv_loopint);
            }
        }
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        gv_infestedSmithy = UnitLastCreated();
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_infestedSmithy), ColorWithAlpha(79.22, 90.98, 100.00, 49.41), 0.0, 270.0);
        gv_smithyPing = PingLastCreated();
        PingSetTooltip(gv_smithyPing, UnitTypeGetName(UnitGetType(gv_infestedSmithy)));
        PingSetUnit(gv_smithyPing, gv_infestedSmithy);
        libHots_gf_StorePingForUnit(gv_infestedSmithy, 1, gv_smithyPing);
        gv_smithySpawned = true;
        if ((gv_smithyStage >= 1) && (gv_smithyStage <= 3)) {
            TimerStart(gv_SmithyFleeTimer, 190.0, false, c_timeGame);
            UnitAbilitySpendExplicit(gv_infestedSmithy, AbilityCommand("InfestedNuclearStrike", 0), c_spendLocationAll, 1.0, 1.0, 3.0, 1.0);
        }

    }

}

void gf_Computers1Bal () {
    // Variable Declarations
    actor lv_actor;
    int lv_int;
    int lv_array;
    point[7] lv_tower;

    // Automatic Variable Declarations
    int auto1AF6D0CF_ae;
    const int auto1AF6D0CF_ai = 1;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    lv_tower[1] = PointFromId(926038416);
    lv_tower[2] = PointFromId(1093959766);
    gv_completedComputers = 0;
    gv_epiCompProgress[1] = 0;
    gv_epiCompProgress[2] = 0;
    gv_sensorcount = 2;
    gv_towerCount = 0;

    gf_MissionText(StringExternal("Param/Value/AC3F5A8A"));
    Wait(4.0, c_timeGame);

    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/DDCB1C77"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/FD8543C6"));

    auto1AF6D0CF_ae = gv_sensorcount;
    lv_int = 1;
    for ( ; ( (auto1AF6D0CF_ai >= 0 && lv_int <= auto1AF6D0CF_ae) || (auto1AF6D0CF_ai < 0 && lv_int >= auto1AF6D0CF_ae) ) ; lv_int += auto1AF6D0CF_ai ) {
        lv_array = lv_int;
        gv_epiCompSites[lv_int] = RegionCircle(lv_tower[lv_array], 1.0);
        lv_tower[lv_array] = null;
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_epiCompSites[lv_int]));
        gv_epiCompActors[lv_int] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000 0.000000 s");
        ActorSend(gv_epiCompActors[lv_int], "SetTintColor {255,0,0 5.000000}");
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_epiCompSites[lv_int]), ColorWithAlpha(24.31, 62.35, 24.31, 0.00), 0.0, 270.0);
        PingSetScale(PingLastCreated(), 0.5);
        gv_aORegionPings[lv_int] = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/20F2DB9E"));
        TextTagCreate(StringExternal("Param/Value/C26AFB26"), 12, RegionGetCenter(gv_epiCompSites[lv_int]), 0.0, true, false, PlayerGroupAll());
        gv_towerTag[lv_int] = TextTagLastCreated();
        TextTagSetTextShadow(gv_towerTag[lv_int], false);
    }
    gv_smithyStage = 1;
    TriggerEnable(gt_ApproachComputer, true);
}

trigger auto_gf_AccessingComputers_Trigger = null;
unit auto_gf_AccessingComputers_lp_unit;
region auto_gf_AccessingComputers_lp_region;
int auto_gf_AccessingComputers_lp_site;

void gf_AccessingComputers (unit lp_unit, region lp_region, int lp_site) {
    auto_gf_AccessingComputers_lp_unit = lp_unit;
    auto_gf_AccessingComputers_lp_region = lp_region;
    auto_gf_AccessingComputers_lp_site = lp_site;

    if (auto_gf_AccessingComputers_Trigger == null) {
        auto_gf_AccessingComputers_Trigger = TriggerCreate("auto_gf_AccessingComputers_TriggerFunc");
    }

    TriggerExecute(auto_gf_AccessingComputers_Trigger, false, false);
}

bool auto_gf_AccessingComputers_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_AccessingComputers_lp_unit;
    region lp_region = auto_gf_AccessingComputers_lp_region;
    int lp_site = auto_gf_AccessingComputers_lp_site;

    // Variable Declarations
    unit lv_u;
    int lv_count;
    int lv_loopint;
    bool lv_leftregion;
    int lv_watersitesremaining;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_smithyStage == 1)) {
        if ((gv_smithySpawns[1] == false)) {
            gv_smithySpawns[1] = true;
            TimerStart(gv_artilleryTimer, 20.0, true, c_timeGame);
            gf_SpawnSmithy();
        }

    }
    else if ((gv_smithyStage == 2)) {
        if ((gv_smithySpawns[2] == false)) {
            gv_smithySpawns[2] = true;
            gf_SpawnSmithy();
        }

    }
    else if ((gv_smithyStage == 3)) {
        if ((gv_smithySpawns[3] == false)) {
            gv_smithySpawns[3] = true;
            gf_SpawnSmithy();
        }

    }
    UnitGroupAdd(gv_waterGatherers, lp_unit);
    UnitBehaviorAdd(lp_unit, "ActivatingComputer", lp_unit, 1);
    TextTagShow(gv_towerTag[lp_site], PlayerGroupAll(), false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(lp_region), Color(0.00, 100.00, 0.00), 3.0, 270.0);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    while (true) {
        if ((gv_epiCompProgress[lp_site] >= 3)) {
            return true;
        }

        if ((UnitHasBehavior(lp_unit, "ActivatingComputer") == false)) {
            gv_epiCompProgress[lp_site] += 1;
            if ((gv_epiCompProgress[lp_site] == 1)) {
                gf_MissionText(StringExternal("Param/Value/A54DA8BA"));
            }
            else if ((gv_epiCompProgress[lp_site] == 2)) {
                gf_MissionText(StringExternal("Param/Value/A299FFB5"));
            }
            if ((gv_epiCompProgress[lp_site] >= 3)) {
                gf_MissionText(StringExternal("Param/Value/884FC213"));
                PingDestroy(gv_aORegionPings[lp_site]);
                gv_completedComputers += 1;
                ActorSend(gv_epiCompActors[lp_site], "Destroy");
                Wait(0.25, c_timeGame);
                UnitGroupRemove(gv_waterGatherers, lp_unit);
                gv_epiCompActors[lp_site] = null;
                break;
            }
            else {
                UnitBehaviorAdd(lp_unit, "ActivatingComputer", lp_unit, 1);
            }
        }

        if ((libNtve_gf_UnitInRegion(lp_unit, lp_region) == true) && (UnitIsAlive(lp_unit) == true)) {
        }
        else {
            TextTagShow(gv_towerTag[lp_site], PlayerGroupAll(), false);
            UnitBehaviorRemove(lp_unit, "ActivatingComputer", 1);
            UnitGroupRemove(gv_waterGatherers, lp_unit);
            lv_leftregion = true;
            break;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

void gf_Computers2Air () {
    // Variable Declarations
    actor lv_actor;
    int lv_int;
    int lv_array;
    point[7] lv_tower;

    // Automatic Variable Declarations
    const int autoBB6DE3BC_ae = 3;
    const int autoBB6DE3BC_ai = 1;
    int auto003DCC0C_ae;
    const int auto003DCC0C_ai = 1;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    gv_smithyStage = 2;
    Wait(5.0, c_timeGame);
    gv_epiSAMSites[1] = RegionFromId(83);
    gv_epiSAMSites[2] = RegionFromId(85);
    gv_epiSAMSites[3] = RegionFromId(86);
    gv_epiSAMSearched[1] = false;
    gv_epiSAMSearched[2] = false;
    gv_epiSAMSearched[3] = false;
    lv_int = 1;
    for ( ; ( (autoBB6DE3BC_ai >= 0 && lv_int <= autoBB6DE3BC_ae) || (autoBB6DE3BC_ai < 0 && lv_int >= autoBB6DE3BC_ae) ) ; lv_int += autoBB6DE3BC_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSmall", RegionGetCenter(gv_epiSAMSites[lv_int]), ColorWithAlpha(23.53, 100.00, 39.22, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A0A695ED"));
        PingSetScale(PingLastCreated(), 0.5);
        gv_epiSAMPings[lv_int] = PingLastCreated();
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_epiSAMSites[lv_int]));
        gv_epiSAMSearch[lv_int] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000 0.000000 s");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {0,255,64 5.000000}");
    }
    ObjectiveSetState(gv_secondObj, c_objectiveStateActive);
    ObjectiveSetName(gv_secondObj, StringExternal("Param/Value/FA590D5C"));
    ObjectiveSetDescription(gv_secondObj, StringExternal("Param/Value/AD063F4D"));
    gf_MissionText(StringExternal("Param/Value/8B309D4E"));
    TriggerEnable(gt_ActivateSAM, true);
    Wait(10.0, c_timeGame);
    lv_tower[1] = PointFromId(1569026049);
    lv_tower[2] = PointFromId(1797485659);
    gv_completedComputers = 0;
    gv_epiCompProgress[1] = 0;
    gv_epiCompProgress[2] = 0;
    gv_sensorcount = 2;

    gf_MissionText(StringExternal("Param/Value/7B6E4CBA"));
    Wait(4.0, c_timeGame);

    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/E6C88963"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/7DB0D9E5"));

    auto003DCC0C_ae = gv_sensorcount;
    lv_int = 1;
    for ( ; ( (auto003DCC0C_ai >= 0 && lv_int <= auto003DCC0C_ae) || (auto003DCC0C_ai < 0 && lv_int >= auto003DCC0C_ae) ) ; lv_int += auto003DCC0C_ai ) {
        lv_array = lv_int;
        gv_epiCompSites[lv_int] = RegionCircle(lv_tower[lv_array], 2.0);
        lv_tower[lv_array] = null;
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_epiCompSites[lv_int]));
        gv_epiCompActors[lv_int] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000 0.000000 s");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,0,0 5.000000}");
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_epiCompSites[lv_int]), ColorWithAlpha(24.31, 62.35, 24.31, 0.00), 0.0, 270.0);
        PingSetScale(PingLastCreated(), 0.5);
        gv_aORegionPings[lv_int] = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EFC4D449"));
        TextTagCreate(StringExternal("Param/Value/E784F27E"), 12, RegionGetCenter(gv_epiCompSites[lv_int]), 0.0, true, false, PlayerGroupAll());
        gv_towerTag[lv_int] = TextTagLastCreated();
        TextTagSetTextShadow(gv_towerTag[lv_int], false);
    }
    TriggerEnable(gt_ApproachComputer, true);
}

void gf_Computers3RA () {
    // Variable Declarations
    actor lv_actor;
    int lv_int;
    int lv_array;
    point[7] lv_tower;

    // Automatic Variable Declarations
    int auto001014B0_ae;
    const int auto001014B0_ai = 1;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    gv_smithyStage = 3;
    Wait(15.0, c_timeGame);
    lv_tower[1] = PointFromId(307540740);
    lv_tower[2] = PointFromId(888964886);
    gv_completedComputers = 0;
    gv_epiCompProgress[1] = 0;
    gv_epiCompProgress[2] = 0;
    gv_sensorcount = 2;

    gf_MissionText(StringExternal("Param/Value/9BEEE26A"));
    Wait(4.0, c_timeGame);

    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/D3014285") + IntToText(gv_sensorcount) + StringExternal("Param/Value/F8D39257")));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/A362FC16"));

    auto001014B0_ae = gv_sensorcount;
    lv_int = 1;
    for ( ; ( (auto001014B0_ai >= 0 && lv_int <= auto001014B0_ae) || (auto001014B0_ai < 0 && lv_int >= auto001014B0_ae) ) ; lv_int += auto001014B0_ai ) {
        lv_array = lv_int;
        gv_epiCompSites[lv_int] = RegionCircle(lv_tower[lv_array], 2.0);
        lv_tower[lv_array] = null;
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_epiCompSites[lv_int]));
        gv_epiCompActors[lv_int] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000 0.000000 s");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {255,0,0 5.000000}");
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_epiCompSites[lv_int]), ColorWithAlpha(24.31, 62.35, 24.31, 0.00), 0.0, 270.0);
        PingSetScale(PingLastCreated(), 0.5);
        gv_aORegionPings[lv_int] = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B6066D95"));
        TextTagCreate(StringExternal("Param/Value/657D7AD5"), 12, RegionGetCenter(gv_epiCompSites[lv_int]), 0.0, true, false, PlayerGroupAll());
        gv_towerTag[lv_int] = TextTagLastCreated();
        TextTagSetTextShadow(gv_towerTag[lv_int], false);
    }
    TriggerEnable(gt_ApproachComputer, true);
}

void gf_SmithyAdvance () {
    // Variable Declarations
    actor lv_actor;
    int lv_int;
    int lv_array;
    point[7] lv_tower;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    TimerWindowShow(gv_bossTimerWindow, PlayerGroupAll(), false);
    libNtve_gf_StopTimer(gv_bossTimer);
    gv_smithyStage = 4;
    TriggerEnable(gt_InfestedSmithyFlee, false);
    if ((gv_infestedSmithy != null) && (UnitHasBehavior(gv_infestedSmithy, "SmithyFlee") == false)) {
        UnitBehaviorAdd(gv_infestedSmithy, "SmithyFlee", gv_infestedSmithy, 1);
        UnitIssueOrder(gv_infestedSmithy, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(941013679)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/10B4B45B"));
        Wait(5.0, c_timeGame);
        UnitRemove(gv_infestedSmithy);
        PingDestroy(gv_smithyPing);
        gv_smithySpawned = false;
        gv_infestedSmithy = null;
    }

    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/9582E628"));
    Wait(15.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/E4FD1E38"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/E295CB43"));

    gf_SpawnSmithy();
    gf_MissionText(StringExternal("Param/Value/2ECF4F9F"));
    Wait(4.0, c_timeGame);

    gf_SmithyAdvanceSpawns();
}

void gf_SmithyAdvanceSpawns () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ThresherMaw", 0, 14, RegionRandomPoint(RegionFromId(81)));
    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ElectricMaw", 0, 14, RegionRandomPoint(RegionFromId(81)));
    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Grotesque", 0, 14, RegionRandomPoint(RegionFromId(81)));
    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Metasis", 0, 14, RegionRandomPoint(RegionFromId(81)));
    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Metasis", 0, 14, RegionRandomPoint(RegionFromId(81)));
    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RedstoneLavaCritter", 0, 14, RegionRandomPoint(RegionFromId(81)));
    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    TriggerEnable(gt_SmithyDies, true);
    Wait(5.0, c_timeGame);
    gf_SpawnUndead(2, "Immussilus", 1);
    gf_SpawnUndead(2, "Immussilus", 1);
    Wait(5.0, c_timeGame);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Minerva", 1);
    gf_SpawnUndead(1, "Ares", 1);
    Wait(5.0, c_timeGame);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndead(12, "Parasite", 1);
    gf_SpawnUndead(6, "Krill", 1);
    gf_SpawnUndead(3, "ZombieWraith", 1);
    gf_SpawnUndead(3, "AcidVore", 1);
    gf_SpawnUndead(1, "Horror", 1);
    gf_SpawnUndead(1, "Morbus", 1);
    gf_SpawnUndead(1, "Morbus", 1);
    gf_SpawnUndead(1, "Morbus", 1);
    Wait(5.0, c_timeGame);
    gf_SpawnUndead(1, "Licker", 1);
    gf_SpawnUndead(1, "Licker", 1);
    gf_SpawnUndead(3, "Leaper", 1);
    gf_SpawnUndead(3, "Leaper", 1);
    gf_SpawnUndead(3, "Leaper", 1);
    gf_SpawnUndead(3, "Bruchus", 1);
    gf_SpawnUndead(3, "Bruchus", 1);
    gf_SpawnUndead(3, "Bruchus", 1);
}

void gf_FillBunker (unit lp_bunker) {
    // Automatic Variable Declarations
    // Implementation
    UnitCargoCreate(lp_bunker, "InfantryRifleman", 1);
    UnitBehaviorAdd(UnitCargoLastCreated(), "AntiGravity", UnitCargoLastCreated(), 1);
    UnitCargoCreate(lp_bunker, "InfantryRifleman", 1);
    UnitBehaviorAdd(UnitCargoLastCreated(), "AntiGravity", UnitCargoLastCreated(), 1);
    UnitCargoCreate(lp_bunker, "InfantryRifleman", 1);
    UnitBehaviorAdd(UnitCargoLastCreated(), "AntiGravity", UnitCargoLastCreated(), 1);
    UnitCargoCreate(lp_bunker, "InfantryRifleman", 1);
    UnitBehaviorAdd(UnitCargoLastCreated(), "AntiGravity", UnitCargoLastCreated(), 1);
}

void gf_ElitePMCFlyover () {
    // Variable Declarations
    bool lv_east;
    region lv_startRegion;
    region lv_stopRegion;
    int lv_jetCountAlive;
    int lv_loopint;
    unitgroup lv_jetUnitGroup;

    // Automatic Variable Declarations
    const int autoDAAB077D_ae = 360;
    const int autoDAAB077D_ai = 20;
    const int auto5EBA778A_n = 3;
    int auto5EBA778A_i;
    const int auto235166A1_n = 100;
    int auto235166A1_i;
    unitgroup auto7CC5FD95_g;
    int auto7CC5FD95_u;
    unit auto7CC5FD95_var;
    unitgroup auto69892A44_g;
    int auto69892A44_u;
    unit auto69892A44_var;

    // Variable Initialization
    lv_jetUnitGroup = UnitGroupEmpty();

    // Implementation
    if ((RandomInt(0, 1) == 1)) {
        lv_east = true;
        lv_startRegion = gv_f15eastRegions[RandomInt(1, 10)];
        lv_stopRegion = gv_f15westRegions[RandomInt(1, 9)];
    }
    else {
        lv_stopRegion = gv_f15eastRegions[RandomInt(1, 10)];
        lv_startRegion = gv_f15westRegions[RandomInt(1, 9)];
    }
    gf_MissionText(StringExternal("Param/Value/73BF1FDF"));
    Wait(5.0, c_timeGame);
    lv_loopint = 0;
    for ( ; ( (autoDAAB077D_ai >= 0 && lv_loopint <= autoDAAB077D_ae) || (autoDAAB077D_ai < 0 && lv_loopint >= autoDAAB077D_ae) ) ; lv_loopint += autoDAAB077D_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", libNtve_gf_PointOffsetTowardsPoint(RegionGetCenter(lv_startRegion), lv_loopint, RegionGetCenter(lv_stopRegion)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, AngleBetweenPoints(RegionGetCenter(lv_startRegion), RegionGetCenter(lv_stopRegion)));
        Wait(0.3, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    for (auto5EBA778A_i = 1; auto5EBA778A_i <= auto5EBA778A_n; auto5EBA778A_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "RAF15FighterJet", c_unitCreateIgnorePlacement, 15, RegionRandomPoint(lv_startRegion), RegionGetCenter(lv_stopRegion));
        UnitGroupAdd(lv_jetUnitGroup, UnitLastCreated());
        gf_AddTextureToPMCUnit(UnitLastCreated());
        UnitSetHeight(UnitLastCreated(), 20.0, 0.0);
        UnitSetHeight(UnitLastCreated(), 7.0, 1.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lv_stopRegion)), c_orderQueueAddToEnd);
        Wait(0.3, c_timeGame);
    }
    for (auto235166A1_i = 1; auto235166A1_i <= auto235166A1_n; auto235166A1_i += 1) {
        lv_jetCountAlive = 0;
        auto7CC5FD95_g = lv_jetUnitGroup;
        auto7CC5FD95_u = UnitGroupCount(auto7CC5FD95_g, c_unitCountAll);
        for (;; auto7CC5FD95_u -= 1) {
            auto7CC5FD95_var = UnitGroupUnitFromEnd(auto7CC5FD95_g, auto7CC5FD95_u);
            if (auto7CC5FD95_var == null) { break; }
            if ((UnitIsAlive(auto7CC5FD95_var))) {
                lv_jetCountAlive += 1;
                if ((PointGetX(UnitGetPosition(auto7CC5FD95_var)) < 20.0) && (lv_east)) {
                    UnitSetHeight(auto7CC5FD95_var, 20.0, 0.5);
                    Wait(0.2, c_timeGame);
                    UnitRemove(auto7CC5FD95_var);
                }

                if ((PointGetX(UnitGetPosition(auto7CC5FD95_var)) > 236.0) && (!((lv_east)))) {
                    UnitSetHeight(auto7CC5FD95_var, 20.0, 0.5);
                    Wait(0.2, c_timeGame);
                    UnitRemove(auto7CC5FD95_var);
                }

            }

        }
        if ((lv_jetCountAlive == 0)) {
            break;
        }

        Wait(0.5, c_timeGame);
    }
    auto69892A44_g = lv_jetUnitGroup;
    auto69892A44_u = UnitGroupCount(auto69892A44_g, c_unitCountAll);
    for (;; auto69892A44_u -= 1) {
        auto69892A44_var = UnitGroupUnitFromEnd(auto69892A44_g, auto69892A44_u);
        if (auto69892A44_var == null) { break; }
        UnitRemove(auto69892A44_var);
    }
}

trigger auto_gf_PMCSurvivalStartBonusMission_Trigger = null;

void gf_PMCSurvivalStartBonusMission () {
    if (auto_gf_PMCSurvivalStartBonusMission_Trigger == null) {
        auto_gf_PMCSurvivalStartBonusMission_Trigger = TriggerCreate("auto_gf_PMCSurvivalStartBonusMission_TriggerFunc");
    }

    TriggerExecute(auto_gf_PMCSurvivalStartBonusMission_Trigger, false, false);
}

bool auto_gf_PMCSurvivalStartBonusMission_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gf_SkipActionsIfGameOver();
    ObjectiveCreate(StringExternal("Param/Value/73838FFA"), StringToText(""), c_objectiveStateActive, false);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_optionalObj = ObjectiveLastCreated();
    gf_MissionText(StringExternal("Param/Value/755CDA79"));
    Wait(6.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/4201A659"));
    Wait(6.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/2D1BE539"));
    Wait(4.5, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/69DE9993"));
    ObjectiveSetState(gv_optionalObj, c_objectiveStateActive);
    ObjectiveSetName(gv_optionalObj, StringExternal("Param/Value/75281241"));
    ObjectiveSetDescription(gv_optionalObj, StringExternal("Param/Value/48B863A0"));
    PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(151)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    gv_pingsecondary = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0E2C8937"));
    TriggerEnable(gt_PMCSurvivalOpenRAFacilityGates, true);
    return true;
}

trigger auto_gf_PMCSurvivalResearchHandover_Trigger = null;
unit auto_gf_PMCSurvivalResearchHandover_lp_research;

void gf_PMCSurvivalResearchHandover (unit lp_research) {
    auto_gf_PMCSurvivalResearchHandover_lp_research = lp_research;

    if (auto_gf_PMCSurvivalResearchHandover_Trigger == null) {
        auto_gf_PMCSurvivalResearchHandover_Trigger = TriggerCreate("auto_gf_PMCSurvivalResearchHandover_TriggerFunc");
    }

    TriggerExecute(auto_gf_PMCSurvivalResearchHandover_Trigger, false, false);
}

bool auto_gf_PMCSurvivalResearchHandover_TriggerFunc (bool testConds, bool runActions) {
    unit lp_research = auto_gf_PMCSurvivalResearchHandover_lp_research;

    // Automatic Variable Declarations
    // Implementation
    UnitRemove(lp_research);
    gf_MissionItemPingRemoveItem(lp_research);
    gv_waterSamplesCollected += 1;
    gf_SucceedMission(10, StringExternal("Param/Value/E4F7C943"), 0, false);
    if ((gv_waterSamplesCollected == gv_sensorcount)) {
        gv_waterSamplesCompleted = true;
        ObjectiveSetState(gv_optionalObj, c_objectiveStateCompleted);
    }
    return true;
}

trigger auto_gf_NewBossModeInitialSupplyDrop_Trigger = null;

void gf_NewBossModeInitialSupplyDrop () {
    if (auto_gf_NewBossModeInitialSupplyDrop_Trigger == null) {
        auto_gf_NewBossModeInitialSupplyDrop_Trigger = TriggerCreate("auto_gf_NewBossModeInitialSupplyDrop_TriggerFunc");
    }

    TriggerExecute(auto_gf_NewBossModeInitialSupplyDrop_Trigger, false, false);
}

bool auto_gf_NewBossModeInitialSupplyDrop_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gv_sensorLZ = RegionFromId(6);
    Wait(2.0, c_timeGame);
    gf_SendMessageNotfy("<c val=\"80ff80\">" + "SupplyDrop Arrive");
    gf_MissionText(StringExternal("Param/Value/C5BB03EA"));
    PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(6)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 8.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/84CA9E2C"));
    gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("FirstAidKit", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("FirstAidKit", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("FirstAidKit", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("QuikClot", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("QuikClot", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("EnergyCell", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("EnergyCell", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("MGL", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("MRL", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("40mmGrenade", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("ExplosiveCharge", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("MK44SentryGunPacked", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("MK44SentryGunPacked", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("MK79SentryGunPacked", RegionRandomPoint(gv_sensorLZ), 1);
    if (gv_LUNATICEnable)
        {
            gv_HyperPulseT1Acc = true;
            gf_AirDropItemLoc("StrafeDesignator", RegionRandomPoint(gv_sensorLZ), 1);
            gf_AirDropItemLoc("StrafeDesignator", RegionRandomPoint(gv_sensorLZ), 1);
            gf_AirDropItemLoc("LLDR", RegionRandomPoint(gv_sensorLZ), 1);
            gf_AirDropItemLoc("SolarArmor", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("DURounds", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("AimAssistant", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("OPA", RegionRandomPoint(gv_sensorLZ), 1);
    gf_AirDropItemLoc("KineticIntegrator", RegionRandomPoint(gv_sensorLZ), 1);
        }
    return true;
}

int gf_PMCSquadSlot (int lp_squadIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_UnitGroupIsDead(gv_pMCSquads[lp_squadIndex].lv_group) == true)) {
        return lp_squadIndex;
    }
    else {
        return 0;
    }
}

void gf_SpawnPMCSquad (int lp_squadType, int lp_chance) {
    // Variable Declarations
    int lv_squadIndex;
    point lv_spawnLoc;
    int lv_squadArray;
    bool lv_emplySlotFound;

    // Automatic Variable Declarations
    int auto98FFDBF9_ae;
    const int auto98FFDBF9_ai = 1;
    int autoC576767E_val;
    int autoFE2B1698_n;
    int autoFE2B1698_i;
    int auto02A1A657_n;
    int auto02A1A657_i;
    int auto38C286C8_n;
    int auto38C286C8_i;
    int autoB1039A74_n;
    int autoB1039A74_i;
    int auto4C1C99A9_n;
    int auto4C1C99A9_i;
    int auto2626A996_n;
    int auto2626A996_i;
    int auto33523F66_n;
    int auto33523F66_i;
    int autoBD956028_n;
    int autoBD956028_i;
    int autoB947CFEE_n;
    int autoB947CFEE_i;
    int auto7E299B64_n;
    int auto7E299B64_i;
    int auto12DA5250_n;
    int auto12DA5250_i;
    int auto234DCBB9_n;
    int auto234DCBB9_i;
    int autoF349E471_n;
    int autoF349E471_i;

    // Variable Initialization
    lv_spawnLoc = RegionRandomPoint(gv_spawnRegion);

    // Implementation
    Wait(0.1, c_timeGame);
    if ((RandomInt(0, lp_chance) != 0)) {
        return ;
    }
    if ((gv_pMCSquadCount > 0) && (gv_pMCSquadCount <= 50)) {
        auto98FFDBF9_ae = gv_pMCSquadCount;
        lv_squadIndex = 1;
        for ( ; ( (auto98FFDBF9_ai >= 0 && lv_squadIndex <= auto98FFDBF9_ae) || (auto98FFDBF9_ai < 0 && lv_squadIndex >= auto98FFDBF9_ae) ) ; lv_squadIndex += auto98FFDBF9_ai ) {
            if ((gf_PMCSquadSlot(lv_squadIndex) == lv_squadIndex)) {
                lv_squadArray = lv_squadIndex;
                lv_emplySlotFound = true;
                break;
            }
            Wait(0.01, c_timeGame);
        }
        if ((lv_emplySlotFound == false)) {
            gv_pMCSquadCount += 1;
            lv_squadArray = gv_pMCSquadCount;
        }
    }
    else {
        gv_pMCSquadCount += 1;
        lv_squadArray = gv_pMCSquadCount;
    }
    autoC576767E_val = lp_squadType;
    if (autoC576767E_val == 1) {
        if ((RandomInt(0, 7) == 1)) {
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        }
        if ((RandomInt(0, 12) == 1)) {
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
        if ((RandomInt(0, 12) == 1)) {
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAAutomaticRifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAGrenadier", lv_spawnLoc, lv_squadArray);
        if ((gv_gamemode == 11)) {
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 2) {
        autoFE2B1698_n = RandomInt(3, 4);
        for (autoFE2B1698_i = 1; autoFE2B1698_i <= autoFE2B1698_n; autoFE2B1698_i += 1) {
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 3) {
        if ((RandomInt(0, 7) == 1)) {
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        }
        if ((RandomInt(0, 10) == 1)) {
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
        auto02A1A657_n = RandomInt(2, 4);
        for (auto02A1A657_i = 1; auto02A1A657_i <= auto02A1A657_n; auto02A1A657_i += 1) {
            gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RAGrenadier", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAJavelinGunner", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAJavelinGunner", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        if ((gv_gamemode == 11)) {
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 4) {
        if ((RandomInt(0, 7) == 1)) {
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        }
        if ((RandomInt(0, 10) == 1)) {
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadDesignatedMarksman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadDesignatedMarksman", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 5) {
        if ((RandomInt(0, 7) == 1)) {
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        }
        if ((RandomInt(0, 12) == 1)) {
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
        auto38C286C8_n = RandomInt(4, 6);
        for (auto38C286C8_i = 1; auto38C286C8_i <= auto38C286C8_n; auto38C286C8_i += 1) {
            gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RAGrenadier", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAGrenadier", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 6) {
        autoB1039A74_n = RandomInt(2, 4);
        for (autoB1039A74_i = 1; autoB1039A74_i <= autoB1039A74_n; autoB1039A74_i += 1) {
            gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatEngineer", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAM2BradleyIFV", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAM2BradleyIFV", lv_spawnLoc, lv_squadArray);
        if ((gv_gamemode == 11)) {
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 7) {
        if ((gv_gamemode != 8)) {
            gf_SpawnPMCSoldier("RAAH25Hunter", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAAH25Hunter", lv_spawnLoc, lv_squadArray);
        }
        else {
            gf_SpawnPMCSoldier("RAAH25Hunter", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 8) {
        auto4C1C99A9_n = RandomInt(3, 4);
        for (auto4C1C99A9_i = 1; auto4C1C99A9_i <= auto4C1C99A9_n; auto4C1C99A9_i += 1) {
            gf_SpawnPMCSoldier("RAGhost", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 9) {
        auto2626A996_n = RandomInt(2, 3);
        for (auto2626A996_i = 1; auto2626A996_i <= auto2626A996_n; auto2626A996_i += 1) {
            gf_SpawnPMCSoldier("RASniper", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 10) {
        gf_SpawnPMCSoldier("RACombatWalker", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatWalker", lv_spawnLoc, lv_squadArray);
        auto33523F66_n = RandomInt(1, 2);
        for (auto33523F66_i = 1; auto33523F66_i <= auto33523F66_n; auto33523F66_i += 1) {
            gf_SpawnPMCSoldier("RACombatEngineer", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        if ((gv_gamemode == 11) && (RandomInt(0, 1) == 1)) {
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 11) {
        autoBD956028_n = RandomInt(1, 2);
        for (autoBD956028_i = 1; autoBD956028_i <= autoBD956028_n; autoBD956028_i += 1) {
            gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        }
        autoB947CFEE_n = RandomInt(1, 2);
        for (autoB947CFEE_i = 1; autoB947CFEE_i <= autoB947CFEE_n; autoB947CFEE_i += 1) {
            gf_SpawnPMCSoldier("RALaserDroid", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        auto7E299B64_n = RandomInt(2, 3);
        for (auto7E299B64_i = 1; auto7E299B64_i <= auto7E299B64_n; auto7E299B64_i += 1) {
            gf_SpawnPMCSoldier("RACombatEngineer", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 12) {
        gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("Ignis", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 13) {
        auto12DA5250_n = RandomInt(2, 3);
        for (auto12DA5250_i = 1; auto12DA5250_i <= auto12DA5250_n; auto12DA5250_i += 1) {
            gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatEngineer", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAM1Abrams", lv_spawnLoc, lv_squadArray);
        if ((gv_gamemode == 11)) {
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 14) {
        gf_SpawnPMCSoldier("RAAutomaticRifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAAutomaticRifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAAutomaticRifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("Vesania", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 15) {
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAAutomaticRifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RABattleWalker", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 16) {
        gf_SpawnPMCSoldier("Vesania20", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        if ((gv_gamemode == 11)) {
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 17) {
        gf_SpawnPMCSoldier("Ignis20", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        if (((gv_gamemode == 11) || (gv_gamemode == 18))) {
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 18) {
        gf_SpawnPMCSoldier("Smithy", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatWalker", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatWalker", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatWalker", lv_spawnLoc, lv_squadArray);
        if ((gv_gamemode == 11)) {
            gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
        else {
            gf_SpawnPMCSoldier("Ignis20", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("Ignis20", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("Vesania20", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("Vesania20", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 19) {
        auto234DCBB9_n = RandomInt(3, 5);
        for (auto234DCBB9_i = 1; auto234DCBB9_i <= auto234DCBB9_n; auto234DCBB9_i += 1) {
            gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        if ((RandomInt(0, 5) == 1)) {
            gf_SpawnPMCSoldier("RAHuggerBot", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAHuggerBot", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAHuggerBot", lv_spawnLoc, lv_squadArray);
        }

    }
    else if (autoC576767E_val == 20) {
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 21) {
        autoF349E471_n = RandomInt(4, 6);
        for (autoF349E471_i = 1; autoF349E471_i <= autoF349E471_n; autoF349E471_i += 1) {
            gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatEngineer", lv_spawnLoc, lv_squadArray);
        if ((RandomInt(0, 1) == 1)) {
            gf_SpawnPMCSoldier("RAM2BradleyIFV", lv_spawnLoc, lv_squadArray);
        }
        else {
            gf_SpawnPMCSoldier("RAM1Abrams", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 22) {
        gf_SpawnPMCSoldier("RACommando", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACommando", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACommando", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 23) {
        gf_SpawnPMCSoldier("RARiotControl", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARiotControl", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARiotControl", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 24) {
        gf_SpawnPMCSoldier("RAChemTrooper", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAChemTrooper", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAChemTrooper", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 25) {
        gf_SpawnPMCSoldier("Umbra", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 26) {
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatEngineer", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("Juggernaught", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAGhost", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAGhost", lv_spawnLoc, lv_squadArray);
        if ((gv_gamemode == 11)) {
            gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (autoC576767E_val == 27) {
        gf_SpawnPMCSoldier("RADeadshot", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RADeadshot", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 28) {
        gf_SpawnPMCSoldier("RALAV25Recon", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 29) {
        gf_SpawnPMCSoldier("PD3Shepherd", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (autoC576767E_val == 30) {
        gf_SpawnPMCSoldier("RAM270MLRS", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAM270MLRS", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASpotter", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASpotter", lv_spawnLoc, lv_squadArray);
    }
    else {
    }
    UnitGroupIssueOrder(gv_pMCSquads[lv_squadArray].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
}

void gf_SpawnPMCSquadInRegion (int lp_squadtype, int lp_chance, region lp_region) {
    // Variable Declarations
    int lv_squadIndex;
    point lv_spawnLoc;
    int lv_squadArray;
    bool lv_emplySlotFound;

    // Automatic Variable Declarations
    int auto79F4FE50_ae;
    const int auto79F4FE50_ai = 1;
    int auto3F4B8DEC_val;
    int auto6E17766D_n;
    int auto6E17766D_i;
    int auto586D5ED3_n;
    int auto586D5ED3_i;
    int autoF86C2BD6_n;
    int autoF86C2BD6_i;
    int auto63F65932_n;
    int auto63F65932_i;
    int auto6AE5B493_n;
    int auto6AE5B493_i;
    int autoE22C3DBC_n;
    int autoE22C3DBC_i;
    int autoFBD2E06B_n;
    int autoFBD2E06B_i;
    int auto5A47A372_n;
    int auto5A47A372_i;
    int auto2274DB70_n;
    int auto2274DB70_i;
    int autoAD46CE6D_n;
    int autoAD46CE6D_i;
    int auto14B84103_n;
    int auto14B84103_i;
    int auto903E292D_n;
    int auto903E292D_i;
    int auto68A9FEBC_n;
    int auto68A9FEBC_i;

    // Variable Initialization
    lv_spawnLoc = RegionGetCenter(lp_region);

    // Implementation
    Wait(0.1, c_timeGame);
    if ((RandomInt(0, lp_chance) == 0)) {
    }
    else {
        return ;
    }
    if ((gv_pMCSquadCount > 0)) {
        auto79F4FE50_ae = gv_pMCSquadCount;
        lv_squadIndex = 1;
        for ( ; ( (auto79F4FE50_ai >= 0 && lv_squadIndex <= auto79F4FE50_ae) || (auto79F4FE50_ai < 0 && lv_squadIndex >= auto79F4FE50_ae) ) ; lv_squadIndex += auto79F4FE50_ai ) {
            if ((gf_PMCSquadSlot(lv_squadIndex) == lv_squadIndex)) {
                lv_squadArray = lv_squadIndex;
                lv_emplySlotFound = true;
                break;
            }
            Wait(0.01, c_timeGame);
        }
        if ((lv_emplySlotFound == false)) {
            gv_pMCSquadCount += 1;
            lv_squadArray = gv_pMCSquadCount;
        }
    }
    else {
        gv_pMCSquadCount += 1;
        lv_squadArray = gv_pMCSquadCount;
    }
    auto3F4B8DEC_val = lp_squadtype;
    if (auto3F4B8DEC_val == 1) {
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAAutomaticRifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAGrenadier", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 2) {
        auto6E17766D_n = RandomInt(3, 4);
        for (auto6E17766D_i = 1; auto6E17766D_i <= auto6E17766D_n; auto6E17766D_i += 1) {
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (auto3F4B8DEC_val == 3) {
        auto586D5ED3_n = RandomInt(2, 4);
        for (auto586D5ED3_i = 1; auto586D5ED3_i <= auto586D5ED3_n; auto586D5ED3_i += 1) {
            gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RAGrenadier", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAJavelinGunner", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAJavelinGunner", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 4) {
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadDesignatedMarksman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadDesignatedMarksman", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 5) {
        autoF86C2BD6_n = RandomInt(4, 6);
        for (autoF86C2BD6_i = 1; autoF86C2BD6_i <= autoF86C2BD6_n; autoF86C2BD6_i += 1) {
            gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RAGrenadier", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAGrenadier", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 6) {
        auto63F65932_n = RandomInt(2, 4);
        for (auto63F65932_i = 1; auto63F65932_i <= auto63F65932_n; auto63F65932_i += 1) {
            gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatEngineer", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAM2BradleyIFV", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAM2BradleyIFV", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 7) {
        if ((gv_gamemode != 8)) {
            gf_SpawnPMCSoldier("RAAH25Hunter", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAAH25Hunter", lv_spawnLoc, lv_squadArray);
        }
        else {
            gf_SpawnPMCSoldier("RAAH25Hunter", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (auto3F4B8DEC_val == 8) {
        auto6AE5B493_n = RandomInt(3, 4);
        for (auto6AE5B493_i = 1; auto6AE5B493_i <= auto6AE5B493_n; auto6AE5B493_i += 1) {
            gf_SpawnPMCSoldier("RAGhost", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (auto3F4B8DEC_val == 9) {
        autoE22C3DBC_n = RandomInt(2, 3);
        for (autoE22C3DBC_i = 1; autoE22C3DBC_i <= autoE22C3DBC_n; autoE22C3DBC_i += 1) {
            gf_SpawnPMCSoldier("RASniper", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (auto3F4B8DEC_val == 10) {
        gf_SpawnPMCSoldier("RACombatWalker", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatWalker", lv_spawnLoc, lv_squadArray);
        autoFBD2E06B_n = RandomInt(1, 2);
        for (autoFBD2E06B_i = 1; autoFBD2E06B_i <= autoFBD2E06B_n; autoFBD2E06B_i += 1) {
            gf_SpawnPMCSoldier("RACombatEngineer", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 11) {
        auto5A47A372_n = RandomInt(1, 2);
        for (auto5A47A372_i = 1; auto5A47A372_i <= auto5A47A372_n; auto5A47A372_i += 1) {
            gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        }
        auto2274DB70_n = RandomInt(1, 2);
        for (auto2274DB70_i = 1; auto2274DB70_i <= auto2274DB70_n; auto2274DB70_i += 1) {
            gf_SpawnPMCSoldier("RALaserDroid", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        autoAD46CE6D_n = RandomInt(2, 3);
        for (autoAD46CE6D_i = 1; autoAD46CE6D_i <= autoAD46CE6D_n; autoAD46CE6D_i += 1) {
            gf_SpawnPMCSoldier("RACombatEngineer", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 12) {
        gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("Ignis", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 13) {
        auto14B84103_n = RandomInt(2, 3);
        for (auto14B84103_i = 1; auto14B84103_i <= auto14B84103_n; auto14B84103_i += 1) {
            gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatEngineer", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 14) {
        gf_SpawnPMCSoldier("RAAutomaticRifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAAutomaticRifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAAutomaticRifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("Vesania", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 15) {
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAAutomaticRifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RABattleWalker", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 16) {
        gf_SpawnPMCSoldier("Vesania20", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 17) {
        gf_SpawnPMCSoldier("Ignis20", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        if ((gv_gamemode == 11)) {
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAFlamethrower", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (auto3F4B8DEC_val == 18) {
        gf_SpawnPMCSoldier("Smithy", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("Ignis20", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("Ignis20", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("Vesania20", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("Vesania20", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatWalker", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatWalker", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatWalker", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 19) {
        auto903E292D_n = RandomInt(3, 5);
        for (auto903E292D_i = 1; auto903E292D_i <= auto903E292D_n; auto903E292D_i += 1) {
            gf_SpawnPMCSoldier("RACyborg", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        if ((RandomInt(0, 5) == 1)) {
            gf_SpawnPMCSoldier("RAHuggerBot", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAHuggerBot", lv_spawnLoc, lv_squadArray);
            gf_SpawnPMCSoldier("RAHuggerBot", lv_spawnLoc, lv_squadArray);
        }

    }
    else if (auto3F4B8DEC_val == 20) {
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 21) {
        auto68A9FEBC_n = RandomInt(4, 6);
        for (auto68A9FEBC_i = 1; auto68A9FEBC_i <= auto68A9FEBC_n; auto68A9FEBC_i += 1) {
            gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        }
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatEngineer", lv_spawnLoc, lv_squadArray);
        if ((RandomInt(0, 1) == 1)) {
            gf_SpawnPMCSoldier("RAM2BradleyIFV", lv_spawnLoc, lv_squadArray);
        }
        else {
            gf_SpawnPMCSoldier("RAM1Abrams", lv_spawnLoc, lv_squadArray);
        }
    }
    else if (auto3F4B8DEC_val == 22) {
        gf_SpawnPMCSoldier("RACommando", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACommando", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACommando", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 23) {
        gf_SpawnPMCSoldier("RARiotControl", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARiotControl", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARiotControl", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 24) {
        gf_SpawnPMCSoldier("RAChemTrooper", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAChemTrooper", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAChemTrooper", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 25) {
        gf_SpawnPMCSoldier("Umbra", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 26) {
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASpecialForces", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RACombatMedic", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("Juggernaught", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAGhost", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAGhost", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 28) {
        gf_SpawnPMCSoldier("RALAV25Recon", lv_spawnLoc, lv_squadArray);
    }
    else if (auto3F4B8DEC_val == 29) {
        gf_SpawnPMCSoldier("PD3Shepherd", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RAAssaultman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RARifleman", lv_spawnLoc, lv_squadArray);
        gf_SpawnPMCSoldier("RASquadLeader", lv_spawnLoc, lv_squadArray);
    }
    else {
    }
    UnitGroupIssueOrder(gv_pMCSquads[lv_squadArray].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
}

void gf_SpawnPMCSoldier (string lp_type, point lp_point, int lp_squad) {
    // Variable Declarations
    unit lv_spawnedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitCreate(1, lp_type, 0, 15, lp_point, libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_pMCSquads[lp_squad].lv_group, UnitLastCreated());
    UnitSetCustomValue(UnitLastCreated(), 4, lp_squad);
    gf_AddTextureToPMCUnit(UnitLastCreated());
    if ((lp_type == "RASquadLeader")) {
        gv_pMCSquads[lp_squad].lv_squadLeader = UnitLastCreated();
    }
    if ((lp_type == "Smithy")) {
        gv_smithy = UnitLastCreated();
    }
    if ((UnitTypeTestAttribute(lp_type, c_unitAttributeBiological) == true)) {
        UnitBehaviorAdd(UnitLastCreated(), "PMCExplosionReduction", UnitLastCreated(), 1);
        if ((UnitGetType(UnitLastCreated()) != "RAGhost") && (UnitGetType(UnitLastCreated()) != "RASquadLeader") && (RandomInt(0, 4) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "FlashlightReveal", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "Flashlight", UnitLastCreated(), 1);
        }
        if ((RandomInt(0, 5) == 1)) {
            if ((RandomInt(0, 3) == 1)) {
                if ((RandomInt(0, 2) == 1)) {
                    UnitInventoryCreate(UnitLastCreated(), "OPA");
                    UnitSetOwner(UnitInventoryLastCreated(), 0, true);
                }
                else {
                    UnitInventoryCreate(UnitLastCreated(), "SPCS");
                    UnitSetOwner(UnitInventoryLastCreated(), 0, true);
                }
            }
            else {
                UnitInventoryCreate(UnitLastCreated(), "KevlarBodyArmor");
                UnitSetOwner(UnitInventoryLastCreated(), 0, true);
            }
        }
        if ((RandomInt(0, 6) == 1)) {
            if ((RandomInt(0, 2) == 1)) {
                UnitInventoryCreate(UnitLastCreated(), "AimAssistant");
                UnitSetOwner(UnitInventoryLastCreated(), 0, true);
            }
            else {
                UnitInventoryCreate(UnitLastCreated(), "ProjectileAccelerator");
                UnitSetOwner(UnitInventoryLastCreated(), 0, true);
            }
        }
        if ((RandomInt(0, 4) == 1) && (UnitTypeTestAttribute(lp_type, c_unitAttributeBiological) == true) && (UnitAbilityExists(UnitLastCreated(), "MiniInventoryRifle") == true) && (UnitGetType(UnitLastCreated()) != "RACommando")) {
            if ((RandomInt(0, 1) == 1)) {
                UnitInventoryCreate(UnitLastCreated(), "HK42");
                UnitSetOwner(UnitInventoryLastCreated(), 0, true);
            }
            else {
                UnitInventoryCreate(UnitLastCreated(), "StynerSPR");
                UnitSetOwner(UnitInventoryLastCreated(), 0, true);
            }
        }
    }
    if ((UnitWeaponGet(UnitLastCreated(), 1) == "RABattleRifle") && (RandomInt(0, 4) == 1)) {
        UnitBehaviorAdd(UnitLastCreated(), "BurstFireRA", UnitLastCreated(), 1);
    }
    else if ((UnitAbilityExists(UnitLastCreated(), "MiniInventoryMG") == true) && (RandomInt(0, 4) == 1)) {
        UnitInventoryCreate(UnitLastCreated(), "M41SAW");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
    }
    else if ((UnitAbilityExists(UnitLastCreated(), "MiniInventoryFlame") == true) && (RandomInt(0, 4) == 1)) {
        UnitInventoryCreate(UnitLastCreated(), "M79Flamethrower");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
    }
    else if ((UnitAbilityExists(UnitLastCreated(), "MiniInventoryShotgun") == true) && (RandomInt(0, 4) == 1)) {
        UnitInventoryCreate(UnitLastCreated(), "ISS7");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
    }
    else if ((UnitAbilityExists(UnitLastCreated(), "MiniInventorySDM") == true) && (RandomInt(0, 4) == 1)) {
        UnitInventoryCreate(UnitLastCreated(), "IDMR2");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
    }
    else if ((UnitAbilityExists(UnitLastCreated(), "MiniInventoryPlasma") == true) && (RandomInt(0, 4) == 1)) {
        UnitInventoryCreate(UnitLastCreated(), "IPR");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
    }
    if (((UnitGetType(UnitLastCreated()) == "RASpecialForces") || (UnitGetType(UnitLastCreated()) == "RACommando")) && (RandomInt(0, 1) == 1)) {
        UnitBehaviorAdd(UnitLastCreated(), "FragAIGrouporHero", UnitLastCreated(), 1);
    }
    else {
        if ((RandomInt(0, 1) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "GroundFlareAIHero", UnitLastCreated(), 1);
        }
        else {
            UnitBehaviorAdd(UnitLastCreated(), "FlareGunAIHero", UnitLastCreated(), 1);
        }
    }
    if ((UnitGetType(UnitLastCreated()) == "RACommando")) {
        if ((RandomInt(0, 1) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "RifleButtRA", UnitLastCreated(), 1);
        }
        else {
            UnitBehaviorAdd(UnitLastCreated(), "RACommandoCamouflageAI", UnitLastCreated(), 1);
        }
    }
    else {
        if ((RandomInt(0, 10) == 7)) {
            UnitBehaviorAdd(UnitLastCreated(), "RifleButtRA", UnitLastCreated(), 1);
        }
    }
    if ((lp_type == "RALAV25Recon")) {
        lv_spawnedUnit = UnitLastCreated();
        UnitCreate(1, "RASquadLeader", 0, 15, lp_point, libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_pMCSquads[lp_squad].lv_group, UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 4, lp_squad);
        gf_AddTextureToPMCUnit(UnitLastCreated());
        gv_pMCSquads[lp_squad].lv_squadLeader = UnitLastCreated();
        UnitPutInTransport(UnitLastCreated(), lv_spawnedUnit);
        Wait(0.2, c_timeGame);
        UnitCreate(1, "RASpecialForces", 0, 15, lp_point, libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_pMCSquads[lp_squad].lv_group, UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 4, lp_squad);
        gf_AddTextureToPMCUnit(UnitLastCreated());
        UnitPutInTransport(UnitLastCreated(), lv_spawnedUnit);
        Wait(0.2, c_timeGame);
        UnitCreate(1, "RASpecialForces", 0, 15, lp_point, libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_pMCSquads[lp_squad].lv_group, UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 4, lp_squad);
        gf_AddTextureToPMCUnit(UnitLastCreated());
        UnitPutInTransport(UnitLastCreated(), lv_spawnedUnit);
        Wait(0.2, c_timeGame);
        UnitCreate(1, "RARifleman", 0, 15, lp_point, libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_pMCSquads[lp_squad].lv_group, UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 4, lp_squad);
        gf_AddTextureToPMCUnit(UnitLastCreated());
        UnitPutInTransport(UnitLastCreated(), lv_spawnedUnit);
        Wait(0.2, c_timeGame);
        UnitCreate(1, "RARifleman", 0, 15, lp_point, libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_pMCSquads[lp_squad].lv_group, UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 4, lp_squad);
        gf_AddTextureToPMCUnit(UnitLastCreated());
        UnitPutInTransport(UnitLastCreated(), lv_spawnedUnit);
        Wait(0.2, c_timeGame);
        UnitCreate(1, "RARifleman", 0, 15, lp_point, libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_pMCSquads[lp_squad].lv_group, UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 4, lp_squad);
        gf_AddTextureToPMCUnit(UnitLastCreated());
        UnitPutInTransport(UnitLastCreated(), lv_spawnedUnit);
    }

}

void gf_SpawnPMCBoss (int lp_count, string lp_type) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    unitgroup autoCBD8F738_g;
    int autoCBD8F738_u;
    unit autoCBD8F738_var;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 15, RegionRandomPoint(gv_spawnRegion));
    UnitBehaviorAdd(UnitLastCreated(), "PMCExplosionReduction", UnitLastCreated(), 1);
    lv_point = RegionRandomPoint(RegionPlayableMap());
    autoCBD8F738_g = UnitLastCreatedGroup();
    autoCBD8F738_u = UnitGroupCount(autoCBD8F738_g, c_unitCountAll);
    for (;; autoCBD8F738_u -= 1) {
        autoCBD8F738_var = UnitGroupUnitFromEnd(autoCBD8F738_g, autoCBD8F738_u);
        if (autoCBD8F738_var == null) { break; }
        UnitIssueOrder(autoCBD8F738_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
    }
    gf_StartPMCBossAttackLoop(UnitLastCreated());
}

void gf_StartPMCBossAttackLoop (unit lp_pMCBoss) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitGroupAdd(gv_pMCBossGroup, lp_pMCBoss);
    while ((UnitGroupCount(gv_pMCBossGroup, c_unitCountAlive) > 0)) {
        if ((RandomInt(0, 4) != 1)) {
            lv_point = RegionRandomPoint(RegionPlayableMap());
            UnitIssueOrder(lp_pMCBoss, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_pMCBoss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
        Wait(14.0, c_timeGame);
    }
}

void gf_SpawnTerminatorSquad (int lp_squadtype, int lp_chance) {
    // Variable Declarations
    int lv_squadIndex;
    point lv_spawnLoc;
    int lv_squadArray;
    bool lv_emplySlotFound;

    // Automatic Variable Declarations
    int autoDE131BCF_ae;
    const int autoDE131BCF_ai = 1;
    int auto4E42EF03_val;

    // Variable Initialization
    lv_spawnLoc = RegionRandomPoint(gv_spawnRegion);

    // Implementation
    if ((RandomInt(0, lp_chance) == 0)) {
    }
    else {
        return ;
    }
    if ((gv_pMCSquadCount > 0)) {
        autoDE131BCF_ae = gv_pMCSquadCount;
        lv_squadIndex = 1;
        for ( ; ( (autoDE131BCF_ai >= 0 && lv_squadIndex <= autoDE131BCF_ae) || (autoDE131BCF_ai < 0 && lv_squadIndex >= autoDE131BCF_ae) ) ; lv_squadIndex += autoDE131BCF_ai ) {
            if ((gf_PMCSquadSlot(lv_squadIndex) == lv_squadIndex)) {
                lv_squadArray = lv_squadIndex;
                lv_emplySlotFound = true;
                break;
            }
            Wait(0.01, c_timeGame);
        }
        if ((lv_emplySlotFound == false)) {
            gv_pMCSquadCount += 1;
            lv_squadArray = gv_pMCSquadCount;
        }
    }
    else {
        gv_pMCSquadCount += 1;
        lv_squadArray = gv_pMCSquadCount;
    }
    auto4E42EF03_val = lp_squadtype;
    if (auto4E42EF03_val == 1) {
        gf_SpawnTerminatorUnit("RATerminator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RAEviscerator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RAEviscerator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RAEviscerator", lv_spawnLoc, lv_squadArray);
    }
    else if (auto4E42EF03_val == 2) {
        gf_SpawnTerminatorUnit("RATerminator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RADeadshot", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RADeadshot", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RADeadshot", lv_spawnLoc, lv_squadArray);
    }
    else if (auto4E42EF03_val == 3) {
        gf_SpawnTerminatorUnit("RATerminator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RAEviscerator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RAEviscerator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RADeadshot", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RADeadshot", lv_spawnLoc, lv_squadArray);
    }
    else if (auto4E42EF03_val == 4) {
        gf_SpawnTerminatorUnit("RATerminator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RAEviscerator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RAEviscerator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RATyrant", lv_spawnLoc, lv_squadArray);
    }
    else if (auto4E42EF03_val == 5) {
        gf_SpawnTerminatorUnit("RATerminator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RAEviscerator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RATyrant", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RATyrant", lv_spawnLoc, lv_squadArray);
    }
    else if (auto4E42EF03_val == 6) {
        gf_SpawnTerminatorUnit("RATerminator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RAAnnihilator", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RAAnnihilator", lv_spawnLoc, lv_squadArray);
    }
    else if (auto4E42EF03_val == 7) {
        gf_SpawnTerminatorUnit("RALaserDroid", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RALaserDroid", lv_spawnLoc, lv_squadArray);
        gf_SpawnTerminatorUnit("RALaserDroid", lv_spawnLoc, lv_squadArray);
    }
    else {
    }
    UnitGroupIssueOrder(gv_pMCSquads[lv_squadArray].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
}

void gf_SpawnTerminatorUnit (string lp_type, point lp_point, int lp_squad) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, lp_type, 0, 15, lp_point, libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_pMCTerminator, UnitLastCreated());
    UnitGroupAdd(gv_pMCSquads[lp_squad].lv_group, UnitLastCreated());
    UnitSetCustomValue(UnitLastCreated(), 4, lp_squad);
    if ((lp_type == "RATerminator")) {
        gv_pMCSquads[lp_squad].lv_squadLeader = UnitLastCreated();
    }
}

trigger auto_gf_SquadAttackPosition_Trigger = null;
int auto_gf_SquadAttackPosition_lp_squad;
point auto_gf_SquadAttackPosition_lp_position;

void gf_SquadAttackPosition (int lp_squad, point lp_position) {
    auto_gf_SquadAttackPosition_lp_squad = lp_squad;
    auto_gf_SquadAttackPosition_lp_position = lp_position;

    if (auto_gf_SquadAttackPosition_Trigger == null) {
        auto_gf_SquadAttackPosition_Trigger = TriggerCreate("auto_gf_SquadAttackPosition_TriggerFunc");
    }

    TriggerExecute(auto_gf_SquadAttackPosition_Trigger, false, false);
}

bool auto_gf_SquadAttackPosition_TriggerFunc (bool testConds, bool runActions) {
    int lp_squad = auto_gf_SquadAttackPosition_lp_squad;
    point lp_position = auto_gf_SquadAttackPosition_lp_position;

    // Variable Declarations
    point lv_offset;

    // Automatic Variable Declarations
    unitgroup auto651C836C_g;
    int auto651C836C_u;
    unit auto651C836C_var;
    unitgroup auto431D9D86_g;
    int auto431D9D86_u;
    unit auto431D9D86_var;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_pMCSquads[lp_squad].lv_squadLeader) == true)) {
        UnitGroupIssueOrder(gv_pMCSquads[lp_squad].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), lp_position), c_orderQueueReplace);
        auto651C836C_g = gv_pMCSquads[lp_squad].lv_group;
        auto651C836C_u = UnitGroupCount(auto651C836C_g, c_unitCountAll);
        for (;; auto651C836C_u -= 1) {
            auto651C836C_var = UnitGroupUnitFromEnd(auto651C836C_g, auto651C836C_u);
            if (auto651C836C_var == null) { break; }
            lv_offset = PointWithOffsetPolar(lp_position, RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            if ((UnitHasBehavior(auto651C836C_var, "Sprint") == false)) {
                UnitIssueOrder(auto651C836C_var, Order(AbilityCommand("SprintNPC", 0)), c_orderQueueReplace);
            }
        }
    }
    else {
        UnitGroupIssueOrder(gv_pMCSquads[lp_squad].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), lp_position), c_orderQueueReplace);
        auto431D9D86_g = gv_pMCSquads[lp_squad].lv_group;
        auto431D9D86_u = UnitGroupCount(auto431D9D86_g, c_unitCountAll);
        for (;; auto431D9D86_u -= 1) {
            auto431D9D86_var = UnitGroupUnitFromEnd(auto431D9D86_g, auto431D9D86_u);
            if (auto431D9D86_var == null) { break; }
            if ((UnitHasBehavior(auto431D9D86_var, "Sprint") == false)) {
                UnitIssueOrder(auto431D9D86_var, Order(AbilityCommand("SprintNPC", 0)), c_orderQueueReplace);
            }
        }
    }
    return true;
}

trigger auto_gf_AddTextureToPMCUnit_Trigger = null;
unit auto_gf_AddTextureToPMCUnit_lp_unit;

void gf_AddTextureToPMCUnit (unit lp_unit) {
    auto_gf_AddTextureToPMCUnit_lp_unit = lp_unit;

    if (auto_gf_AddTextureToPMCUnit_Trigger == null) {
        auto_gf_AddTextureToPMCUnit_Trigger = TriggerCreate("auto_gf_AddTextureToPMCUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_AddTextureToPMCUnit_Trigger, false, false);
}

bool auto_gf_AddTextureToPMCUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_AddTextureToPMCUnit_lp_unit;

    // Variable Declarations
    unit lv_pMC;

    // Automatic Variable Declarations
    string autoD6336C91_val;

    // Variable Initialization
    lv_pMC = lp_unit;

    // Implementation
    autoD6336C91_val = UnitGetType(lv_pMC);
    if (autoD6336C91_val == "RASquadLeader") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RADeadshot") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RAEviscerator") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RAAutomaticRifleman") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RAGhost") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RAFlamethrower") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RACombatEngineer") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RACombatMedic") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RASpecialForces") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RACommando") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RAGrenadier") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RAJavelinGunner") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RARifleman") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RATechnician") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RASniper") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RASquadDesignatedMarksman") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RACyborg") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RAChronoTrooper") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RARiotControl") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RAChemTrooper") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RAAssaultman") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RACombatWalker") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "RABattleWalker") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById CamoSnowRA");
    }
    else if (autoD6336C91_val == "Vesania") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
    }
    else if (autoD6336C91_val == "Vesania20") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
    }
    else if (autoD6336C91_val == "Ignis") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
    }
    else if (autoD6336C91_val == "Ignis20") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
    }
    else if (autoD6336C91_val == "MK44SentryGun") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
    }
    else if (autoD6336C91_val == "MK79SentryGun") {
        ActorSend(libNtve_gf_MainActorofUnit(lv_pMC), "TextureSelectById DecalRA");
    }
    else {
    }
    return true;
}

void gf_PMCTextSwitch (int lp_randomMsg, int lp_squad) {
    // Automatic Variable Declarations
    int auto9A7DCDF5_val;

    // Implementation
    gv_pMCSquadText[lp_squad].lv_enabled = true;
    auto9A7DCDF5_val = lp_randomMsg;
    if (auto9A7DCDF5_val == 1) {
        gf_PMCTextChat(gv_pMCSquads[lp_squad].lv_squadLeader, gv_pMCSquadText[lp_squad].lv_text1);
    }
    else if (auto9A7DCDF5_val == 2) {
        gf_PMCTextChat(gv_pMCSquads[lp_squad].lv_squadLeader, gv_pMCSquadText[lp_squad].lv_text2);
    }
    else if (auto9A7DCDF5_val == 3) {
        gf_PMCTextChat(gv_pMCSquads[lp_squad].lv_squadLeader, gv_pMCSquadText[lp_squad].lv_text3);
    }
    else if (auto9A7DCDF5_val == 4) {
    }
    else if (auto9A7DCDF5_val == 5) {
    }
    else if (auto9A7DCDF5_val == 6) {
    }
    else {
    }
    Wait(90.0, c_timeGame);
    gv_pMCSquadText[lp_squad].lv_enabled = false;
}

void gf_PMCCampaignSupplyCaches (int lp_cache) {
    // Variable Declarations
    int lv_randomLZ;
    region lv_cacheDrop;

    // Automatic Variable Declarations
    int auto3829F39E_val;

    // Variable Initialization
    lv_randomLZ = RandomInt(1, 5);

    // Implementation
    gf_MissionText(StringExternal("Param/Value/02A280A1"));
    lv_cacheDrop = gv_lZs[lv_randomLZ];
    PingCreate(PlayerGroupAll(), "BeaconRallyPing", RegionGetCenter(lv_cacheDrop), ColorWithAlpha(92.55, 96.86, 41.57, 0.00), 15.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/BACD4B4F"));
    PingSetScale(PingLastCreated(), 0.85);
    auto3829F39E_val = lp_cache;
    if (auto3829F39E_val == 1) {
        gf_WeaponCacheSpawnItem("Magazines", RandomInt(2, 4), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("AmmoCase", RandomInt(1, 2), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("QuikClot", RandomInt(0, 1), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("EnergyCell", RandomInt(0, 2), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("FlareGun", RandomInt(0, 1), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("FirstAidKit", RandomInt(0, 1), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("GroundFlare", RandomInt(0, 1), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("ExplosiveCharge", RandomInt(0, 2), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("MGL", RandomInt(0, 2), lv_cacheDrop);
    }
    else if (auto3829F39E_val == 2) {
        gf_AirDropItemLoc("KineticIntegrator", RegionRandomPoint(lv_cacheDrop), 1);
        gf_AirDropItemLoc("FragGrenade", RegionRandomPoint(lv_cacheDrop), 1);
        gf_AirDropItemLoc("FragGrenade", RegionRandomPoint(lv_cacheDrop), 1);
        gf_WeaponCacheSpawnItem("FirstAidKit", RandomInt(0, 1), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("FlareGun", RandomInt(0, 1), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("FlareGun", RandomInt(0, 1), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("ExplosiveCharge", RandomInt(0, 2), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("MGL", RandomInt(0, 2), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("QuikClot", RandomInt(0, 1), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("QuikClot", RandomInt(0, 1), lv_cacheDrop);
    }
    else if (auto3829F39E_val == 3) {
        gf_WeaponCacheSpawnItem("FlareGun", RandomInt(0, 1), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("Magazines", RandomInt(2, 4), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("QuikClot", RandomInt(0, 1), lv_cacheDrop);
        gf_AirDropItemLoc("OPA", RegionRandomPoint(lv_cacheDrop), 1);
        gf_AirDropItemLoc("AimAssistant", RegionRandomPoint(lv_cacheDrop), 1);
        gf_AirDropItemLoc("MRL", RegionRandomPoint(lv_cacheDrop), 1);
        gf_WeaponCacheSpawnItem("Magazines", RandomInt(2, 4), lv_cacheDrop);
        gf_AirDropItemLoc("GroundFlare", RegionRandomPoint(lv_cacheDrop), 1);
        gf_AirDropItemLoc("QuikClot", RegionRandomPoint(lv_cacheDrop), 1);
        gf_AirDropItemLoc("40mmGrenade", RegionRandomPoint(lv_cacheDrop), 1);
        gf_WeaponCacheSpawnItem("MGL", RandomInt(0, 2), lv_cacheDrop);
    }
    else if (auto3829F39E_val == 4) {
        gf_AirDropItemLoc("MRL", RegionRandomPoint(lv_cacheDrop), 1);
        gf_AirDropItemLoc("KineticIntegrator", RegionRandomPoint(lv_cacheDrop), 1);
        gf_AirDropItemLoc("MK44SentryGunPacked", RegionRandomPoint(lv_cacheDrop), 1);
        gf_AirDropItemLoc("APRounds", RegionRandomPoint(lv_cacheDrop), 1);
        gf_AirDropItemLoc("KevlarBodyArmor", RegionRandomPoint(lv_cacheDrop), 1);
        gf_AirDropItemLoc("AimAssistant", RegionRandomPoint(lv_cacheDrop), 1);
        gf_AirDropItemLoc("GroundFlare", RegionRandomPoint(lv_cacheDrop), 1);
        gf_WeaponCacheSpawnItem("EnergyCell", RandomInt(0, 2), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("FirstAidKit", RandomInt(0, 1), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("Magazines", RandomInt(2, 4), lv_cacheDrop);
        gf_WeaponCacheSpawnItem("ExplosiveCharge", RandomInt(0, 2), lv_cacheDrop);
    }
    else {
    }
}

trigger auto_gf_DropShellatTargetPMC_Trigger = null;
point auto_gf_DropShellatTargetPMC_lp_target;
string auto_gf_DropShellatTargetPMC_lp_effect;
int auto_gf_DropShellatTargetPMC_lp_player;

void gf_DropShellatTargetPMC (point lp_target, string lp_effect, int lp_player) {
    auto_gf_DropShellatTargetPMC_lp_target = lp_target;
    auto_gf_DropShellatTargetPMC_lp_effect = lp_effect;
    auto_gf_DropShellatTargetPMC_lp_player = lp_player;

    if (auto_gf_DropShellatTargetPMC_Trigger == null) {
        auto_gf_DropShellatTargetPMC_Trigger = TriggerCreate("auto_gf_DropShellatTargetPMC_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropShellatTargetPMC_Trigger, false, false);
}

bool auto_gf_DropShellatTargetPMC_TriggerFunc (bool testConds, bool runActions) {
    point lp_target = auto_gf_DropShellatTargetPMC_lp_target;
    string lp_effect = auto_gf_DropShellatTargetPMC_lp_effect;
    int lp_player = auto_gf_DropShellatTargetPMC_lp_player;

    // Variable Declarations
    unit lv_dummyunit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, "CasterDummy", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(lp_target, 10.0, RandomFixed(35.0, 55.0)), lp_target);
    lv_dummyunit = UnitLastCreated();
    UnitCreateEffectPoint(lv_dummyunit, lp_effect, lp_target);
    Wait(4.0, c_timeGame);
    UnitRemove(lv_dummyunit);
    return true;
}

trigger auto_gf_PoliceTCPCheck_Trigger = null;
int auto_gf_PoliceTCPCheck_lp_index;

void gf_PoliceTCPCheck (int lp_index) {
    auto_gf_PoliceTCPCheck_lp_index = lp_index;

    if (auto_gf_PoliceTCPCheck_Trigger == null) {
        auto_gf_PoliceTCPCheck_Trigger = TriggerCreate("auto_gf_PoliceTCPCheck_TriggerFunc");
    }

    TriggerExecute(auto_gf_PoliceTCPCheck_Trigger, false, false);
}

bool auto_gf_PoliceTCPCheck_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_gf_PoliceTCPCheck_lp_index;

    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    unitgroup auto4D7BF401_g;
    int auto4D7BF401_u;
    unit auto4D7BF401_var;
    unitgroup autoD34B4849_g;
    int autoD34B4849_u;
    unit autoD34B4849_var;

    // Variable Initialization

    // Implementation
    while ((gv_gameOver == false)) {
        Wait(1.0, c_timeGame);
        lv_int += 1;
        if ((libNtve_gf_UnitGroupIsDead(gv_policeTCPGroups[lp_index]) == true)) {
            PingDestroy(gv_sensorpings[lp_index]);
            gf_FailMission(2, StringExternal("Param/Value/A9A60C50"), 0);
            gv_sensorcount -= 1;
            ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/DAD472F7") + IntToText(gv_sensorcount) + StringExternal("Param/Value/0C80D103")));
            break;
        }
        if ((lv_int == 30)) {
            gf_SucceedMission(9, StringExternal("Param/Value/4598FE8D"), 0, false);
            gv_sensorcount -= 1;
            ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/61B5D560") + IntToText(gv_sensorcount) + StringExternal("Param/Value/160FEF06")));
            if ((RandomInt(0, 1) == 1)) {
                autoD34B4849_g = gv_policeTCPGroups[lp_index];
                autoD34B4849_u = UnitGroupCount(autoD34B4849_g, c_unitCountAll);
                for (;; autoD34B4849_u -= 1) {
                    autoD34B4849_var = UnitGroupUnitFromEnd(autoD34B4849_g, autoD34B4849_u);
                    if (autoD34B4849_var == null) { break; }
                    if ((UnitIsAlive(autoD34B4849_var) == true)) {
                        if ((RandomInt(0, 1) == 1)) {
                            gf_MoveToGuardPos(autoD34B4849_var, RegionFromId(25));
                        }
                        else {
                            gf_MoveToGuardPos(autoD34B4849_var, RegionFromId(24));
                        }
                    }
                }
            }
            else {
                auto4D7BF401_g = gv_policeTCPGroups[lp_index];
                auto4D7BF401_u = UnitGroupCount(auto4D7BF401_g, c_unitCountAll);
                for (;; auto4D7BF401_u -= 1) {
                    auto4D7BF401_var = UnitGroupUnitFromEnd(auto4D7BF401_g, auto4D7BF401_u);
                    if (auto4D7BF401_var == null) { break; }
                    if ((UnitIsAlive(auto4D7BF401_var) == true)) {
                        gf_MoveToGuardPos(auto4D7BF401_var, RegionFromId(163));
                    }
                }
            }
            break;
        }
    }
    if ((TimerGetRemaining(gv_missiontimer) >= 1.0) && (gv_sensorcount == 0)) {
        TriggerExecute(gt_PPoliceTCPEnd, true, false);
    }
    return true;
}

trigger auto_gf_DasdanCasualties_Trigger = null;

void gf_DasdanCasualties () {
    if (auto_gf_DasdanCasualties_Trigger == null) {
        auto_gf_DasdanCasualties_Trigger = TriggerCreate("auto_gf_DasdanCasualties_TriggerFunc");
    }

    TriggerExecute(auto_gf_DasdanCasualties_Trigger, false, false);
}

bool auto_gf_DasdanCasualties_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    int lv_casnumber;

    // Automatic Variable Declarations
    int autoD0C5402A_ae;
    const int autoD0C5402A_ai = 1;

    // Variable Initialization
    lv_casnumber = 7;

    // Implementation
    gf_SkipActionsIfGameOver();
    Wait(RandomFixed(90.0, 150.0), c_timeGame);
    gf_MissionText(StringExternal("Param/Value/DB161785"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/F36D736D"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/609ED8B1"));
    Wait(19.0, c_timeGame);
    TimerStart(gv_bossTimer, 300.0, false, c_timeGame);
    TimerPause(gv_bossTimer, true);
    Wait(3.0, c_timeGame);
    ObjectiveSetState(gv_optionalObj, c_objectiveStateActive);
    TextExpressionSetToken("Param/Expression/2E9101D7", "A", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_bossTimer))), Color(0.00, 100.00, 50.20)));
    ObjectiveSetName(gv_optionalObj, TextExpressionAssemble("Param/Expression/2E9101D7"));
    ObjectiveSetDescription(gv_optionalObj, StringExternal("Param/Value/F86AA38A"));
    Wait(3.0, c_timeGame);
    TimerPause(gv_bossTimer, false);
    TriggerEnable(gt_ObjectiveLoop, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(18)), ColorWithAlpha(100.00, 50.20, 0.00, 49.41), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FF4A6386"));
    gv_pingsecondary = PingLastCreated();
    TriggerEnable(gt_PickUpCasualty, true);
    TriggerEnable(gt_EnterMEDEVACSite, true);
    TriggerEnable(gt_MedevacTimeEnd, true);
    autoD0C5402A_ae = lv_casnumber;
    lv_loopint = 1;
    for ( ; ( (autoD0C5402A_ai >= 0 && lv_loopint <= autoD0C5402A_ae) || (autoD0C5402A_ai < 0 && lv_loopint >= autoD0C5402A_ae) ) ; lv_loopint += autoD0C5402A_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Casualty", 0, 0, RegionRandomPoint(RegionFromId(18)));
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitGroupAdd(gv_casualties, UnitLastCreated());
        gf_MissionItemPingAddItem(UnitLastCreated());
    }
    if ((RandomInt(1, 2) == 1)) {
        gv_medevacregion = RegionFromId(6);
    }
    else {
        gv_medevacregion = RegionFromId(16);
    }
    UnitCreate(1, "ColonistShipFlying", 0, 13, PointWithOffset(RegionGetCenter(gv_medevacregion), -15.0, 0.0), 0.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitWeaponRemove(UnitLastCreated(), "50CalTurret");
    gv_mEDEVAC = UnitLastCreated();
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(gv_medevacregion)), c_orderQueueReplace);
    gf_MissionText(StringExternal("Param/Value/3BA542A9"));
    gf_SpawnUndead(3, "Bruchus", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(3, "Bruchus", 1);
    return true;
}

point gf_FindPlayerPoint () {
    // Variable Declarations
    point[13] lv_heroPoints;
    point lv_caster;
    int lv_i;
    fixed lv_heroDistance;
    fixed lv_shortestDistance;
    point lv_point;
    bool lv_firstPoint;

    // Automatic Variable Declarations
    int auto2BEDEA93_ae;
    const int auto2BEDEA93_ai = 1;

    // Variable Initialization

    // Implementation
    lv_caster = UnitGetPosition(gv_smithy);
    auto2BEDEA93_ae = PlayerGroupCount(gv_players);
    lv_i = 1;
    for ( ; ( (auto2BEDEA93_ai >= 0 && lv_i <= auto2BEDEA93_ae) || (auto2BEDEA93_ai < 0 && lv_i >= auto2BEDEA93_ae) ) ; lv_i += auto2BEDEA93_ai ) {
        if ((UnitIsAlive(gv_playerHeroes[lv_i]) == true)) {
            lv_heroPoints[lv_i] = UnitGetPosition(gv_playerHeroes[lv_i]);
            lv_heroDistance = DistanceBetweenPoints(lv_caster, lv_heroPoints[lv_i]);
            if ((lv_firstPoint == false)) {
                lv_shortestDistance = lv_heroDistance;
                lv_point = lv_heroPoints[lv_i];
                lv_firstPoint = true;
            }
            else {
                if ((lv_heroDistance < lv_shortestDistance)) {
                    lv_shortestDistance = lv_heroDistance;
                    lv_point = lv_heroPoints[lv_i];
                }
            }
        }
    }
    return lv_point;
}

void gf_PSampleHandover (unit lp_sample) {
    // Automatic Variable Declarations
    // Implementation
    gf_MissionItemPingRemoveItem(lp_sample);
    UnitGroupRemove(gv_biosamples, lp_sample);
    UnitRemove(lp_sample);
    gv_biosamplehanded += 1;
    gf_SucceedMission(10, StringExternal("Param/Value/BDCB5E57"), 0, false);
    if ((gv_biosamplehanded == 8)) {
        TriggerExecute(gt_PSampleTimeEnd, true, false);
    }
}

trigger auto_gf_SandBoxVoteScreen_Trigger = null;

void gf_SandBoxVoteScreen () {
    if (auto_gf_SandBoxVoteScreen_Trigger == null) {
        auto_gf_SandBoxVoteScreen_Trigger = TriggerCreate("auto_gf_SandBoxVoteScreen_TriggerFunc");
    }

    TriggerExecute(auto_gf_SandBoxVoteScreen_Trigger, false, false);
}

bool auto_gf_SandBoxVoteScreen_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE724088C_g;
    int autoE724088C_var;

    // Implementation
    gf_CreateSandBoxDialog();
    autoE724088C_g = gv_players;
    autoE724088C_var = -1;
    while (true) {
        autoE724088C_var = PlayerGroupNextPlayer(autoE724088C_g, autoE724088C_var);
        if (autoE724088C_var < 0) { break; }
        gf_ShowSandBoxDialog(autoE724088C_var);
    }
    TimerStart(gv_modetimer, 15.0, false, c_timeGame);
    TriggerEnable(gt_SandBoxVote, true);
    TriggerEnable(gt_SandBoxVoteTimer, true);
    return true;
}

trigger auto_gf_SandBoxInitialize_Trigger = null;

void gf_SandBoxInitialize () {
    if (auto_gf_SandBoxInitialize_Trigger == null) {
        auto_gf_SandBoxInitialize_Trigger = TriggerCreate("auto_gf_SandBoxInitialize_TriggerFunc");
    }

    TriggerExecute(auto_gf_SandBoxInitialize_Trigger, false, false);
}

bool auto_gf_SandBoxInitialize_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_loopint;
    int lv_untitledVariable001;
    int lv_untitledVariable002;

    // Automatic Variable Declarations
    unitgroup auto2E43073E_g;
    int auto2E43073E_u;
    unit auto2E43073E_var;
    unitgroup auto9A2EC4C3_g;
    int auto9A2EC4C3_u;
    unit auto9A2EC4C3_var;
    playergroup autoD781CC8E_g;
    int autoD781CC8E_var;
    playergroup auto5E385143_g;
    int auto5E385143_var;
    playergroup autoF329B895_g;
    playergroup auto5405C6C3_g;
    int auto5405C6C3_var;

    // Variable Initialization
    lv_loopint = 1;
    lv_untitledVariable001 = c_invalidDialogId;
    lv_untitledVariable002 = c_invalidDialogControlId;

    // Implementation
    gv_savedisabled = true;
    if ((GameIsTestMap(false) == true)) {
        gv_savedisabled = false;
    }

    TriggerEnable(gt_InitVoteKick, false);
    libNtve_gf_HideScreenButton(false, 1);
    TriggerEnable(gt_Revive, false);
    TriggerEnable(gt_ReviveSandBoxMode, true);
    TriggerEnable(gt_WeaponsItems2, true);
    if ((gv_sandBox.lv_voteCount[1] > gv_sandBox.lv_voteCount[2])) {
        auto2E43073E_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2E43073E_u = UnitGroupCount(auto2E43073E_g, c_unitCountAll);
        for (;; auto2E43073E_u -= 1) {
            auto2E43073E_var = UnitGroupUnitFromEnd(auto2E43073E_g, auto2E43073E_u);
            if (auto2E43073E_var == null) { break; }
            UnitRemove(auto2E43073E_var);
        }
        UnitIssueOrder(UnitFromId(56), Order(AbilityCommand("MetalGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1238), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1239), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1240), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1241), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1928584749), Order(AbilityCommand("MetalGateStraightVerticalLFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(511), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    }
    else if ((gv_sandBox.lv_voteCount[1] <= gv_sandBox.lv_voteCount[2])) {
        auto9A2EC4C3_g = UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9A2EC4C3_u = UnitGroupCount(auto9A2EC4C3_g, c_unitCountAll);
        for (;; auto9A2EC4C3_u -= 1) {
            auto9A2EC4C3_var = UnitGroupUnitFromEnd(auto9A2EC4C3_g, auto9A2EC4C3_u);
            if (auto9A2EC4C3_var == null) { break; }
            UnitCargoCreate(auto9A2EC4C3_var, "InfantryRifleman", 1);
            UnitSetTeamColorIndex(auto9A2EC4C3_var, 0);
            UnitCargoCreate(auto9A2EC4C3_var, "InfantryRifleman", 1);
            UnitSetTeamColorIndex(auto9A2EC4C3_var, 0);
            UnitCargoCreate(auto9A2EC4C3_var, "InfantryRifleman", 1);
            UnitSetTeamColorIndex(auto9A2EC4C3_var, 0);
            UnitCargoCreate(auto9A2EC4C3_var, "InfantryRifleman", 1);
            UnitSetTeamColorIndex(auto9A2EC4C3_var, 0);
        }
    }
    ObjectiveCreate(StringExternal("Param/Value/095E1F3F"), StringToText(""), c_objectiveStateActive, false);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_optionalObj = ObjectiveLastCreated();
    ObjectiveCreate(StringToText(""), StringToText(""), c_objectiveStateActive, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_mainObj = ObjectiveLastCreated();
    ObjectiveCreate(StringToText(""), StringToText(""), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_secondObj = ObjectiveLastCreated();
    ObjectiveCreate(StringToText(""), StringToText(""), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_thirdObj = ObjectiveLastCreated();
    ObjectiveCreate(StringToText(""), StringToText(""), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_fourthObj = ObjectiveLastCreated();
    ObjectiveCreate(StringToText(""), StringToText(""), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_fifthObj = ObjectiveLastCreated();
    TimerWindowCreate(gv_missiontimer, StringExternal("Param/Value/2D0D1E6F"), false, false);
    gv_missiontimerwindow = TimerWindowLastCreated();
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(0.00, 50.20, 100.00), 1);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(92.55, 92.55, 0.00), 2);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 50.20, 0.00), 3);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 0.00, 0.00), 4);
    TimerWindowCreate(gv_missiontimer2, StringExternal("Param/Value/D0E323C8"), false, false);
    gv_missiontimerwindow2 = TimerWindowLastCreated();
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(0.00, 50.20, 100.00), 1);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(92.55, 92.55, 0.00), 2);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 50.20, 0.00), 3);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 0.00, 0.00), 4);
    autoD781CC8E_g = gv_players;
    autoD781CC8E_var = -1;
    while (true) {
        autoD781CC8E_var = PlayerGroupNextPlayer(autoD781CC8E_g, autoD781CC8E_var);
        if (autoD781CC8E_var < 0) { break; }
        CameraPan(autoD781CC8E_var, RegionGetCenter(RegionFromId(6)), 0.0, -1, 10, false);
        CameraLockInput(autoD781CC8E_var, true);
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, true);
    auto5E385143_g = gv_players;
    auto5E385143_var = -1;
    while (true) {
        auto5E385143_var = PlayerGroupNextPlayer(auto5E385143_g, auto5E385143_var);
        if (auto5E385143_var < 0) { break; }
        DialogSetVisible(gv_functionaldialog[auto5E385143_var], PlayerGroupSingle(auto5E385143_var), true);
    }
    gf_DisplayUIButtons(true);
    autoF329B895_g = gv_players;
    lv_loopint = -1;
    while (true) {
        lv_loopint = PlayerGroupNextPlayer(autoF329B895_g, lv_loopint);
        if (lv_loopint < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroSelector", 0, lv_loopint, CameraGetTarget(lv_loopint));
        gv_heroselector[lv_loopint] = UnitLastCreated();
        UnitClearSelection(lv_loopint);
        UnitSelect(UnitLastCreated(), lv_loopint, true);
        UnitGroupAdd(gv_heroselectors, UnitLastCreated());
    }
    TriggerEnable(gt_SandBoxCommands, true);
    gv_allowISR = true;
    auto5405C6C3_g = gv_players;
    auto5405C6C3_var = -1;
    while (true) {
        auto5405C6C3_var = PlayerGroupNextPlayer(auto5405C6C3_g, auto5405C6C3_var);
        if (auto5405C6C3_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto5405C6C3_var, "CASOnStation", 1);
        libNtve_gf_SetAlliance(auto5405C6C3_var, 15, libNtve_ge_AllianceSetting_Enemy);
    }
    libNtve_gf_SetAlliance(0, 15, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(13, 15, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(13, 14, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    gf_CreateSpawnerButton(c_anchorTopLeft, 2, 1, 271);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/2DF6693B"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/0F425DAC"), UserDataGetText("GameModes", UserDataInstance("GameModes", gv_gamemode), "Name", 1), "Assets\\Textures\\btn-tips-missioncase.dds");
    TipAlertPanelClear(PlayerGroupAll());
    DialogCreate(425, 500, c_anchorTopLeft, 20, 20, true);
    gv_sand_Box_Spawner = DialogLastCreated();
    DialogSetImageVisible(gv_sand_Box_Spawner, false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorLeft, 35, -145, StringExternal("Param/Value/803D84BB"), false);
    gv_sand_Box_Spawner_Boxes[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorLeft, 35, -75, StringExternal("Param/Value/689A5F08"), false);
    gv_sand_Box_Spawner_Boxes[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorLeft, 35, -10, StringExternal("Param/Value/A92C8C93"), false);
    gv_sand_Box_Spawner_Boxes[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorLeft, 35, 57, StringExternal("Param/Value/C8276B56"), false);
    gv_sand_Box_Spawner_Boxes[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorLeft, 35, 123, StringExternal("Param/Value/7045F447"), false);
    gv_sand_Box_Spawner_Boxes[5] = DialogControlLastCreated();
    gf_CreateDialogItemAny(c_triggerControlTypePulldown, gv_sand_Box_Spawner, "", 210, 50, c_anchorLeft, 75, -145, null, null, "", "", "", PlayerGroupAll());
    gv_sand_Box_Spawner_Pull_Down_Tabs[1] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/1CB96283"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/00FD989E"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/716C0651"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/913D3D34"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/87F8D828"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/4954342B"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/7495185F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/35AB14B3"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/A943EF0A"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/0D5FCDB5"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/B94E25B9"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/23D2B0A9"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/662DE0D0"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/648DB0AD"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/D6C388D8"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/AB327128"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E3FFF234"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/2E64F316"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/AFC97DFE"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/90D7F257"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/FB95723B"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/0AD57A5E"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/12000568"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/2461D733"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/D926E429"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E7E4EFF9"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/12FF622F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/5C77F425"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/C0FEBF81"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6F0F2933"));
    DialogControlSelectItem(gv_sand_Box_Spawner_Pull_Down_Tabs[1], PlayerGroupAll(), 1);
    gf_CreateDialogItemAny(c_triggerControlTypePulldown, gv_sand_Box_Spawner, "", 210, 50, c_anchorLeft, 75, -75, null, null, "", "", "", PlayerGroupAll());
    gv_sand_Box_Spawner_Pull_Down_Tabs[2] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F24E82B6"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/4D9124BB"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/076BB20D"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/963BDD75"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/596B00CF"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/47B14780"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E97BA2EA"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/D55A3ED4"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6806B2D3"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/BFDCDA6D"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/419B3D6F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/C335C279"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/32B9CF6D"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/73ABAC62"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/44FAA311"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/4A782749"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/544D2A23"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/305E394F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/FEA0A2CB"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/265EF8BF"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/62269A30"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/215B0442"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F31C0040"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/830C07C0"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/7BB7B3C2"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/9A2289B9"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/04270830"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/019E7D61"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6209A443"));
    DialogControlSelectItem(gv_sand_Box_Spawner_Pull_Down_Tabs[2], PlayerGroupAll(), 1);
    gf_CreateDialogItemAny(c_triggerControlTypePulldown, gv_sand_Box_Spawner, "", 210, 50, c_anchorLeft, 75, -10, null, null, "", "", "", PlayerGroupAll());
    gv_sand_Box_Spawner_Pull_Down_Tabs[3] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/9C874B4F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/EBDDA806"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/992C4C49"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/937CB3B6"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/99C15CA1"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E673E66D"));
    DialogControlSelectItem(gv_sand_Box_Spawner_Pull_Down_Tabs[3], PlayerGroupAll(), 1);
    gf_CreateDialogItemAny(c_triggerControlTypePulldown, gv_sand_Box_Spawner, "", 210, 50, c_anchorLeft, 75, 55, null, null, "", "", "", PlayerGroupAll());
    gv_sand_Box_Spawner_Pull_Down_Tabs[4] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/55D03EBF"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E4EA6D64"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/EC85FA4F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/99820B00"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/39A61610"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/DEB61434"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/124A73CF"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/65963ED3"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6324248F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F24FFD64"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/45A6E867"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E344B04F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/4780FF8E"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/FA79E667"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/7D499A6F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/BC2E3186"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/BE5B0175"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/9DFB2901"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/8B176DEC"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/C7A5FC79"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/3C561185"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/5E560284"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/405888A7"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/742800F8"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/92BDC490"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/C8DEA38D"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F897BA94"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/3A41D407"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/07D72479"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/2802E265"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/8ACE9995"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/42B88604"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/C5DC26FD"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E8933C93"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/53F5B4F0"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/0E2238F1"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/9B8DF9BE"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/DCEFFBDC"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/4476FC09"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/0A1F3836"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/C15A30EB"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/3C8C9D64"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/7282DC7D"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/A319814F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/D74FB83D"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/072FA573"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/C000CAE8"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/EA28FB61"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/4602A84F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6AB2FBCC"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F7333CB4"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/3F465657"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/12F9B696"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/DFE8E515"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/CA51D299"));
    DialogControlSelectItem(gv_sand_Box_Spawner_Pull_Down_Tabs[4], PlayerGroupAll(), 1);
    gf_CreateDialogItemAny(c_triggerControlTypePulldown, gv_sand_Box_Spawner, "", 210, 50, c_anchorLeft, 75, 120, null, null, "", "", "", PlayerGroupAll());
    gv_sand_Box_Spawner_Pull_Down_Tabs[5] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/5934A017"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/D4DA18C1"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/7DF19832"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F1AAE453"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E118643C"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E7841F3E"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/60E2DC24"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/630C66E3"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/112FA85D"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/80517172"));
    DialogControlSelectItem(gv_sand_Box_Spawner_Pull_Down_Tabs[5], PlayerGroupAll(), 1);
    gf_CreateDialogItemAny(c_triggerControlTypePulldown, gv_sand_Box_Spawner, "", 95, 50, c_anchorLeft, 280, 55, null, null, "", "", "", PlayerGroupAll());
    gv_sand_Box_Spawner_Pull_Down_Tabs[6] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/496F5350"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/935EA13D"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/CDE5B3C1"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/74F9E246"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/7399B0B1"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/23ABBC9C"));
    DialogControlSelectItem(gv_sand_Box_Spawner_Pull_Down_Tabs[6], PlayerGroupAll(), 1);
    libNtve_gf_CreateDialogItemLabel(gv_sand_Box_Spawner, 225, 25, c_anchorLeft, 85, -175, StringExternal("Param/Value/03312E9E"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_sand_Box_Spawner, 225, 25, c_anchorLeft, 85, -105, StringExternal("Param/Value/1AB5B7A3"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_sand_Box_Spawner, 225, 25, c_anchorLeft, 85, -39, StringExternal("Param/Value/70034B75"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_sand_Box_Spawner, 225, 25, c_anchorLeft, 85, 27, StringExternal("Param/Value/4ABD407F"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_sand_Box_Spawner, 225, 25, c_anchorLeft, 290, 27, StringExternal("Param/Value/9B84B5B3"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_sand_Box_Spawner, 225, 25, c_anchorLeft, 85, 93, StringExternal("Param/Value/6B13C9AF"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemButton(gv_sand_Box_Spawner, 155, 70, c_anchorLeft, 135, 180, StringToText(""), StringExternal("Param/Value/E62D75F4"), "");
    gv_sand_Box_Spawner_Buttons[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_sand_Box_Spawner_Buttons[1], "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(gv_sand_Box_Spawner_Buttons[1], "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_sand_Box_Spawner_Buttons[1], c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_sand_Box_Spawner, 155, 70, c_anchorLeft, 135, 180, StringToText(""), StringExternal("Param/Value/EAB68B12"), "");
    gv_sand_Box_Spawner_Buttons[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_sand_Box_Spawner_Buttons[2], "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(gv_sand_Box_Spawner_Buttons[2], "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_sand_Box_Spawner_Buttons[2], c_triggerImageTypeEndCap, PlayerGroupAll());
    DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[2], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_sand_Box_Spawner, 155, 70, c_anchorLeft, 135, 180, StringToText(""), StringExternal("Param/Value/C97A1496"), "");
    gv_sand_Box_Spawner_Buttons[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_sand_Box_Spawner_Buttons[3], "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(gv_sand_Box_Spawner_Buttons[3], "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_sand_Box_Spawner_Buttons[3], c_triggerImageTypeEndCap, PlayerGroupAll());
    DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[3], PlayerGroupAll(), false);
    DialogSetVisible(gv_sand_Box_Spawner, PlayerGroupAll(), false);
    TriggerEnable(gt_ShowHideSpawnMenu, true);
    TriggerEnable(gt_SandBoxListBox, true);
    TriggerEnable(gt_SandBoxSpawnUnitItem, true);
    return true;
}

void gf_ShowSandBoxDialog (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(gv_sandBox.lv_sandBoxVoteDialog, PlayerGroupSingle(lp_player), true);
}

void gf_CreateSandBoxDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_sandBox.lv_sandBoxVoteDialog == c_invalidDialogId)) {
        DialogCreate(750, 225, c_anchorCenter, 0, 0, true);
        gv_sandBox.lv_sandBoxVoteDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogSetTitle(gv_sandBox.lv_sandBoxVoteDialog, StringExternal("Param/Value/AE48D3A7"));
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 350, PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(gv_sandBox.lv_sandBoxVoteDialog, 200, 50, c_anchorTop, -225, 100, StringExternal("Param/Value/2888C95A"), StringToText("Pure Sandbox"), "");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
        gv_sandBox.lv_sandBoxButton[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_sandBox.lv_sandBoxVoteDialog, 200, 50, c_anchorTop, 225, 100, StringExternal("Param/Value/7E11AB0E"), StringToText("Simulation"), "");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
        gv_sandBox.lv_sandBoxButton[2] = DialogControlLastCreated();
        DialogSetVisible(gv_sandBox.lv_sandBoxVoteDialog, PlayerGroupAll(), false);
    }
}

void gf_SpawnPlayerHeroSandBox (point lp_point, int lp_player, string lp_message) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int autoCC6C6ECC_ae = gv_itemCount;
    const int autoCC6C6ECC_ai = 1;
    const int auto665FD1D4_ae = gv_sIcount;
    const int auto665FD1D4_ai = 1;
    string autoE1588F8E_val;

    // Variable Initialization

    // Implementation
    if ((gv_playersHeroisDead[lp_player] == true)) {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/F363E5F6"));
        return ;
    }

    lv_int = 1;
    for ( ; ( (autoCC6C6ECC_ai >= 0 && lv_int <= autoCC6C6ECC_ae) || (autoCC6C6ECC_ai < 0 && lv_int >= autoCC6C6ECC_ae) ) ; lv_int += autoCC6C6ECC_ai ) {
        gv_itemInventoryCount[lv_int][lp_player] = 0;
        gv_itemInInventory[lv_int][lp_player] = false;
    }
    lv_int = 1;
    for ( ; ( (auto665FD1D4_ai >= 0 && lv_int <= auto665FD1D4_ae) || (auto665FD1D4_ai < 0 && lv_int >= auto665FD1D4_ae) ) ; lv_int += auto665FD1D4_ai ) {
        gv_playerSISelected[lv_int][lp_player] = false;
    }
    libNtve_gf_SetDialogItemText(gv_sIDialogLabels[1], StringExternal("Param/Value/9C851AA8"), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_sIDialogLabels[2], StringExternal("Param/Value/15ECE66B"), PlayerGroupSingle(lp_player));
    gv_playerSIsused[1][lp_player] = 0;
    gv_playerSIsused[2][lp_player] = 0;
    gf_UpdateSIDialogforPlayer(lp_player);
    UnitGroupRemove(gv_heroesGroup, gv_playerHeroes[lp_player]);
    UnitRemove(gv_playerHeroes[lp_player]);
    UnitCreate(1, UnitTypeFromString(lp_message), c_unitCreateIgnorePlacement, lp_player, lp_point, libNtve_gf_RandomAngle());
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), gv_rankActorMsg[gv_playerRankSet[lp_player]][gf_GetPlayerRank(lp_player)]);
    gv_playerHeroes[lp_player] = UnitLastCreated();
    UnitGroupAdd(gv_heroesGroup, UnitLastCreated());
    UnitSelect(UnitLastCreated(), lp_player, true);
    UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
    UnitControlGroupAddUnit(lp_player, 1, UnitLastCreated());
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "PlayUnitSound");
    UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeTerrazine, false);
    UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeVespene, true);
    UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeMinerals, true);
    gv_playerEncumbrance[lp_player] = 15;
    gv_playerMagMax[lp_player] = 25;
    DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lp_player), true);
    libNtve_gf_SetDialogItemImage(gv_ammoDialogueItems[3], "Assets\\Custom Icons\\icon-mags.dds", PlayerGroupSingle(lp_player));
    DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(gv_ammoDialogueItems[7], PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(gv_ammoDialogueItems[8], PlayerGroupSingle(lp_player), false);
    CameraPan(lp_player, lp_point, 0.8, -1, 30.0, false);
    PlayerModifyPropertyInt(lp_player, c_playerPropCustom, c_playerPropOperSetTo, 99999);
    autoE1588F8E_val = UnitGetType(UnitLastCreated());
    if (autoE1588F8E_val == "RiflemanOld") {
        gv_magsize[lp_player] = 60;
        gv_reloadbasetime[lp_player] = 3.9;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/97265104") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/5B9FB6BA") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Buttons\\BTNSoldier.dds";
    }
    else if (autoE1588F8E_val == "CombatMedic") {
        gv_magsize[lp_player] = 60;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/32416625") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/74ACD8BB") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Assets\\Textures\\medicportrait_static.dds";
    }
    else if (autoE1588F8E_val == "AutomaticRifleman") {
        gv_magsize[lp_player] = 100;
        gv_reloadbasetime[lp_player] = 4.9;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 10);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/3E5E616A") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/36072BD3") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Buttons\\BTNAutoRifle.dds";
    }
    else if (autoE1588F8E_val == "Flamethrower") {
        PlayerModifyPropertyInt(lp_player, c_playerPropTerrazine, c_playerPropOperSetTo, 1000);
        UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeTerrazine, true);
        UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeVespene, false);
        UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeMinerals, false);
        DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_ammoDialogueItems[7], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(gv_ammoDialogueItems[8], PlayerGroupSingle(lp_player), true);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[8], (StringExternal("Param/Value/5978C975") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropTerrazine))), PlayerGroupSingle(lp_player));
        gv_playerEncumbrance[lp_player] = 2000;
        gv_playerHeroImage[lp_player] = "firebat.dds";
    }
    else if (autoE1588F8E_val == "Enforcer") {
        gv_magsize[lp_player] = 25;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/E33BA07F") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/66D4E37B") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Buttons\\Portraits\\BTNSFAAT.dds";
    }
    else if (autoE1588F8E_val == "CavalryScout") {
        gv_magsize[lp_player] = 60;
        gv_reloadbasetime[lp_player] = 4.0;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/6E03EE3C") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/5965F1AF") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Buttons\\Portraits\\BTNCavalryScout.dds";
    }
    else if (autoE1588F8E_val == "SquadDesignatedMarksman") {
        gv_magsize[lp_player] = 35;
        gv_reloadbasetime[lp_player] = 5.0;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/BA8F2409") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/0BABC3F7") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Buttons\\Portraits\\BTNMarksman.dds";
    }
    else if (autoE1588F8E_val == "JavelinGunner") {
        gv_magsize[lp_player] = 60;
        gv_reloadbasetime[lp_player] = 4.0;
        gv_playerHeroImage[lp_player] = "Assets\\Textures\\hillportrait_static.dds";
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/195CA0E6") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/7492F411") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
    }
    else if (autoE1588F8E_val == "PlatoonLeader") {
        gv_magsize[lp_player] = 60;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        PlayerGroupAdd(gv_sFAATs, lp_player);
        gv_playerHeroImage[lp_player] = "Assets\\Textures\\ui-heroicon-tosh.dds";
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/4DE242DE") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/E23621DC") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        TriggerExecute(gt_InitLNS, true, false);
    }
    else if (autoE1588F8E_val == "CombatEngineer") {
        gv_magsize[lp_player] = 25;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/BD62C589") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/475FC181") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Assets\\Textures\\kachinskyportrait_static.dds";
    }
    else if (autoE1588F8E_val == "Cyborg") {
        gv_magsize[lp_player] = 150;
        gv_reloadbasetime[lp_player] = 4.9;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 10);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/4CF68CCE") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/56F79357") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Assets\\Textures\\marinemercenaryportrait_static.dds";
    }
    else if (autoE1588F8E_val == "GhostHero") {
        gv_magsize[lp_player] = 80;
        gv_reloadbasetime[lp_player] = 3.9;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/960650E1") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/29A37592") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Assets\\Textures\\ghostportrait_static.dds";
    }
    else if (autoE1588F8E_val == "FireSupportSpecialist") {
        gv_magsize[lp_player] = 60;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/4872363E") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/5BCCC162") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Assets\\Textures\\herculesportrait_static.dds";
    }
    else if (autoE1588F8E_val == "CommandoHero") {
        gv_magsize[lp_player] = 75;
        gv_reloadbasetime[lp_player] = 3.9;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/583AB970") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/D1132B50") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Assets\\Custom Icons\\CommandoSelect.dds";
    }
    else if (autoE1588F8E_val == "LaserEnforcer") {
        gv_magsize[lp_player] = 40;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/C312C86A") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/6BBF956E") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Buttons\\BTNMedic.dds";
    }
    else if (autoE1588F8E_val == "Specter") {
        gv_magsize[lp_player] = 20;
        gv_reloadbasetime[lp_player] = 5.0;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/C08AD674") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/B9E14470") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Assets\\Textures\\spectreportrait_static.dds";
    }
    else if (autoE1588F8E_val == "OrbitalSupportSpecialist") {
        gv_magsize[lp_player] = 80;
        gv_reloadbasetime[lp_player] = 3.9;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 9);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/7612EC3D") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/CD8B7C88") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Assets\\Textures\\hornerportrait_static.dds";
    }
    else if (autoE1588F8E_val == "HeavyGunner") {
        gv_magsize[lp_player] = 100;
        gv_reloadbasetime[lp_player] = 6.5;
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 10);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/77FEE9CB") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/A8C66B00") + IntToText(PlayerGetPropertyInt(lp_player, c_playerPropVespene))), PlayerGroupSingle(lp_player));
        gv_playerHeroImage[lp_player] = "Assets\\Textures\\vikingmercenaryfighterportrait_static.dds";
    }
    else {
    }
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lp_player]);
}

void gf_SpawnSandboxLN (int lp_player, int lp_amount, string lp_lNType) {
    // Variable Declarations
    string lv_lNToUpper;

    // Automatic Variable Declarations
    string auto6CE6EA0D_val;

    // Variable Initialization
    lv_lNToUpper = StringCase(lp_lNType, true);

    // Implementation
    auto6CE6EA0D_val = lv_lNToUpper;
    if (auto6CE6EA0D_val == "RIFLE") {
        if ((gv_customCommandCard[lp_player] == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LNRifleman", 0, lp_player, CameraGetTarget(lp_player));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LNRifleman2", 0, lp_player, CameraGetTarget(lp_player));
        }
    }
    else if (auto6CE6EA0D_val == "SDM") {
        if ((gv_customCommandCard[lp_player] == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LNSquadDesignatedMarksman", 0, lp_player, CameraGetTarget(lp_player));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LNSquadDesignatedMarksman2", 0, lp_player, CameraGetTarget(lp_player));
        }
    }
    else if (auto6CE6EA0D_val == "MEDIC") {
        if ((gv_customCommandCard[lp_player] == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LN68WCombatMedic", 0, lp_player, CameraGetTarget(lp_player));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LN68WCombatMedic2", 0, lp_player, CameraGetTarget(lp_player));
        }
    }
    else if (auto6CE6EA0D_val == "AR") {
        if ((gv_customCommandCard[lp_player] == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LNAutomaticRifleman", 0, lp_player, CameraGetTarget(lp_player));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LNAutomaticRifleman2", 0, lp_player, CameraGetTarget(lp_player));
        }
    }
    else if (auto6CE6EA0D_val == "FLAME") {
        if ((gv_customCommandCard[lp_player] == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LN74DFlamethrower", 0, lp_player, CameraGetTarget(lp_player));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LN74DFlamethrower2", 0, lp_player, CameraGetTarget(lp_player));
        }
    }
    else if (auto6CE6EA0D_val == "CE") {
        if ((gv_customCommandCard[lp_player] == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LNCombatEngineer", 0, lp_player, CameraGetTarget(lp_player));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LNCombatEngineer2", 0, lp_player, CameraGetTarget(lp_player));
        }
    }
    else if (auto6CE6EA0D_val == "JAV") {
        if ((gv_customCommandCard[lp_player] == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LNJavelinGunner", 0, lp_player, CameraGetTarget(lp_player));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_amount, "LNJavelinGunner2", 0, lp_player, CameraGetTarget(lp_player));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/9A499B39"));
    }
}

void gf_CreateSpawnerButton (int lp_anchor, int lp_offsetX, int lp_offsetY, int lp_sidebarWidth) {
    // Variable Declarations
    int lv_height;
    int lv_width;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_height = 500;
    lv_width = 400;

    // Implementation
    libNtve_gf_DisplayScreenButton(15, StringExternal("Param/Value/954B2624"), 150, 40, lp_anchor, (lp_offsetX * lp_sidebarWidth), lp_offsetY, null);
    gv_sand_Box_View_Button = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(15, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/C1D8B463"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    DialogControlSetVisible(gv_sand_Box_View_Button, PlayerGroupAll(), false);
}

string gf_GetArmorWeaponTypeFromList (int lp_listItem) {
    // Variable Declarations
    string lv_item;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_listItem == 1)) {
        lv_item = "BioSuit";
    }
    else if ((lp_listItem == 2)) {
        lv_item = "KevlarBodyArmor";
    }
    else if ((lp_listItem == 3)) {
        lv_item = "OPA";
    }
    else if ((lp_listItem == 4)) {
        lv_item = "ShieldGenerator";
    }
    else if ((lp_listItem == 5)) {
        lv_item = "SPCS";
    }
    else if ((lp_listItem == 6)) {
        lv_item = "MGL";
    }
    else if ((lp_listItem == 7)) {
        lv_item = "MRL";
    }
    else if ((lp_listItem == 8)) {
        lv_item = "M5MAR";
    }
    else if ((lp_listItem == 9)) {
        lv_item = "USMCR";
    }
    else if ((lp_listItem == 10)) {
        lv_item = "HK42";
    }
    else if ((lp_listItem == 11)) {
        lv_item = "StynerSPR";
    }
    else if ((lp_listItem == 12)) {
        lv_item = "StynerBR3";
    }
    else if ((lp_listItem == 13)) {
        lv_item = "SOFAR";
    }
    else if ((lp_listItem == 14)) {
        lv_item = "ATLASX50";
    }
    else if ((lp_listItem == 15)) {
        lv_item = "M241MMG";
    }
    else if ((lp_listItem == 16)) {
        lv_item = "M41SAW";
    }
    else if ((lp_listItem == 17)) {
        lv_item = "M135Minigun";
    }
    else if ((lp_listItem == 18)) {
        lv_item = "IDMR2";
    }
    else if ((lp_listItem == 19)) {
        lv_item = "M92Torrent";
    }
    else if ((lp_listItem == 20)) {
        lv_item = "XR900";
    }
    else if ((lp_listItem == 21)) {
        lv_item = "AS50Bipod";
    }
    else if ((lp_listItem == 22)) {
        lv_item = "M79Flamethrower";
    }
    else if ((lp_listItem == 23)) {
        lv_item = "Inferno";
    }
    else if ((lp_listItem == 24)) {
        lv_item = "ISS7";
    }
    else if ((lp_listItem == 25)) {
        lv_item = "AA12";
    }
    else if ((lp_listItem == 26)) {
        lv_item = "M1014";
    }
    else if ((lp_listItem == 27)) {
        lv_item = "IPR";
    }
    else if ((lp_listItem == 28)) {
        lv_item = "PR34E";
    }
    else if ((lp_listItem == 29)) {
        lv_item = "PR42C";
    }
    else if ((lp_listItem == 30)) {
        lv_item = "D20LaserRifle";
    }
    return lv_item;
}

string gf_GetItemTypeFromList (int lp_listItem) {
    // Variable Declarations
    string lv_item;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_listItem == 1)) {
        lv_item = "AimAssistant";
    }
    else if ((lp_listItem == 2)) {
        lv_item = "AmmoCase";
    }
    else if ((lp_listItem == 3)) {
        lv_item = "APRounds";
    }
    else if ((lp_listItem == 4)) {
        lv_item = "Binoculars";
    }
    else if ((lp_listItem == 5)) {
        lv_item = "C4Charge";
    }
    else if ((lp_listItem == 6)) {
        lv_item = "Claymore";
    }
    else if ((lp_listItem == 7)) {
        lv_item = "DURounds";
    }
    else if ((lp_listItem == 8)) {
        lv_item = "EnergyCell";
    }
    else if ((lp_listItem == 9)) {
        lv_item = "ExplosiveCharge";
    }
    else if ((lp_listItem == 10)) {
        lv_item = "FirstAidKit";
    }
    else if ((lp_listItem == 11)) {
        lv_item = "FlareGun";
    }
    else if ((lp_listItem == 12)) {
        lv_item = "Flashlight";
    }
    else if ((lp_listItem == 13)) {
        lv_item = "FragGrenade";
    }
    else if ((lp_listItem == 14)) {
        lv_item = "40mmGrenade";
    }
    else if ((lp_listItem == 15)) {
        lv_item = "GasCompressor";
    }
    else if ((lp_listItem == 16)) {
        lv_item = "GroundFlare";
    }
    else if ((lp_listItem == 17)) {
        lv_item = "KineticIntegrator";
    }
    else if ((lp_listItem == 18)) {
        lv_item = "LiftBoots";
    }
    else if ((lp_listItem == 19)) {
        lv_item = "LLDR";
    }
    else if ((lp_listItem == 20)) {
        lv_item = "Magazines";
    }
    else if ((lp_listItem == 21)) {
        lv_item = "MK44SentryGunPacked";
    }
    else if ((lp_listItem == 22)) {
        lv_item = "MK79SentryGunPacked";
    }
    else if ((lp_listItem == 23)) {
        lv_item = "MRLRocket";
    }
    else if ((lp_listItem == 24)) {
        lv_item = "MuscleRelaxant";
    }
    else if ((lp_listItem == 25)) {
        lv_item = "PlasmaInducer";
    }
    else if ((lp_listItem == 26)) {
        lv_item = "PlasmaMine";
    }
    else if ((lp_listItem == 27)) {
        lv_item = "ProjectileAccelerator";
    }
    else if ((lp_listItem == 28)) {
        lv_item = "SmokeGrenade";
    }
    else if ((lp_listItem == 29)) {
        lv_item = "StrafeDesignator";
    }
    return lv_item;
}

string gf_GetMiniVehicleFromList (int lp_listUnit, int lp_player) {
    // Variable Declarations
    string lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_listUnit == 1)) {
        if ((gv_customCommandCard[lp_player] == false)) {
            lv_unit = "InfantryRifleman";
        }
        else {
            lv_unit = "InfantryRifleman2";
        }
    }
    else if ((lp_listUnit == 2)) {
        if ((gv_customCommandCard[lp_player] == false)) {
            lv_unit = "InfantryAutomaticRifleman";
        }
        else {
            lv_unit = "InfantryAutomaticRifleman2";
        }
    }
    else if ((lp_listUnit == 3)) {
        if ((gv_customCommandCard[lp_player] == false)) {
            lv_unit = "CombatEngineerMini";
        }
        else {
            lv_unit = "CombatEngineerMini2";
        }
    }
    else if ((lp_listUnit == 4)) {
        if ((gv_customCommandCard[lp_player] == false)) {
            lv_unit = "InfantryJavelinGunner";
        }
        else {
            lv_unit = "InfantryJavelinGunner2";
        }
    }
    else if ((lp_listUnit == 5)) {
        if ((gv_customCommandCard[lp_player] == false)) {
            lv_unit = "Infantry74DFlamethrower";
        }
        else {
            lv_unit = "Infantry74DFlamethrower2";
        }
    }
    else if ((lp_listUnit == 6)) {
        if ((gv_customCommandCard[lp_player] == false)) {
            lv_unit = "InfantrySDM";
        }
        else {
            lv_unit = "InfantrySDM2";
        }
    }
    else if ((lp_listUnit == 7)) {
        if ((gv_customCommandCard[lp_player] == false)) {
            lv_unit = "Infantry68WCombatMedic";
        }
        else {
            lv_unit = "Infantry68WCombatMedic2";
        }
    }
    else if ((lp_listUnit == 8)) {
        lv_unit = "M1A3Abrams";
    }
    else if ((lp_listUnit == 9)) {
        lv_unit = "M2BradleyIFV";
    }
    else if ((lp_listUnit == 10)) {
        lv_unit = "AH25Hunter";
    }
    return lv_unit;
}

string gf_GetUndeadUnitFromList (int lp_listUnit) {
    // Variable Declarations
    string lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_listUnit == 1)) {
        lv_unit = "ArachnidMother";
    }
    else if ((lp_listUnit == 2)) {
        lv_unit = "Baneling";
    }
    else if ((lp_listUnit == 3)) {
        lv_unit = "Boomer";
    }
    else if ((lp_listUnit == 4)) {
        lv_unit = "Crab";
    }
    else if ((lp_listUnit == 5)) {
        lv_unit = "Creeper";
    }
    else if ((lp_listUnit == 6)) {
        lv_unit = "Drake";
    }
    else if ((lp_listUnit == 7)) {
        lv_unit = "Hopper";
    }
    else if ((lp_listUnit == 8)) {
        lv_unit = "Leaper";
    }
    else if ((lp_listUnit == 9)) {
        lv_unit = "Licker";
    }
    else if ((lp_listUnit == 10)) {
        lv_unit = "InfestedCivilian";
    }
    else if ((lp_listUnit == 11)) {
        lv_unit = "Parasite";
    }
    else if ((lp_listUnit == 12)) {
        lv_unit = "Pooch";
    }
    else if ((lp_listUnit == 13)) {
        lv_unit = "Risen";
    }
    else if ((lp_listUnit == 14)) {
        lv_unit = "Swollen";
    }
    else if ((lp_listUnit == 15)) {
        lv_unit = "Tarantula";
    }
    else if ((lp_listUnit == 16)) {
        lv_unit = "Turned";
    }
    else if ((lp_listUnit == 17)) {
        lv_unit = "Unburied";
    }
    else if ((lp_listUnit == 18)) {
        lv_unit = "ZombieWraith";
    }
    else if ((lp_listUnit == 19)) {
        lv_unit = "Zombie";
    }
    else if ((lp_listUnit == 20)) {
        lv_unit = "AcidVore";
    }
    else if ((lp_listUnit == 21)) {
        lv_unit = "ArchVile";
    }
    else if ((lp_listUnit == 22)) {
        lv_unit = "Bruchus";
    }
    else if ((lp_listUnit == 23)) {
        lv_unit = "ZombieCarrier";
    }
    else if ((lp_listUnit == 24)) {
        lv_unit = "Charger";
    }
    else if ((lp_listUnit == 25)) {
        lv_unit = "Gargoyle";
    }
    else if ((lp_listUnit == 26)) {
        lv_unit = "Glutton";
    }
    else if ((lp_listUnit == 27)) {
        lv_unit = "Horror";
    }
    else if ((lp_listUnit == 28)) {
        lv_unit = "ZombieImpaler";
    }
    else if ((lp_listUnit == 29)) {
        lv_unit = "Krill";
    }
    else if ((lp_listUnit == 30)) {
        lv_unit = "Morbus";
    }
    else if ((lp_listUnit == 31)) {
        lv_unit = "Shredder";
    }
    else if ((lp_listUnit == 32)) {
        lv_unit = "Spitter";
    }
    else if ((lp_listUnit == 33)) {
        lv_unit = "StalkerZombie";
    }
    else if ((lp_listUnit == 34)) {
        lv_unit = "Swarmer";
    }
    else if ((lp_listUnit == 35)) {
        lv_unit = "Arachnathid";
    }
    else if ((lp_listUnit == 36)) {
        lv_unit = "Ares";
    }
    else if ((lp_listUnit == 37)) {
        lv_unit = "Cacumen";
    }
    else if ((lp_listUnit == 38)) {
        lv_unit = "Cursed";
    }
    else if ((lp_listUnit == 39)) {
        lv_unit = "Darreus";
    }
    else if ((lp_listUnit == 40)) {
        lv_unit = "Dilophosaur";
    }
    else if ((lp_listUnit == 41)) {
        lv_unit = "Gargantuan";
    }
    else if ((lp_listUnit == 42)) {
        lv_unit = "Gourmand";
    }
    else if ((lp_listUnit == 43)) {
        lv_unit = "Grotesque";
    }
    else if ((lp_listUnit == 44)) {
        lv_unit = "Hunter";
    }
    else if ((lp_listUnit == 45)) {
        lv_unit = "Immussilus";
    }
    else if ((lp_listUnit == 46)) {
        lv_unit = "RedstoneLavaCritter";
    }
    else if ((lp_listUnit == 47)) {
        lv_unit = "Kraith";
    }
    else if ((lp_listUnit == 48)) {
        lv_unit = "Lacerti";
    }
    else if ((lp_listUnit == 49)) {
        lv_unit = "Livid";
    }
    else if ((lp_listUnit == 50)) {
        lv_unit = "Metasis";
    }
    else if ((lp_listUnit == 51)) {
        lv_unit = "Minerva";
    }
    else if ((lp_listUnit == 52)) {
        lv_unit = "Raisuli";
    }
    else if ((lp_listUnit == 53)) {
        lv_unit = "Thanatos";
    }
    else if ((lp_listUnit == 54)) {
        lv_unit = "ThresherMaw";
    }
    else if ((lp_listUnit == 55)) {
        lv_unit = "ZombieYeti";
    }
    return lv_unit;
}

int gf_GetSpawnAmountOrLoopFromList (int lp_listAmount) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoFB52A9C6_ae = 6;
    const int autoFB52A9C6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoFB52A9C6_ai >= 0 && lv_index <= autoFB52A9C6_ae) || (autoFB52A9C6_ai < 0 && lv_index >= autoFB52A9C6_ae) ) ; lv_index += autoFB52A9C6_ai ) {
        if ((lv_index == lp_listAmount)) {
            break;
        }
    }
    return lv_index;
}

int gf_GetSpawnLoopFromList (int lp_spawnLoop) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto89272D2F_ae = 6;
    const int auto89272D2F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto89272D2F_ai >= 0 && lv_index <= auto89272D2F_ae) || (auto89272D2F_ai < 0 && lv_index >= auto89272D2F_ae) ) ; lv_index += auto89272D2F_ai ) {
        if ((lv_index == lp_spawnLoop)) {
            break;
        }
    }
    return lv_index;
}

void gf_HoldoutCivEscort () {
    // Variable Declarations
    int lv_i;
    int lv_z;

    // Automatic Variable Declarations
    unitgroup auto45825AFC_g;
    int auto45825AFC_u;
    unit auto45825AFC_var;
    unitgroup autoFB97C9AA_g;
    int autoFB97C9AA_u;
    unit autoFB97C9AA_var;
    unitgroup autoE03B71D3_g;
    int autoE03B71D3_u;
    unit autoE03B71D3_var;

    // Variable Initialization

    // Implementation
    gf_SkipActionsIfGameOver();
    gv_civsExtracted = 0;
    gv_findsurvivorchat1[1] = StringExternal("Param/Value/8FC231C6");
    gv_findsurvivorchat1[2] = StringExternal("Param/Value/99097085");
    gv_findsurvivorchat1[3] = StringExternal("Param/Value/901521E2");
    gv_findsurvivorchat1[4] = StringExternal("Param/Value/4D06A940");
    gv_findsurvivorchat1[5] = StringExternal("Param/Value/F8994F83");
    gv_findsurvivorchat2[1] = StringExternal("Param/Value/B086CFC5");
    gv_findsurvivorchat2[2] = StringExternal("Param/Value/73325BAF");
    gv_findsurvivorchat2[3] = StringExternal("Param/Value/017C1E56");
    gv_findsurvivorchat2[4] = StringExternal("Param/Value/58FD58E4");
    gv_findsurvivorchat2[5] = StringExternal("Param/Value/74469747");
    auto45825AFC_g = UnitGroup("Civilian", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto45825AFC_u = UnitGroupCount(auto45825AFC_g, c_unitCountAll);
    for (;; auto45825AFC_u -= 1) {
        auto45825AFC_var = UnitGroupUnitFromEnd(auto45825AFC_g, auto45825AFC_u);
        if (auto45825AFC_var == null) { break; }
        UnitGroupAdd(gv_escortCivilians, auto45825AFC_var);
    }
    autoFB97C9AA_g = UnitGroup("CivilianFemale", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFB97C9AA_u = UnitGroupCount(autoFB97C9AA_g, c_unitCountAll);
    for (;; autoFB97C9AA_u -= 1) {
        autoFB97C9AA_var = UnitGroupUnitFromEnd(autoFB97C9AA_g, autoFB97C9AA_u);
        if (autoFB97C9AA_var == null) { break; }
        UnitGroupAdd(gv_escortCivilians, autoFB97C9AA_var);
    }

    TriggerEnable(gt_ContactCivilian, true);
    TriggerEnable(gt_HoldoutCivDies, true);
    autoE03B71D3_g = gv_escortCivilians;
    autoE03B71D3_u = UnitGroupCount(autoE03B71D3_g, c_unitCountAll);
    for (;; autoE03B71D3_u -= 1) {
        autoE03B71D3_var = UnitGroupUnitFromEnd(autoE03B71D3_g, autoE03B71D3_u);
        if (autoE03B71D3_var == null) { break; }
        UnitBehaviorAdd(autoE03B71D3_var, "CivilianEscort", autoE03B71D3_var, 1);
    }
}

void gf_A10Strafe () {
    // Variable Declarations
    unit lv_a10;
    point lv_spawnpoint;
    point lv_endpoint;
    int lv_a10ping;

    // Automatic Variable Declarations
    int autoACDCA2A7_val;
    int autoE32B519D_val;
    const int autoC19CB17D_n = 120;
    int autoC19CB17D_i;

    // Variable Initialization
    lv_a10ping = c_invalidPingId;

    // Implementation
    autoACDCA2A7_val = RandomInt(1, 6);
    if (autoACDCA2A7_val == 1) {
        lv_spawnpoint = Point(5.0, 195.0);
    }
    else if (autoACDCA2A7_val == 2) {
        lv_spawnpoint = Point(5.0, 240.0);
    }
    else if (autoACDCA2A7_val == 3) {
        lv_spawnpoint = Point(210.0, 195.0);
    }
    else if (autoACDCA2A7_val == 4) {
        lv_spawnpoint = Point(210.0, 240.0);
    }
    else if (autoACDCA2A7_val == 5) {
        lv_spawnpoint = Point(140.0, 250.0);
    }
    else if (autoACDCA2A7_val == 6) {
        lv_spawnpoint = Point(120.0, 180.0);
    }
    else {
    }
    autoE32B519D_val = RandomInt(1, 6);
    if (autoE32B519D_val == 1) {
        lv_endpoint = Point(5.0, 195.0);
    }
    else if (autoE32B519D_val == 2) {
        lv_endpoint = Point(5.0, 240.0);
    }
    else if (autoE32B519D_val == 3) {
        lv_endpoint = Point(210.0, 195.0);
    }
    else if (autoE32B519D_val == 4) {
        lv_endpoint = Point(210.0, 240.0);
    }
    else if (autoE32B519D_val == 5) {
        lv_endpoint = Point(140.0, 250.0);
    }
    else if (autoE32B519D_val == 6) {
        lv_endpoint = Point(120.0, 180.0);
    }
    else {
    }
    libNtve_gf_UnitCreateFacingPoint(1, "A10", c_unitCreateIgnorePlacement, 13, lv_spawnpoint, lv_endpoint);
    lv_a10 = UnitLastCreated();
    UnitSetTeamColorIndex(lv_a10, 13);
    UnitSetHeight(lv_a10, 20.0, 0.0);
    UnitSetHeight(lv_a10, 7.0, 1.0);
    UnitIssueOrder(lv_a10, OrderTargetingPoint(AbilityCommand("move", 0), lv_endpoint), c_orderQueueAddToEnd);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", lv_spawnpoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, UnitGetFacing(lv_a10));
    lv_a10ping = PingLastCreated();
    PingSetUnit(PingLastCreated(), lv_a10);
    PingSetScale(PingLastCreated(), 0.4);
    PingSetTooltip(PingLastCreated(), UnitGetName(lv_a10));
    Wait(0.5, c_timeGame);
    gf_PlanePathing(lv_a10, lv_endpoint);
    for (autoC19CB17D_i = 1; autoC19CB17D_i <= autoC19CB17D_n; autoC19CB17D_i += 1) {
        if ((DistanceSquaredBetweenPoints(UnitGetPosition(lv_a10), lv_endpoint) < 25.0)) {
            UnitSetHeight(lv_a10, 20.0, 1.0);
            PingDestroy(lv_a10ping);
            Wait(0.3, c_timeGame);
            UnitRemove(lv_a10);
            return ;
        }

        if ((UnitIsAlive(lv_a10) == false)) {
            PingDestroy(lv_a10ping);
            return ;
        }
        Wait(0.5, c_timeGame);
    }
    ActorSend(libNtve_gf_MainActorofUnit(lv_a10), "SetOpacity 0.000000 2.000000 op");
    UnitSetHeight(lv_a10, 20.0, 1.0);
    PingDestroy(lv_a10ping);
    Wait(0.5, c_timeGame);
    UnitRemove(lv_a10);
}

void gf_InitializeCivilians () {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    int auto56DC9AFD_ae;
    const int auto56DC9AFD_ai = 1;
    int auto5EC16513_ae;
    const int auto5EC16513_ai = 1;
    int auto1A0DBFA5_ae;
    const int auto1A0DBFA5_ai = 1;
    int autoE2AFB5EB_ae;
    const int autoE2AFB5EB_ai = 1;
    unitgroup auto02BB1D2B_g;
    int auto02BB1D2B_u;
    unit auto02BB1D2B_var;
    unitgroup auto66ABA3EB_g;
    int auto66ABA3EB_u;
    unit auto66ABA3EB_var;

    // Variable Initialization

    // Implementation
    gv_cityRegions[1] = RegionFromId(24);
    gv_cityRegions[2] = RegionFromId(25);
    gv_cityRegions[3] = RegionFromId(26);
    gv_cityRegions[4] = RegionFromId(163);
    auto56DC9AFD_ae = RandomInt(8, 12);
    lv_int = 1;
    for ( ; ( (auto56DC9AFD_ai >= 0 && lv_int <= auto56DC9AFD_ae) || (auto56DC9AFD_ai < 0 && lv_int >= auto56DC9AFD_ae) ) ; lv_int += auto56DC9AFD_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(gv_cityRegions[1]), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_wanderers[1], UnitLastCreatedGroup());
    }
    auto5EC16513_ae = RandomInt(3, 6);
    lv_int = 1;
    for ( ; ( (auto5EC16513_ai >= 0 && lv_int <= auto5EC16513_ae) || (auto5EC16513_ai < 0 && lv_int >= auto5EC16513_ae) ) ; lv_int += auto5EC16513_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(gv_cityRegions[2]), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_wanderers[2], UnitLastCreatedGroup());
    }
    auto1A0DBFA5_ae = RandomInt(3, 6);
    lv_int = 1;
    for ( ; ( (auto1A0DBFA5_ai >= 0 && lv_int <= auto1A0DBFA5_ae) || (auto1A0DBFA5_ai < 0 && lv_int >= auto1A0DBFA5_ae) ) ; lv_int += auto1A0DBFA5_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionGetCenter(gv_cityRegions[3]), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_wanderers[3], UnitLastCreatedGroup());
    }
    autoE2AFB5EB_ae = RandomInt(3, 6);
    lv_int = 1;
    for ( ; ( (autoE2AFB5EB_ai >= 0 && lv_int <= autoE2AFB5EB_ae) || (autoE2AFB5EB_ai < 0 && lv_int >= autoE2AFB5EB_ae) ) ; lv_int += autoE2AFB5EB_ai ) {
        UnitCreate(1, gf_RandomCivilianType(), 0, 0, RegionGetCenter(gv_cityRegions[4]), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_wanderers[4], UnitLastCreatedGroup());
    }
    auto02BB1D2B_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto02BB1D2B_u = UnitGroupCount(auto02BB1D2B_g, c_unitCountAll);
    for (;; auto02BB1D2B_u -= 1) {
        auto02BB1D2B_var = UnitGroupUnitFromEnd(auto02BB1D2B_g, auto02BB1D2B_u);
        if (auto02BB1D2B_var == null) { break; }
        if (((UnitGetType(auto02BB1D2B_var) == "Civilian") || (UnitGetType(auto02BB1D2B_var) == "CivilianFemale"))) {
            UnitGroupAdd(gv_civilians, auto02BB1D2B_var);
        }
    }
    auto66ABA3EB_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto66ABA3EB_u = UnitGroupCount(auto66ABA3EB_g, c_unitCountAll);
    for (;; auto66ABA3EB_u -= 1) {
        auto66ABA3EB_var = UnitGroupUnitFromEnd(auto66ABA3EB_g, auto66ABA3EB_u);
        if (auto66ABA3EB_var == null) { break; }
        if (((UnitGetType(auto66ABA3EB_var) == "InfantryRifleman") || (UnitGetType(auto66ABA3EB_var) == "PoliceOfficer") || (UnitGetType(auto66ABA3EB_var) == "PoliceOfficerShotgun"))) {
            UnitBehaviorAdd(auto66ABA3EB_var, "AntiGravity", auto66ABA3EB_var, 1);
        }
    }
}

string gf_RandomCivilianType () {
    // Automatic Variable Declarations
    // Implementation
    if ((RandomInt(0, 1) == 1)) {
        return "Civilian";
    }
    else {
        return "CivilianFemale";
    }
    return "CivilianFemale";
}

string gf_RandomPoliceType () {
    // Automatic Variable Declarations
    // Implementation
    if ((RandomInt(0, 1) == 1)) {
        return "PoliceOfficer";
    }
    else {
        return "PoliceOfficerShotgun";
    }
    return "PoliceOfficerShotgun";
}

void gf_PolicePatrolInitialize () {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int autoCF70EA67_ae = 3;
    const int autoCF70EA67_ai = 1;
    const int auto325F9F36_n = 2;
    int auto325F9F36_i;

    // Variable Initialization

    // Implementation
    gv_policePatrols[1].lv_route[0] = PointFromId(2325);
    gv_policePatrols[1].lv_route[1] = PointFromId(1778);
    gv_policePatrols[1].lv_route[2] = PointFromId(1777);
    gv_policePatrols[1].lv_route[3] = PointFromId(1785);
    gv_policePatrols[1].lv_route[4] = PointFromId(1786);
    gv_policePatrols[1].lv_route[5] = PointFromId(1787);
    gv_policePatrols[1].lv_route[6] = PointFromId(1788);
    gv_policePatrols[1].lv_route[7] = PointFromId(1793);
    gv_policePatrols[1].lv_route[8] = PointFromId(2326);
    gv_policePatrols[1].lv_routemax = 8;
    gv_policePatrols[2].lv_route[0] = PointFromId(1788);
    gv_policePatrols[2].lv_route[1] = PointFromId(1789);
    gv_policePatrols[2].lv_route[2] = PointFromId(1790);
    gv_policePatrols[2].lv_route[3] = PointFromId(1791);
    gv_policePatrols[2].lv_route[4] = PointFromId(2332);
    gv_policePatrols[2].lv_route[5] = PointFromId(2331);
    gv_policePatrols[2].lv_route[6] = PointFromId(870);
    gv_policePatrols[2].lv_route[7] = PointFromId(2330);
    gv_policePatrols[2].lv_routemax = 7;
    gv_policePatrols[3].lv_route[0] = PointFromId(1784);
    gv_policePatrols[3].lv_route[1] = PointFromId(1783);
    gv_policePatrols[3].lv_route[2] = PointFromId(1782);
    gv_policePatrols[3].lv_route[3] = PointFromId(1781);
    gv_policePatrols[3].lv_route[4] = PointFromId(2320);
    gv_policePatrols[3].lv_route[5] = PointFromId(2321);
    gv_policePatrols[3].lv_route[6] = PointFromId(2322);
    gv_policePatrols[3].lv_routemax = 6;
    lv_int = 1;
    for ( ; ( (autoCF70EA67_ai >= 0 && lv_int <= autoCF70EA67_ae) || (autoCF70EA67_ai < 0 && lv_int >= autoCF70EA67_ae) ) ; lv_int += autoCF70EA67_ai ) {
        for (auto325F9F36_i = 1; auto325F9F36_i <= auto325F9F36_n; auto325F9F36_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficer", 0, 0, gv_policePatrols[lv_int].lv_route[0]);
            UnitGroupAdd(gv_policePatrols[lv_int].lv_group, UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), "PatrollingSlow", UnitLastCreated(), 1);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimGroupApply Slow");
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById PoliceDecal");
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficerShotgun", 0, 0, gv_policePatrols[lv_int].lv_route[0]);
        UnitGroupAdd(gv_policePatrols[lv_int].lv_group, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "PatrollingSlow", UnitLastCreated(), 1);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimGroupApply Slow");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById PoliceDecal");
    }
    TriggerEnable(gt_PolicePatrolLoop, true);
}

void gf_InitializeGameSetup () {
    int init_i;

    // Variable Declarations
    int lv_loopint;
    int lv_loopint2;
    int lv_i;
    int[4] lv_attribute;
    int lv_behaviorPanel;
    int lv_hook;
    int lv_armor;

    // Automatic Variable Declarations
    const int auto8EDE71C0_ae = 12;
    const int auto8EDE71C0_ai = 1;
    const int autoDB4C1495_ae = 13;
    const int autoDB4C1495_ai = 1;
    playergroup autoB65615FD_g;
    int autoB65615FD_var;
    playergroup autoB286E03A_g;
    int autoB286E03A_var;
    const int autoF6226CAA_ae = 5;
    const int autoF6226CAA_ai = 1;

    // Variable Initialization
    lv_loopint = 1;
    lv_loopint2 = 1;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_attribute[init_i] = c_invalidDialogControlId;
    }
    lv_behaviorPanel = c_invalidDialogControlId;
    lv_hook = c_invalidDialogControlId;
    lv_armor = c_invalidDialogControlId;

    // Implementation
    TriggerDestroy(libSwaC_gt_ZS_OverlordRally);
    TriggerDestroy(libSwaC_gt_ZS_KerriganLifeTooLow);
    TriggerDestroy(libSwaC_gt_ZS_KerriganDies);
    TriggerDestroy(libSwaC_gt_ZS_KerriganDied);
    TriggerDestroy(libSwaC_gt_ZS_FeaturedZergStructureDies);
    TriggerDestroy(libSwaC_gt_ZS_CamStatsGameLoaded);
    TriggerDestroy(libSwaC_gt_ZS_AbortMission);
    TriggerDestroy(libSwaC_gt_ZS_CampaignUnitCreated);
    TriggerDestroy(libSwaC_gt_ZS_CampaignUnitChangeOwner);
    TriggerDestroy(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes);
    TriggerDestroy(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2);
    TriggerDestroy(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3);
    TriggerDestroy(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood6);
    TriggerDestroy(libSwaC_gt_ZS_ResourcePickup);
    TriggerDestroy(libSwaC_gt_ZS_BaseUnderAttackByGround);
    TriggerDestroy(libSwaC_gt_ZS_OverlordRallyEnable);
    TriggerDestroy(libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt);
    TriggerDestroy(libSwaC_gt_ZS_ZerglingRespawnCheat);
    TriggerDestroy(libSwaC_gt_ZS_HatcheryEggModels);
    TriggerDestroy(libSwaC_gt_ZS_HatcheryEggBirths);
    TriggerDestroy(libSwaC_gt_ZS_ZerglingRespawnAchievementAdd);
    TriggerDestroy(libSwaC_gt_ZS_MissionTipClicked);
    TriggerDestroy(libSwaC_gt_ZS_CamStatsHelpOpened);
    TriggerDestroy(libSwaC_gt_ZS_LoadCampaignStatsData);
    TriggerDestroy(libSwaC_gt_ZS_SaveCampaignStatsData);
    TriggerDestroy(libSwaC_gt_ZS_SetCasualRallyPoints);
    TriggerDestroy(libSwaC_gt_ZS_ArmyCustomMissionPitchPlay);
    TriggerDestroy(libSwaC_gt_ZS_ArmyCustomMissionPitchStop);
    TriggerDestroy(libSwaC_gt_ZS_KerriganDied);
    TriggerDestroy(libSwaC_gt_ZS_KerriganUITierCloseButtonClicked);
    TriggerDestroy(libSwaC_gt_ZS_KerriganUITierAbilityButtonClick);
    TriggerDestroy(libSwaC_gt_ZS_ArchivesHandleMissionLoad);
    TriggerDestroy(libSwaC_gt_ZS_FootageRecording);
    TriggerDestroy(libSwaC_gt_ZS_CampaignProgressButtonClicked); 
    TriggerDestroy(libSwaC_gt_ZS_CampaignProgressTechButtonClicked);
    TriggerDestroy(libCamp_gt_TS_DebugProgressCancel);
    TriggerDestroy(libCamp_gt_TS_DebugProgressOK);
    TriggerDestroy(libCamp_gt_TS_DebugProgressReset);
    TriggerDestroy(libCamp_gt_TS_DebugProgressUnlockSecretButton);
    TriggerDestroy(libCamp_gt_TS_DebugProgressMissionButton);
    TriggerDestroy(libCamp_gt_LoadingDone);
    TriggerDestroy(libLbty_gt_MeleeSurrender_Surrender);
    TriggerDestroy(libLbty_gt_MeleeSurrender_SurrenderClickedButton);
    TriggerDestroy(libLbty_gt_MeleeSurrender_FlashDialog);
    TriggerDestroy(libCamp_gt_TS_DebugResearchPanelButtonClicked);
    TriggerDestroy(libCamp_gt_TS_DebugMercenaryPanelButtonClicked);
    TriggerDestroy(libCamp_gt_TS_DebugBuyTechButtonClicked);
    TriggerDestroy(libCamp_gt_DebugTechCustomButtonClicked);
    TriggerDestroy(libNtve_gt_ScreenButtonClicked);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    gf_InitUI();
    gf_InitRegions();
    gf_InitDebug();
    PlayerSetColorIndex(14, 14, true);
    PlayerSetColorIndex(13, 13, true);
    PlayerSetColorIndex(15, 14, true);
    gv_pingNumeral[1] = "PingNumeric1";
    gv_pingNumeral[2] = "PingNumeric2";
    gv_pingNumeral[3] = "PingNumeric3";
    gv_pingNumeral[4] = "PingNumeric4";
    gv_pingNumeral[5] = "PingNumeric5";
    gv_pingNumeral[6] = "PingNumeric6";
    gv_pingNumeral[7] = "PingNumeric7";
    gv_pingNumeral[8] = "PingNumeric8";
    gv_pingNumeral[9] = "PingNumeric9";
    VisRevealArea(14, RegionPlayableMap(), 0.0, false);
    lv_loopint = 1;
    for ( ; ( (auto8EDE71C0_ai >= 0 && lv_loopint <= auto8EDE71C0_ae) || (auto8EDE71C0_ai < 0 && lv_loopint >= auto8EDE71C0_ae) ) ; lv_loopint += auto8EDE71C0_ai ) {
        MeleeSetOption(lv_loopint, c_meleeOptionSplitResources, false);
        libNtve_gf_SetAlliance(lv_loopint, 14, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(lv_loopint, 13, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(lv_loopint, 0, libNtve_ge_AllianceSetting_Ally);
        PlayerModifyPropertyInt(lv_loopint, c_playerPropCustom, c_playerPropOperSetTo, 999999);
        if ((PlayerStatus(lv_loopint) == c_playerStatusActive)) {
            PlayerGroupAdd(gv_players, lv_loopint);
            PlayerGroupAdd(gv_scoreBoard, lv_loopint);
            PlayerOptionOverride(lv_loopint, "simplecommandcard", "0");
            PlayerOptionOverride(lv_loopint, "selectuncontrolable", "1");
            PlayerOptionOverride(lv_loopint, "showcurrentordermodel", "0");
            CameraSave(lv_loopint);
        }

        lv_loopint2 = 1;
        lv_loopint2 = 0;
        for ( ; ( (autoDB4C1495_ai >= 0 && lv_loopint2 <= autoDB4C1495_ae) || (autoDB4C1495_ai < 0 && lv_loopint2 >= autoDB4C1495_ae) ) ; lv_loopint2 += autoDB4C1495_ai ) {
            PlayerSetAlliance(lv_loopint, c_allianceIdSeekHelp, lv_loopint2, false);
            PlayerSetAlliance(lv_loopint, c_allianceIdGiveHelp, lv_loopint2, false);
            PlayerSetAlliance(lv_loopint2, c_allianceIdTrade, lv_loopint, false);
            PlayerSetAlliance(lv_loopint, c_allianceIdTrade, lv_loopint2, false);
        }
    }
    gv_startingplayers = PlayerGroupCount(gv_players);
    libNtve_gf_SetAlliance(14, 13, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(14, 0, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(13, 0, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetPlayerGroupAlliance(gv_players, libNtve_ge_AllianceSetting_Ally);
    autoB65615FD_g = PlayerGroupAll();
    autoB65615FD_var = -1;
    while (true) {
        autoB65615FD_var = PlayerGroupNextPlayer(autoB65615FD_g, autoB65615FD_var);
        if (autoB65615FD_var < 0) { break; }
        PlayerModifyPropertyInt(autoB65615FD_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 40);
        PlayerModifyPropertyInt(autoB65615FD_var, c_playerPropHandicap, c_playerPropOperSetTo, 100);
        libNtve_gf_SetAlliance(15, autoB65615FD_var, libNtve_ge_AllianceSetting_Ally);
    }
    autoB286E03A_g = gv_players;
    autoB286E03A_var = -1;
    while (true) {
        autoB286E03A_var = PlayerGroupNextPlayer(autoB286E03A_g, autoB286E03A_var);
        if (autoB286E03A_var < 0) { break; }
        if ((PlayerHandle(autoB286E03A_var) == "1-S2-1-2424587")) {
            PlayerSetColorIndex(autoB286E03A_var, 15, true);
        }
        else if ((PlayerHandle(autoB286E03A_var) == "1-S2-1-3681588")) {
            PlayerSetColorIndex(autoB286E03A_var, 15, true);
        }
    }
    gv_spawnCount = (gv_spawnCount + FixedToInt((IntToFixed(PlayerGroupCount(gv_players)) * 0.6)));
    GameSetLighting("UACDay", 0.0);
    gv_fogvars[1] = 50.0;
    gv_fogvars[2] = 50.0;
    gv_fogvars[3] = 50.0;
    gv_fogvars[5] = 1.0;
    UnitIssueOrder(UnitFromId(425), Order(AbilityCommand("SpacePrisonDoorsThinLeftLowered", 0)), c_orderQueueReplace);
    lv_i = 0;
    for ( ; ( (autoF6226CAA_ai >= 0 && lv_i <= autoF6226CAA_ae) || (autoF6226CAA_ai < 0 && lv_i >= autoF6226CAA_ae) ) ; lv_i += autoF6226CAA_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/InventoryPanel/InventoryButtons/Button0" + IntToString(lv_i) + "/HotkeyFrame"));
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/ConsoleUIContainer/InventoryPanel/InventoryButtons/Button0" + IntToString(lv_i) + "/ChargeLabel"));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/InfoPanel/UnitPanel/BehaviorBar"));
    lv_behaviorPanel = DialogControlLastCreated();
    DialogControlHookup(lv_behaviorPanel, c_triggerControlTypePanel, "BehaviorIcon0");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 5, 0);
    DialogControlHookup(lv_behaviorPanel, c_triggerControlTypePanel, "BehaviorIcon1");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 37, 0);
    DialogControlHookup(lv_behaviorPanel, c_triggerControlTypePanel, "BehaviorIcon2");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 5, 30);
    DialogControlHookup(lv_behaviorPanel, c_triggerControlTypePanel, "BehaviorIcon3");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 37, 30);
    DialogControlHookup(lv_behaviorPanel, c_triggerControlTypePanel, "BehaviorIcon4");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 5, 62);
    DialogControlHookup(lv_behaviorPanel, c_triggerControlTypePanel, "BehaviorIcon5");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 37, 62);
    DialogControlDestroy(lv_behaviorPanel);
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneHero/WeaponIcon");
    lv_hook = DialogControlLastCreated();
    DialogControlHookup(lv_hook, c_triggerControlTypeImage, "EquipmentIconBorder");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-border-research.dds", PlayerGroupAll());
    DialogControlDestroy(lv_hook);
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneHero/ArmorIcon");
    lv_hook = DialogControlLastCreated();
    DialogControlHookup(lv_hook, c_triggerControlTypeImage, "EquipmentIconBorder");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-border-research.dds", PlayerGroupAll());
    DialogControlDestroy(lv_hook);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel/PortraitPanel");
    lv_hook = DialogControlLastCreated();
    DialogControlHookup(lv_hook, c_triggerControlTypeImage, "Background");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-border-transportslot-filled-4slots.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 675, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupAll());
    DialogControlDestroy(lv_hook);
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/FullscreenUpperContainer/ChatBar/EmojiBorderLine");
    lv_hook = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_aiurchef_frame_line01.dds", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 35);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 46.67, 0.00), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 65, -5);
    DialogControlDestroy(lv_hook);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/ChatBar/EmoticonButton");
    lv_hook = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 42, 42);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/662A008C"), PlayerGroupAll());
    DialogControlHookup(lv_hook, c_triggerControlTypeImage, "NormalImage");
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 40, 40);
    DialogControlHookup(lv_hook, c_triggerControlTypeImage, "HoverImage");
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 40, 40);
    DialogControlHookup(lv_hook, c_triggerControlTypeImage, "DropShadowImage");
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 40, 40);
    DialogControlDestroy(lv_hook);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/EmoticonPanel");
    lv_hook = DialogControlLastCreated();
    DialogControlHookup(lv_hook, c_triggerControlTypeImage, "Background");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\border-tech.dds", PlayerGroupAll());
    DialogControlHookup(lv_hook, c_triggerControlTypeLabel, "EmoticonTitleLabel");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 135, 30);
    DialogControlDestroy(lv_hook);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullScreenUpperContainer/HelpTipCallOut");
    gv_tipPanel[0] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullScreenUpperContainer/HelpTipArrow");
    gv_tipPanel[1] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeProgressBar, "UIContainer/ConsoleUIContainer/OverHeatBar");
    gv_overheatProgressBar = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/BarImage");
    gv_overheatProgressBarBorder = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CameraButton");
    gv_cameraButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MissionCompletionCountFrame");
    gv_objective_Mission_Tracker = DialogControlLastCreated();
    DialogControlHookup(gv_objective_Mission_Tracker, c_triggerControlTypeLabel, "Percent");
    gv_objective_Mission_Tracker_Label = DialogControlLastCreated();
    DialogControlHookup(gv_objective_Mission_Tracker, c_triggerControlTypeImage, "Checkmark");
    gv_objective_Mission_Tracker_Check = DialogControlLastCreated();
    DialogControlHookup(gv_objective_Mission_Tracker, c_triggerControlTypeProgressBar, "MissionPB");
    gv_objective_Mission_Tracker_PB = DialogControlLastCreated();
}

void gf_InitUI () {
    // Automatic Variable Declarations
    // Implementation
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradingAllowed(c_resourceTypeCustom, false);
    UISetResourceTradingAllowed(c_resourceTypeTerrazine, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogSaveButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogLoadButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/919E2F91"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/13949178"), StringExternal("Param/Value/80C68332"), "Assets\\Textures\\btn-tips-credit.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/E47F901F"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/E40A9966"), StringExternal("Param/Value/010CA788"), "Assets\\Textures\\btn-upgrade-terran-nova-snipeenergyrefund.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/10C38EDB"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/973F60DD"), StringExternal("Param/Value/16A28018"), "Assets\\Textures\\btn-tips-researchunlocked.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/2DA75D29"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/AF085CD8"), StringExternal("Param/Value/B3A5196A"), "Assets\\Textures\\btn-tips-researchunlocked.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/1D1B7527"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/1E78984F"), StringExternal("Param/Value/D04C1B9F"), "Assets\\Textures\\btn-tips-armory.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/42905926"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/9F14C3CA"), StringExternal("Param/Value/7A819AC4"), "Buttons\\Ranks\\RankSPC.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/92966BE0"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/CCAC4357"), StringExternal("Param/Value/33995C59"), "Assets\\Textures\\btn-tips-hotkeys.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/1497E46F"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/287FF044"), StringExternal("Param/Value/2CF69BD3"), "UI\\Fonts\\biohazard-wallpaper (2).dds");
    TipAlertPanelClear(PlayerGroupAll());
}

void gf_InitRegions () {
    // Automatic Variable Declarations
    // Implementation
    gv_spawnRegion = RegionFromId(64);
    RegionAddRegion(gv_spawnRegion, RegionFromId(65));
    RegionAddRegion(gv_spawnRegion, RegionFromId(66));
    RegionAddRegion(gv_spawnRegion, RegionFromId(77));
    RegionAddRegion(gv_spawnRegion, RegionFromId(78));
    gv_bossSpawnRegion = RegionFromId(64);
    RegionAddRegion(gv_bossSpawnRegion, RegionFromId(65));
    RegionAddRegion(gv_bossSpawnRegion, RegionFromId(66));
    RegionAddRegion(gv_bossSpawnRegion, RegionFromId(77));
    RegionAddRegion(gv_bossSpawnRegion, RegionFromId(78));
    RegionAddRegion(gv_spawnRegion, RegionFromId(3));
    RegionAddRegion(gv_spawnRegion, RegionFromId(4));
    RegionAddRegion(gv_spawnRegion, RegionFromId(2));
    RegionAddRegion(gv_spawnRegion, RegionFromId(1));
    gv_spawnPMCRegionB = RegionFromId(235);
    RegionAddRegion(gv_spawnPMCRegionB, RegionFromId(236));
    gv_mapEdges[1] = RegionFromId(1);
    gv_mapEdges[2] = RegionFromId(2);
    gv_mapEdges[3] = RegionFromId(3);
    gv_mapEdges[4] = RegionFromId(4);
    gv_lZs[1] = RegionFromId(13);
    gv_lZs[2] = RegionFromId(15);
    gv_lZs[3] = RegionFromId(14);
    gv_lZs[4] = RegionFromId(16);
    gv_lZs[5] = RegionFromId(6);
}

void gf_InitBanks () {
    // Variable Declarations
    int lv_siloop;
    int lv_i;

    // Automatic Variable Declarations
    const int auto2E0B2C0B_ae = 12;
    const int auto2E0B2C0B_ai = 1;
    const int autoE4843911_ae = 12;
    const int autoE4843911_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto2E0B2C0B_ai >= 0 && lv_i <= auto2E0B2C0B_ae) || (auto2E0B2C0B_ai < 0 && lv_i >= auto2E0B2C0B_ae) ) ; lv_i += auto2E0B2C0B_ai ) {
        BankLoad(gv_uACBANKNAME, lv_i);
        gv_banks[lv_i] = BankLastCreated();
    }
    lv_i = 1;
    for ( ; ( (autoE4843911_ai >= 0 && lv_i <= autoE4843911_ae) || (autoE4843911_ai < 0 && lv_i >= autoE4843911_ae) ) ; lv_i += autoE4843911_ai ) {
        BankLoad("Hotkeys", lv_i);
        gv_hotkeyBank[lv_i] = BankLastCreated();
    }
}

void gf_InitDebug () {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugEnableType(gv_playerEvents, true);
    TriggerDebugSetTypeFile(gv_playerEvents, gv_playerEventsLogFile);
}

void gf_ResetMissionComplete () {
    // Automatic Variable Declarations
    // Implementation
    gv_missioncomplete[0] = false;
    gv_missioncomplete[1] = false;
    gv_missioncomplete[2] = false;
    gv_missioncomplete[3] = false;
}

void gf_SpawnTCPzombie (int lp_tCP, string lp_type, int lp_count) {
    // Variable Declarations
    unitgroup lv_spawngroup;
    int lv_currentsupply;

    // Automatic Variable Declarations
    int auto1EAFC736_n;
    int auto1EAFC736_i;
    unitgroup auto3C1C1F8D_g;
    int auto3C1C1F8D_u;
    unit auto3C1C1F8D_var;

    // Variable Initialization
    lv_spawngroup = UnitGroupEmpty();

    // Implementation
    while (!((gv_guslaniSpawns == true))) {
        Wait(1.0, c_timeGame);
    }
    lv_currentsupply = (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) + lp_count);
    if ((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1) && ((lv_currentsupply <= gv_undeadSupplyCap) || (UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true))) {
        auto1EAFC736_n = lp_count;
        for (auto1EAFC736_i = 1; auto1EAFC736_i <= auto1EAFC736_n; auto1EAFC736_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_type, 0, 14, RegionRandomPoint(gv_tCPSpawns[lp_tCP]));
            UnitGroupAdd(gv_tCPhostiles, UnitLastCreated());
            UnitGroupAdd(lv_spawngroup, UnitLastCreated());
            Wait(RandomFixed(0.03, 0.1), c_timeGame);
        }
        UnitGroupAddUnitGroup(UnitLastCreatedGroup(), lv_spawngroup);
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_tCPRegion[lp_tCP])), c_orderQueueReplace);
        auto3C1C1F8D_g = UnitLastCreatedGroup();
        auto3C1C1F8D_u = UnitGroupCount(auto3C1C1F8D_g, c_unitCountAll);
        for (;; auto3C1C1F8D_u -= 1) {
            auto3C1C1F8D_var = UnitGroupUnitFromEnd(auto3C1C1F8D_g, auto3C1C1F8D_u);
            if (auto3C1C1F8D_var == null) { break; }
            libE6C8C21C_gf_RegisterUnitDiesEvent(gt_PlayerKills, auto3C1C1F8D_var);
            libE6C8C21C_gf_RegisterUnitBecomesIdleEvent(gt_UndeadIdles, auto3C1C1F8D_var, true);
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(auto3C1C1F8D_var, "PlayerHandicap", auto3C1C1F8D_var, (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(auto3C1C1F8D_var, "PlayerModifier", auto3C1C1F8D_var, PlayerGroupCount(gv_players));
            }
            if ((gv_gamemode > 1) && (gv_gamemode <= 11)) {
                if ((UnitTypeTestAttribute(UnitGetType(auto3C1C1F8D_var), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(auto3C1C1F8D_var, "DifficultyModifierBoss", auto3C1C1F8D_var, gv_zombieBuffAmount);
                }
                else {
                    UnitBehaviorAdd(auto3C1C1F8D_var, "DifficultyModifier", auto3C1C1F8D_var, gv_zombieBuffAmount);
                }
            }

        }
    }

}

void gf_HideAllUIFramesForPlayers (playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCashPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCharacterSheetButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeCreditsPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeErrorDisplayPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeHelpMenuButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeInventoryPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeLeaderPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMercenaryPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeBattleReportPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeObjectivePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePingPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePlanetPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePurchasePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypePylonButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeResearchPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeRoomPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeStatusUI, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeSupply, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTechGlossaryPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTechTreePanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTextTag, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(lp_playerGroup, c_syncFrameTypeVictoryPanel, false);
}

void gf_MissionItemPingAddItem (unit lp_item) {
    // Variable Declarations
    int lv_ping;
    int lv_ping2;
    int lv_carryingitem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;
    lv_ping2 = c_invalidPingId;
    lv_carryingitem = UnitGetOwner(UnitInventoryUnit(lp_item));

    // Implementation
    if ((UnitGroupHasUnit(gv_missionItemPingItems, lp_item) == false)) {
        if ((UnitGetType(lp_item) == "ShockPaddles")) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_item), ColorWithAlpha(100.00, 100.00, 0.00, 49.02), 0.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetTooltip(lv_ping, UnitTypeGetName(UnitGetType(lp_item)));
            PingSetScale(lv_ping, 0.5);
            PingSetUnit(lv_ping, lp_item);
            libHots_gf_StorePingForUnit(lp_item, 1, lv_ping);
            UnitGroupAdd(gv_missionItemPingItems, lp_item);
        }
        else {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_item), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetTooltip(lv_ping, UnitTypeGetName(UnitGetType(lp_item)));
            PingSetScale(lv_ping, 0.5);
            PingSetUnit(lv_ping, lp_item);
            libHots_gf_StorePingForUnit(lp_item, 1, lv_ping);
            UnitGroupAdd(gv_missionItemPingItems, lp_item);
        }
    }

}

void gf_MissionItemPingRemoveItem (unit lp_item) {
    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = libHots_gf_PingStoredForUnit(lp_item, 1);

    // Implementation
    if ((UnitGroupHasUnit(gv_missionItemPingItems, lp_item) == true)) {
        PingDestroy(lv_ping);
        UnitGroupRemove(gv_missionItemPingItems, lp_item);
    }

}

void gf_MissionItemCarried (unit lp_item, int lp_player) {
    // Variable Declarations
    int lv_ping;
    int lv_ping2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = libHots_gf_PingStoredForUnit(lp_item, 1);
    lv_ping2 = c_invalidPingId;

    // Implementation
    if ((UnitGroupHasUnit(gv_missionItemPingItems, lp_item) == true)) {
        PingDestroy(lv_ping);
        if ((UnitGetType(lp_item) == "ShockPaddles")) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_item), ColorWithAlpha(100.00, 100.00, 0.00, 49.02), 0.0, 270.0);
        }
        else {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_item), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
        }
        lv_ping2 = PingLastCreated();
        PingSetTooltip(lv_ping2, (PlayerName(lp_player) + (StringExternal("Param/Value/215D4004") + UnitTypeGetName(UnitGetType(lp_item)))));
        PingSetScale(lv_ping2, 0.5);
        PingSetUnit(lv_ping2, lp_item);
        libHots_gf_StorePingForUnit(lp_item, 1, lv_ping2);
    }

}

void gf_MissionItemDropped (int lp_player, unit lp_item) {
    // Variable Declarations
    int lv_ping;
    int lv_ping2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = libHots_gf_PingStoredForUnit(lp_item, 1);
    lv_ping2 = c_invalidPingId;

    // Implementation
    if ((UnitGroupHasUnit(gv_missionItemPingItems, lp_item) == true)) {
        PingDestroy(lv_ping);
        if ((UnitGetType(lp_item) == "ShockPaddles")) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_item), ColorWithAlpha(100.00, 100.00, 0.00, 49.02), 0.0, 270.0);
        }
        else {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_item), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
        }
        lv_ping2 = PingLastCreated();
        PingSetTooltip(lv_ping2, UnitTypeGetName(UnitGetType(lp_item)));
        PingSetScale(lv_ping2, 0.5);
        PingSetUnit(lv_ping2, lp_item);
        libHots_gf_StorePingForUnit(lp_item, 1, lv_ping2);
    }

}

bool gf_Parity (int lp_integer) {
    // Variable Declarations
    string lv_i2s;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i2s = "";

    // Implementation
    lv_i2s = IntToString(lp_integer);
    if (((StringSub(lv_i2s, StringLength(lv_i2s), StringLength(lv_i2s)) == "1") || (StringSub(lv_i2s, StringLength(lv_i2s), StringLength(lv_i2s)) == "3") || (StringSub(lv_i2s, StringLength(lv_i2s), StringLength(lv_i2s)) == "5") || (StringSub(lv_i2s, StringLength(lv_i2s), StringLength(lv_i2s)) == "7") || (StringSub(lv_i2s, StringLength(lv_i2s), StringLength(lv_i2s)) == "9"))) {
        return true;
    }

    return false;
}

text gf_TextImage (string lp_imgpath, int lp_scale) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Param/Value/9E1FD4D9") + StringToText(lp_imgpath) + StringExternal("Param/Value/7108FFDA") + IntToText(lp_scale) + StringExternal("Param/Value/CC9A18E9") + IntToText(lp_scale) + StringExternal("Param/Value/C879867F"));
}

string gf_GetPlayerImage (int lp_player) {
    // Variable Declarations
    string lv_imgPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_imgPath = "";

    // Implementation
    if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[1][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[1][1]))) {
        lv_imgPath = "Buttons\\BTNSoldier.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[2][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[2][1]))) {
        lv_imgPath = "Assets\\Buttons\\Portraits\\BTN_Combat_Medic_Portrait.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[3][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[3][1]))) {
        lv_imgPath = "Buttons\\BTNAutoRifle.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[4][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[4][1]))) {
        lv_imgPath = "firebat.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[5][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[5][1]))) {
        lv_imgPath = "Buttons\\Portraits\\BTNSFAAT.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[6][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[6][1]))) {
        lv_imgPath = "Assets\\Buttons\\Portraits\\BTN_Cavalry_Scout_Portrait.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[7][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[7][1]))) {
        lv_imgPath = "Buttons\\Portraits\\BTNMarksman.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[8][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[8][1]))) {
        lv_imgPath = "Assets\\Buttons\\Portraits\\BTN_Jav_Portrait.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[9][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[9][1]))) {
        lv_imgPath = "Assets\\Buttons\\Portraits\\BTN_PL_Portrait.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[10][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[10][1]))) {
        lv_imgPath = "Assets\\Buttons\\Portraits\\BTN_Combat_Engineer_Portrait.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[11][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[11][1]))) {
        lv_imgPath = "Assets\\Buttons\\Portraits\\BTN_Cyborg_Portrait.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[12][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[12][1]))) {
        lv_imgPath = "Assets\\Buttons\\Portraits\\BTN_Ghost_Portrait.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[13][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[13][1]))) {
        lv_imgPath = "Assets\\Buttons\\Portraits\\BTN_FSS_Portrait.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[14][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[14][1]))) {
        lv_imgPath = "Assets\\Custom Icons\\CommandoSelect.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[15][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[15][1]))) {
        lv_imgPath = "Buttons\\BTNMedic.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[16][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[16][1]))) {
        lv_imgPath = "Assets\\Buttons\\Portraits\\BTN_Specter_Portrait.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[17][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[17][1]))) {
        lv_imgPath = "Assets\\Buttons\\Portraits\\BTN_OSS_Portrait.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[18][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[18][1]))) {
        lv_imgPath = "Assets\\Buttons\\Portraits\\BTN_HG_Portrait.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == "Regendare"))) {
        lv_imgPath = "Buttons\\BTNSoldier.dds";
    }
    else if (((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[19][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[19][1]))) {
        lv_imgPath = "Assets\\Textures\\reaperportrait_static.dds";
    }
    return lv_imgPath;
}

void gf_MissionText (text lp_text) {
    // Variable Declarations
    int lv_int;
    int lv_height;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    SoundPlay(SoundLink("UI_TransmissionStart", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, (StringExternal("Param/Value/38DCD514") + lp_text));
}

void gf_SetNewLighting (string lp_light, fixed lp_blendtime) {
    // Automatic Variable Declarations
    playergroup autoDC69EAE8_g;
    int autoDC69EAE8_var;

    // Implementation
    gv_currentlighting = lp_light;
    autoDC69EAE8_g = gv_players;
    autoDC69EAE8_var = -1;
    while (true) {
        autoDC69EAE8_var = PlayerGroupNextPlayer(autoDC69EAE8_g, autoDC69EAE8_var);
        if (autoDC69EAE8_var < 0) { break; }
        if ((gv_playerNODson[autoDC69EAE8_var] == false)) {
            PlayerSetLighting(autoDC69EAE8_var, lp_light, lp_blendtime);
        }
        else {
            if ((lp_light == "UACNight")) {
                PlayerSetLighting(autoDC69EAE8_var, "NODs", lp_blendtime);
            }
            else {
                PlayerSetLighting(autoDC69EAE8_var, "NODsBright", lp_blendtime);
            }
        }
    }
}

void gf_ResetLighting (fixed lp_blendtime) {
    // Automatic Variable Declarations
    playergroup autoC7A310BF_g;
    int autoC7A310BF_var;

    // Implementation
    autoC7A310BF_g = gv_players;
    autoC7A310BF_var = -1;
    while (true) {
        autoC7A310BF_var = PlayerGroupNextPlayer(autoC7A310BF_g, autoC7A310BF_var);
        if (autoC7A310BF_var < 0) { break; }
        if ((gv_playerNODson[autoC7A310BF_var] == false)) {
            PlayerSetLighting(autoC7A310BF_var, gv_currentlighting, lp_blendtime);
        }
        else {
            if ((gv_currentlighting == "UACNight")) {
                PlayerSetLighting(autoC7A310BF_var, "NODs", lp_blendtime);
            }
            else {
                PlayerSetLighting(autoC7A310BF_var, "NODsBright", lp_blendtime);
            }
        }
    }
}

void gf_PlaySoundOnUnit (unit lp_unit, soundlink lp_sound) {
    // Variable Declarations
    int lv_owner;
    playergroup lv_nearby;
    playergroup lv_control;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto9124B0D4_g;

    // Variable Initialization
    lv_owner = UnitGetOwner(lp_unit);
    lv_nearby = PlayerGroupAlliance(c_playerGroupAlly, lv_owner);
    lv_control = PlayerGroupSingle(lv_owner);

    // Implementation
    auto9124B0D4_g = lv_nearby;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto9124B0D4_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerGetAlliance(lv_owner, c_allianceIdControl, lv_player) == true)) {
            PlayerGroupAdd(lv_control, lv_player);
        }

    }
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_control, lv_nearby);
    SoundPlayOnUnit(lp_sound, lv_nearby, lp_unit, 0.0, 100.0, 0.0);
    SoundPlay(lp_sound, lv_control, 100.0, 0.0);
}

void gf_AIScatterFromPoint (point lp_point, fixed lp_radius) {
    // Automatic Variable Declarations
    unitgroup autoE3D7A710_g;
    int autoE3D7A710_u;
    unit autoE3D7A710_var;

    // Implementation
    autoE3D7A710_g = UnitGroup(null, c_playerAny, RegionCircle(lp_point, lp_radius), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE3D7A710_u = UnitGroupCount(autoE3D7A710_g, c_unitCountAll);
    for (;; autoE3D7A710_u -= 1) {
        autoE3D7A710_var = UnitGroupUnitFromEnd(autoE3D7A710_g, autoE3D7A710_u);
        if (autoE3D7A710_var == null) { break; }
        if ((UnitHasBehavior(autoE3D7A710_var, "Sprint") == false) && ((UnitGetCustomValue(autoE3D7A710_var, 2) >= 14.0) || (UnitGroupHasUnit(gv_sprinters, autoE3D7A710_var) == false))) {
            UnitIssueOrder(autoE3D7A710_var, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
        }

        if ((PlayerType(UnitGetOwner(autoE3D7A710_var)) == c_playerTypeComputer) && (UnitGetOwner(autoE3D7A710_var) != 14)) {
            UnitIssueOrder(autoE3D7A710_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lp_point, (lp_radius + RandomFixed(1.0, 4.0)), AngleBetweenPoints(lp_point, UnitGetPosition(autoE3D7A710_var)))), c_orderQueueAddToFront);
        }

    }
}

void gf_PlayerTransmission (text lp_text, int lp_attachText, int lp_player) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = gv_playerHeroes[lp_player];

    // Implementation
    SoundPlay(SoundLink("RadioChatter", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_gamemode < 11)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/CFE4B6EF") + lp_text));
    }
    if ((lp_attachText == 1)) {
        gf_TextChat(lv_unit, (TextWithColor(PlayerName(UnitGetOwner(lv_unit)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lv_unit), false))) + StringExternal("Param/Value/D3D1BB69") + lp_text));
    }

}

void gf_TextChat (unit lp_unit, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayOnUnit(SoundLink("RadioChatter", -1), PlayerGroupAll(), lp_unit, 0.0, 100.0, 0.0);
    TextTagCreate(lp_text, 17, UnitGetPosition(lp_unit), 1.0, true, false, PlayerGroupAll());
    TextTagSetTextShadow(TextTagLastCreated(), false);
    TextTagAttachToUnit(TextTagLastCreated(), lp_unit, 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
}

void gf_PMCTextChat (unit lp_unit, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayOnUnit(SoundLink("RadioChatter", -1), PlayerGroupAll(), lp_unit, 0.0, 100.0, 0.0);
    TextTagCreate((TextWithColor(UnitGetName(lp_unit), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_unit), false))) + (StringExternal("Param/Value/A41EF439") + lp_text)), 18, UnitGetPosition(lp_unit), 1.0, true, true, PlayerGroupAll());
    TextTagSetTextShadow(TextTagLastCreated(), false);
    TextTagAttachToUnit(TextTagLastCreated(), lp_unit, 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
}

void gf_SetTTFadeandDuration (int lp_tag, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    TextTagSetTime(lp_tag, c_textTagTimeDuration, lp_duration);
    TextTagSetTime(lp_tag, c_textTagTimeFadeOut, (lp_duration - 1.0));
}

void gf_SkipActionsIfGameOver () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_gameOver == true)) {
        return ;
    }
}

void gf_ChapterIntermissionOn () {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto654D5E23_g;
    int auto654D5E23_u;
    playergroup auto3777C9AC_g;
    int auto3777C9AC_var;

    // Variable Initialization

    // Implementation
    gf_DisplayObjectiveMissionCounter(ge_ObjectiveMissionType_Hide);
    UnitPauseAll(true);
    gv_pauseSpawning = true;
    gv_pauseSprintLoop = true;
    auto654D5E23_g = gv_undeadTargetGroup;
    auto654D5E23_u = UnitGroupCount(auto654D5E23_g, c_unitCountAll);
    for (;; auto654D5E23_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto654D5E23_g, auto654D5E23_u);
        if (lv_unit == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(lv_unit, true);
    }
    auto3777C9AC_g = gv_players;
    auto3777C9AC_var = -1;
    while (true) {
        auto3777C9AC_var = PlayerGroupNextPlayer(auto3777C9AC_g, auto3777C9AC_var);
        if (auto3777C9AC_var < 0) { break; }
        DialogSetVisible(gv_functionaldialog[auto3777C9AC_var], PlayerGroupSingle(auto3777C9AC_var), false);
        DialogSetVisible(gv_sprintBar, PlayerGroupSingle(auto3777C9AC_var), false);
        DialogSetVisible(gv_uIDialogs.lv_behaviorDialog[auto3777C9AC_var], PlayerGroupSingle(auto3777C9AC_var), false);
        if ((gv_customCommandCard[auto3777C9AC_var] == true) && (DialogIsVisible(gv_hotkeyMenuButton, auto3777C9AC_var) == true)) {
            DialogSetVisible(gv_hotkeyMenuButton, PlayerGroupSingle(auto3777C9AC_var), false);
        }
        if (((UnitGetType(gv_playerHeroes[auto3777C9AC_var]) == "HeavyGunner") || (UnitGetType(gv_playerHeroes[auto3777C9AC_var]) == "HeavyGunner2"))) {
            gf_DisplayOverheatBar(false, auto3777C9AC_var);
        }
    }
    gf_DisplayUIButtons(false);
}

void gf_ChapterIntermissionOff () {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoCC1E85B3_g;
    int autoCC1E85B3_u;
    playergroup auto36FF8D52_g;
    int auto36FF8D52_var;

    // Variable Initialization

    // Implementation
    UnitPauseAll(false);
    gv_pauseSpawning = false;
    gv_pauseSprintLoop = false;
    autoCC1E85B3_g = gv_undeadTargetGroup;
    autoCC1E85B3_u = UnitGroupCount(autoCC1E85B3_g, c_unitCountAll);
    for (;; autoCC1E85B3_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoCC1E85B3_g, autoCC1E85B3_u);
        if (lv_unit == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(lv_unit, false);
    }
    auto36FF8D52_g = gv_players;
    auto36FF8D52_var = -1;
    while (true) {
        auto36FF8D52_var = PlayerGroupNextPlayer(auto36FF8D52_g, auto36FF8D52_var);
        if (auto36FF8D52_var < 0) { break; }
        DialogSetVisible(gv_functionaldialog[auto36FF8D52_var], PlayerGroupSingle(auto36FF8D52_var), true);
        DialogSetVisible(gv_sprintBar, PlayerGroupSingle(auto36FF8D52_var), true);
        if ((gv_customCommandCard[auto36FF8D52_var] == true) && (DialogIsVisible(gv_hotkeyMenuButton, auto36FF8D52_var) == false)) {
            DialogSetVisible(gv_hotkeyMenuButton, PlayerGroupSingle(auto36FF8D52_var), true);
        }
        if (((UnitGetType(gv_playerHeroes[auto36FF8D52_var]) == "HeavyGunner") || (UnitGetType(gv_playerHeroes[auto36FF8D52_var]) == "HeavyGunner2"))) {
            if ((UnitIsAlive(gv_playerHeroes[auto36FF8D52_var]) == true)) {
                UnitSelect(gv_playerHeroes[auto36FF8D52_var], auto36FF8D52_var, true);
                gf_DisplayOverheatBar(true, auto36FF8D52_var);
                DialogSetVisible(gv_uIDialogs.lv_behaviorDialog[auto36FF8D52_var], PlayerGroupSingle(auto36FF8D52_var), true);
            }
        }
        else {
            if ((UnitIsAlive(gv_playerHeroes[auto36FF8D52_var]) == true)) {
                UnitSelect(gv_playerHeroes[auto36FF8D52_var], auto36FF8D52_var, true);
                DialogSetVisible(gv_uIDialogs.lv_behaviorDialog[auto36FF8D52_var], PlayerGroupSingle(auto36FF8D52_var), true);
            }
        }
    }
    gf_DisplayObjectiveMissionCounter(ge_ObjectiveMissionType_Show);
    gf_DisplayUIButtons(true);
}

void gf_PlayableMapArea (fixed lp_z, fixed lp_y, fixed lp_x) {
    // Automatic Variable Declarations
    // Implementation
    RegionPlayableMapSet(RegionCircle(Point(lp_z, lp_y), lp_x));
    CameraSetBounds(PlayerGroupAll(), RegionPlayableMap(), true);
}

void gf_SaveCameraSettings () {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    playergroup auto272D18A3_g;

    // Variable Initialization
    lv_int = 1;

    // Implementation
    auto272D18A3_g = gv_players;
    lv_int = -1;
    while (true) {
        lv_int = PlayerGroupNextPlayer(auto272D18A3_g, lv_int);
        if (lv_int < 0) { break; }
        if ((PlayerStatus(lv_int) == c_playerStatusActive)) {
            CameraSave(lv_int);
        }

    }
}

void gf_RestoreCameraSettings (fixed lp_seconds, fixed lp_deceleration) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    playergroup auto12A41643_g;

    // Variable Initialization
    lv_int = 1;

    // Implementation
    auto12A41643_g = gv_players;
    lv_int = -1;
    while (true) {
        lv_int = PlayerGroupNextPlayer(auto12A41643_g, lv_int);
        if (lv_int < 0) { break; }
        if ((PlayerStatus(lv_int) == c_playerStatusActive)) {
            CameraRestore(lv_int, lp_seconds, -1, lp_deceleration);
            CameraLockInput(lv_int, false);
        }

    }
}

void gf_GivePlayerHeroXP (unit lp_player, string lp_xP) {
    // Variable Declarations
    unit lv_animation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MatriarchDNAPickup", 0, UnitGetOwner(lp_player), UnitGetPosition(lp_player));
    lv_animation = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_player), c_animNameDefault, "Stand", 0, c_animTimeDefault);
    SoundPlayAtPoint(SoundLink("Zerus_DNA_PkUp", -1), PlayerGroupSingle(UnitGetOwner(lp_player)), UnitGetPosition(lv_animation), 0.0, 100.0, 0.0);
    libSwaC_gf_DestroyCacheAndGivePlayerResources(lv_animation, libSwaC_ge_CacheResourceType_CustomResource, StringToInt(("+" + lp_xP)), null, StringExternal("Param/Value/07811C86"), UnitGetOwner(lp_player));
    UnitSetPropertyFixed(lp_player, c_unitPropXP, (UnitXPGetCurrentXP(lp_player, null) + StringToFixed(lp_xP)));
}

void gf_RefreshUnitGroup (unitgroup lp_group) {
    // Automatic Variable Declarations
    unitgroup auto6AF16777_g;
    int auto6AF16777_u;
    unit auto6AF16777_var;

    // Implementation
    auto6AF16777_g = lp_group;
    auto6AF16777_u = UnitGroupCount(auto6AF16777_g, c_unitCountAll);
    for (;; auto6AF16777_u -= 1) {
        auto6AF16777_var = UnitGroupUnitFromEnd(auto6AF16777_g, auto6AF16777_u);
        if (auto6AF16777_var == null) { break; }
        UnitGroupRemove(lp_group, auto6AF16777_var);
    }
}

trigger auto_gf_PlayUnloadAnimationOnUnit_Trigger = null;
unit auto_gf_PlayUnloadAnimationOnUnit_lp_player;

void gf_PlayUnloadAnimationOnUnit (unit lp_player) {
    auto_gf_PlayUnloadAnimationOnUnit_lp_player = lp_player;

    if (auto_gf_PlayUnloadAnimationOnUnit_Trigger == null) {
        auto_gf_PlayUnloadAnimationOnUnit_Trigger = TriggerCreate("auto_gf_PlayUnloadAnimationOnUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_PlayUnloadAnimationOnUnit_Trigger, false, false);
}

bool auto_gf_PlayUnloadAnimationOnUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_player = auto_gf_PlayUnloadAnimationOnUnit_lp_player;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_ShowHideUnit(lp_player, false);
    ActorSend(libNtve_gf_MainActorofUnit(lp_player), "AnimBracketStart Unload IGNORE Unload Unload,End");
    Wait(0.8, c_timeGame);
    libNtve_gf_ShowHideUnit(lp_player, true);
    ActorSend(libNtve_gf_MainActorofUnit(lp_player), "AnimBracketStop Unload");
    return true;
}

trigger auto_gf_MoveToGuardPos_Trigger = null;
unit auto_gf_MoveToGuardPos_lp_unit;
region auto_gf_MoveToGuardPos_lp_region;

void gf_MoveToGuardPos (unit lp_unit, region lp_region) {
    auto_gf_MoveToGuardPos_lp_unit = lp_unit;
    auto_gf_MoveToGuardPos_lp_region = lp_region;

    if (auto_gf_MoveToGuardPos_Trigger == null) {
        auto_gf_MoveToGuardPos_Trigger = TriggerCreate("auto_gf_MoveToGuardPos_TriggerFunc");
    }

    TriggerExecute(auto_gf_MoveToGuardPos_Trigger, false, false);
}

bool auto_gf_MoveToGuardPos_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_MoveToGuardPos_lp_unit;
    region lp_region = auto_gf_MoveToGuardPos_lp_region;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if (((libNtve_gf_UnitInRegion(lp_unit, lp_region) == true) || (UnitIsAlive(lp_unit) == false))) {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
            break;
        }
        else {
            if ((UnitHasBehavior(lp_unit, "Sprint") == false)) {
                if ((UnitGetOwner(lp_unit) == 15)) {
                    UnitIssueOrder(lp_unit, Order(AbilityCommand("SprintNPC", 0)), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lp_unit, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
                }
            }
            if ((RandomInt(0, 2) == 1)) {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_region)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_region)), c_orderQueueReplace);
            }
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_MoveToPosProne_Trigger = null;
unit auto_gf_MoveToPosProne_lp_unit;
point auto_gf_MoveToPosProne_lp_point;

void gf_MoveToPosProne (unit lp_unit, point lp_point) {
    auto_gf_MoveToPosProne_lp_unit = lp_unit;
    auto_gf_MoveToPosProne_lp_point = lp_point;

    if (auto_gf_MoveToPosProne_Trigger == null) {
        auto_gf_MoveToPosProne_Trigger = TriggerCreate("auto_gf_MoveToPosProne_TriggerFunc");
    }

    TriggerExecute(auto_gf_MoveToPosProne_Trigger, false, false);
}

bool auto_gf_MoveToPosProne_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_MoveToPosProne_lp_unit;
    point lp_point = auto_gf_MoveToPosProne_lp_point;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if (((UnitGetPosition(lp_unit) == lp_point) || (UnitIsAlive(lp_unit) == false))) {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            UnitIssueOrder(lp_unit, Order(AbilityCommand("Prone", 0)), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
            break;
        }
        else {
            if ((UnitHasBehavior(lp_unit, "Sprint") == false) && ((UnitGetCustomValue(lp_unit, 2) >= 14.0) || (UnitGroupHasUnit(gv_sprinters, lp_unit) == false))) {
                UnitIssueOrder(lp_unit, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
            }

            if ((RandomInt(0, 2) == 1)) {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lp_point), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lp_point), c_orderQueueReplace);
            }
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

void gf_LandPhantom (point lp_lZ) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", 0, 13, PointWithOffset(lp_lZ, -12.0, RandomFixed(-4.0, 4.0)), lp_lZ);
    gv_lastlandedphantom = UnitLastCreated();
    UnitIssueOrder(gv_lastlandedphantom, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), lp_lZ), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(gv_lastlandedphantom, true);
}

void gf_TakeoffPhantom () {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(gv_lastlandedphantom, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(gv_lastlandedphantom, true);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_lastlandedphantom, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(8.0, c_timeGame);
    UnitRemove(gv_lastlandedphantom);
}

void gf_AttachObjectiveTagToUnit (int lp_modelType, int lp_modelSize, unit lp_unit, text lp_textTag, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libSwaC_gf_AttachReticleEffectAndTextTagOnUnit(lp_modelType, lp_modelSize, lp_textTag, lp_unit, "Ref_Center");
    libHots_gf_StoreActorForUnit(lp_unit, lp_index, libNtve_gf_ActorLastCreated());
    libHots_gf_StoreTextTagForUnit(lp_unit, lp_index, TextTagLastCreated());
}

void gf_RemoveObjectiveTagFromUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_KillModel(libHots_gf_ActorForUnit(lp_unit, lp_index));
    TextTagDestroy(libHots_gf_TextTagForUnit(lp_unit, lp_index));
}

void gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location, int lp_index) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libSwaC_gf_ZS_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    gv_objectiveTagIndex[lp_index] = libNtve_gf_ActorLastCreated();
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libSwaC_gf_ZS_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/BA72C1D5", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/BA72C1D5", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/BA72C1D5"), 24, lp_location, 0.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    gv_objectiveTagIndexText[lp_index] = TextTagLastCreated();
}

void gf_RemoveObjectiveTagFromPoint (point lp_point, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_KillModel(gv_objectiveTagIndex[lp_index]);
    TextTagDestroy(gv_objectiveTagIndexText[lp_index]);
}

trigger auto_gf_SpawnDebrisAnimation_Trigger = null;
point auto_gf_SpawnDebrisAnimation_lp_destroyedPoint;
string auto_gf_SpawnDebrisAnimation_lp_actorType;

void gf_SpawnDebrisAnimation (point lp_destroyedPoint, string lp_actorType) {
    auto_gf_SpawnDebrisAnimation_lp_destroyedPoint = lp_destroyedPoint;
    auto_gf_SpawnDebrisAnimation_lp_actorType = lp_actorType;

    if (auto_gf_SpawnDebrisAnimation_Trigger == null) {
        auto_gf_SpawnDebrisAnimation_Trigger = TriggerCreate("auto_gf_SpawnDebrisAnimation_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnDebrisAnimation_Trigger, false, false);
}

bool auto_gf_SpawnDebrisAnimation_TriggerFunc (bool testConds, bool runActions) {
    point lp_destroyedPoint = auto_gf_SpawnDebrisAnimation_lp_destroyedPoint;
    string lp_actorType = auto_gf_SpawnDebrisAnimation_lp_actorType;

    // Variable Declarations
    actor lv_destroyedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateActorAtPoint(lp_actorType, lp_destroyedPoint);
    lv_destroyedUnit = libNtve_gf_ActorLastCreated();
    libNtve_gf_MakeModelFaceAngle(lv_destroyedUnit, libNtve_gf_RandomAngle());
    libNtve_gf_PlayAnimation(lv_destroyedUnit, c_animNameDefault, "Death", c_animFlagNonLooping, c_animTimeDefault);
    Wait(20.0, c_timeGame);
    ActorSend(lv_destroyedUnit, "Destroy");
    return true;
}

trigger auto_gf_RandomWeatherEvent_Trigger = null;
int auto_gf_RandomWeatherEvent_lp_weatherModifier;

void gf_RandomWeatherEvent (int lp_weatherModifier) {
    auto_gf_RandomWeatherEvent_lp_weatherModifier = lp_weatherModifier;

    if (auto_gf_RandomWeatherEvent_Trigger == null) {
        auto_gf_RandomWeatherEvent_Trigger = TriggerCreate("auto_gf_RandomWeatherEvent_TriggerFunc");
    }

    TriggerExecute(auto_gf_RandomWeatherEvent_Trigger, false, false);
}

bool auto_gf_RandomWeatherEvent_TriggerFunc (bool testConds, bool runActions) {
    int lp_weatherModifier = auto_gf_RandomWeatherEvent_lp_weatherModifier;

    // Variable Declarations
    int lv_randomEventChance;

    // Automatic Variable Declarations
    int auto2DEDD8C0_val;

    // Variable Initialization

    // Implementation
    if ((gv_gamemode == 9) && (gv_mod_NoAmmo == true)) {
        lv_randomEventChance = 1;
    }
    else {
        if ((lp_weatherModifier != 0)) {
            lv_randomEventChance = lp_weatherModifier;
        }
        else {
            lv_randomEventChance = RandomInt(1, 3);
        }
    }
    auto2DEDD8C0_val = lv_randomEventChance;
    if (auto2DEDD8C0_val == 1) {
        gv_weatherType = StringExternal("Param/Value/4207DB9A");
        gf_WeatherThunderStormEffectIntense();
    }
    else if (auto2DEDD8C0_val == 2) {
        gv_weatherType = StringExternal("Param/Value/859BD12F");
        gf_WeatherBlizzardStormEffectIntense();
    }
    else if (auto2DEDD8C0_val == 3) {
        gv_weatherType = StringExternal("Param/Value/910CFC94");
        gf_WeatherFogEventIntense();
    }
    else {
        gv_weatherType = StringExternal("Param/Value/DA744A27");
        gf_WeatherThunderStormEffectIntense();
    }
    return true;
}

void gf_WeatherThunderStormEffectIntense () {
    // Variable Declarations
    int lv_loopint;
    sound lv_rainsound;
    actor[13] lv_weatheremitters;

    // Automatic Variable Declarations
    const int autoF5DF5676_ae = 12;
    const int autoF5DF5676_ai = 1;
    unitgroup auto4B76F41A_g;
    int auto4B76F41A_u;
    unit auto4B76F41A_var;
    const int auto9E2C57FC_ae = 12;
    const int auto9E2C57FC_ai = 1;

    // Variable Initialization

    // Implementation
    GameSetLighting("UACStorm", 0.0);
    SoundPlay(SoundLink("Ambience_TRaynor03Rain", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_rainsound = SoundLastPlayed();
    gv_jamChance = 5;
    gv_thunderstorm = true;
    TriggerEnable(gt_SuitMalfunctionChanceIntense, true);
    while (true) {
        lv_loopint = 1;
        for ( ; ( (autoF5DF5676_ai >= 0 && lv_loopint <= autoF5DF5676_ae) || (autoF5DF5676_ai < 0 && lv_loopint >= autoF5DF5676_ae) ) ; lv_loopint += autoF5DF5676_ai ) {
            libNtve_gf_CreateModelAtPoint("RainEmitterLarge", CameraGetTarget(lv_loopint));
            lv_weatheremitters[lv_loopint] = libNtve_gf_ActorLastCreated();
        }
        auto4B76F41A_g = UnitGroup(null, 14, RegionPlayableMap(), UnitFilter((1 << c_targetFilterAir) | (1 << c_targetFilterBiological), 0, (1 << c_targetFilterGround) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto4B76F41A_u = UnitGroupCount(auto4B76F41A_g, c_unitCountAll);
        for (;; auto4B76F41A_u -= 1) {
            auto4B76F41A_var = UnitGroupUnitFromEnd(auto4B76F41A_g, auto4B76F41A_u);
            if (auto4B76F41A_var == null) { break; }
            UnitBehaviorAdd(auto4B76F41A_var, "Thunderstorm", auto4B76F41A_var, 1);
        }
        if ((RandomInt(1, 10) == 5)) {
            SoundPlay(SoundLink("Ambience_Thunder_OneShot", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        Wait(1.5, c_timeGame);
        lv_loopint = 1;
        for ( ; ( (auto9E2C57FC_ai >= 0 && lv_loopint <= auto9E2C57FC_ae) || (auto9E2C57FC_ai < 0 && lv_loopint >= auto9E2C57FC_ae) ) ; lv_loopint += auto9E2C57FC_ai ) {
            libNtve_gf_KillModel(lv_weatheremitters[lv_loopint]);
        }
    }
}

void gf_WeatherBlizzardStormEffectIntense () {
    // Variable Declarations
    int lv_int;
    actor[13] lv_snowfall;

    // Automatic Variable Declarations
    const int auto0B1DFBA2_ae = 12;
    const int auto0B1DFBA2_ai = 1;
    const int auto8F6C097B_ae = 12;
    const int auto8F6C097B_ai = 1;

    // Variable Initialization

    // Implementation
    GameSetLighting("IceWorldNight", 0.0);
    TriggerEnable(gt_FrostBiteChanceIntense, true);
    while (true) {
        lv_int = 1;
        for ( ; ( (auto0B1DFBA2_ai >= 0 && lv_int <= auto0B1DFBA2_ae) || (auto0B1DFBA2_ai < 0 && lv_int >= auto0B1DFBA2_ae) ) ; lv_int += auto0B1DFBA2_ai ) {
            libNtve_gf_CreateModelAtPoint("Snow", CameraGetTarget(lv_int));
            lv_snowfall[lv_int] = libNtve_gf_ActorLastCreated();
        }
        Wait(1.5, c_timeGame);
        lv_int = 1;
        for ( ; ( (auto8F6C097B_ai >= 0 && lv_int <= auto8F6C097B_ae) || (auto8F6C097B_ai < 0 && lv_int >= auto8F6C097B_ae) ) ; lv_int += auto8F6C097B_ai ) {
            libNtve_gf_KillModel(lv_snowfall[lv_int]);
        }
    }
}

void gf_WeatherFogEventIntense () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto15B42A98_ae = 12;
    const int auto15B42A98_ai = 1;

    // Variable Initialization

    // Implementation
    TriggerEnable(gt_RandomFog, false);
    TriggerEnable(gt_RandomFogIntense, true);
    gv_intenseFog = true;
    gf_BlendFog(50.0, 50.0, 50.0, 3.0, 1.0, 8.0, 18.75);
    while ((gv_mod_Weather == true)) {
        lv_player = 1;
        for ( ; ( (auto15B42A98_ai >= 0 && lv_player <= auto15B42A98_ae) || (auto15B42A98_ai < 0 && lv_player >= auto15B42A98_ae) ) ; lv_player += auto15B42A98_ai ) {
            VisExploreArea(lv_player, RegionEntireMap(), false, false);
        }
        Wait(0.0625, c_timeGame);
    }
}

trigger auto_gf_BlendFog_Trigger = null;
fixed auto_gf_BlendFog_lp_colorR;
fixed auto_gf_BlendFog_lp_colorG;
fixed auto_gf_BlendFog_lp_colorB;
fixed auto_gf_BlendFog_lp_density;
fixed auto_gf_BlendFog_lp_falloff;
fixed auto_gf_BlendFog_lp_start;
fixed auto_gf_BlendFog_lp_blendtime;

void gf_BlendFog (fixed lp_colorR, fixed lp_colorG, fixed lp_colorB, fixed lp_density, fixed lp_falloff, fixed lp_start, fixed lp_blendtime) {
    auto_gf_BlendFog_lp_colorR = lp_colorR;
    auto_gf_BlendFog_lp_colorG = lp_colorG;
    auto_gf_BlendFog_lp_colorB = lp_colorB;
    auto_gf_BlendFog_lp_density = lp_density;
    auto_gf_BlendFog_lp_falloff = lp_falloff;
    auto_gf_BlendFog_lp_start = lp_start;
    auto_gf_BlendFog_lp_blendtime = lp_blendtime;

    if (auto_gf_BlendFog_Trigger == null) {
        auto_gf_BlendFog_Trigger = TriggerCreate("auto_gf_BlendFog_TriggerFunc");
    }

    TriggerExecute(auto_gf_BlendFog_Trigger, false, false);
}

bool auto_gf_BlendFog_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_colorR = auto_gf_BlendFog_lp_colorR;
    fixed lp_colorG = auto_gf_BlendFog_lp_colorG;
    fixed lp_colorB = auto_gf_BlendFog_lp_colorB;
    fixed lp_density = auto_gf_BlendFog_lp_density;
    fixed lp_falloff = auto_gf_BlendFog_lp_falloff;
    fixed lp_start = auto_gf_BlendFog_lp_start;
    fixed lp_blendtime = auto_gf_BlendFog_lp_blendtime;

    // Automatic Variable Declarations
    // Implementation
    FogSetColorOverTime(Color(lp_colorR, lp_colorG, lp_colorB), lp_blendtime);
    FogSetDensityOverTime(lp_density, lp_blendtime);
    FogSetFallOffOverTime(lp_falloff, lp_blendtime);
    FogSetStartHeightOverTime(lp_start, lp_blendtime);
    gv_fogvars[1] = lp_colorR;
    gv_fogvars[2] = lp_colorG;
    gv_fogvars[3] = lp_colorB;
    gv_fogvars[4] = lp_density;
    gv_fogvars[5] = lp_falloff;
    gv_fogvars[6] = lp_start;
    return true;
}

trigger auto_gf_ReducedVisionEffect_Trigger = null;

void gf_ReducedVisionEffect () {
    if (auto_gf_ReducedVisionEffect_Trigger == null) {
        auto_gf_ReducedVisionEffect_Trigger = TriggerCreate("auto_gf_ReducedVisionEffect_TriggerFunc");
    }

    TriggerExecute(auto_gf_ReducedVisionEffect_Trigger, false, false);
}

bool auto_gf_ReducedVisionEffect_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5519F322_g;
    int auto5519F322_var;

    // Implementation
    while ((gv_gameOver == false)) {
        auto5519F322_g = gv_players;
        auto5519F322_var = -1;
        while (true) {
            auto5519F322_var = PlayerGroupNextPlayer(auto5519F322_g, auto5519F322_var);
            if (auto5519F322_var < 0) { break; }
            if ((UnitIsAlive(gv_playerHeroes[auto5519F322_var]) == true) && (gv_playerNODson[auto5519F322_var] == false)) {
                UnitBehaviorAdd(gv_playerHeroes[auto5519F322_var], "ReducedVision", gv_playerHeroes[auto5519F322_var], 1);
            }
            else {
                UnitBehaviorRemove(gv_playerHeroes[auto5519F322_var], "ReducedVision", 1);
            }
        }
        Wait(1.0, c_timeReal);
    }
    return true;
}

bool gf_CyborgRifle () {
    // Automatic Variable Declarations
    unitgroup autoA0393E0B_g;
    int autoA0393E0B_u;
    unit autoA0393E0B_var;

    // Implementation
    autoA0393E0B_g = gv_heroesGroup;
    autoA0393E0B_u = UnitGroupCount(autoA0393E0B_g, c_unitCountAll);
    for (;; autoA0393E0B_u -= 1) {
        autoA0393E0B_var = UnitGroupUnitFromEnd(autoA0393E0B_g, autoA0393E0B_u);
        if (autoA0393E0B_var == null) { break; }
        if ((UnitHasBehavior(autoA0393E0B_var, "BorgEquipRifle"))) {
            return true;
            return false;
        }

    }
    return false;
}

bool gf_CyborgDMR () {
    // Automatic Variable Declarations
    unitgroup autoFA48D6F0_g;
    int autoFA48D6F0_u;
    unit autoFA48D6F0_var;

    // Implementation
    autoFA48D6F0_g = gv_heroesGroup;
    autoFA48D6F0_u = UnitGroupCount(autoFA48D6F0_g, c_unitCountAll);
    for (;; autoFA48D6F0_u -= 1) {
        autoFA48D6F0_var = UnitGroupUnitFromEnd(autoFA48D6F0_g, autoFA48D6F0_u);
        if (autoFA48D6F0_var == null) { break; }
        if ((UnitHasBehavior(autoFA48D6F0_var, "BorgEquipDMR"))) {
            return true;
            return false;
        }

    }
    return false;
}

bool gf_CyborgShotgun () {
    // Automatic Variable Declarations
    unitgroup auto80961305_g;
    int auto80961305_u;
    unit auto80961305_var;

    // Implementation
    auto80961305_g = gv_heroesGroup;
    auto80961305_u = UnitGroupCount(auto80961305_g, c_unitCountAll);
    for (;; auto80961305_u -= 1) {
        auto80961305_var = UnitGroupUnitFromEnd(auto80961305_g, auto80961305_u);
        if (auto80961305_var == null) { break; }
        if ((UnitHasBehavior(auto80961305_var, "BorgEquipShotgun"))) {
            return true;
            return false;
        }

    }
    return false;
}

bool gf_CyborgMG () {
    // Automatic Variable Declarations
    unitgroup autoBCEB37AF_g;
    int autoBCEB37AF_u;
    unit autoBCEB37AF_var;

    // Implementation
    autoBCEB37AF_g = gv_heroesGroup;
    autoBCEB37AF_u = UnitGroupCount(autoBCEB37AF_g, c_unitCountAll);
    for (;; autoBCEB37AF_u -= 1) {
        autoBCEB37AF_var = UnitGroupUnitFromEnd(autoBCEB37AF_g, autoBCEB37AF_u);
        if (autoBCEB37AF_var == null) { break; }
        if ((UnitHasBehavior(autoBCEB37AF_var, "BorgEquipMG"))) {
            return true;
            return false;
        }

    }
    return false;
}

bool gf_CyborgPlasma () {
    // Automatic Variable Declarations
    unitgroup autoE7CF5B64_g;
    int autoE7CF5B64_u;
    unit autoE7CF5B64_var;

    // Implementation
    autoE7CF5B64_g = gv_heroesGroup;
    autoE7CF5B64_u = UnitGroupCount(autoE7CF5B64_g, c_unitCountAll);
    for (;; autoE7CF5B64_u -= 1) {
        autoE7CF5B64_var = UnitGroupUnitFromEnd(autoE7CF5B64_g, autoE7CF5B64_u);
        if (autoE7CF5B64_var == null) { break; }
        if ((UnitHasBehavior(autoE7CF5B64_var, "BorgEquipPlasma"))) {
            return true;
            return false;
        }

    }
    return false;
}

trigger auto_gf_SpawnItem_Trigger = null;
string auto_gf_SpawnItem_lp_item;
int auto_gf_SpawnItem_lp_chance;

void gf_SpawnItem (string lp_item, int lp_chance) {
    auto_gf_SpawnItem_lp_item = lp_item;
    auto_gf_SpawnItem_lp_chance = lp_chance;

    if (auto_gf_SpawnItem_Trigger == null) {
        auto_gf_SpawnItem_Trigger = TriggerCreate("auto_gf_SpawnItem_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnItem_Trigger, false, false);
}

bool auto_gf_SpawnItem_TriggerFunc (bool testConds, bool runActions) {
    string lp_item = auto_gf_SpawnItem_lp_item;
    int lp_chance = auto_gf_SpawnItem_lp_chance;

    // Variable Declarations
    point lv_point;
    unit lv_droppod;
    unit lv_itemspawned;
    bool lv_itemisvisible;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    playergroup autoF74D277E_g;
    int autoF74D277E_var;

    // Variable Initialization
    lv_point = RegionRandomPoint(RegionPlayableMap());

    // Implementation
    while (true) {
        lv_point = RegionRandomPoint(RegionPlayableMap());
        if ((PointPathingPassable(lv_point) == true) && (gf_ItemCountCheck(lp_item) == true)) {
            break;
        }
        else {
            return true;
        }
    }
    if ((RandomInt(1, lp_chance) == 1)) {
        gf_SubstractItemFromPool(lp_item);
        Wait(RandomFixed(0.0, 1.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, 0, 0, lv_point);
        lv_itemspawned = UnitLastCreated();
        if ((lp_item == "Magazines")) {
            UnitAddChargeUsed(UnitLastCreated(), "AmmoCharges", -2.0);
            lv_chargecount = gf_chargesremaining(UnitLastCreated(), "AmmoCharges", 3.0);
            UnitSetInfoText(UnitLastCreated(), StringToText(""), (StringExternal("Param/Value/9F6C8268") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/E7309875") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/F2ED31AE")), StringToText(""));
        }

        autoF74D277E_g = gv_players;
        autoF74D277E_var = -1;
        while (true) {
            autoF74D277E_var = PlayerGroupNextPlayer(autoF74D277E_g, autoF74D277E_var);
            if (autoF74D277E_var < 0) { break; }
            if ((libNtve_gf_UnitIsVisibleToPlayer(lv_itemspawned, autoF74D277E_var) == true)) {
                lv_itemisvisible = true;
            }

        }
        if ((lv_itemisvisible == true)) {
            UnitBehaviorAdd(UnitLastCreated(), "NoDraw", UnitLastCreated(), 1);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lv_point);
            lv_droppod = UnitLastCreated();
            UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
            Wait(2.0, c_timeGame);
            UnitKill(lv_droppod);
            UnitBehaviorRemove(lv_itemspawned, "NoDraw", 1);
            Wait(2.0, c_timeGame);
            UnitRemove(lv_droppod);
        }

    }

    return true;
}

void gf_SpawnItemLoc (string lp_item, int lp_chance, point lp_loc) {
    // Variable Declarations
    unit lv_droppod;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((RandomInt(1, lp_chance) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, 0, 0, lp_loc);
        if ((lp_item == "Magazines")) {
            UnitAddChargeUsed(UnitLastCreated(), "AmmoCharges", -2.0);
            lv_chargecount = gf_chargesremaining(UnitLastCreated(), "AmmoCharges", 3.0);
            UnitSetInfoText(UnitLastCreated(), StringToText(""), (StringExternal("Param/Value/DEECB536") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/6687BCE9") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/60A70AF8")), StringToText(""));
        }
    }

}

trigger auto_gf_AirDropItemLoc_Trigger = null;
string auto_gf_AirDropItemLoc_lp_item;
point auto_gf_AirDropItemLoc_lp_loc;
int auto_gf_AirDropItemLoc_lp_chance;

void gf_AirDropItemLoc (string lp_item, point lp_loc, int lp_chance) {
    auto_gf_AirDropItemLoc_lp_item = lp_item;
    auto_gf_AirDropItemLoc_lp_loc = lp_loc;
    auto_gf_AirDropItemLoc_lp_chance = lp_chance;

    if (auto_gf_AirDropItemLoc_Trigger == null) {
        auto_gf_AirDropItemLoc_Trigger = TriggerCreate("auto_gf_AirDropItemLoc_TriggerFunc");
    }

    TriggerExecute(auto_gf_AirDropItemLoc_Trigger, false, false);
}

bool auto_gf_AirDropItemLoc_TriggerFunc (bool testConds, bool runActions) {
    string lp_item = auto_gf_AirDropItemLoc_lp_item;
    point lp_loc = auto_gf_AirDropItemLoc_lp_loc;
    int lp_chance = auto_gf_AirDropItemLoc_lp_chance;

    // Variable Declarations
    unit lv_itemspawned;
    unit lv_droppod;
    int lv_ping;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    if ((RandomInt(1, lp_chance) == 1)) {
        Wait(RandomFixed(0.0, 1.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, c_unitCreateIgnorePlacement, 0, lp_loc);
        lv_itemspawned = UnitLastCreated();
        if ((lp_item == "Magazines")) {
            UnitAddChargeUsed(UnitLastCreated(), "AmmoCharges", -2.0);
            lv_chargecount = gf_chargesremaining(UnitLastCreated(), "AmmoCharges", 3.0);
            UnitSetInfoText(UnitLastCreated(), StringToText(""), (StringExternal("Param/Value/AC76E5C8") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/60132E14") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/6E146557")), StringToText(""));
        }
        else if ((lp_item == "ShockPaddles")) {
            gv_shockPaddles = lv_itemspawned;
            gf_MissionItemPingAddItem(gv_shockPaddles);
            UnitBehaviorAdd(UnitLastCreated(), "NoDraw", UnitLastCreated(), 1);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lp_loc);
            lv_droppod = UnitLastCreated();
            UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
            Wait(2.0, c_timeGame);
            UnitKill(lv_droppod);
            UnitBehaviorRemove(gv_shockPaddles, "NoDraw", 1);
            Wait(2.0, c_timeGame);
            UnitRemove(lv_droppod);
            return true;
        }
        UnitBehaviorAdd(UnitLastCreated(), "NoDraw", UnitLastCreated(), 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lp_loc);
        lv_droppod = UnitLastCreated();
        UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
        Wait(2.0, c_timeGame);
        UnitKill(lv_droppod);
        UnitBehaviorRemove(lv_itemspawned, "NoDraw", 1);
        Wait(2.0, c_timeGame);
        UnitRemove(lv_droppod);
    }

    return true;
}

void gf_RemoveItemIfZero (unit lp_unit, string lp_chargestring, fixed lp_maxcharges) {
    // Automatic Variable Declarations
    string autoB990B7B0_val;

    // Implementation
    if ((UnitGetChargeUsed(lp_unit, lp_chargestring) == lp_maxcharges)) {
        autoB990B7B0_val = UnitGetType(lp_unit);
        if (autoB990B7B0_val == "MGL") {
            gf_ItemInventoryCount(6, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "MRL") {
            gf_ItemInventoryCount(7, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "40mmGrenade") {
            gf_ItemInventoryCount(28, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "FirstAidKit") {
            gf_ItemInventoryCount(31, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "QuikClot") {
            gf_ItemInventoryCount(32, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "FlareGun") {
            gf_ItemInventoryCount(34, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "GroundFlare") {
            gf_ItemInventoryCount(35, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "SmokeGrenade") {
            gf_ItemInventoryCount(36, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "ExplosiveCharge") {
            gf_ItemInventoryCount(41, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "C4Charge") {
            gf_ItemInventoryCount(42, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "PlasmaMine") {
            gf_ItemInventoryCount(43, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "Claymore") {
            gf_ItemInventoryCount(48, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "MRLRocket") {
            gf_ItemInventoryCount(50, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "FragGrenade") {
            gf_ItemInventoryCount(56, 2, UnitGetOwner(EventUnit()));
        }
        else if (autoB990B7B0_val == "Magazines") {
            gf_ItemInventoryCount(58, 2, UnitGetOwner(EventUnit()));
        }
        else {
        }
        UnitRemove(lp_unit);
    }

}

fixed gf_negativereal (fixed lp_real) {
    // Automatic Variable Declarations
    // Implementation
    return (0.0 - lp_real);
}

fixed gf_chargesremaining (unit lp_item, string lp_chargestring, fixed lp_maxcharges) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_maxcharges - UnitGetChargeUsed(lp_item, lp_chargestring));
}

bool gf_ItemNotInCooldown (unit lp_unit, string lp_itemtype, string lp_chargestring) {
    // Variable Declarations
    int lv_loopint;
    bool lv_cooldown;

    // Automatic Variable Declarations
    const int auto1EBDD94F_ae = 6;
    const int auto1EBDD94F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_loopint = 1;
    for ( ; ( (auto1EBDD94F_ai >= 0 && lv_loopint <= auto1EBDD94F_ae) || (auto1EBDD94F_ai < 0 && lv_loopint >= auto1EBDD94F_ae) ) ; lv_loopint += auto1EBDD94F_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == lp_itemtype) && (UnitGetCooldown(lp_unit, lp_chargestring) == 0.0)) {
            lv_cooldown = true;
        }

    }
    return lv_cooldown;
}

int gf_CountItemTypeUsed (string lp_itemtype, unit lp_unit, string lp_chargestring) {
    // Variable Declarations
    int lv_loopint;
    int lv_count;

    // Automatic Variable Declarations
    const int autoA5ABE62C_ae = 6;
    const int autoA5ABE62C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_loopint = 1;
    for ( ; ( (autoA5ABE62C_ai >= 0 && lv_loopint <= autoA5ABE62C_ae) || (autoA5ABE62C_ai < 0 && lv_loopint >= autoA5ABE62C_ae) ) ; lv_loopint += autoA5ABE62C_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == lp_itemtype) && (UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_loopint), lp_chargestring) >= 1.0)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

int gf_CountItemType (string lp_itemtype, unit lp_unit) {
    // Variable Declarations
    int lv_index;
    int lv_count;

    // Automatic Variable Declarations
    const int autoFC371FEA_ae = 6;
    const int autoFC371FEA_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoFC371FEA_ai >= 0 && lv_index <= autoFC371FEA_ae) || (autoFC371FEA_ai < 0 && lv_index >= autoFC371FEA_ae) ) ; lv_index += autoFC371FEA_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_unit, lv_index)) == lp_itemtype)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

unit gf_FirstItemType (string lp_itemtype, unit lp_unit) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    const int auto26521465_ae = 6;
    const int auto26521465_ai = 1;

    // Variable Initialization

    // Implementation
    lv_loopint = 1;
    for ( ; ( (auto26521465_ai >= 0 && lv_loopint <= auto26521465_ae) || (auto26521465_ai < 0 && lv_loopint >= auto26521465_ae) ) ; lv_loopint += auto26521465_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == lp_itemtype)) {
            return UnitInventoryItem(lp_unit, lv_loopint);
        }

    }
    return null;
}

unit gf_FirstAmmoUsed (unit lp_unit) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    const int auto7FC2B636_ae = 6;
    const int auto7FC2B636_ai = 1;

    // Variable Initialization

    // Implementation
    lv_loopint = 1;
    for ( ; ( (auto7FC2B636_ai >= 0 && lv_loopint <= auto7FC2B636_ae) || (auto7FC2B636_ai < 0 && lv_loopint >= auto7FC2B636_ae) ) ; lv_loopint += auto7FC2B636_ai ) {
        if ((UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_loopint), "AmmoCharges") >= 1.0) && ((UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == "Magazines") || (UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == "AmmoCase"))) {
            return UnitInventoryItem(lp_unit, lv_loopint);
        }

    }
    return null;
}

unit gf_FirstAmmoCaseUsed (unit lp_unit) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    const int autoAA52D19E_ae = 6;
    const int autoAA52D19E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_loopint = 1;
    for ( ; ( (autoAA52D19E_ai >= 0 && lv_loopint <= autoAA52D19E_ae) || (autoAA52D19E_ai < 0 && lv_loopint >= autoAA52D19E_ae) ) ; lv_loopint += autoAA52D19E_ai ) {
        if ((UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_loopint), "AmmoCharges") >= 1.0) && (UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == "AmmoCase")) {
            return UnitInventoryItem(lp_unit, lv_loopint);
        }

    }
    return null;
}

unit gf_First40mmGrenadeUsed (unit lp_unit) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    const int autoEB6B20B7_ae = 6;
    const int autoEB6B20B7_ai = 1;

    // Variable Initialization

    // Implementation
    lv_loopint = 1;
    for ( ; ( (autoEB6B20B7_ai >= 0 && lv_loopint <= autoEB6B20B7_ae) || (autoEB6B20B7_ai < 0 && lv_loopint >= autoEB6B20B7_ae) ) ; lv_loopint += autoEB6B20B7_ai ) {
        if ((UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_loopint), "ItemCharges") >= 1.0) && ((UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == "MGL") || (UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == "M5MAR"))) {
            return UnitInventoryItem(lp_unit, lv_loopint);
        }

    }
    return null;
}

unit gf_SameItemTypeUsed (unit lp_host, unit lp_firstitem, string lp_chargestring) {
    // Variable Declarations
    int lv_loopint;
    string lv_itemtype;

    // Automatic Variable Declarations
    const int auto986FA166_ae = 6;
    const int auto986FA166_ai = 1;

    // Variable Initialization
    lv_itemtype = UnitGetType(lp_firstitem);

    // Implementation
    lv_loopint = 1;
    for ( ; ( (auto986FA166_ai >= 0 && lv_loopint <= auto986FA166_ae) || (auto986FA166_ai < 0 && lv_loopint >= auto986FA166_ae) ) ; lv_loopint += auto986FA166_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_host, lv_loopint)) == lv_itemtype) && (lp_firstitem != UnitInventoryItem(lp_host, lv_loopint)) && (UnitGetChargeUsed(UnitInventoryItem(lp_host, lv_loopint), lp_chargestring) >= 1.0)) {
            return UnitInventoryItem(lp_host, lv_loopint);
        }

    }
    return null;
}

void gf_CombineItems (unit lp_reciever, unit lp_donator, string lp_chargestring, fixed lp_maxcharges) {
    // Variable Declarations
    fixed lv_difference;

    // Automatic Variable Declarations
    string autoD83E47D0_val;

    // Variable Initialization

    // Implementation
    if ((UnitGetChargeUsed(lp_donator, lp_chargestring) >= 1.0)) {
        lv_difference = UnitGetChargeUsed(lp_reciever, lp_chargestring);
        if ((lv_difference > (lp_maxcharges - UnitGetChargeUsed(lp_donator, lp_chargestring)))) {
            lv_difference = (gf_negativereal(lp_maxcharges) + UnitGetChargeUsed(lp_donator, lp_chargestring));
            autoD83E47D0_val = UnitGetType(lp_donator);
            if (autoD83E47D0_val == "MGL") {
                gf_ItemInventoryCount(6, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "MRL") {
                gf_ItemInventoryCount(7, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "40mmGrenade") {
                gf_ItemInventoryCount(28, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "EnergyCell") {
                gf_ItemInventoryCount(30, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "FirstAidKit") {
                gf_ItemInventoryCount(31, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "QuikClot") {
                gf_ItemInventoryCount(32, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "FlareGun") {
                gf_ItemInventoryCount(34, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "GroundFlare") {
                gf_ItemInventoryCount(35, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "SmokeGrenade") {
                gf_ItemInventoryCount(36, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "ExplosiveCharge") {
                gf_ItemInventoryCount(41, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "C4Charge") {
                gf_ItemInventoryCount(42, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "PlasmaMine") {
                gf_ItemInventoryCount(43, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "Claymore") {
                gf_ItemInventoryCount(48, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "MRLRocket") {
                gf_ItemInventoryCount(50, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "FragGrenade") {
                gf_ItemInventoryCount(56, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "AmmoCase") {
                gf_ItemInventoryCount(57, 2, UnitGetOwner(EventUnit()));
            }
            else if (autoD83E47D0_val == "Magazines") {
                gf_ItemInventoryCount(58, 2, UnitGetOwner(EventUnit()));
            }
            else {
            }
            UnitRemove(lp_donator);
            UnitAddChargeUsed(lp_reciever, lp_chargestring, lv_difference);
        }
        else {
            UnitAddChargeUsed(lp_reciever, lp_chargestring, gf_negativereal(lv_difference));
            UnitAddChargeUsed(lp_donator, lp_chargestring, lv_difference);
            gf_RemoveItemIfZero(lp_donator, lp_chargestring, lp_maxcharges);
        }
    }

}

void gf_DonateItems (unit lp_reciever, unit lp_donator, string lp_chargestring, fixed lp_maxchargesdonator) {
    // Variable Declarations
    fixed lv_difference;

    // Automatic Variable Declarations
    string autoF82D62B3_val;
    string auto337D4345_val;

    // Variable Initialization

    // Implementation
    lv_difference = UnitGetChargeUsed(lp_reciever, lp_chargestring);
    if ((lv_difference >= lp_maxchargesdonator) && (UnitGetChargeUsed(lp_donator, lp_chargestring) == 0.0)) {
        autoF82D62B3_val = UnitGetType(lp_donator);
        if (autoF82D62B3_val == "Magazines") {
            gf_ItemInventoryCount(58, 2, UnitGetOwner(EventUnit()));
        }
        else {
        }
        UnitRemove(lp_donator);
        UnitAddChargeUsed(lp_reciever, lp_chargestring, gf_negativereal(lp_maxchargesdonator));
    }
    else {
        if ((lv_difference >= gf_chargesremaining(lp_donator, lp_chargestring, lp_maxchargesdonator))) {
            lv_difference = gf_chargesremaining(lp_donator, lp_chargestring, lp_maxchargesdonator);
            auto337D4345_val = UnitGetType(lp_donator);
            if (auto337D4345_val == "MGL") {
                gf_ItemInventoryCount(6, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "MRL") {
                gf_ItemInventoryCount(7, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "40mmGrenade") {
                gf_ItemInventoryCount(28, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "EnergyCell") {
                gf_ItemInventoryCount(30, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "FirstAidKit") {
                gf_ItemInventoryCount(31, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "QuikClot") {
                gf_ItemInventoryCount(32, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "FlareGun") {
                gf_ItemInventoryCount(34, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "GroundFlare") {
                gf_ItemInventoryCount(35, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "SmokeGrenade") {
                gf_ItemInventoryCount(36, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "ExplosiveCharge") {
                gf_ItemInventoryCount(41, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "C4Charge") {
                gf_ItemInventoryCount(42, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "PlasmaMine") {
                gf_ItemInventoryCount(43, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "Claymore") {
                gf_ItemInventoryCount(48, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "MRLRocket") {
                gf_ItemInventoryCount(50, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "FragGrenade") {
                gf_ItemInventoryCount(56, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "AmmoCase") {
                gf_ItemInventoryCount(57, 2, UnitGetOwner(EventUnit()));
            }
            else if (auto337D4345_val == "Magazines") {
                gf_ItemInventoryCount(58, 2, UnitGetOwner(EventUnit()));
            }
            else {
            }
            UnitRemove(lp_donator);
        }
        else {
            UnitAddChargeUsed(lp_donator, lp_chargestring, lv_difference);
        }
        UnitAddChargeUsed(lp_reciever, lp_chargestring, gf_negativereal(lv_difference));
    }
    gf_RemoveItemIfZero(lp_donator, lp_chargestring, lp_maxchargesdonator);
}

void gf_UpdateItemTextChargeDisplay (unit lp_item) {
    // Variable Declarations
    unit lv_droppeditem;
    string lv_setredtint;
    string lv_returntint;
    string lv_weapontint;
    string lv_explosivetint;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_droppeditem = lp_item;
    lv_setredtint = "SetTintColor {255,0,0 2.000000}";
    lv_returntint = "SetTintColor 255,255,255";
    lv_weapontint = "SetTintColor 0,255,64";
    lv_explosivetint = "SetTintColor 255,181,106";
    lv_chargecount = FixedToInt(0.0);

    // Implementation
    if ((UnitGetType(lv_droppeditem) == "QuikClot")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 3.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/877553B8") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/C60932E6") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/F7EB26D5") + StringExternal("Param/Value/E156525E")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "AmmoCase") && (UnitGetChargeUsed(lv_droppeditem, "AmmoCharges") == 10.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_droppeditem, lv_setredtint);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/115D30B8") + UnitGetName(lv_droppeditem)), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "AmmoCase")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "AmmoCharges", 10.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/423BFB50") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/14F6E29D") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/216B8F44")), StringToText(""));
        libNtve_gf_SendActorMessageToUnit(lv_droppeditem, lv_returntint);
    }
    else if ((UnitGetType(lv_droppeditem) == "MGL") && (UnitGetChargeUsed(lv_droppeditem, "ItemCharges") == 10.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_droppeditem, lv_setredtint);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/2D0BD4C0") + (UnitGetName(lv_droppeditem) + StringExternal("Param/Value/01F2FE53"))), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "MGL")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 10.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/0162FCA6") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/9BA4DAC8") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/3212A499") + StringExternal("Param/Value/33A4DD91")), StringToText(""));
        libNtve_gf_SendActorMessageToUnit(lv_droppeditem, lv_explosivetint);
    }
    else if ((UnitGetType(lv_droppeditem) == "MRL") && (UnitGetChargeUsed(lv_droppeditem, "ItemCharges") == 3.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_droppeditem, lv_setredtint);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/4E9746A4") + (UnitGetName(lv_droppeditem) + StringExternal("Param/Value/010D30D7"))), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "MRL")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 3.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/99951C68") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/E548E163") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/AE6498C8") + StringExternal("Param/Value/D205656E")), StringToText(""));
        libNtve_gf_SendActorMessageToUnit(lv_droppeditem, lv_explosivetint);
    }
    else if ((UnitGetType(lv_droppeditem) == "MRLRocket")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 3.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/D4CB7E93") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/CD5EAA99") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/4B8F5CCB") + StringExternal("Param/Value/A606CAD5")), StringToText(""));
        libNtve_gf_SendActorMessageToUnit(lv_droppeditem, lv_explosivetint);
    }
    else if ((UnitGetType(lv_droppeditem) == "LLDR")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 5.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/AE6EF1CC") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/87DFDBCD") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/08F9C9C7")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "Magazines")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "AmmoCharges", 3.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/B25D3B2E") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/F12B7E6F") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/DA5F525C")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "C4Charge")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 3.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/88871C3D") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/8CFC13E5") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/3D2A1CF8")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "EnergyCell")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "EnergyCharges", 3.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/34FFEFB4") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/8F3A9941") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/2407D5FF") + StringExternal("Param/Value/E72A7700")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "FlareGun")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 5.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/0D04A74C") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/D797243A") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/F2F31818") + StringExternal("Param/Value/DB8B70A3")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "GroundFlare")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 5.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/3D130EA0") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/71C9BDEC") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/5BB33D79") + StringExternal("Param/Value/0EF2EF43")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "FragGrenade")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 5.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/42456225") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/C3F45C96") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/98CC84DA")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "FirstAidKit")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 5.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/9F487300") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/B1E25D6A") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/64514201") + StringExternal("Param/Value/57364549")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "ExplosiveCharge")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 12.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/CF12A8B8") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/7443F7C9") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/273718F6")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "PlasmaMine")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 3.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/06554300") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/58CD7D41") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/1B3AAF63")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "SmokeGrenade")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 5.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/F6B249FE") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/31D7CBDD") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/6275702E")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "Claymore")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 2.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/33C9238F") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/34846497") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/9145490A")), StringToText(""));
    }
    else if ((UnitGetType(lv_droppeditem) == "40mmGrenade")) {
        lv_chargecount = gf_chargesremaining(lv_droppeditem, "ItemCharges", 10.0);
        UnitSetInfoText(lp_item, StringToText(""), (StringExternal("Param/Value/DABF04C3") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/706E16CE") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/8D218590") + StringExternal("Param/Value/27C2FD83")), StringToText(""));
    }
    UnitSetFacing(lv_droppeditem, RandomFixed(360.0, 180.0), 0.0);
}

void gf_DropAllItemsImmediate (unit lp_dropper, fixed lp_spread) {
    // Variable Declarations
    fixed lv_difference;
    unit lv_u;
    point lv_pos;
    point lv_pos2;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto46FA7E21_g;
    int auto46FA7E21_u;

    // Variable Initialization
    lv_pos = UnitGetPosition(lp_dropper);

    // Implementation
    auto46FA7E21_g = UnitInventoryGroup(lp_dropper);
    auto46FA7E21_u = UnitGroupCount(auto46FA7E21_g, c_unitCountAll);
    for (;; auto46FA7E21_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto46FA7E21_g, auto46FA7E21_u);
        if (lv_u == null) { break; }
        while ((lv_i < 16)) {
            lv_pos2 = PointWithOffset(lv_pos, RandomFixed(((-lp_spread)), lp_spread), RandomFixed(((-lp_spread)), lp_spread));
            if ((PointPathingIsConnected(lv_pos, lv_pos2) == true)) {
                break;
            }

            lv_pos2 = null;
            lv_i += 1;
        }
        if ((lv_pos2 == null)) {
            lv_pos2 = lv_pos;
        }

        UnitSetPosition(lv_u, lv_pos2, false);
    }
}

void gf_ReloadSentry (unit lp_sentry, unit lp_magazine, fixed lp_value) {
    // Variable Declarations
    string lv_magazinetype;
    string lv_magazineitemtype;
    fixed lv_magazinemaxcharges;
    fixed lv_magazinecurrentcharges;
    fixed lv_magazinechargesneeded;
    unit lv_returnedmagazine;
    string lv_settint;
    fixed lv_valuecheck;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_magazinetype = UnitGetType(lp_magazine);
    lv_magazineitemtype = CatalogFieldValueGet(c_gameCatalogUnit, lv_magazinetype, "Item", c_playerAny);
    lv_magazinemaxcharges = CatalogFieldValueGetAsInt(c_gameCatalogItem, lv_magazineitemtype, "EffectCost.Charge.CountMax", c_playerAny);
    lv_magazinecurrentcharges = (lv_magazinemaxcharges - UnitGetChargeUsed(lp_magazine, "AmmoCharges"));
    lv_magazinechargesneeded = ((UnitGetPropertyFixed(lp_sentry, c_unitPropEnergyMax, c_unitPropCurrent) - UnitGetPropertyFixed(lp_sentry, c_unitPropEnergy, c_unitPropCurrent)) / lp_value);
    lv_settint = "SetTintColor {255,0,0 2.000000}";
    lv_valuecheck = UnitGetPropertyFixed(lp_sentry, c_unitPropEnergyPercent, c_unitPropCurrent);

    // Implementation
    if ((lv_valuecheck <= FixedToInt(75.0)) && (lv_magazinechargesneeded > 0.0) && (lv_magazinecurrentcharges > 0.0)) {
        if ((lv_magazinechargesneeded > lv_magazinecurrentcharges)) {
            UnitSetPropertyFixed(lp_sentry, c_unitPropEnergy, (UnitGetPropertyFixed(lp_sentry, c_unitPropEnergy, c_unitPropCurrent) + (lv_magazinecurrentcharges * lp_value)));
            lv_magazinecurrentcharges = 0.0;
        }
        else {
            UnitSetPropertyFixed(lp_sentry, c_unitPropEnergy, UnitGetPropertyFixed(lp_sentry, c_unitPropEnergyMax, c_unitPropCurrent));
            lv_magazinecurrentcharges -= FixedToInt(lv_magazinechargesneeded);
            if ((RandomFixed(0.0, 1.0) >= ModF(lv_magazinechargesneeded, 1.0))) {
            }
            else {
                lv_magazinecurrentcharges -= 1.0;
            }
        }
        SoundPlayOnUnit(SoundLink("AmmoBelt", -1), PlayerGroupAll(), lp_sentry, 0.0, 100.0, 0.0);
    }

    if ((UnitGetType(lp_magazine) == "Magazines") && (lv_magazinecurrentcharges <= 0.0)) {
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_magazinetype, 0, 0, PointWithOffset(UnitGetPosition(lp_sentry), 1.0, -1.0));
        lv_returnedmagazine = UnitLastCreated();
        libNtve_gf_UnitRemoveChargeUsed(lv_returnedmagazine, "AmmoCharges");
        UnitAddChargeUsed(lv_returnedmagazine, "AmmoCharges", (lv_magazinemaxcharges - lv_magazinecurrentcharges));
        if ((UnitGetType(lv_returnedmagazine) == "Magazines")) {
            lv_chargecount = gf_chargesremaining(lv_returnedmagazine, "AmmoCharges", 3.0);
            UnitSetInfoText(lv_returnedmagazine, StringToText(""), (StringExternal("Param/Value/1C63EFCE") + UnitGetName(lv_returnedmagazine) + StringExternal("Param/Value/6E69FB4E") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/CFD97F7F")), StringToText(""));
        }
        else if ((UnitGetType(lv_returnedmagazine) == "AmmoCase")) {
            lv_chargecount = gf_chargesremaining(lv_returnedmagazine, "AmmoCharges", 10.0);
            UnitSetInfoText(lv_returnedmagazine, StringToText(""), (StringExternal("Param/Value/C802CAC8") + UnitGetName(lv_returnedmagazine) + StringExternal("Param/Value/51010476") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/9E8D6774")), StringToText(""));
            if ((lv_chargecount == 0.0)) {
                libNtve_gf_SendActorMessageToUnit(lv_returnedmagazine, lv_settint);
            }
        }
    }
    UnitInventoryRemove(lp_magazine);
}

trigger auto_gf_SubstractItemFromPool_Trigger = null;
string auto_gf_SubstractItemFromPool_lp_item;

void gf_SubstractItemFromPool (string lp_item) {
    auto_gf_SubstractItemFromPool_lp_item = lp_item;

    if (auto_gf_SubstractItemFromPool_Trigger == null) {
        auto_gf_SubstractItemFromPool_Trigger = TriggerCreate("auto_gf_SubstractItemFromPool_TriggerFunc");
    }

    TriggerExecute(auto_gf_SubstractItemFromPool_Trigger, false, false);
}

bool auto_gf_SubstractItemFromPool_TriggerFunc (bool testConds, bool runActions) {
    string lp_item = auto_gf_SubstractItemFromPool_lp_item;

    // Automatic Variable Declarations
    string autoA9242F99_val;

    // Implementation
    autoA9242F99_val = lp_item;
    if (autoA9242F99_val == "APRounds") {
        gv_itemLimit.lv_aPRound -= 1;
    }
    else if (autoA9242F99_val == "DURounds") {
        gv_itemLimit.lv_dURound -= 1;
    }
    else if (autoA9242F99_val == "LiftBoots") {
        gv_itemLimit.lv_liftBoot -= 1;
    }
    else if (autoA9242F99_val == "KineticIntegrator") {
        gv_itemLimit.lv_kineticIntegrator -= 1;
    }
    else if (autoA9242F99_val == "USMCR") {
        gv_itemLimit.lv_uSMCR -= 1;
    }
    else if (autoA9242F99_val == "HK42") {
        gv_itemLimit.lv_hK42 -= 1;
    }
    else if (autoA9242F99_val == "StynerSPR") {
        gv_itemLimit.lv_stynerBR2 -= 1;
    }
    else if (autoA9242F99_val == "StynerBR3") {
        gv_itemLimit.lv_stynerBR3 -= 1;
    }
    else if (autoA9242F99_val == "SOFAR") {
        gv_itemLimit.lv_sOFAR -= 1;
    }
    else if (autoA9242F99_val == "ATLASX50") {
        gv_itemLimit.lv_atlasX50 -= 1;
    }
    else if (autoA9242F99_val == "IDMR2") {
        gv_itemLimit.lv_iDMR2 -= 1;
    }
    else if (autoA9242F99_val == "M92Torrent") {
        gv_itemLimit.lv_m92Torrent -= 1;
    }
    else if (autoA9242F99_val == "XR900") {
        gv_itemLimit.lv_xR900 -= 1;
    }
    else if (autoA9242F99_val == "M41SAW") {
        gv_itemLimit.lv_m41SAW -= 1;
    }
    else if (autoA9242F99_val == "M241MMG") {
        gv_itemLimit.lv_m241MMG -= 1;
    }
    else if (autoA9242F99_val == "M135Minigun") {
        gv_itemLimit.lv_m135Minigun -= 1;
    }
    else if (autoA9242F99_val == "M79Flamethrower") {
        gv_itemLimit.lv_m79Flamethrower -= 1;
    }
    else if (autoA9242F99_val == "Inferno") {
        gv_itemLimit.lv_inferno -= 1;
    }
    else if (autoA9242F99_val == "IPR") {
        gv_itemLimit.lv_iPR -= 1;
    }
    else if (autoA9242F99_val == "XM88BPhasedPlasmaRifle") {
        gv_itemLimit.lv_xM88b -= 1;
    }
    else if (autoA9242F99_val == "PR34E") {
        gv_itemLimit.lv_pR34E -= 1;
    }
    else if (autoA9242F99_val == "PR42C") {
        gv_itemLimit.lv_pR42C -= 1;
    }
    else if (autoA9242F99_val == "ISS7") {
        gv_itemLimit.lv_iSS7 -= 1;
    }
    else if (autoA9242F99_val == "AA12") {
        gv_itemLimit.lv_aA12 -= 1;
    }
    else if (autoA9242F99_val == "M1014") {
        gv_itemLimit.lv_m1014 -= 1;
    }
    else if (autoA9242F99_val == "AS50Bipod") {
        gv_itemLimit.lv_aS50Custom -= 1;
    }
    else if (autoA9242F99_val == "D20LaserRifle") {
        gv_itemLimit.lv_d20LaserRifle -= 1;
    }
    else {
    }
    return true;
}

bool gf_ItemCountCheck (string lp_item) {
    // Automatic Variable Declarations
    string auto7492F6CC_val;

    // Implementation
    auto7492F6CC_val = lp_item;
    if (auto7492F6CC_val == "APRounds") {
        if ((gv_itemLimit.lv_aPRound == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "DURounds") {
        if ((gv_itemLimit.lv_dURound == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "LiftBoots") {
        if ((gv_itemLimit.lv_liftBoot == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "KineticIntegrator") {
        if ((gv_itemLimit.lv_kineticIntegrator == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "USMCR") {
        if ((gv_itemLimit.lv_uSMCR == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "HK42") {
        if ((gv_itemLimit.lv_hK42 == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "StynerSPR") {
        if ((gv_itemLimit.lv_stynerBR2 == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "StynerBR3") {
        if ((gv_itemLimit.lv_stynerBR3 == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "SOFAR") {
        if ((gv_itemLimit.lv_sOFAR == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "ATLASX50") {
        if ((gv_itemLimit.lv_atlasX50 == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "IDMR2") {
        if ((gv_itemLimit.lv_iDMR2 == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "M92Torrent") {
        if ((gv_itemLimit.lv_m92Torrent == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "XR900") {
        if ((gv_itemLimit.lv_xR900 == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "M41SAW") {
        if ((gv_itemLimit.lv_m41SAW == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "M241MMG") {
        if ((gv_itemLimit.lv_m241MMG == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "M135Minigun") {
        if ((gv_itemLimit.lv_m135Minigun == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "M79Flamethrower") {
        if ((gv_itemLimit.lv_m79Flamethrower == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "Inferno") {
        if ((gv_itemLimit.lv_inferno == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "IPR") {
        if ((gv_itemLimit.lv_iPR == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "XM88BPhasedPlasmaRifle") {
        if ((gv_itemLimit.lv_xM88b == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "PR34E") {
        if ((gv_itemLimit.lv_pR34E == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "PR42C") {
        if ((gv_itemLimit.lv_pR42C == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "ISS7") {
        if ((gv_itemLimit.lv_iSS7 == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "AA12") {
        if ((gv_itemLimit.lv_aA12 == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "M1014") {
        if ((gv_itemLimit.lv_m1014 == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "AS50Bipod") {
        if ((gv_itemLimit.lv_aS50Custom == 0)) {
            return false;
        }
    }
    else if (auto7492F6CC_val == "D20LaserRifle") {
        if ((gv_itemLimit.lv_d20LaserRifle == 0)) {
            return false;
        }
    }
    else {
        return true;
    }
    return true;
}

void gf_WeaponCacheSpawnItem (string lp_itemUnitType, int lp_number, region lp_cacheSite) {
    // Variable Declarations
    bool lv_succeed;
    int lv_tries;
    int lv_spawnnumber;
    point lv_where;
    point lv_from;

    // Automatic Variable Declarations
    int auto485ACB19_n;
    int auto485ACB19_i;
    const int auto363911DA_n = 8;
    int auto363911DA_i;

    // Variable Initialization
    lv_from = RegionGetCenter(lp_cacheSite);

    // Implementation
    auto485ACB19_n = lp_number;
    for (auto485ACB19_i = 1; auto485ACB19_i <= auto485ACB19_n; auto485ACB19_i += 1) {
        lv_succeed = false;
        for (auto363911DA_i = 1; auto363911DA_i <= auto363911DA_n; auto363911DA_i += 1) {
            lv_where = RegionRandomPoint(lp_cacheSite);
            if ((PointPathingPassable(lv_where) == true) && (PointPathingIsConnected(lv_from, lv_where) == true)) {
                lv_succeed = true;
                break;
            }

        }
        if ((lv_succeed == false)) {
            lv_where = lv_from;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_itemUnitType, c_unitCreateIgnorePlacement, 0, lv_where);
    }
}

trigger auto_gf_DropShellatTarget_Trigger = null;
point auto_gf_DropShellatTarget_lp_target;
string auto_gf_DropShellatTarget_lp_effect;
int auto_gf_DropShellatTarget_lp_player;

void gf_DropShellatTarget (point lp_target, string lp_effect, int lp_player) {
    auto_gf_DropShellatTarget_lp_target = lp_target;
    auto_gf_DropShellatTarget_lp_effect = lp_effect;
    auto_gf_DropShellatTarget_lp_player = lp_player;

    if (auto_gf_DropShellatTarget_Trigger == null) {
        auto_gf_DropShellatTarget_Trigger = TriggerCreate("auto_gf_DropShellatTarget_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropShellatTarget_Trigger, false, false);
}

bool auto_gf_DropShellatTarget_TriggerFunc (bool testConds, bool runActions) {
    point lp_target = auto_gf_DropShellatTarget_lp_target;
    string lp_effect = auto_gf_DropShellatTarget_lp_effect;
    int lp_player = auto_gf_DropShellatTarget_lp_player;

    // Variable Declarations
    actor lv_tempactor;
    unit lv_dummyunit;
    point lv_dummypoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dummypoint = PointWithOffsetPolar(lp_target, 10.0, RandomFixed(125.0, 145.0));

    // Implementation
    if ((RegionContainsPoint(RegionEntireMap(), lv_dummypoint) == false)) {
        lv_dummypoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_dummypoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_dummypoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    }

    libNtve_gf_UnitCreateFacingPoint(1, "CasterDummy", c_unitCreateIgnorePlacement, lp_player, lv_dummypoint, lp_target);
    lv_dummyunit = UnitLastCreated();
    UnitBehaviorAdd(lv_dummyunit, "KillsToCaster", gv_playerHeroes[lp_player], 1);
    if ((lp_effect == "WhitePhosphorousLaunch")) {
        UnitCreateEffectPoint(lv_dummyunit, lp_effect, lp_target);
        Wait(25.0, c_timeGame);
        UnitRemove(lv_dummyunit);
    }
    else {
        libNtve_gf_CreateActorAtPoint("CallForFireWarningTracerPing", lp_target);
        lv_tempactor = libNtve_gf_ActorLastCreated();
        UnitCreateEffectPoint(lv_dummyunit, lp_effect, lp_target);
        Wait(0.2, c_timeGame);
        ActorSend(lv_tempactor, "Destroy");
        Wait(3.8, c_timeGame);
        UnitRemove(lv_dummyunit);
    }
    return true;
}

trigger auto_gf_PlanePathing_Trigger = null;
unit auto_gf_PlanePathing_lp_unit;
point auto_gf_PlanePathing_lp_triggerAbilityPoint;

void gf_PlanePathing (unit lp_unit, point lp_triggerAbilityPoint) {
    auto_gf_PlanePathing_lp_unit = lp_unit;
    auto_gf_PlanePathing_lp_triggerAbilityPoint = lp_triggerAbilityPoint;

    if (auto_gf_PlanePathing_Trigger == null) {
        auto_gf_PlanePathing_Trigger = TriggerCreate("auto_gf_PlanePathing_TriggerFunc");
    }

    TriggerExecute(auto_gf_PlanePathing_Trigger, false, false);
}

bool auto_gf_PlanePathing_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_PlanePathing_lp_unit;
    point lp_triggerAbilityPoint = auto_gf_PlanePathing_lp_triggerAbilityPoint;

    // Variable Declarations
    point lv_unitPosition;
    point lv_newCoordinates;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(1.5, c_timeGame);
    while ((UnitGetHeight(lp_unit) <= 12.0) && (UnitIsAlive(lp_unit) == true)) {
        lv_unitPosition = UnitGetPosition(lp_unit);
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(lp_unit) == true) && (lv_unitPosition == UnitGetPosition(lp_unit))) {
            lv_newCoordinates = PointWithOffsetPolar(lp_triggerAbilityPoint, 60.0, (UnitGetFacing(lp_unit) - 100.0));
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_newCoordinates), c_orderQueueAddToEnd);
            break;
        }
        else {
            lv_unitPosition = null;
        }
    }
    return true;
}

string gf_randomLNtype () {
    // Variable Declarations
    int lv_randomDigit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_randomDigit = RandomInt(1, 20);
    if ((lv_randomDigit <= 6)) {
        gv_lNRiflemanAvailable += 1;
        return "LNRifleman";
    }
    else if ((lv_randomDigit > 6) && (lv_randomDigit <= 9)) {
        gv_lNAutomaticRiflemanAvailable += 1;
        return "LNAutomaticRifleman";
    }
    else if ((lv_randomDigit > 9) && (lv_randomDigit <= 11)) {
        gv_lN68WCombatMedicAvailable += 1;
        return "LN68WCombatMedic";
    }
    else if ((lv_randomDigit > 11) && (lv_randomDigit <= 14)) {
        gv_lN74DFlamethrowerAvailable += 1;
        return "LN74DFlamethrower";
    }
    else if ((lv_randomDigit > 14) && (lv_randomDigit <= 16)) {
        gv_lNSquadDesignatedMarksmanAvailable += 1;
        return "LNSquadDesignatedMarksman";
    }
    else if ((lv_randomDigit > 16) && (lv_randomDigit <= 18)) {
        gv_lNCombatEngineerAvailable += 1;
        return "LNCombatEngineer";
    }
    else if ((lv_randomDigit > 18) && (lv_randomDigit <= 20)) {
        gv_lNJavelinGunnerAvailable += 1;
        return "LNJavelinGunner";
    }
    return "LNRifleman";
}

string gf_randomLNtypeCC () {
    // Variable Declarations
    int lv_randomDigit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_randomDigit = RandomInt(1, 20);
    if ((lv_randomDigit <= 6)) {
        gv_lNRiflemanAvailable += 1;
        return "LNRifleman2";
    }
    else if ((lv_randomDigit > 6) && (lv_randomDigit <= 9)) {
        gv_lNAutomaticRiflemanAvailable += 1;
        return "LNAutomaticRifleman2";
    }
    else if ((lv_randomDigit > 9) && (lv_randomDigit <= 11)) {
        gv_lN68WCombatMedicAvailable += 1;
        return "LN68WCombatMedic2";
    }
    else if ((lv_randomDigit > 11) && (lv_randomDigit <= 14)) {
        gv_lN74DFlamethrowerAvailable += 1;
        return "LN74DFlamethrower2";
    }
    else if ((lv_randomDigit > 14) && (lv_randomDigit <= 16)) {
        gv_lNSquadDesignatedMarksmanAvailable += 1;
        return "LNSquadDesignatedMarksman2";
    }
    else if ((lv_randomDigit > 16) && (lv_randomDigit <= 18)) {
        gv_lNCombatEngineerAvailable += 1;
        return "LNCombatEngineer2";
    }
    else if ((lv_randomDigit > 18) && (lv_randomDigit <= 20)) {
        gv_lNJavelinGunnerAvailable += 1;
        return "LNJavelinGunner2";
    }
    return "LNRifleman2";
}

void gf_DropItem (unit lp_dropper, fixed lp_spread) {
    // Variable Declarations
    fixed lv_difference;
    unit lv_u;
    point lv_pos;
    point lv_pos2;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pos = UnitGetPosition(lp_dropper);

    // Implementation
    while ((lv_i < 16)) {
        lv_pos2 = PointWithOffset(lv_pos, RandomFixed(((-lp_spread)), lp_spread), RandomFixed(((-lp_spread)), lp_spread));
        if ((PointPathingIsConnected(lv_pos, lv_pos2) == true)) {
            break;
        }

        lv_pos2 = null;
        lv_i += 1;
    }
    if ((lv_pos2 == null)) {
        lv_pos2 = lv_pos;
    }

    UnitSetPosition(lp_dropper, lv_pos2, false);
}

void gf_LaserDesignateUnit (unit lp_targetUnit) {
    // Variable Declarations
    unit[13] lv_model;

    // Automatic Variable Declarations
    playergroup auto056E8EEF_g;
    int auto056E8EEF_var;
    playergroup auto9DBEED18_g;
    int auto9DBEED18_var;

    // Variable Initialization

    // Implementation
    UnitGroupAdd(gv_laserDesignatorTarget, lp_targetUnit);
    auto056E8EEF_g = gv_players;
    auto056E8EEF_var = -1;
    while (true) {
        auto056E8EEF_var = PlayerGroupNextPlayer(auto056E8EEF_g, auto056E8EEF_var);
        if (auto056E8EEF_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(lp_targetUnit, true, auto056E8EEF_var);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LaserDesignatedPoint", c_unitCreateIgnorePlacement, auto056E8EEF_var, UnitGetPosition(lp_targetUnit));
        lv_model[auto056E8EEF_var] = UnitLastCreated();
        UnitCreateEffectUnit(UnitLastCreated(), "LaserDesignatedAttackPoint", lp_targetUnit);
    }
    gf_EventSetWriteOut(gf_RaiseEvent(StringToText(gv_RedText) + UnitGetName(lp_targetUnit) + StringToText(" " + gv_GreenText + "has been designated!"), 2, 3.0), true, 1.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (TextWithColor(UnitTypeGetName(UnitGetType(lp_targetUnit)), Color(50.20, 0.00, 50.20)) + StringExternal("Param/Value/4B7135CE")));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(lp_targetUnit), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 4.0, 270.0);
    PingSetUnit(PingLastCreated(), lp_targetUnit);
    while (!((UnitHasBehavior(lp_targetUnit, "LaserDesignator") == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitGroupRemove(gv_laserDesignatorTarget, lp_targetUnit);
    auto9DBEED18_g = gv_players;
    auto9DBEED18_var = -1;
    while (true) {
        auto9DBEED18_var = PlayerGroupNextPlayer(auto9DBEED18_g, auto9DBEED18_var);
        if (auto9DBEED18_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(lp_targetUnit, false, auto9DBEED18_var);
        UnitRemove(lv_model[auto9DBEED18_var]);
    }
}

void gf_SystemRestore (unit lp_robot) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorRemove(lp_robot, "OrbitalStrikeEMP", 1);
    UnitBehaviorRemove(lp_robot, "OrbitalStrikeEMPMovement", 1);
    UnitBehaviorAdd(lp_robot, "SystemRestoreCooldown", lp_robot, 1);
}

void gf_SaveBankSimple (int lp_player) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    const int auto45BB641D_ae = 19;
    const int auto45BB641D_ai = 1;
    const int auto8B853E67_ae = 40;
    const int auto8B853E67_ai = 1;
    const int autoC4DB3458_ae = gv_achievementCount;
    const int autoC4DB3458_ai = 1;
    const int auto0CBE7721_ae = gv_camos;
    const int auto0CBE7721_ai = 1;
    const int autoD027FBF0_ae = gv_decals;
    const int autoD027FBF0_ai = 1;
    const int auto33D8A266_ae = gv_sIcount;
    const int auto33D8A266_ai = 1;
    const int auto51304472_ae = gv_accessories;
    const int auto51304472_ai = 1;
    const int auto8920FE16_ae = gv_miscUnlockCount;
    const int auto8920FE16_ai = 1;

    // Variable Initialization

    // Implementation
    BankSectionCreate(gv_banks[lp_player], "A");
    BankSectionCreate(gv_banks[lp_player], "B");
    BankSectionCreate(gv_banks[lp_player], "C");
    BankSectionCreate(gv_banks[lp_player], "D");
    BankSectionCreate(gv_banks[lp_player], "E");
    BankSectionCreate(gv_banks[lp_player], "F");
    BankSectionCreate(gv_banks[lp_player], "G");
    BankSectionCreate(gv_banks[lp_player], "H");
    BankValueSetFromInt(gv_banks[lp_player], "A", "1", gv_bankVersion);
    BankValueSetFromInt(gv_banks[lp_player], "A", "2", gv_playerExperience[1][lp_player]);
    BankValueSetFromInt(gv_banks[lp_player], "A", "3", gv_playerExperience[2][lp_player]);
    BankValueSetFromInt(gv_banks[lp_player], "A", "4", gv_playerExperience[3][lp_player]);
    BankValueSetFromInt(gv_banks[lp_player], "A", "5", gv_playerGamesPlayed[lp_player]);
    BankValueSetFromInt(gv_banks[lp_player], "A", "6", gv_playerRevives[lp_player]);
    BankValueSetFromInt(gv_banks[lp_player], "A", "7", gv_playerAvgGameTime[lp_player]);
    BankValueSetFromInt(gv_banks[lp_player], "A", "8", gv_funcdialogoffsets[1][lp_player]);
    BankValueSetFromInt(gv_banks[lp_player], "A", "9", gv_funcdialogoffsets[2][lp_player]);
    lv_loopint = 10;
    for ( ; ( (auto45BB641D_ai >= 0 && lv_loopint <= auto45BB641D_ae) || (auto45BB641D_ai < 0 && lv_loopint >= auto45BB641D_ae) ) ; lv_loopint += auto45BB641D_ai ) {
        BankValueSetFromInt(gv_banks[lp_player], "A", IntToString(lv_loopint), 0);
    }
    lv_loopint = 1;
    for ( ; ( (auto8B853E67_ai >= 0 && lv_loopint <= auto8B853E67_ae) || (auto8B853E67_ai < 0 && lv_loopint >= auto8B853E67_ae) ) ; lv_loopint += auto8B853E67_ai ) {
        BankValueSetFromInt(gv_banks[lp_player], "B", IntToString(lv_loopint), gv_gamesWon[lv_loopint][lp_player]);
    }
    lv_loopint = 1;
    for ( ; ( (autoC4DB3458_ai >= 0 && lv_loopint <= autoC4DB3458_ae) || (autoC4DB3458_ai < 0 && lv_loopint >= autoC4DB3458_ae) ) ; lv_loopint += autoC4DB3458_ai ) {
        BankValueSetFromFlag(gv_banks[lp_player], "C", IntToString(lv_loopint), gv_achievementUnlocked[lv_loopint][lp_player]);
    }
    lv_loopint = 1;
    for ( ; ( (auto0CBE7721_ai >= 0 && lv_loopint <= auto0CBE7721_ae) || (auto0CBE7721_ai < 0 && lv_loopint >= auto0CBE7721_ae) ) ; lv_loopint += auto0CBE7721_ai ) {
        BankValueSetFromFlag(gv_banks[lp_player], "D", IntToString(lv_loopint), gv_playercamounlocked[lv_loopint][lp_player]);
    }
    lv_loopint = 1;
    for ( ; ( (autoD027FBF0_ai >= 0 && lv_loopint <= autoD027FBF0_ae) || (autoD027FBF0_ai < 0 && lv_loopint >= autoD027FBF0_ae) ) ; lv_loopint += autoD027FBF0_ai ) {
        BankValueSetFromFlag(gv_banks[lp_player], "E", IntToString(lv_loopint), gv_playerdecalunlocked[lv_loopint][lp_player]);
    }
    lv_loopint = 1;
    for ( ; ( (auto33D8A266_ai >= 0 && lv_loopint <= auto33D8A266_ae) || (auto33D8A266_ai < 0 && lv_loopint >= auto33D8A266_ae) ) ; lv_loopint += auto33D8A266_ai ) {
        BankValueSetFromFlag(gv_banks[lp_player], "F", IntToString(lv_loopint), gv_sIunlocked[lv_loopint][lp_player]);
    }
    lv_loopint = 1;
    for ( ; ( (auto51304472_ai >= 0 && lv_loopint <= auto51304472_ae) || (auto51304472_ai < 0 && lv_loopint >= auto51304472_ae) ) ; lv_loopint += auto51304472_ai ) {
        BankValueSetFromFlag(gv_banks[lp_player], "G", IntToString(lv_loopint), gv_playeraccessoryunlocked[lv_loopint][lp_player]);
    }
    lv_loopint = 1;
    for ( ; ( (auto8920FE16_ai >= 0 && lv_loopint <= auto8920FE16_ae) || (auto8920FE16_ai < 0 && lv_loopint >= auto8920FE16_ae) ) ; lv_loopint += auto8920FE16_ai ) {
        BankValueSetFromFlag(gv_banks[lp_player], "H", IntToString(lv_loopint), gv_miscUnlocks[lv_loopint][lp_player]);
    }
    BankSave(gv_banks[lp_player]);
}

bool gf_LoadBankSimple (int lp_player) {
    // Variable Declarations
    int lv_version;
    int lv_loopint;

    // Automatic Variable Declarations
    const int autoDE4CC3CD_ae = 40;
    const int autoDE4CC3CD_ai = 1;
    const int auto8D710C30_ae = gv_achievementCount;
    const int auto8D710C30_ai = 1;
    const int autoB6048B66_ae = gv_camos;
    const int autoB6048B66_ai = 1;
    const int autoA0B1D14A_ae = gv_decals;
    const int autoA0B1D14A_ai = 1;
    const int auto324AC33E_ae = gv_sIcount;
    const int auto324AC33E_ai = 1;
    const int auto5B69D4F5_ae = gv_accessories;
    const int auto5B69D4F5_ai = 1;
    const int auto2773D922_ae = gv_miscUnlockCount;
    const int auto2773D922_ai = 1;

    // Variable Initialization

    // Implementation
    BankLoad(gv_uACBANKNAME, lp_player);
    gv_banks[lp_player] = BankLastCreated();
    lv_version = BankValueGetAsInt(gv_banks[lp_player], "A", "1");
    if ((lv_version != 1)) {
        return false;
        return false;
    }

    gv_playerExperience[1][lp_player] = BankValueGetAsInt(gv_banks[lp_player], "A", "2");
    gv_playerExperience[2][lp_player] = BankValueGetAsInt(gv_banks[lp_player], "A", "3");
    gv_playerExperience[3][lp_player] = BankValueGetAsInt(gv_banks[lp_player], "A", "4");
    gv_playerGamesPlayed[lp_player] = BankValueGetAsInt(gv_banks[lp_player], "A", "5");
    gv_playerRevives[lp_player] = BankValueGetAsInt(gv_banks[lp_player], "A", "6");
    gv_playerAvgGameTime[lp_player] = BankValueGetAsInt(gv_banks[lp_player], "A", "7");
    gv_funcdialogoffsets[1][lp_player] = BankValueGetAsInt(gv_banks[lp_player], "A", "8");
    gv_funcdialogoffsets[2][lp_player] = BankValueGetAsInt(gv_banks[lp_player], "A", "9");
    lv_loopint = 1;
    for ( ; ( (autoDE4CC3CD_ai >= 0 && lv_loopint <= autoDE4CC3CD_ae) || (autoDE4CC3CD_ai < 0 && lv_loopint >= autoDE4CC3CD_ae) ) ; lv_loopint += autoDE4CC3CD_ai ) {
        gv_gamesWon[lv_loopint][lp_player] = BankValueGetAsInt(gv_banks[lp_player], "B", IntToString(lv_loopint));
    }
    lv_loopint = 1;
    for ( ; ( (auto8D710C30_ai >= 0 && lv_loopint <= auto8D710C30_ae) || (auto8D710C30_ai < 0 && lv_loopint >= auto8D710C30_ae) ) ; lv_loopint += auto8D710C30_ai ) {
        gv_achievementUnlocked[lv_loopint][lp_player] = BankValueGetAsFlag(gv_banks[lp_player], "C", IntToString(lv_loopint));
    }
    lv_loopint = 1;
    for ( ; ( (autoB6048B66_ai >= 0 && lv_loopint <= autoB6048B66_ae) || (autoB6048B66_ai < 0 && lv_loopint >= autoB6048B66_ae) ) ; lv_loopint += autoB6048B66_ai ) {
        gv_playercamounlocked[lv_loopint][lp_player] = BankValueGetAsFlag(gv_banks[lp_player], "D", IntToString(lv_loopint));
    }
    lv_loopint = 1;
    for ( ; ( (autoA0B1D14A_ai >= 0 && lv_loopint <= autoA0B1D14A_ae) || (autoA0B1D14A_ai < 0 && lv_loopint >= autoA0B1D14A_ae) ) ; lv_loopint += autoA0B1D14A_ai ) {
        gv_playerdecalunlocked[lv_loopint][lp_player] = BankValueGetAsFlag(gv_banks[lp_player], "E", IntToString(lv_loopint));
    }
    lv_loopint = 1;
    for ( ; ( (auto324AC33E_ai >= 0 && lv_loopint <= auto324AC33E_ae) || (auto324AC33E_ai < 0 && lv_loopint >= auto324AC33E_ae) ) ; lv_loopint += auto324AC33E_ai ) {
        gv_sIunlocked[lv_loopint][lp_player] = BankValueGetAsFlag(gv_banks[lp_player], "F", IntToString(lv_loopint));
    }
    lv_loopint = 1;
    for ( ; ( (auto5B69D4F5_ai >= 0 && lv_loopint <= auto5B69D4F5_ae) || (auto5B69D4F5_ai < 0 && lv_loopint >= auto5B69D4F5_ae) ) ; lv_loopint += auto5B69D4F5_ai ) {
        gv_playeraccessoryunlocked[lv_loopint][lp_player] = BankValueGetAsFlag(gv_banks[lp_player], "G", IntToString(lv_loopint));
    }
    lv_loopint = 1;
    for ( ; ( (auto2773D922_ai >= 0 && lv_loopint <= auto2773D922_ae) || (auto2773D922_ai < 0 && lv_loopint >= auto2773D922_ae) ) ; lv_loopint += auto2773D922_ai ) {
        gv_miscUnlocks[lv_loopint][lp_player] = BankValueGetAsFlag(gv_banks[lp_player], "H", IntToString(lv_loopint));
    }
    return true;
}

trigger auto_gf_SavePlayerProgress_Trigger = null;
int auto_gf_SavePlayerProgress_lp_player;

void gf_SavePlayerProgress (int lp_player) {
    auto_gf_SavePlayerProgress_lp_player = lp_player;

    if (auto_gf_SavePlayerProgress_Trigger == null) {
        auto_gf_SavePlayerProgress_Trigger = TriggerCreate("auto_gf_SavePlayerProgress_TriggerFunc");
    }

    TriggerExecute(auto_gf_SavePlayerProgress_Trigger, false, false);
}

bool auto_gf_SavePlayerProgress_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_SavePlayerProgress_lp_player;

    // Variable Declarations
    int lv_i;
    text lv_temptext;
    string lv_string;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_temptext = StringToText("");
    lv_string = "";

    // Implementation
    if (((gv_savedisabled == true) || (gv_saveprevent[lp_player] == true))) {
        gf_DisplayVisorTextDialog(StringExternal("Param/Value/8548559A"), lp_player);
        return true;
    }

    gf_SaveBankSimple(lp_player);
    lv_string = BankValueGetAsString(gv_banks[lp_player], "Un", "XP");
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/FD532329") + StringToText(PlayerHandle(lp_player))));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/3B0046D2"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/F78634CA") + IntToText(gv_playerExperience[1][lp_player])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/8F1130E8"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/F63C18C8") + IntToText(gv_playerExperience[2][lp_player])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/7F69B6EC"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/6BFCD5C5") + IntToText(gv_playerExperience[3][lp_player])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/F993FDE6"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/DBC05CDF") + IntToText((gv_playerExperience[gv_playerRankSet[lp_player]][lp_player] - gv_playerStartingXP[lp_player]))));
    gf_DisplayVisorTextDialog(lv_temptext, lp_player);
    gf_UpdateSIDialogforPlayer(lp_player);
    gf_UpdateUnlockableDialog(lp_player);
    return true;
}

trigger auto_gf_LoadPlayerProgress_Trigger = null;
int auto_gf_LoadPlayerProgress_lp_player;

void gf_LoadPlayerProgress (int lp_player) {
    auto_gf_LoadPlayerProgress_lp_player = lp_player;

    if (auto_gf_LoadPlayerProgress_Trigger == null) {
        auto_gf_LoadPlayerProgress_Trigger = TriggerCreate("auto_gf_LoadPlayerProgress_TriggerFunc");
    }

    TriggerExecute(auto_gf_LoadPlayerProgress_Trigger, false, false);
}

bool auto_gf_LoadPlayerProgress_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_LoadPlayerProgress_lp_player;

    // Variable Declarations
    text lv_txt_tmp;
    int lv_int;
    bool lv_bool;
    bool[13] lv_commandcardsettings;
    int lv_i;
    int lv_d;

    // Automatic Variable Declarations
    const int autoC1EE93B6_ae = 19;
    const int autoC1EE93B6_ai = 1;

    // Variable Initialization
    lv_int = lp_player;

    // Implementation
    lv_bool = gf_LoadBankSimple(lp_player);
    if ((lv_bool == true)) {
        if ((GameIsTestMap(false) == false)) {
            lv_txt_tmp += ((StringExternal("Param/Value/DBE88A99") + StringToText(PlayerHandle(lv_int))));
        }
        else {
            lv_txt_tmp += ((StringExternal("Param/Value/A90D8BA9") + StringToText("TEST-ACCOUNT")));
        }
        lv_txt_tmp += StringToText("</n>") + (StringExternal("Param/Value/5AF5A8FA") + FormatNumber(gv_playerExperience[1][lv_int]));
                lv_txt_tmp += StringToText("</n>") + (StringExternal("Param/Value/E6A1FB22") + FormatNumber(gv_playerExperience[2][lv_int]));
                lv_txt_tmp += StringToText("</n>") + (StringExternal("Param/Value/C29F836B") + FormatNumber(gv_playerExperience[3][lv_int]));
        if ((gv_playerExperience[1][lv_int] >= gv_rankXPMin[1][3])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_int, "PFC", 1);
        }

        if ((gv_playerExperience[1][lv_int] >= gv_rankXPMin[1][5])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_int, "CPL", 1);
        }

        if ((gv_playerExperience[1][lv_int] >= gv_rankXPMin[1][6])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_int, "SGT", 1);
        }

        if ((gv_playerExperience[1][lv_int] >= gv_rankXPMin[1][7])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_int, "SSG", 1);
        }

        if ((gv_playerExperience[1][lv_int] >= gv_rankXPMin[1][9])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_int, "MSG", 1);
        }

        if ((gv_playerExperience[1][lv_int] >= gv_rankXPMin[1][10])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_int, "1SG", 1);
        }

    }
    else {
        gv_funcdialogoffsets[1][lv_int] = 325;
        gv_funcdialogoffsets[2][lv_int] = -5;
        PlayerBankNew(lv_int);
        lv_txt_tmp += ((StringExternal("Param/Value/BB50E1A0") + StringToText(PlayerHandle(lv_int))));
                lv_txt_tmp += StringToText("</n>") + (StringExternal("Param/Value/E31FB1AA") + FormatNumber(gv_playerExperience[1][lv_int]));
                lv_txt_tmp += StringToText("</n>") + (StringExternal("Param/Value/C276B373") + FormatNumber(gv_playerExperience[2][lv_int]));
                lv_txt_tmp += StringToText("</n>") + (StringExternal("Param/Value/68405048") + FormatNumber(gv_playerExperience[3][lv_int]));
        gf_SaveBankSimple(lp_player);
    }
    DialogCreate(440, 146, c_anchorLeft, 10, 180, false);
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorTopLeft, 0, 0, StringToText(""), "UI\\beginning_background.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 125, DialogGetHeight(DialogLastCreated()), c_anchorTopLeft, 0, 0, StringToText(""), "UI\\save_border_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), DialogGetWidth(DialogLastCreated()) + 100, 200, c_anchorTopLeft, -5, 31, lv_txt_tmp, ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lv_int), true);
        Wait(2.3, c_timeGame);
        UIClearMessages(PlayerGroupSingle(lv_int), c_messageAreaDebug);
        for (lv_i = 0; lv_i <= 50; lv_i += 1)
        {
            DialogSetTransparency(DialogLastCreated(), lv_i * 2);
            Wait(0.0625, c_timeGame);
        }
        DialogDestroy(DialogLastCreated());
    gv_playercamounlocked[1][lv_int] = true;
    gv_playerdecalunlocked[10][lv_int] = true;
    gv_playerdecalunlocked[41][lv_int] = true;
    gv_playerdecalunlocked[43][lv_int] = true;
    gv_playerdecalunlocked[44][lv_int] = true;
    lv_d = 12;
    for ( ; ( (autoC1EE93B6_ai >= 0 && lv_d <= autoC1EE93B6_ae) || (autoC1EE93B6_ai < 0 && lv_d >= autoC1EE93B6_ae) ) ; lv_d += autoC1EE93B6_ai ) {
        gv_playerdecalunlocked[lv_d][lv_int] = true;
    }
    return true;
}

void gf_SuperBank (int lp_pindex) {
    // Variable Declarations
    int lv_intloop;

    // Automatic Variable Declarations
    const int auto01CBC8DF_ae = 3;
    const int auto01CBC8DF_ai = 1;
    const int autoF90A3935_ae = 26;
    const int autoF90A3935_ai = 1;
    const int autoDE094B5D_ae = 65;
    const int autoDE094B5D_ai = 1;
    const int autoEB32A1AD_ae = gv_camos;
    const int autoEB32A1AD_ai = 1;
    const int auto5B6291C9_ae = gv_decals;
    const int auto5B6291C9_ai = 1;
    const int auto680BAA8D_ae = gv_achievementCount;
    const int auto680BAA8D_ai = 1;
    const int auto452158C2_ae = 11;
    const int auto452158C2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intloop = 1;
    for ( ; ( (auto01CBC8DF_ai >= 0 && lv_intloop <= auto01CBC8DF_ae) || (auto01CBC8DF_ai < 0 && lv_intloop >= auto01CBC8DF_ae) ) ; lv_intloop += auto01CBC8DF_ai ) {
        gv_playerExperience[lv_intloop][lp_pindex] = 500000;
    }
    gv_playerStartingXP[lp_pindex] = gv_playerExperience[1][lp_pindex];
    gv_playerGamesPlayed[lp_pindex] = 100;
    gv_playerRevives[lp_pindex] = 9999;
    gv_playerAvgGameTime[lp_pindex] = 3600;
    lv_intloop = 1;
    for ( ; ( (autoF90A3935_ai >= 0 && lv_intloop <= autoF90A3935_ae) || (autoF90A3935_ai < 0 && lv_intloop >= autoF90A3935_ae) ) ; lv_intloop += autoF90A3935_ai ) {
        gv_sIunlocked[lv_intloop][lp_pindex] = true;
    }
    lv_intloop = 31;
    for ( ; ( (autoDE094B5D_ai >= 0 && lv_intloop <= autoDE094B5D_ae) || (autoDE094B5D_ai < 0 && lv_intloop >= autoDE094B5D_ae) ) ; lv_intloop += autoDE094B5D_ai ) {
        if ((libE6C8C21C_gf_StringIsValid2(lv_intloop) == true)) {
            gv_sIunlocked[lv_intloop][lp_pindex] = true;
        }
    }
    lv_intloop = 2;
    for ( ; ( (autoEB32A1AD_ai >= 0 && lv_intloop <= autoEB32A1AD_ae) || (autoEB32A1AD_ai < 0 && lv_intloop >= autoEB32A1AD_ae) ) ; lv_intloop += autoEB32A1AD_ai ) {
        gv_playercamounlocked[lv_intloop][lp_pindex] = true;
    }
    lv_intloop = 1;
    for ( ; ( (auto5B6291C9_ai >= 0 && lv_intloop <= auto5B6291C9_ae) || (auto5B6291C9_ai < 0 && lv_intloop >= auto5B6291C9_ae) ) ; lv_intloop += auto5B6291C9_ai ) {
        gv_playerdecalunlocked[lv_intloop][lp_pindex] = true;
    }
    lv_intloop = 1;
    for ( ; ( (auto680BAA8D_ai >= 0 && lv_intloop <= auto680BAA8D_ae) || (auto680BAA8D_ai < 0 && lv_intloop >= auto680BAA8D_ae) ) ; lv_intloop += auto680BAA8D_ai ) {
        gv_achievementUnlocked[lv_intloop][lp_pindex] = true;
    }
    lv_intloop = 1;
    for ( ; ( (auto452158C2_ai >= 0 && lv_intloop <= auto452158C2_ae) || (auto452158C2_ai < 0 && lv_intloop >= auto452158C2_ae) ) ; lv_intloop += auto452158C2_ai ) {
        gv_gamesWon[lv_intloop][lp_pindex] = 5;
    }
    if ((gv_playerExperience[1][lp_pindex] >= gv_rankXPMin[1][3])) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pindex, "PFC", 1);
    }

    if ((gv_playerExperience[1][lp_pindex] >= gv_rankXPMin[1][5])) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pindex, "CPL", 1);
    }

    if ((gv_playerExperience[1][lp_pindex] >= gv_rankXPMin[1][6])) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pindex, "SGT", 1);
    }

    if ((gv_playerExperience[1][lp_pindex] >= gv_rankXPMin[1][7])) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pindex, "SSG", 1);
    }

    if ((gv_playerExperience[1][lp_pindex] >= gv_rankXPMin[1][9])) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pindex, "MSG", 1);
    }

    if ((gv_playerExperience[1][lp_pindex] >= gv_rankXPMin[1][10])) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pindex, "1SG", 1);
    }

    gf_SavePlayerProgress(lp_pindex);
}

void gf_NukeBank (int lp_pindex) {
    // Variable Declarations
    int lv_intloop;

    // Automatic Variable Declarations
    const int autoF786EB2D_ae = 3;
    const int autoF786EB2D_ai = 1;
    const int auto3E041980_ae = 26;
    const int auto3E041980_ai = 1;
    const int auto87E94D2D_ae = 65;
    const int auto87E94D2D_ai = 1;
    const int auto873104E1_ae = gv_camos;
    const int auto873104E1_ai = 1;
    const int autoB1DD265E_ae = gv_decals;
    const int autoB1DD265E_ai = 1;
    const int auto3C0B74BD_ae = gv_achievementCount;
    const int auto3C0B74BD_ai = 1;
    const int auto454C5DA0_ae = 11;
    const int auto454C5DA0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intloop = 1;
    for ( ; ( (autoF786EB2D_ai >= 0 && lv_intloop <= autoF786EB2D_ae) || (autoF786EB2D_ai < 0 && lv_intloop >= autoF786EB2D_ae) ) ; lv_intloop += autoF786EB2D_ai ) {
        gv_playerExperience[lv_intloop][lp_pindex] = 0;
    }
    gv_playerStartingXP[lp_pindex] = gv_playerExperience[1][lp_pindex];
    gv_playerGamesPlayed[lp_pindex] = 0;
    gv_playerRevives[lp_pindex] = 0;
    gv_playerAvgGameTime[lp_pindex] = 0;
    lv_intloop = 1;
    for ( ; ( (auto3E041980_ai >= 0 && lv_intloop <= auto3E041980_ae) || (auto3E041980_ai < 0 && lv_intloop >= auto3E041980_ae) ) ; lv_intloop += auto3E041980_ai ) {
        gv_sIunlocked[lv_intloop][lp_pindex] = false;
    }
    lv_intloop = 31;
    for ( ; ( (auto87E94D2D_ai >= 0 && lv_intloop <= auto87E94D2D_ae) || (auto87E94D2D_ai < 0 && lv_intloop >= auto87E94D2D_ae) ) ; lv_intloop += auto87E94D2D_ai ) {
        if ((libE6C8C21C_gf_StringIsValid2(lv_intloop) == true)) {
            gv_sIunlocked[lv_intloop][lp_pindex] = false;
        }
    }
    lv_intloop = 2;
    for ( ; ( (auto873104E1_ai >= 0 && lv_intloop <= auto873104E1_ae) || (auto873104E1_ai < 0 && lv_intloop >= auto873104E1_ae) ) ; lv_intloop += auto873104E1_ai ) {
        gv_playercamounlocked[lv_intloop][lp_pindex] = false;
    }
    lv_intloop = 1;
    for ( ; ( (autoB1DD265E_ai >= 0 && lv_intloop <= autoB1DD265E_ae) || (autoB1DD265E_ai < 0 && lv_intloop >= autoB1DD265E_ae) ) ; lv_intloop += autoB1DD265E_ai ) {
        gv_playerdecalunlocked[lv_intloop][lp_pindex] = false;
    }
    lv_intloop = 1;
    for ( ; ( (auto3C0B74BD_ai >= 0 && lv_intloop <= auto3C0B74BD_ae) || (auto3C0B74BD_ai < 0 && lv_intloop >= auto3C0B74BD_ae) ) ; lv_intloop += auto3C0B74BD_ai ) {
        gv_achievementUnlocked[lv_intloop][lp_pindex] = false;
    }
    lv_intloop = 1;
    for ( ; ( (auto454C5DA0_ai >= 0 && lv_intloop <= auto454C5DA0_ae) || (auto454C5DA0_ai < 0 && lv_intloop >= auto454C5DA0_ae) ) ; lv_intloop += auto454C5DA0_ai ) {
        gv_gamesWon[lv_intloop][lp_pindex] = 0;
    }
    if ((gv_playerExperience[1][lp_pindex] >= gv_rankXPMin[1][3])) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pindex, "PFC", 0);
    }

    if ((gv_playerExperience[1][lp_pindex] >= gv_rankXPMin[1][5])) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pindex, "CPL", 0);
    }

    if ((gv_playerExperience[1][lp_pindex] >= gv_rankXPMin[1][6])) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pindex, "SGT", 0);
    }

    if ((gv_playerExperience[1][lp_pindex] >= gv_rankXPMin[1][7])) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pindex, "SSG", 0);
    }

    if ((gv_playerExperience[1][lp_pindex] >= gv_rankXPMin[1][9])) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pindex, "MSG", 0);
    }

    if ((gv_playerExperience[1][lp_pindex] >= gv_rankXPMin[1][10])) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pindex, "1SG", 0);
    }

    gf_SavePlayerProgress(lp_pindex);
}

int gf_GetPlayerRank (int lp_player) {
    // Variable Declarations
    int lv_loopint;
    int lv_set;

    // Automatic Variable Declarations
    const int auto340EDED6_ae = 16;
    const int auto340EDED6_ai = 1;

    // Variable Initialization
    lv_set = gv_playerRankSet[lp_player];

    // Implementation
    lv_loopint = 1;
    for ( ; ( (auto340EDED6_ai >= 0 && lv_loopint <= auto340EDED6_ae) || (auto340EDED6_ai < 0 && lv_loopint >= auto340EDED6_ae) ) ; lv_loopint += auto340EDED6_ai ) {
        if ((((gv_playerExperience[lv_set][lp_player] >= gv_rankXPMin[lv_set][lv_loopint]) && (gv_playerExperience[lv_set][lp_player] < gv_rankXPMin[lv_set][(lv_loopint + 1)])) || ((gv_playerExperience[lv_set][lp_player] >= gv_rankXPMin[lv_set][lv_loopint]) && (lv_loopint == gv_rankMax[lv_set])))) {
            return lv_loopint;
        }

    }
    return 1;
}

trigger auto_gf_RemoveMedicGroup_Trigger = null;
int auto_gf_RemoveMedicGroup_lp_player;

void gf_RemoveMedicGroup (int lp_player) {
    auto_gf_RemoveMedicGroup_lp_player = lp_player;

    if (auto_gf_RemoveMedicGroup_Trigger == null) {
        auto_gf_RemoveMedicGroup_Trigger = TriggerCreate("auto_gf_RemoveMedicGroup_TriggerFunc");
    }

    TriggerExecute(auto_gf_RemoveMedicGroup_Trigger, false, false);
}

bool auto_gf_RemoveMedicGroup_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_RemoveMedicGroup_lp_player;

    // Automatic Variable Declarations
    // Implementation
    PlayerGroupRemove(gv_medics, lp_player);
    if ((gv_medicKilled[lp_player] == false)) {
        gv_combatMedics -= 1;
    }
    if ((PlayerGroupCount(gv_medics) == 0)) {
        gf_MissionItemPingRemoveItem(gv_shockPaddles);
        UnitRemove(gv_shockPaddles);
    }
    return true;
}

void gf_InitializeRankVars () {
    // Automatic Variable Declarations
    // Implementation
    gv_rankDecal[1][1] = "Buttons\\Ranks\\RankPVT.dds";
    gv_rankDecal[1][2] = "Buttons\\Ranks\\RankPV2.dds";
    gv_rankDecal[1][3] = "Buttons\\Ranks\\RankPFC.dds";
    gv_rankDecal[1][4] = "Buttons\\Ranks\\RankSPC.dds";
    gv_rankDecal[1][5] = "Buttons\\Ranks\\RankCPL.dds";
    gv_rankDecal[1][6] = "Buttons\\Ranks\\RankSGT.dds";
    gv_rankDecal[1][7] = "Buttons\\Ranks\\RankSSG.dds";
    gv_rankDecal[1][8] = "Buttons\\Ranks\\RankSFC.dds";
    gv_rankDecal[1][9] = "Buttons\\Ranks\\RankMSG.dds";
    gv_rankDecal[1][10] = "Buttons\\Ranks\\Rank1SG.dds";
    gv_rankDecal[1][11] = "Buttons\\Ranks\\RankSGM.dds";
    gv_rankDecal[1][12] = "Buttons\\Ranks\\RankCSM.dds";
    gv_rankDecal[1][13] = "Buttons\\Ranks\\RankSMA.dds";
    gv_rankDecal[1][14] = "Buttons\\Ranks\\RankCMA1.dds";
    gv_rankDecal[1][15] = "Buttons\\Ranks\\RankCMA2.dds";
    gv_rankDecal[1][16] = "Buttons\\Ranks\\RankCMA3.dds";
    gv_rankActorMsg[1][1] = "TextureSelectById RankPVT";
    gv_rankActorMsg[1][2] = "TextureSelectById RankPV2";
    gv_rankActorMsg[1][3] = "TextureSelectById RankPFC";
    gv_rankActorMsg[1][4] = "TextureSelectById RankSPC";
    gv_rankActorMsg[1][5] = "TextureSelectById RankCPL";
    gv_rankActorMsg[1][6] = "TextureSelectById RankSGT";
    gv_rankActorMsg[1][7] = "TextureSelectById RankSSG";
    gv_rankActorMsg[1][8] = "TextureSelectById RankSFC";
    gv_rankActorMsg[1][9] = "TextureSelectById RankMSG";
    gv_rankActorMsg[1][10] = "TextureSelectById Rank1SG";
    gv_rankActorMsg[1][11] = "TextureSelectById RankSGM";
    gv_rankActorMsg[1][12] = "TextureSelectById RankCSM";
    gv_rankActorMsg[1][13] = "TextureSelectById RankSMA";
    gv_rankActorMsg[1][14] = "TextureSelectById RankCMA1";
    gv_rankActorMsg[1][15] = "TextureSelectById RankCMA2";
    gv_rankActorMsg[1][16] = "TextureSelectById RankCMA3";
    gv_rankXPMin[1][1] = 0;
    gv_rankXPMin[1][2] = 400;
    gv_rankXPMin[1][3] = 1000;
    gv_rankXPMin[1][4] = 1550;
    gv_rankXPMin[1][5] = 2600;
    gv_rankXPMin[1][6] = 3800;
    gv_rankXPMin[1][7] = 5500;
    gv_rankXPMin[1][8] = 11000;
    gv_rankXPMin[1][9] = 17000;
    gv_rankXPMin[1][10] = 25000;
    gv_rankXPMin[1][11] = 65000;
    gv_rankXPMin[1][12] = 95000;
    gv_rankXPMin[1][13] = 170000;
    gv_rankXPMin[1][14] = 260000;
    gv_rankXPMin[1][15] = 375000;
    gv_rankXPMin[1][16] = 500000;
    gv_rankXPMin[1][17] = 999999;
    gv_rankPrefix[1][1] = StringExternal("Param/Value/AC35D9AA");
    gv_rankPrefix[1][2] = StringExternal("Param/Value/3EC4D6A5");
    gv_rankPrefix[1][3] = StringExternal("Param/Value/75C654DF");
    gv_rankPrefix[1][4] = StringExternal("Param/Value/DB61A69C");
    gv_rankPrefix[1][5] = StringExternal("Param/Value/FB2D5EFE");
    gv_rankPrefix[1][6] = StringExternal("Param/Value/B5407A1E");
    gv_rankPrefix[1][7] = StringExternal("Param/Value/C567B92C");
    gv_rankPrefix[1][8] = StringExternal("Param/Value/ED19DA85");
    gv_rankPrefix[1][9] = StringExternal("Param/Value/421E33E9");
    gv_rankPrefix[1][10] = StringExternal("Param/Value/93AF53BA");
    gv_rankPrefix[1][11] = StringExternal("Param/Value/63267416");
    gv_rankPrefix[1][12] = StringExternal("Param/Value/29C40EE9");
    gv_rankPrefix[1][13] = StringExternal("Param/Value/65836218");
    gv_rankPrefix[1][14] = StringExternal("Param/Value/5DF1F180");
    gv_rankPrefix[1][15] = StringExternal("Param/Value/EBE9B4A4");
    gv_rankPrefix[1][16] = StringExternal("Param/Value/17D01B24");
    gv_rankMax[1] = 16;
    gv_rankDecal[2][1] = "Buttons\\Ranks\\RankWO1.dds";
    gv_rankDecal[2][2] = "Buttons\\Ranks\\RankCWO2.dds";
    gv_rankDecal[2][3] = "Buttons\\Ranks\\RankCWO3.dds";
    gv_rankDecal[2][4] = "Buttons\\Ranks\\RankCWO4.dds";
    gv_rankDecal[2][5] = "Buttons\\Ranks\\RankCWO5.dds";
    gv_rankDecal[2][6] = "Buttons\\Ranks\\RankMW1.dds";
    gv_rankDecal[2][7] = "Buttons\\Ranks\\RankMW2.dds";
    gv_rankDecal[2][8] = "Buttons\\Ranks\\RankMW3.dds";
    gv_rankDecal[2][9] = "Buttons\\Ranks\\RankMW4.dds";
    gv_rankDecal[2][10] = "Buttons\\Ranks\\RankMWO5.dds";
    gv_rankActorMsg[2][1] = "TextureSelectById RankWO1";
    gv_rankActorMsg[2][2] = "TextureSelectById RankCWO2";
    gv_rankActorMsg[2][3] = "TextureSelectById RankCWO3";
    gv_rankActorMsg[2][4] = "TextureSelectById RankCWO4";
    gv_rankActorMsg[2][5] = "TextureSelectById RankCWO5";
    gv_rankActorMsg[2][6] = "TextureSelectById RankMW1";
    gv_rankActorMsg[2][7] = "TextureSelectById RankMW2";
    gv_rankActorMsg[2][8] = "TextureSelectById RankMW3";
    gv_rankActorMsg[2][9] = "TextureSelectById RankMW4";
    gv_rankActorMsg[2][10] = "TextureSelectById RankMW5";
    gv_rankXPMin[2][1] = 0;
    gv_rankXPMin[2][2] = 8000;
    gv_rankXPMin[2][3] = 25000;
    gv_rankXPMin[2][4] = 65000;
    gv_rankXPMin[2][5] = 120000;
    gv_rankXPMin[2][6] = 180000;
    gv_rankXPMin[2][7] = 245000;
    gv_rankXPMin[2][8] = 315000;
    gv_rankXPMin[2][9] = 400000;
    gv_rankXPMin[2][10] = 500000;
    gv_rankXPMin[2][11] = 999999;
    gv_rankPrefix[2][1] = StringExternal("Param/Value/DFA4F968");
    gv_rankPrefix[2][2] = StringExternal("Param/Value/7A081B66");
    gv_rankPrefix[2][3] = StringExternal("Param/Value/BA2703B3");
    gv_rankPrefix[2][4] = StringExternal("Param/Value/3AEA4B98");
    gv_rankPrefix[2][5] = StringExternal("Param/Value/DE1EEE75");
    gv_rankPrefix[2][6] = StringExternal("Param/Value/4899F78D");
    gv_rankPrefix[2][7] = StringExternal("Param/Value/79DEA371");
    gv_rankPrefix[2][8] = StringExternal("Param/Value/0A605A67");
    gv_rankPrefix[2][9] = StringExternal("Param/Value/F2912873");
    gv_rankPrefix[2][10] = StringExternal("Param/Value/F2FE547B");
    gv_rankMax[2] = 10;
    gv_rankDecal[3][1] = "Buttons\\Ranks\\Rank2LT.dds";
    gv_rankDecal[3][2] = "Buttons\\Ranks\\Rank1LT.dds";
    gv_rankDecal[3][3] = "Buttons\\Ranks\\RankCPT.dds";
    gv_rankDecal[3][4] = "Buttons\\Ranks\\RankMAJ.dds";
    gv_rankDecal[3][5] = "Buttons\\Ranks\\RankLTCOL.dds";
    gv_rankDecal[3][6] = "Buttons\\Ranks\\RankCOL.dds";
    gv_rankDecal[3][7] = "Buttons\\Ranks\\RankBGEN.dds";
    gv_rankDecal[3][8] = "Buttons\\Ranks\\RankMGEN.dds";
    gv_rankDecal[3][9] = "Buttons\\Ranks\\RankLTGEN.dds";
    gv_rankDecal[3][10] = "Buttons\\Ranks\\RankGEN.dds";
    gv_rankDecal[3][11] = "Buttons\\Ranks\\RankGOA.dds";
    gv_rankActorMsg[3][1] = "TextureSelectById Rank2LT";
    gv_rankActorMsg[3][2] = "TextureSelectById Rank1LT";
    gv_rankActorMsg[3][3] = "TextureSelectById RankCPT";
    gv_rankActorMsg[3][4] = "TextureSelectById RankMAJ";
    gv_rankActorMsg[3][5] = "TextureSelectById RankLTCOL";
    gv_rankActorMsg[3][6] = "TextureSelectById RankCOL";
    gv_rankActorMsg[3][7] = "TextureSelectById RankBGEN";
    gv_rankActorMsg[3][8] = "TextureSelectById RankMGEN";
    gv_rankActorMsg[3][9] = "TextureSelectById RankLTGEN";
    gv_rankActorMsg[3][10] = "TextureSelectById RankGEN";
    gv_rankActorMsg[3][11] = "TextureSelectById RankGOA";
    gv_rankXPMin[3][1] = 0;
    gv_rankXPMin[3][2] = 3500;
    gv_rankXPMin[3][3] = 12000;
    gv_rankXPMin[3][4] = 18000;
    gv_rankXPMin[3][5] = 30000;
    gv_rankXPMin[3][6] = 65000;
    gv_rankXPMin[3][7] = 100000;
    gv_rankXPMin[3][8] = 130000;
    gv_rankXPMin[3][9] = 180000;
    gv_rankXPMin[3][10] = 250000;
    gv_rankXPMin[3][11] = 500000;
    gv_rankXPMin[3][12] = 999999;
    gv_rankPrefix[3][1] = StringExternal("Param/Value/42D26452");
    gv_rankPrefix[3][2] = StringExternal("Param/Value/AFFDADC4");
    gv_rankPrefix[3][3] = StringExternal("Param/Value/4E622C9E");
    gv_rankPrefix[3][4] = StringExternal("Param/Value/0996D277");
    gv_rankPrefix[3][5] = StringExternal("Param/Value/E174F7D9");
    gv_rankPrefix[3][6] = StringExternal("Param/Value/6B69FDC2");
    gv_rankPrefix[3][7] = StringExternal("Param/Value/85F79929");
    gv_rankPrefix[3][8] = StringExternal("Param/Value/8564C454");
    gv_rankPrefix[3][9] = StringExternal("Param/Value/8C86DCDF");
    gv_rankPrefix[3][10] = StringExternal("Param/Value/89E6CD9A");
    gv_rankPrefix[3][11] = StringExternal("Param/Value/91F4BF32");
    gv_rankMax[3] = 11;
}

void gf_CreateBorgWeaponDialog () {
    // Variable Declarations
    int lv_loopint;
    text[6] lv_tooltips;

    // Automatic Variable Declarations
    const int auto7A2FD4CC_ae = 5;
    const int auto7A2FD4CC_ai = 1;

    // Variable Initialization

    // Implementation
    gv_borgWeaponDialogImageFiles[1] = "Buttons\\Weapons\\MANTEL-75.dds";
    gv_borgWeaponDialogImageFiles[2] = "Buttons\\BTNM241.dds";
    gv_borgWeaponDialogImageFiles[3] = "Buttons\\Weapons\\DMR.dds";
    gv_borgWeaponDialogImageFiles[4] = "Buttons\\Weapons\\BTNIPR.dds";
    gv_borgWeaponDialogImageFiles[5] = "Buttons\\Weapons\\BTNHaze S10.dds";
    lv_tooltips[1] = StringExternal("Param/Value/00DCAA8B");
    lv_tooltips[2] = StringExternal("Param/Value/C5186EA5");
    lv_tooltips[3] = StringExternal("Param/Value/88749904");
    lv_tooltips[4] = StringExternal("Param/Value/5179C421");
    lv_tooltips[5] = StringExternal("Param/Value/B3D701F3");
    DialogCreate(700, 300, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_borgWeaponDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_borgWeaponDialog, 300, 40, c_anchorCenter, 20, -60, StringExternal("Param/Value/72E6EF39"), Color(100.00, 100.00, 100.00), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    lv_loopint = 1;
    for ( ; ( (auto7A2FD4CC_ai >= 0 && lv_loopint <= auto7A2FD4CC_ae) || (auto7A2FD4CC_ai < 0 && lv_loopint >= auto7A2FD4CC_ae) ) ; lv_loopint += auto7A2FD4CC_ai ) {
        libNtve_gf_CreateDialogItemImage(gv_borgWeaponDialog, 80, 80, c_anchorCenter, ((lv_loopint * 90) - 270), 0, StringToText(""), "Assets\\Textures\\AquaSquare.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_borgWeaponDialogBorders[lv_loopint] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_borgWeaponDialog, 78, 78, c_anchorCenter, ((lv_loopint * 90) - 270), 0, StringToText(""), "Assets\\Textures\\AquaSquare.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(gv_borgWeaponDialog, 76, 76, c_anchorCenter, ((lv_loopint * 90) - 270), 0, StringToText(""), gv_borgWeaponDialogImageFiles[lv_loopint], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_borgWeaponDialogImages[lv_loopint] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_borgWeaponDialog, 80, 80, c_anchorCenter, ((lv_loopint * 90) - 270), 0, lv_tooltips[lv_loopint], StringToText(""), "");
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 412, PlayerGroupAll());
        gv_borgWeaponDialogButtons[lv_loopint] = DialogControlLastCreated();
    }
    DialogSetVisible(gv_borgWeaponDialog, PlayerGroupAll(), false);
}

int gf_GetPointCount (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_count;

    // Automatic Variable Declarations
    const int auto341EB0B9_ae = gv_achievementCount;
    const int auto341EB0B9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto341EB0B9_ai >= 0 && lv_i <= auto341EB0B9_ae) || (auto341EB0B9_ai < 0 && lv_i >= auto341EB0B9_ae) ) ; lv_i += auto341EB0B9_ai ) {
        if ((gv_achievementUnlocked[lv_i][lp_player] == true)) {
            lv_count += gv_achievementPointCnt[lv_i][lp_player];
        }

    }
    return lv_count;
}

int gf_GetAchievementCount (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_count;

    // Automatic Variable Declarations
    const int auto957F0A36_ae = gv_achievementCount;
    const int auto957F0A36_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto957F0A36_ai >= 0 && lv_i <= auto957F0A36_ae) || (auto957F0A36_ai < 0 && lv_i >= auto957F0A36_ae) ) ; lv_i += auto957F0A36_ai ) {
        if ((gv_achievementUnlocked[lv_i][lp_player] == true)) {
            lv_count += 1;
        }

    }
    gv_playerAchCnt[lp_player] = lv_count;
    return lv_count;
}

int gf_GetCamoCount (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_count;

    // Automatic Variable Declarations
    const int autoEFC7A68C_ae = gv_camos;
    const int autoEFC7A68C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 2;
    for ( ; ( (autoEFC7A68C_ai >= 0 && lv_i <= autoEFC7A68C_ae) || (autoEFC7A68C_ai < 0 && lv_i >= autoEFC7A68C_ae) ) ; lv_i += autoEFC7A68C_ai ) {
        if ((gv_playercamounlocked[lv_i][lp_player] == true)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

int gf_GetMosSpecificSICount (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_count;

    // Automatic Variable Declarations
    const int auto9BD0AFF4_ae = 70;
    const int auto9BD0AFF4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 31;
    for ( ; ( (auto9BD0AFF4_ai >= 0 && lv_i <= auto9BD0AFF4_ae) || (auto9BD0AFF4_ai < 0 && lv_i >= auto9BD0AFF4_ae) ) ; lv_i += auto9BD0AFF4_ai ) {
        if ((gv_sIunlocked[lv_i][lp_player] == true)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

int gf_GetTotalGamesWon (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (gv_gamesWon[1][lp_player] + gv_gamesWon[2][lp_player] + gv_gamesWon[3][lp_player] + gv_gamesWon[4][lp_player] + gv_gamesWon[5][lp_player] + gv_gamesWon[6][lp_player] + gv_gamesWon[7][lp_player] + gv_gamesWon[8][lp_player] + gv_gamesWon[9][lp_player] + gv_gamesWon[10][lp_player] + gv_gamesWon[11][lp_player]);
}

void gf_InitializeAchievementVars () {
    // Automatic Variable Declarations
    // Implementation
    gf_SetupAchievement(1, StringExternal("Param/Value/3969A278"), StringExternal("Param/Value/9BCC56D2"), "Assets\\Textures\\Defenders_OfMan.dds", StringExternal("Param/Value/FFD57BC5"), 5);
    gf_SetupAchievement(2, StringExternal("Param/Value/77A8A7E4"), StringExternal("Param/Value/26EA7BD2"), "Assets\\Textures\\btn-tips-fallenheroes.dds", StringExternal("Param/Value/8A8F0161"), 5);
    gf_SetupAchievement(3, StringExternal("Param/Value/831FF042"), StringExternal("Param/Value/A2705B8A"), "Assets\\Textures\\btn-building-terran-barracks.dds", StringExternal("Param/Value/413DAAC6"), 5);
    gf_SetupAchievement(4, StringExternal("Param/Value/5E658E84"), StringExternal("Param/Value/7646675E"), "Assets\\Textures\\btn-unit-terran-hercules.dds", StringExternal("Param/Value/26D60B35"), 10);
    gf_SetupAchievement(5, StringExternal("Param/Value/1B1B6CE1"), StringExternal("Param/Value/2A769CF5"), "Assets\\Custom Icons\\Boss Mode.dds", StringExternal("Param/Value/9BD44A31"), 15);
    gf_SetupAchievement(6, StringExternal("Param/Value/06FAD7B0"), StringExternal("Param/Value/B3DD4269"), "Assets\\Textures\\btn-research-zerg-hercules.dds", StringExternal("Param/Value/B89ABF6E"), 15);
    gf_SetupAchievement(7, StringExternal("Param/Value/14C4B392"), StringExternal("Param/Value/29962BDC"), "Assets\\Textures\\talent-raynor-level14-infantryattackspeed.dds", StringExternal("Param/Value/DFE5BBC2"), 10);
    gf_SetupAchievement(8, StringExternal("Param/Value/F1DA96A0"), StringExternal("Param/Value/A15D5840"), "Assets\\Textures\\btn-tips-researchunlocked.dds", StringExternal("Param/Value/25DBAEF7"), 20);
    gf_SetupAchievement(9, StringExternal("Param/Value/5893F7FD"), StringExternal("Param/Value/5F7E748F"), "Textures\\Decals\\Platinum.dds", StringExternal("Param/Value/F9C700D5"), 30);
    gf_SetupAchievement(10, StringExternal("Param/Value/2AE96D76"), StringExternal("Param/Value/1DB4D71C"), "Assets\\Textures\\ui_btn_aicommand_commandcard_autoai.dds", StringExternal("Param/Value/9412FE34"), 50);
    gf_SetupAchievement(11, StringExternal("Param/Value/1960785B"), StringExternal("Param/Value/E828882A"), "Assets\\Textures\\btn-unit-terran-thor.dds", StringExternal("Param/Value/B26C346A"), 20);
    gf_SetupAchievement(12, StringExternal("Param/Value/90D0697B"), StringExternal("Param/Value/E05F5C91"), "Assets\\Textures\\btn-upgrade-terran-nova-healingmastery.dds", StringExternal("Param/Value/93A985E2"), 75);
    gf_SetupAchievement(13, StringExternal("Param/Value/47846824"), StringExternal("Param/Value/C4F0CD1E"), "Assets\\Custom Icons\\6GrandExpert0.dds", StringExternal("Param/Value/8689810E"), 5);
    gf_SetupAchievement(14, StringExternal("Param/Value/C13FE36C"), StringExternal("Param/Value/99863A5D"), "Assets\\Custom Icons\\6GrandExpert1.dds", StringExternal("Param/Value/3022D0A1"), 10);
    gf_SetupAchievement(15, StringExternal("Param/Value/AE151BA8"), StringExternal("Param/Value/9EB5EC1E"), "Assets\\Custom Icons\\6GrandExpert2.dds", StringExternal("Param/Value/261B869C"), 15);
    gf_SetupAchievement(16, StringExternal("Param/Value/E4C0A2CD"), StringExternal("Param/Value/083D9853"), "Assets\\Custom Icons\\6GrandExpert3.dds", StringExternal("Param/Value/D2F88764"), 20);
    gf_SetupAchievement(17, StringExternal("Param/Value/220ED0F8"), StringExternal("Param/Value/AEDE4A84"), "Assets\\Textures\\btn-tips-credit.dds", StringExternal("Param/Value/A96D1387"), 75);
    gf_SetupAchievement(18, StringExternal("Param/Value/DC8528B7"), StringExternal("Param/Value/D9516897"), "Assets\\Custom Icons\\5MastersGrandExpert3.dds", StringExternal("Param/Value/397A4AB6"), 55);
    gf_SetupAchievement(19, StringExternal("Param/Value/ABCCA53D"), StringExternal("Param/Value/6E21C779"), "Assets\\Custom Icons\\Pin Collector.dds", StringExternal("Param/Value/605825F3"), 40);
    gf_SetupAchievement(20, StringExternal("Param/Value/90D70DF8"), StringExternal("Param/Value/C7034735"), "Assets\\Textures\\talent-raynor-level01-infantryspecialist.dds", StringExternal("Param/Value/13AD209E"), 35);
    gf_SetupAchievement(21, StringExternal("Param/Value/9C8E5A2D"), StringExternal("Param/Value/034454AC"), "Assets\\Textures\\btn-ability-protoss-gravitonbeam-color.dds", StringExternal("Param/Value/FEAF6505"), 45);
    gf_SetupAchievement(22, StringExternal("Param/Value/96D64794"), StringExternal("Param/Value/9B5E9C87"), "Textures\\Medals\\MDLcombat action medal.dds", StringExternal("Param/Value/7F72BB97"), 45);
    gf_SetupAchievement(23, StringExternal("Param/Value/89271604"), StringExternal("Param/Value/D2A0660D"), "Textures\\Decals\\RALogo.dds", StringExternal("Param/Value/9627108C"), 45);
    gf_SetupAchievement(24, StringExternal("Param/Value/70533A75"), StringExternal("Param/Value/A4F5236A"), "Textures\\btn-other-Dice.dds", StringExternal("Param/Value/682150FD"), 45);
    gf_SetupAchievement(25, StringExternal("Param/Value/BBF1CD52"), StringExternal("Param/Value/9EA24407"), "Assets\\Textures\\btn-tips-hacking.dds", StringExternal("Param/Value/3B60079E"), 45);
    gf_SetupAchievement(26, StringExternal("Param/Value/1BDAB07E"), StringExternal("Param/Value/240886A5"), "Assets\\Textures\\btn-upgrade-artanis-healingpsionicstorm.dds", StringExternal("Param/Value/4E0042C9"), 45);
    gf_SetupAchievement(27, StringExternal("Param/Value/62A4A818"), StringExternal("Param/Value/DE64C967"), "Assets\\Textures\\btn-ability-protoss-psistorm.dds", StringExternal("Param/Value/EEBFEDE6"), 45);
    gf_SetupAchievement(28, StringExternal("Param/Value/8C140243"), StringExternal("Param/Value/189BDB1F"), "Assets\\Textures\\ui_hots_icon_flashfreeze.dds", StringExternal("Param/Value/C725E98A"), 45);
    gf_SetupAchievement(29, StringExternal("Param/Value/8FBBBE6C"), StringExternal("Param/Value/6CA95A63"), "Assets\\Textures\\btn-status-radar.dds", StringExternal("Param/Value/8E44BEF2"), 45);
    gf_SetupAchievement(30, StringExternal("Param/Value/1A3715F7"), StringExternal("Param/Value/FB958EE9"), "Textures\\Decals\\Earth.dds", StringExternal("Param/Value/FD36BF49"), 45);
    gf_SetupAchievement(31, StringExternal("Param/Value/FE4CC84E"), StringExternal("Param/Value/073823F9"), "Assets\\Textures\\btn-unit-terran-maraudermercenary.dds", StringExternal("Param/Value/2A2ACB81"), 45);
    gf_SetupAchievement(32, StringExternal("Param/Value/7DD621FA"), StringExternal("Param/Value/390AFD3F"), "Assets\\Buttons\\Portraits\\BTN_Cyborg_Portrait.dds", StringExternal("Param/Value/36C57F87"), 45);
    gf_SetupAchievement(33, StringExternal("Param/Value/3FA558F2"), StringExternal("Param/Value/B64D55CA"), "Assets\\Textures\\nova coop_lvl 01_black ops.dds", StringExternal("Param/Value/65BA173F"), 45);
    gf_SetupAchievement(34, StringExternal("Param/Value/E4C8C8AD"), StringExternal("Param/Value/3A8363C4"), "Assets\\Textures\\btn-unit-terran-marineblackops.dds", StringExternal("Param/Value/04C49CA6"), 45);
    gf_SetupAchievement(35, StringExternal("Param/Value/4FD55B6C"), StringExternal("Param/Value/25DF6A5B"), "Assets\\Textures\\btn-ability-terran-chronorift.dds", StringExternal("Param/Value/9CF3A61A"), 45);
    gf_SetupAchievement(36, StringExternal("Param/Value/560888CE"), StringExternal("Param/Value/21CC497B"), "Textures\\Decals\\BearClaw.dds", StringExternal("Param/Value/99D89C08"), 45);
    gf_SetupAchievement(37, StringToText(""), StringToText(""), "Assets\\Custom Icons\\padlock.dds", StringToText(""), 45);
    gf_SetupAchievement(38, StringExternal("Param/Value/416ED3AB"), StringExternal("Param/Value/D49A8076"), "Textures\\Decals\\Diamond.dds", StringExternal("Param/Value/AAE1A4F5"), 45);
    gf_SetupAchievement(39, StringToText(""), StringToText(""), "Assets\\Custom Icons\\padlock.dds", StringToText(""), 45);
    gf_SetupAchievement(40, StringExternal("Param/Value/2373E6F6"), StringExternal("Param/Value/1695BED6"), "Textures\\Decals\\T1Hunters.dds", StringExternal("Param/Value/3EC2AB23"), 45);
    gf_SetupAchievement(41, StringToText(""), StringToText(""), "Assets\\Custom Icons\\padlock.dds", StringToText(""), 45);
    gf_SetupAchievement(42, StringToText(""), StringToText(""), "Assets\\Custom Icons\\padlock.dds", StringToText(""), 45);
    gf_SetupAchievement(43, StringToText(""), StringToText(""), "Assets\\Custom Icons\\padlock.dds", StringToText(""), 45);
    gf_SetupAchievement(44, StringToText(""), StringToText(""), "Assets\\Custom Icons\\padlock.dds", StringToText(""), 45);
    gf_SetupAchievement(45, StringToText(""), StringToText(""), "Assets\\Custom Icons\\padlock.dds", StringToText(""), 45);
    gf_SetupAchievement(46, StringToText(""), StringToText(""), "Assets\\Custom Icons\\padlock.dds", StringToText(""), 45);
    gf_SetupAchievement(47, StringToText(""), StringToText(""), "Assets\\Custom Icons\\padlock.dds", StringToText(""), 45);
    gf_SetupAchievement(48, StringToText(""), StringToText(""), "Assets\\Custom Icons\\padlock.dds", StringToText(""), 45);
    gf_SetupAchievement(49, StringToText(""), StringToText(""), "Assets\\Custom Icons\\padlock.dds", StringToText(""), 45);
    gf_SetupAchievement(50, StringToText(""), StringToText(""), "Assets\\Custom Icons\\padlock.dds", StringToText(""), 45);
}

void gf_SetupAchievement (int lp_array, text lp_name, text lp_description, string lp_image, text lp_points, int lp_pointCount) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoAB5224DC_ae = 12;
    const int autoAB5224DC_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoAB5224DC_ai >= 0 && lv_i <= autoAB5224DC_ae) || (autoAB5224DC_ai < 0 && lv_i >= autoAB5224DC_ae) ) ; lv_i += autoAB5224DC_ai ) {
        gv_achievementName[lp_array][lv_i] = lp_name;
        gv_achievementDescription[lp_array][lv_i] = lp_description;
        gv_achievementImage[lp_array][lv_i] = lp_image;
        gv_achievementPointCnt[lp_array][lv_i] = lp_pointCount;
    }
    gv_achievementPoint[lp_array] = lp_points;
}

void gf_UpdateAchievementPoints (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gv_playerAchPts[lp_player] = gf_GetPointCount(lp_player);
}

void gf_UpdateAchievementCount (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_count;

    // Automatic Variable Declarations
    const int autoF578925E_ae = gv_achievementCount;
    const int autoF578925E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoF578925E_ai >= 0 && lv_i <= autoF578925E_ae) || (autoF578925E_ai < 0 && lv_i >= autoF578925E_ae) ) ; lv_i += autoF578925E_ai ) {
        if ((gv_achievementUnlocked[lv_i][lp_player] == true)) {
            lv_count += 1;
        }

    }
    gv_playerAchCnt[lp_player] = lv_count;
    if ((gv_playerAchCnt[lp_player] >= 30) && (gv_playerdecalunlocked[38][lp_player] == false)) {
        SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/17E0DF2A"));
        gv_playerdecalunlocked[38][lp_player] = true;
    }
}

trigger auto_gf_AwardAchievementBadgeUnlocked_Trigger = null;
int auto_gf_AwardAchievementBadgeUnlocked_lp_x;
int auto_gf_AwardAchievementBadgeUnlocked_lp_player;
text auto_gf_AwardAchievementBadgeUnlocked_lp_nameLabel;
text auto_gf_AwardAchievementBadgeUnlocked_lp_description;
string auto_gf_AwardAchievementBadgeUnlocked_lp_icon;
text auto_gf_AwardAchievementBadgeUnlocked_lp_points;

void gf_AwardAchievementBadgeUnlocked (int lp_x, int lp_player, text lp_nameLabel, text lp_description, string lp_icon, text lp_points) {
    auto_gf_AwardAchievementBadgeUnlocked_lp_x = lp_x;
    auto_gf_AwardAchievementBadgeUnlocked_lp_player = lp_player;
    auto_gf_AwardAchievementBadgeUnlocked_lp_nameLabel = lp_nameLabel;
    auto_gf_AwardAchievementBadgeUnlocked_lp_description = lp_description;
    auto_gf_AwardAchievementBadgeUnlocked_lp_icon = lp_icon;
    auto_gf_AwardAchievementBadgeUnlocked_lp_points = lp_points;

    if (auto_gf_AwardAchievementBadgeUnlocked_Trigger == null) {
        auto_gf_AwardAchievementBadgeUnlocked_Trigger = TriggerCreate("auto_gf_AwardAchievementBadgeUnlocked_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwardAchievementBadgeUnlocked_Trigger, false, false);
}

bool auto_gf_AwardAchievementBadgeUnlocked_TriggerFunc (bool testConds, bool runActions) {
    int lp_x = auto_gf_AwardAchievementBadgeUnlocked_lp_x;
    int lp_player = auto_gf_AwardAchievementBadgeUnlocked_lp_player;
    text lp_nameLabel = auto_gf_AwardAchievementBadgeUnlocked_lp_nameLabel;
    text lp_description = auto_gf_AwardAchievementBadgeUnlocked_lp_description;
    string lp_icon = auto_gf_AwardAchievementBadgeUnlocked_lp_icon;
    text lp_points = auto_gf_AwardAchievementBadgeUnlocked_lp_points;

    // Variable Declarations
    int lv_points;
    int lv_achievementNameLabel;
    int lv_description;
    int lv_achievementBackground;
    int lv_flash;
    int lv_flash2;
    int lv_animation;
    int lv_achievementBody;
    int lv_y;
    int lv_z;

    // Automatic Variable Declarations
    const int auto7560AB83_ae = 10;
    const int auto7560AB83_ai = 1;
    const int auto98378251_ae = 100;
    const int auto98378251_ai = 1;

    // Variable Initialization
    lv_achievementNameLabel = c_invalidDialogControlId;
    lv_description = c_invalidDialogControlId;
    lv_achievementBackground = c_invalidDialogControlId;
    lv_flash = c_invalidDialogControlId;
    lv_flash2 = c_invalidDialogControlId;
    lv_animation = c_invalidDialogControlId;
    lv_achievementBody = c_invalidDialogId;

    // Implementation
    lv_z = 1;
    for ( ; ( (auto7560AB83_ai >= 0 && lv_z <= auto7560AB83_ae) || (auto7560AB83_ai < 0 && lv_z >= auto7560AB83_ae) ) ; lv_z += auto7560AB83_ai ) {
        if ((gv_achievementSlotFilled[lv_z][lp_player] == false)) {
            if ((gv_achievementUnlocked[lp_x][lp_player] == false)) {
                gv_achievementUnlocked[lp_x][lp_player] = true;
                gv_achievementSlotFilled[lv_z][lp_player] = true;
                DialogCreate(640, 153, c_anchorCenter, 0, (250 - ((191 + (1 / 4)) * (lv_z - 1))), true);
                lv_achievementBody = DialogLastCreated();
                DialogSetImageVisible(lv_achievementBody, false);
                libNtve_gf_CreateDialogItemImage(lv_achievementBody, 800, (191 + 1), c_anchorCenter, 0, 0, StringToText(""), "Assets/Textures/ui_achievement_metalframe.dds", c_triggerImageTypeEndCap, true, Color(100,100,100), c_triggerBlendModeNormal);
                lv_achievementBackground = DialogControlLastCreated();
                DialogControlSetFullDialog(lv_achievementBackground, PlayerGroupSingle(lp_player), true);
                DialogSetVisible(lv_achievementBody, PlayerGroupSingle(lp_player), true);
                SoundPlay(SoundLink("UI_BNet_Achievement", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 610, 125, c_anchorCenter, 0, 0, StringToText(""), "Textures\\Achievement-Animation-Frame-Dark-New-Test.dds", c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
                lv_animation = DialogControlLastCreated();
                libNtve_gf_SetDialogItemRenderPriority(lv_animation, 520, PlayerGroupSingle(lp_player));
                DialogSetTransparency(lv_achievementBody, 50.0);
                Wait(0.0625, c_timeGame);
                DialogSetTransparency(lv_achievementBody, 0.0);
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Outiline-New.dds", PlayerGroupSingle(lp_player));
                Wait(0.1, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Outline-New-Frame.dds", PlayerGroupSingle(lp_player));
                Wait(0.1, c_timeGame);
                DialogControlFadeTransparency(lv_animation, PlayerGroupSingle(lp_player), 0.25, 100.0);
                Wait(0.35, c_timeGame);
                DialogControlFadeTransparency(lv_animation, PlayerGroupSingle(lp_player), 0.0, 0.0);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-1.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-5.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-10.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-15.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_CreateDialogItemLabel(lv_achievementBody, 500, 50, c_anchorTopLeft, 145, 40, (StringExternal("Param/Value/8AAA9C65") + (lp_nameLabel + StringExternal("Param/Value/BF527362"))), ColorWithAlpha(0,0,0,0), false, 0.5);
                lv_achievementNameLabel = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(lv_achievementBody, 353, 100, c_anchorTopLeft, 0, 0, (StringExternal("Param/Value/A66E4D5A") + (lp_description + StringExternal("Param/Value/3FBE16B7"))), ColorWithAlpha(0,0,0,0), false, 0.5);
                lv_description = DialogControlLastCreated();
                DialogControlSetPositionRelative(lv_description, PlayerGroupSingle(lp_player), c_anchorTopLeft, lv_achievementNameLabel, c_anchorBottomLeft, 0, -25);
                libNtve_gf_CreateDialogItemLabel(lv_achievementBody, 84, 50, c_anchorTopRight, 40, 60, (StringExternal("Param/Value/76D1F53B") + (lp_points + StringExternal("Param/Value/BB3CAE27"))), ColorWithAlpha(0,0,0,0), false, 0.5);
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-20.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-25.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-30.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-35.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_CreateDialogItemImage(lv_achievementBody, 76, 76, c_anchorTopLeft, 44, 40, StringToText(""), lp_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemImage(lv_achievementBody, 76, 84, c_anchorTopLeft, 44, 40, StringToText(""), "Assets/Textures/white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
                lv_flash = DialogControlLastCreated();
                DialogControlFadeTransparency(lv_flash, PlayerGroupSingle(lp_player), 0.25, 100.0);
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-40.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-45.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_CreateDialogItemImage(lv_achievementBody, 84, 84, c_anchorTopRight, 46, 37, StringToText(""), "Assets/Textures/white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
                lv_flash2 = DialogControlLastCreated();
                DialogControlFadeTransparency(lv_flash2, PlayerGroupSingle(lp_player), 0.25, 100.0);
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-50.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                DialogControlFadeTransparency(lv_flash, PlayerGroupSingle(lp_player), 0.0, 100.0);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-55.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                DialogControlDestroy(lv_animation);
                Wait(0.0625, c_timeGame);
                DialogControlFadeTransparency(lv_flash2, PlayerGroupSingle(lp_player), 0.0, 100.0);
                Wait(0.1, c_timeGame);
                DialogControlFadeTransparency(lv_flash, PlayerGroupSingle(lp_player), 0.0, 75.0);
                DialogControlFadeTransparency(lv_flash2, PlayerGroupSingle(lp_player), 0.0, 75.0);
                libNtve_gf_SetDialogItemImage(lv_flash2, "Textures\\Achievement-Animation-Point-Shine-1.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemImage(lv_flash, "Textures\\Achievement-Animation-Icon-Shine-1.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_flash2, "Textures\\Achievement-Animation-Point-Shine-5.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemImage(lv_flash, "Textures\\Achievement-Animation-Icon-Shine-5.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_flash2, "Textures\\Achievement-Animation-Point-Shine-9.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemImage(lv_flash, "Textures\\Achievement-Animation-Icon-Shine-9.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                DialogControlDestroy(lv_flash);
                DialogControlDestroy(lv_flash2);
                Wait(0.0625, c_timeGame);
                lv_y = 0;
                for ( ; ( (auto98378251_ai >= 0 && lv_y <= auto98378251_ae) || (auto98378251_ai < 0 && lv_y >= auto98378251_ae) ) ; lv_y += auto98378251_ai ) {
                    DialogSetTransparency(lv_achievementBody, lv_y);
                    Wait(0.0625, c_timeGame);
                }
                DialogSetVisible(lv_achievementBody, PlayerGroupSingle(lp_player), false);
                DialogDestroy(lv_achievementBody);
                gv_achievementSlotFilled[lv_z][lp_player] = false;
                gf_SMIni(lp_player, 0);
                gf_UpdateAchievementCount(lp_player);
                gf_UpdateAchievementPoints(lp_player);
                break;
            }

        }

    }
    return true;
}

trigger auto_gf_UnlockAchievement_Trigger = null;
int auto_gf_UnlockAchievement_lp_player;

void gf_UnlockAchievement (int lp_player) {
    auto_gf_UnlockAchievement_lp_player = lp_player;

    if (auto_gf_UnlockAchievement_Trigger == null) {
        auto_gf_UnlockAchievement_Trigger = TriggerCreate("auto_gf_UnlockAchievement_TriggerFunc");
    }

    TriggerExecute(auto_gf_UnlockAchievement_Trigger, false, false);
}

bool auto_gf_UnlockAchievement_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_UnlockAchievement_lp_player;

    // Automatic Variable Declarations
    // Implementation
    if ((GameIsOnline() == true) && (gv_gamemode != 12)) {
        if ((gv_devingame == true) && (gv_playercamounlocked[19][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(1, lp_player, gv_achievementName[1][lp_player], gv_achievementDescription[1][lp_player], gv_achievementImage[1][lp_player], gv_achievementPoint[1]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/E4FBC154"));
            gv_playercamounlocked[19][lp_player] = true;
        }

        if ((gv_gameWon == true) && (gv_gamemode != 10) && (gv_playerDeaths[lp_player] > 10)) {
            gf_AwardAchievementBadgeUnlocked(2, lp_player, gv_achievementName[2][lp_player], gv_achievementDescription[2][lp_player], gv_achievementImage[2][lp_player], gv_achievementPoint[2]);
        }

        if ((gv_gamemode == 1) && (gv_gameWon == true)) {
            gf_AwardAchievementBadgeUnlocked(3, lp_player, gv_achievementName[3][lp_player], gv_achievementDescription[3][lp_player], gv_achievementImage[3][lp_player], gv_achievementPoint[3]);
        }

        if ((gv__12ManExtraction == true) && (gv_startingplayers == 12) && (gv_gameWon == true) && (gv_gamemode == 7)) {
            gf_AwardAchievementBadgeUnlocked(4, lp_player, gv_achievementName[4][lp_player], gv_achievementDescription[4][lp_player], gv_achievementImage[4][lp_player], gv_achievementPoint[4]);
        }

        if ((gv_gamemode == 9) && (gv_mod_tier3 == false) && (gv_gameWon == true)) {
            gf_AwardAchievementBadgeUnlocked(5, lp_player, gv_achievementName[5][lp_player], gv_achievementDescription[5][lp_player], gv_achievementImage[5][lp_player], gv_achievementPoint[5]);
        }

        if ((gv__12ManExtraction == true) && (gv_gameWon == true) && (gv_gamemode == 8) && (gv_mod_rifle == true) && (gv_playercamounlocked[16][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(6, lp_player, gv_achievementName[6][lp_player], gv_achievementDescription[6][lp_player], gv_achievementImage[6][lp_player], gv_achievementPoint[6]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/DB9739ED"));
            gv_playercamounlocked[16][lp_player] = true;
        }

        if ((gv_gamesPlayer1 == true) && (gv_playerGamesPlayed[lp_player] >= 250)) {
            gf_AwardAchievementBadgeUnlocked(7, lp_player, gv_achievementName[7][lp_player], gv_achievementDescription[7][lp_player], gv_achievementImage[7][lp_player], gv_achievementPoint[7]);
        }

        if ((gf_GetMosSpecificSICount(lp_player) >= 15)) {
            gf_AwardAchievementBadgeUnlocked(8, lp_player, gv_achievementName[8][lp_player], gv_achievementDescription[8][lp_player], gv_achievementImage[8][lp_player], gv_achievementPoint[8]);
        }

        if ((gv_gameWon == true) && (gf_GetTotalGamesWon(lp_player) >= 250)) {
            gf_AwardAchievementBadgeUnlocked(9, lp_player, gv_achievementName[9][lp_player], gv_achievementDescription[9][lp_player], gv_achievementImage[9][lp_player], gv_achievementPoint[9]);
        }

        if ((gv_gamesPlayer1 == true) && (gv_playerGamesPlayed[lp_player] >= 1000)) {
            gf_AwardAchievementBadgeUnlocked(10, lp_player, gv_achievementName[10][lp_player], gv_achievementDescription[10][lp_player], gv_achievementImage[10][lp_player], gv_achievementPoint[10]);
        }

        if ((gv_smithyKilled == true) && (gv_gamemode == 8)) {
            gf_AwardAchievementBadgeUnlocked(11, lp_player, gv_achievementName[11][lp_player], gv_achievementDescription[11][lp_player], gv_achievementImage[11][lp_player], gv_achievementPoint[11]);
        }

        if ((gv_playerRevivedPlayer[lp_player] == true) && (gv_playerRevives[lp_player] >= 1000) && ((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[2][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[2][1]))) {
            gf_AwardAchievementBadgeUnlocked(12, lp_player, gv_achievementName[12][lp_player], gv_achievementDescription[12][lp_player], gv_achievementImage[12][lp_player], gv_achievementPoint[12]);
        }

        if ((gv_gamesWon[2][lp_player] >= 10) && (gv_gamemode == 2) && (gv_gameWon == true)) {
            gf_AwardAchievementBadgeUnlocked(13, lp_player, gv_achievementName[13][lp_player], gv_achievementDescription[13][lp_player], gv_achievementImage[13][lp_player], gv_achievementPoint[13]);
        }

        if ((gv_gamesWon[3][lp_player] >= 10) && (gv_gamemode == 3) && (gv_gameWon == true)) {
            gf_AwardAchievementBadgeUnlocked(14, lp_player, gv_achievementName[14][lp_player], gv_achievementDescription[14][lp_player], gv_achievementImage[14][lp_player], gv_achievementPoint[14]);
        }

        if ((gv_gamesWon[4][lp_player] >= 10) && (gv_gamemode == 4) && (gv_gameWon == true)) {
            gf_AwardAchievementBadgeUnlocked(15, lp_player, gv_achievementName[15][lp_player], gv_achievementDescription[15][lp_player], gv_achievementImage[15][lp_player], gv_achievementPoint[15]);
        }

        if ((gv_gamesWon[5][lp_player] >= 10) && (gv_gamemode == 5) && (gv_gameWon == true)) {
            gf_AwardAchievementBadgeUnlocked(16, lp_player, gv_achievementName[16][lp_player], gv_achievementDescription[16][lp_player], gv_achievementImage[16][lp_player], gv_achievementPoint[16]);
        }

        if (((gv_playerExperience[1][lp_player] >= 1000000) || (gv_playerExperience[2][lp_player] >= 1000000) || (gv_playerExperience[3][lp_player] >= 1000000))) {
            gf_AwardAchievementBadgeUnlocked(17, lp_player, gv_achievementName[17][lp_player], gv_achievementDescription[17][lp_player], gv_achievementImage[17][lp_player], gv_achievementPoint[17]);
        }

        if ((gv_playerExperience[1][lp_player] >= 500000) && (gv_playerExperience[2][lp_player] >= 500000) && (gv_playerExperience[3][lp_player] >= 500000)) {
            gf_AwardAchievementBadgeUnlocked(18, lp_player, gv_achievementName[18][lp_player], gv_achievementDescription[18][lp_player], gv_achievementImage[18][lp_player], gv_achievementPoint[18]);
        }

        if ((gf_GetCamoCount(lp_player) >= 30)) {
            gf_AwardAchievementBadgeUnlocked(19, lp_player, gv_achievementName[19][lp_player], gv_achievementDescription[19][lp_player], gv_achievementImage[19][lp_player], gv_achievementPoint[19]);
        }

        if ((gv_gamesWon[7][lp_player] >= 100) && (gv_gamemode == 7) && (gv_gameWon == true) && (gv_playerdecalunlocked[30][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(20, lp_player, gv_achievementName[20][lp_player], gv_achievementDescription[20][lp_player], gv_achievementImage[20][lp_player], gv_achievementPoint[20]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/4A25A0E1"));
            gv_playerdecalunlocked[30][lp_player] = true;
        }

        if ((gv_playerhits[lp_player] == 0) && (gv_playerDeaths[lp_player] == 0) && (gv_gamemode >= 3) && (gv_gamemode <= 5) && (gv_gameWon == true) && (gv_playercamounlocked[31][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(21, lp_player, gv_achievementName[21][lp_player], gv_achievementDescription[21][lp_player], gv_achievementImage[21][lp_player], gv_achievementPoint[21]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/7F174113"));
            gv_playercamounlocked[31][lp_player] = true;
        }

        if ((gv_gameWon == true) && (gv_gamemode == 7) && (gv_playerhits[lp_player] < 5) && (gv_playerkills[lp_player] >= 2500) && (gv_gameWon == true) && (gv_playercamounlocked[20][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(22, lp_player, gv_achievementName[22][lp_player], gv_achievementDescription[22][lp_player], gv_achievementImage[22][lp_player], gv_achievementPoint[22]);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/78D1C18F"));
            gv_playercamounlocked[20][lp_player] = true;
        }

        if ((gv_gamesWon[8][lp_player] >= 50) && (gv_gamemode == 8) && (gv_gameWon == true) && (gv_playerdecalunlocked[36][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(23, lp_player, gv_achievementName[23][lp_player], gv_achievementDescription[23][lp_player], gv_achievementImage[23][lp_player], gv_achievementPoint[23]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/F5A5D561"));
            gv_playerdecalunlocked[36][lp_player] = true;
        }

        if ((gv_gamemode == 3) && (gv_mod_tier3 == true) && (gv_randomEnabled == true) && (gv_gameWon == true) && (gv_playerdecalunlocked[40][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(24, lp_player, gv_achievementName[24][lp_player], gv_achievementDescription[24][lp_player], gv_achievementImage[24][lp_player], gv_achievementPoint[24]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/D0CA35B9"));
            gv_playerdecalunlocked[40][lp_player] = true;
        }

        if ((gv_gamemode == 8) && (gv_pMCBonusMissionEnabled == true) && (gv_waterSamplesCompleted == true) && (gv_gameWon == true) && (gv_achievementUnlocked[25][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(25, lp_player, gv_achievementName[25][lp_player], gv_achievementDescription[25][lp_player], gv_achievementImage[25][lp_player], gv_achievementPoint[25]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
        }

        if ((gv_gamemode == 9) && (gv_gameWon == true) && (gv_mod_Weather == true) && (gv_mod_NoAmmo == true) && (gv_achievementUnlocked[26][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(26, lp_player, gv_achievementName[26][lp_player], gv_achievementDescription[26][lp_player], gv_achievementImage[26][lp_player], gv_achievementPoint[26]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
        }

        if ((gv_gamemode == 3) && (gv_gameWon == true) && (gv_mod_Weather == true) && (gv_thunderstorm == true) && (gv_achievementUnlocked[27][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(27, lp_player, gv_achievementName[27][lp_player], gv_achievementDescription[27][lp_player], gv_achievementImage[27][lp_player], gv_achievementPoint[27]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
        }

        if ((gv_gamemode == 3) && (gv_gameWon == true) && (gv_mod_Weather == true) && (gv_frostBite == true) && (gv_achievementUnlocked[28][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(28, lp_player, gv_achievementName[28][lp_player], gv_achievementDescription[28][lp_player], gv_achievementImage[28][lp_player], gv_achievementPoint[28]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
        }

        if ((gv_gamemode == 4) && (gv_gameWon == true) && (gv_mod_Weather == true) && (gv_intenseFog == true) && (gv_achievementUnlocked[29][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(29, lp_player, gv_achievementName[29][lp_player], gv_achievementDescription[29][lp_player], gv_achievementImage[29][lp_player], gv_achievementPoint[29]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
        }

        if ((gv_gameWon == true) && (gv_achievementUnlocked[27][lp_player] == true) && (gv_achievementUnlocked[28][lp_player] == true) && (gv_achievementUnlocked[29][lp_player] == true) && (gv_achievementUnlocked[30][lp_player] == false) && (gv_playercamounlocked[32][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(30, lp_player, gv_achievementName[30][lp_player], gv_achievementDescription[30][lp_player], gv_achievementImage[30][lp_player], gv_achievementPoint[30]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/4E8C28B0"));
            gv_playercamounlocked[32][lp_player] = true;
        }

        if ((gv_juggernaughtKilled == true) && (gv_gamemode == 8)) {
            gf_AwardAchievementBadgeUnlocked(31, lp_player, gv_achievementName[31][lp_player], gv_achievementDescription[31][lp_player], gv_achievementImage[31][lp_player], gv_achievementPoint[31]);
        }

        if ((gv_gamemode == 11) && (gv_pMCPrologueCompleted == true) && ((gv_playercamounlocked[22][lp_player] == false) || (gv_playerdecalunlocked[6][lp_player] == false))) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/B2E595F1"));
            gv_playercamounlocked[22][lp_player] = true;
            gv_playerdecalunlocked[6][lp_player] = true;
        }

        if ((gv_gamemode == 8) && (gv_startingplayers == 1) && (gv_achievementUnlocked[32][lp_player] == false) && (gv_gameWon == true) && (UnitGetType(gv_playerHeroes[lp_player]) == "Cyborg")) {
            gf_AwardAchievementBadgeUnlocked(32, lp_player, gv_achievementName[32][lp_player], gv_achievementDescription[32][lp_player], gv_achievementImage[32][lp_player], gv_achievementPoint[32]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/3B4A2C3B"));
        }

        if ((gv_gamemode == 11) && (gv_pMCPrologueCompleted == true) && (gv_pMCCh1Completed == true) && (gv_pMCCh2Completed == true) && (gv_pMCCh3Completed == true) && (gv_gameWon == true) && (gv_playerdecalunlocked[1][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(36, lp_player, gv_achievementName[36][lp_player], gv_achievementDescription[36][lp_player], gv_achievementImage[36][lp_player], gv_achievementPoint[36]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/A3594932"));
            gv_playerdecalunlocked[1][lp_player] = true;
        }

        if ((gv_gamemode == 11) && (gv_gamesWon[11][lp_player] >= 10) && (gv_gameWon == true) && ((gv_playerdecalunlocked[25][lp_player] == false) || (gv_playercamounlocked[44][lp_player] == false))) {
            gf_AwardAchievementBadgeUnlocked(38, lp_player, gv_achievementName[38][lp_player], gv_achievementDescription[38][lp_player], gv_achievementImage[38][lp_player], gv_achievementPoint[38]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/AC824326"));
            gv_playerdecalunlocked[25][lp_player] = true;
            gv_playercamounlocked[44][lp_player] = true;
        }

        if ((gv_gamemode >= 3) && (gv_gamemode <= 5) && (gv_playermassivekills[lp_player] >= 50) && (gv_playerdecalunlocked[35][lp_player] == false)) {
            gf_AwardAchievementBadgeUnlocked(40, lp_player, gv_achievementName[40][lp_player], gv_achievementDescription[40][lp_player], gv_achievementImage[40][lp_player], gv_achievementPoint[40]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/2EA55B02"));
            gv_playerdecalunlocked[35][lp_player] = true;
        }

        if ((gv_playerRevivedPlayer[lp_player] == true) && (gv_playerRevives[lp_player] >= 10000) && ((UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[2][0]) || (UnitGetType(gv_playerHeroes[lp_player]) == gv_mOS[2][1]))) {
            gf_AwardAchievementBadgeUnlocked(48, lp_player, gv_achievementName[48][lp_player], gv_achievementDescription[48][lp_player], gv_achievementImage[48][lp_player], gv_achievementPoint[48]);
        }

    }

    return true;
}

trigger auto_gf_SMIni_Trigger = null;
int auto_gf_SMIni_lp_player;
int auto_gf_SMIni_lp_scrollBar;

void gf_SMIni (int lp_player, int lp_scrollBar) {
    auto_gf_SMIni_lp_player = lp_player;
    auto_gf_SMIni_lp_scrollBar = lp_scrollBar;

    if (auto_gf_SMIni_Trigger == null) {
        auto_gf_SMIni_Trigger = TriggerCreate("auto_gf_SMIni_TriggerFunc");
    }

    TriggerExecute(auto_gf_SMIni_Trigger, false, false);
}

bool auto_gf_SMIni_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_SMIni_lp_player;
    int lp_scrollBar = auto_gf_SMIni_lp_scrollBar;

    // Variable Declarations
    int lv_i;
    text[gv_achievementCount + 1][13] lv_lockedText;

    // Automatic Variable Declarations
    const int autoD5A2370A_ae = 8;
    const int autoD5A2370A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 0;
    for ( ; ( (autoD5A2370A_ai >= 0 && lv_i <= autoD5A2370A_ae) || (autoD5A2370A_ai < 0 && lv_i >= autoD5A2370A_ae) ) ; lv_i += autoD5A2370A_ai ) {
        if ((gv_achievementUnlocked[((lv_i + 1) + lp_scrollBar)][lp_player] == true)) {
            DialogControlFadeTransparency(gv_sM.lv_menuItems[lv_i][0], PlayerGroupSingle(lp_player), 0.0, 0.0);
            DialogControlFadeTransparency(gv_sM.lv_menuItems[lv_i][1], PlayerGroupSingle(lp_player), 0.0, 0.0);
            DialogControlFadeTransparency(gv_sM.lv_menuItems[lv_i][2], PlayerGroupSingle(lp_player), 0.0, 0.0);
            DialogControlFadeTransparency(gv_sM.lv_menuItems[lv_i][3], PlayerGroupSingle(lp_player), 0.0, 0.0);
            libNtve_gf_SetDialogItemImage(gv_sM.lv_menuItems[lv_i][2], gv_achievementImage[((lv_i + 1) + lp_scrollBar)][lp_player], PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_sM.lv_menuItems[lv_i][2], gv_achievementTooltip[((lv_i + 1) + lp_scrollBar)][lp_player], PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemText(gv_sM.lv_menuItems[lv_i][3], gv_achievementName[((lv_i + 1) + lp_scrollBar)][lp_player], PlayerGroupSingle(lp_player));
        }
        else {
            DialogControlFadeTransparency(gv_sM.lv_menuItems[lv_i][0], PlayerGroupSingle(lp_player), 0.0, 75.0);
            DialogControlFadeTransparency(gv_sM.lv_menuItems[lv_i][1], PlayerGroupSingle(lp_player), 0.0, 75.0);
            DialogControlFadeTransparency(gv_sM.lv_menuItems[lv_i][2], PlayerGroupSingle(lp_player), 0.0, 75.0);
            DialogControlFadeTransparency(gv_sM.lv_menuItems[lv_i][3], PlayerGroupSingle(lp_player), 0.0, 75.0);
            libNtve_gf_SetDialogItemImage(gv_sM.lv_menuItems[lv_i][2], gv_achievementImage[((lv_i + 1) + lp_scrollBar)][lp_player], PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_sM.lv_menuItems[lv_i][2], gv_achievementTooltip[((lv_i + 1) + lp_scrollBar)][lp_player], PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemText(gv_sM.lv_menuItems[lv_i][3], gv_achievementName[((lv_i + 1) + lp_scrollBar)][lp_player], PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_sM.lv_menuItems[lv_i][2], lv_lockedText[((lv_i + 1) + lp_scrollBar)][lp_player], PlayerGroupSingle(lp_player));
        }
    }
    return true;
}

void gf_SMCreate () {
    // Variable Declarations
    int lv_z;
    int lv_i;
    playergroup lv_pg;
    int lv_x;
    int lv_y;
    int lv_offsetX;
    int lv_offsetY;
    int lv_d;
    int lv_di;
    int lv_temp;

    // Automatic Variable Declarations
    const int auto3FE6649A_ae = 8;
    const int auto3FE6649A_ai = 1;

    // Variable Initialization
    lv_pg = PlayerGroupAll();
    lv_d = c_invalidDialogId;
    lv_di = c_invalidDialogControlId;
    lv_temp = c_invalidDialogControlId;

    // Implementation
    gf_CreateDialogMore(true, 500, 800, false, 10, 0, c_anchorTop, true, lv_pg, "", false);
    gv_sM.lv_dialog = DialogLastCreated();
    lv_d = DialogLastCreated();
    gf_CreateDialogItemAny(c_triggerControlTypeImage, lv_d, "", 500, DialogGetHeight(lv_d), c_anchorTop, 0, 0, null, null, "", "Assets\\Textures\\ui_battle_frame_summary_metal_terran.dds", "", lv_pg);
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeHorizontalBorder, lv_pg);
    DialogSetRenderPriority(DialogLastCreated(), 513);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, lv_pg);
    lv_di = DialogControlLastCreated();
    gf_CreateDialogItemAny(c_triggerControlTypeImage, lv_d, "", 480, 90, c_anchorTop, 0, 0, null, null, "", "Assets\\Textures\\ui_battlenet_glue_coop_score_commander_nameplate.dds", "", lv_pg);
    DialogControlSetPositionRelative(DialogControlLastCreated(), lv_pg, c_anchorTop, lv_di, c_anchorTop, 0, 0);
    gf_CreateDialogItemAny(c_triggerControlTypeLabel, lv_d, "", 480, 90, c_anchorTop, 0, 0, null, StringExternal("Param/Value/0A8524DF"), "ModCenterSize24Bold", "", "", lv_pg);
    DialogControlSetPositionRelative(DialogControlLastCreated(), lv_pg, c_anchorTop, lv_di, c_anchorTop, 0, 10);
    lv_x = 455;
    lv_y = 80;
    lv_offsetX = -2;
    lv_offsetY = 80;
    lv_i = 0;
    for ( ; ( (auto3FE6649A_ai >= 0 && lv_i <= auto3FE6649A_ae) || (auto3FE6649A_ai < 0 && lv_i >= auto3FE6649A_ae) ) ; lv_i += auto3FE6649A_ai ) {
        gf_CreateDialogItemAny(c_triggerControlTypeButton, lv_d, "MapLayouts/OneStateNoSound", lv_x, lv_y, c_anchorTop, 0, 0, null, null, "", "Assets\\Textures\\ui_challenge_iconborder.dds", "Assets\\Textures\\ui_challenge_iconborder.dds", lv_pg);
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_pg, c_anchorTop, lv_di, c_anchorTop, lv_offsetX, lv_offsetY);
        gv_sM.lv_menuItems[lv_i][0] = DialogControlLastCreated();
        lv_temp = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), lv_pg, 0.0, 75.0);
        gf_CreateDialogItemAny(c_triggerControlTypeImage, lv_d, "", 75, 75, c_anchorTop, 0, 0, null, null, "", "Assets\\Textures\\ui_ingame_tutorial_stepbutton_hover_terr.dds", "", lv_pg);
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_pg, c_anchorCenter, lv_temp, c_anchorLeft, 45, 0);
        gv_sM.lv_menuItems[lv_i][1] = DialogControlLastCreated();
        lv_temp = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), lv_pg, 0.0, 75.0);
        libNtve_gf_CreateDialogItemImage(lv_d, 55, 55, c_anchorTop, 0, 0, StringToText(""), "Assets\\Custom Icons\\padlock.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_pg, c_anchorCenter, lv_temp, c_anchorCenter, 0, 0);
        gv_sM.lv_menuItems[lv_i][2] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), lv_pg, 0.0, 75.0);
        gf_CreateDialogItemAny(c_triggerControlTypeLabel, lv_d, "", 400, 60, c_anchorTop, 0, 0, null, StringToText(""), "ModLeftSize20Bold", "", "", lv_pg);
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_pg, c_anchorLeft, lv_temp, c_anchorRight, 0, 0);
        gv_sM.lv_menuItems[lv_i][3] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), lv_pg, 0.0, 75.0);
        lv_offsetY += 75;
    }
    gf_CreateDialogItemAny(c_triggerControlTypeSlider, lv_d, "MapLayouts/ScrollBar", 22, 685, c_anchorRight, 7, 10, null, null, "", "", "", lv_pg);
    gv_sM.lv_scrollBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, lv_pg);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, lv_pg);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 41.0, lv_pg);
    DialogSetVisible(gv_sM.lv_dialog, PlayerGroupAll(), false);
    TriggerEnable(gt_SMResponses, true);
}

void gf_DisplayAchievement (int lp_x, int lp_player, text lp_nameLabel, text lp_description, string lp_icon, text lp_points) {
    // Variable Declarations
    int lv_achievementNameLabel;
    int lv_description;
    int lv_achievementBackground;
    int lv_flash;
    int lv_flash2;
    int lv_animation;
    int lv_achievementBody;
    int lv_y;
    int lv_z;

    // Automatic Variable Declarations
    const int auto176BE93F_ae = 1;
    const int auto176BE93F_ai = 1;
    const int auto06057BD8_ae = 50;
    const int auto06057BD8_ai = 1;

    // Variable Initialization
    lv_achievementNameLabel = c_invalidDialogControlId;
    lv_description = c_invalidDialogControlId;
    lv_achievementBackground = c_invalidDialogControlId;
    lv_flash = c_invalidDialogControlId;
    lv_flash2 = c_invalidDialogControlId;
    lv_animation = c_invalidDialogControlId;
    lv_achievementBody = c_invalidDialogId;

    // Implementation
    SoundPlayForPlayer(SoundLink("AC_UI_OnClick01", 1), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
    lv_z = 1;
    for ( ; ( (auto176BE93F_ai >= 0 && lv_z <= auto176BE93F_ae) || (auto176BE93F_ai < 0 && lv_z >= auto176BE93F_ae) ) ; lv_z += auto176BE93F_ai ) {
        if ((gv_achievementSlotFilled[lv_z][lp_player] == false)) {
            if ((gv_achievementUnlocked[lp_x][lp_player] == true)) {
                gv_achievementSlotFilled[lv_z][lp_player] = true;
                DialogCreate(640, 153, c_anchorCenter, 0, (250 - ((191 + (1 / 4)) * (lv_z - 1))), true);
                lv_achievementBody = DialogLastCreated();
                DialogSetImageVisible(lv_achievementBody, false);
                libNtve_gf_CreateDialogItemImage(lv_achievementBody, 800, (191 + 1), c_anchorCenter, 0, 0, StringToText(""), "Assets/Textures/ui_achievement_metalframe.dds", c_triggerImageTypeEndCap, true, Color(100,100,100), c_triggerBlendModeNormal);
                lv_achievementBackground = DialogControlLastCreated();
                DialogControlSetFullDialog(lv_achievementBackground, PlayerGroupSingle(lp_player), true);
                DialogSetVisible(lv_achievementBody, PlayerGroupSingle(lp_player), true);
                SoundPlay(SoundLink("UI_BNet_Achievement", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 610, 125, c_anchorCenter, 0, 0, StringToText(""), "Textures\\Achievement-Animation-Frame-Dark-New-Test.dds", c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
                lv_animation = DialogControlLastCreated();
                libNtve_gf_SetDialogItemRenderPriority(lv_animation, 520, PlayerGroupSingle(lp_player));
                DialogSetTransparency(lv_achievementBody, 50.0);
                Wait(0.0625, c_timeGame);
                DialogSetTransparency(lv_achievementBody, 0.0);
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Outiline-New.dds", PlayerGroupSingle(lp_player));
                Wait(0.1, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Outline-New-Frame.dds", PlayerGroupSingle(lp_player));
                Wait(0.1, c_timeGame);
                DialogControlFadeTransparency(lv_animation, PlayerGroupSingle(lp_player), 0.25, 100.0);
                Wait(0.35, c_timeGame);
                DialogControlFadeTransparency(lv_animation, PlayerGroupSingle(lp_player), 0.0, 0.0);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-1.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-5.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-10.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-15.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_CreateDialogItemLabel(lv_achievementBody, 500, 50, c_anchorTopLeft, 145, 40, (StringExternal("Param/Value/EEEAE1EE") + (lp_nameLabel + StringExternal("Param/Value/811992F8"))), ColorWithAlpha(0,0,0,0), false, 0.5);
                lv_achievementNameLabel = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(lv_achievementBody, 353, 100, c_anchorTopLeft, 0, 0, (StringExternal("Param/Value/2BAA6271") + (lp_description + StringExternal("Param/Value/FE4026CC"))), ColorWithAlpha(0,0,0,0), false, 0.5);
                lv_description = DialogControlLastCreated();
                DialogControlSetPositionRelative(lv_description, PlayerGroupSingle(lp_player), c_anchorTopLeft, lv_achievementNameLabel, c_anchorBottomLeft, 0, -25);
                libNtve_gf_CreateDialogItemLabel(lv_achievementBody, 84, 50, c_anchorTopRight, 40, 60, (StringExternal("Param/Value/394D8B13") + (lp_points + StringExternal("Param/Value/7CC76839"))), ColorWithAlpha(0,0,0,0), false, 0.5);
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-20.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-25.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-30.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-35.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_CreateDialogItemImage(lv_achievementBody, 76, 76, c_anchorTopLeft, 44, 40, StringToText(""), lp_icon, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemImage(lv_achievementBody, 76, 84, c_anchorTopLeft, 44, 40, StringToText(""), "Assets/Textures/white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
                lv_flash = DialogControlLastCreated();
                DialogControlFadeTransparency(lv_flash, PlayerGroupSingle(lp_player), 0.25, 100.0);
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-40.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-45.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_CreateDialogItemImage(lv_achievementBody, 84, 84, c_anchorTopRight, 46, 37, StringToText(""), "Assets/Textures/white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
                lv_flash2 = DialogControlLastCreated();
                DialogControlFadeTransparency(lv_flash2, PlayerGroupSingle(lp_player), 0.25, 100.0);
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-50.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                DialogControlFadeTransparency(lv_flash, PlayerGroupSingle(lp_player), 0.0, 100.0);
                libNtve_gf_SetDialogItemImage(lv_animation, "Textures\\Achievement-Animation-Frame-Shine-Test-55.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                DialogControlDestroy(lv_animation);
                Wait(0.0625, c_timeGame);
                DialogControlFadeTransparency(lv_flash2, PlayerGroupSingle(lp_player), 0.0, 100.0);
                Wait(0.1, c_timeGame);
                DialogControlFadeTransparency(lv_flash, PlayerGroupSingle(lp_player), 0.0, 75.0);
                DialogControlFadeTransparency(lv_flash2, PlayerGroupSingle(lp_player), 0.0, 75.0);
                libNtve_gf_SetDialogItemImage(lv_flash2, "Textures\\Achievement-Animation-Point-Shine-1.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemImage(lv_flash, "Textures\\Achievement-Animation-Icon-Shine-1.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_flash2, "Textures\\Achievement-Animation-Point-Shine-5.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemImage(lv_flash, "Textures\\Achievement-Animation-Icon-Shine-5.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                libNtve_gf_SetDialogItemImage(lv_flash2, "Textures\\Achievement-Animation-Point-Shine-9.dds", PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemImage(lv_flash, "Textures\\Achievement-Animation-Icon-Shine-9.dds", PlayerGroupSingle(lp_player));
                Wait(0.0625, c_timeGame);
                DialogControlDestroy(lv_flash);
                DialogControlDestroy(lv_flash2);
                Wait(0.0625, c_timeGame);
                lv_y = 0;
                for ( ; ( (auto06057BD8_ai >= 0 && lv_y <= auto06057BD8_ae) || (auto06057BD8_ai < 0 && lv_y >= auto06057BD8_ae) ) ; lv_y += auto06057BD8_ai ) {
                    DialogSetTransparency(lv_achievementBody, lv_y);
                    Wait(0.0625, c_timeGame);
                }
                DialogSetVisible(lv_achievementBody, PlayerGroupSingle(lp_player), false);
                DialogDestroy(lv_achievementBody);
                gv_achievementSlotFilled[lv_z][lp_player] = false;
                break;
            }

        }

    }
}

int gf_CreateDialogItemAny (int lp_dialogItemType, int lp_dialog, string lp_template, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, text lp_buttonText, string lp_style, string lp_hoverImage2, string lp_hoverImage, playergroup lp_players) {
    // Variable Declarations
    int lv_dialogitem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    if ((lp_template != "")) {
        DialogControlCreateFromTemplate(lp_dialog, lp_dialogItemType, lp_template);
    }
    else {
        DialogControlCreate(lp_dialog, lp_dialogItemType);
    }
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetPosition(lv_dialogitem, lp_players, lp_anchor, lp_offsetX, lp_offsetY);
    DialogControlSetSize(lv_dialogitem, lp_players, lp_width, lp_height);
    if ((lp_tooltip != null)) {
        libNtve_gf_SetDialogItemTooltip(lv_dialogitem, lp_tooltip, lp_players);
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lv_dialogitem, StringToText(""), lp_players);
    }
    if ((lp_buttonText != null)) {
        libNtve_gf_SetDialogItemText(lv_dialogitem, lp_buttonText, lp_players);
    }
    else {
        libNtve_gf_SetDialogItemText(lv_dialogitem, StringToText(""), lp_players);
    }
    if ((lp_style != "")) {
        libNtve_gf_SetDialogItemStyle(lv_dialogitem, lp_style, lp_players);
    }

    if ((lp_hoverImage2 != "")) {
        libNtve_gf_SetDialogItemImage(lv_dialogitem, lp_hoverImage2, lp_players);
    }

    if ((lp_hoverImage != "")) {
        libNtve_gf_SetDialogItemImage2(lv_dialogitem, lp_hoverImage, lp_players);
    }

    DialogControlSetEnabled(lv_dialogitem, lp_players, true);
    DialogControlSetVisible(lv_dialogitem, lp_players, true);
    return lv_dialogitem;
}

int gf_CreateDialogMore (bool lp_modal, int lp_width, int lp_height, bool lp_fullscreen, int lp_offsetX, int lp_offsetY, int lp_anchor, bool lp_dialogShowHide, playergroup lp_players, string lp_hoverImage2, bool lp_bGShowHide) {
    // Variable Declarations
    int lv_dialogitem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogitem = c_invalidDialogId;

    // Implementation
    DialogCreate(lp_width, lp_height, lp_anchor, lp_offsetX, lp_offsetY, lp_modal);
    lv_dialogitem = DialogLastCreated();
    DialogSetFullscreen(DialogLastCreated(), lp_fullscreen);
    if ((lp_hoverImage2 != "")) {
        DialogSetImage(DialogLastCreated(), lp_hoverImage2);
    }

    DialogSetImageVisible(DialogLastCreated(), lp_bGShowHide);
    DialogSetVisible(DialogLastCreated(), lp_players, lp_dialogShowHide);
    return lv_dialogitem;
}

void gf_CreateAccessoryDialog () {
    // Variable Declarations
    int lv_int;
    int lv_xoffset;
    int lv_yoffset;

    // Automatic Variable Declarations
    int auto696A5116_ae;
    const int auto696A5116_ai = 1;
    playergroup auto0A441E89_g;
    int auto0A441E89_var;

    // Variable Initialization
    lv_xoffset = 30;
    lv_yoffset = 100;

    // Implementation
    DialogCreate(530, 400, c_anchorLeft, 0, -160, true);
    gv_accessoryDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/D04EA273"));
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 450, 25, StringExternal("Param/Value/0B0A7327"), "Assets\\Textures\\ui_glues_icons_infogeneric.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    auto696A5116_ae = UserDataInstanceCount("Accessories");
    lv_int = 1;
    for ( ; ( (auto696A5116_ai >= 0 && lv_int <= auto696A5116_ae) || (auto696A5116_ai < 0 && lv_int >= auto696A5116_ae) ) ; lv_int += auto696A5116_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_accessoryDialog, 50, 50, c_anchorTopLeft, lv_xoffset, lv_yoffset, StringToText(UserDataGetString("Accessories", UserDataInstance("Accessories", lv_int), "Accessory Name", 1)), StringToText(StringSub(UserDataGetString("Accessories", UserDataInstance("Accessories", lv_int), "Accessory Name", 1), 1, 2)), "");
        gv_accessoryDialogButtons[lv_int] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefCenterSize24Bold", PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(gv_accessoryDialogButtons[lv_int], true, PlayerGroupAll());
        lv_xoffset = (lv_xoffset + 50);
        if ((lv_xoffset >= 210)) {
            lv_xoffset = 30;
            lv_yoffset = (lv_yoffset + 50);
        }

    }
    auto0A441E89_g = gv_players;
    auto0A441E89_var = -1;
    while (true) {
        auto0A441E89_var = PlayerGroupNextPlayer(auto0A441E89_g, auto0A441E89_var);
        if (auto0A441E89_var < 0) { break; }
        DialogControlCreate(gv_accessoryDialog, c_triggerControlTypeUnitModel);
        gv_accessoryDialogItems[auto0A441E89_var] = DialogControlLastCreated();
        DialogSetImageVisible(DialogControlGetDialog(DialogControlLastCreated()), false);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 100, 50);
        DialogControlSetSize(gv_accessoryDialogItems[auto0A441E89_var], PlayerGroupAll(), 500, 300);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto0A441E89_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    }
}

void gf_UpdateAccessoryDialog (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto57222737_ae;
    const int auto57222737_ai = 1;

    // Variable Initialization

    // Implementation
    auto57222737_ae = UserDataInstanceCount("Accessories");
    lv_i = 1;
    for ( ; ( (auto57222737_ai >= 0 && lv_i <= auto57222737_ae) || (auto57222737_ai < 0 && lv_i >= auto57222737_ae) ) ; lv_i += auto57222737_ai ) {
        if ((gv_playeraccessoryunlocked[lv_i][lp_player] == true)) {
            libNtve_gf_SetDialogItemDesaturated(gv_accessoryDialogButtons[lv_i], false, PlayerGroupSingle(lp_player));
        }
    }
    libNtve_gf_SetDialogItemDesaturated(gv_accessoryDialogButtons[gv_textureValue[lp_player][2]], true, PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemDesaturationColor(gv_accessoryDialogButtons[gv_textureValue[lp_player][2]], Color(254*100/255,138*100/255,14*100/255), PlayerGroupSingle(lp_player));
}

int gf_NumberofPlayers () {
    // Variable Declarations
    int lv_numberofPlayers;

    // Automatic Variable Declarations
    const int auto07551134_ae = 12;
    int auto07551134_var;

    // Variable Initialization

    // Implementation
    auto07551134_var = 1;
    for ( ; auto07551134_var <= auto07551134_ae; auto07551134_var += 1 ) {
        if (((PlayerStatus(auto07551134_var) == c_playerStatusActive) && (PlayerType(auto07551134_var) == c_playerTypeUser))) {
            lv_numberofPlayers += 1;
        }

    }
    return lv_numberofPlayers;
}

void gf_VoteKickFunction (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetTitle(gv_voteKickVoteBoard, (StringExternal("Param/Value/993FAAAC") + (TextWithColor(PlayerName(lp_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playerNumber, false))) + StringExternal("Param/Value/D6EC33BC"))));
    gv_kickedPlayer = lp_playerNumber;
}

void gf_CreateVoteKickButton (int lp_anchor, int lp_offsetX, int lp_offsetY, int lp_sidebarWidth) {
    // Variable Declarations
    int lv_height;
    int lv_width;
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoCFC19211_g;
    int autoCFC19211_var;

    // Variable Initialization
    lv_height = 500;
    lv_width = 400;

    // Implementation
    libNtve_gf_DisplayScreenButton(1, StringExternal("Param/Value/E931BEB0"), 150, 40, lp_anchor, (lp_offsetX * lp_sidebarWidth), lp_offsetY, null);
    gv_voteKickButton = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(1, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/9381BCA2"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(7.84, 33.73, 13.33), PlayerGroupAll());
    autoCFC19211_g = gv_players;
    autoCFC19211_var = -1;
    while (true) {
        autoCFC19211_var = PlayerGroupNextPlayer(autoCFC19211_g, autoCFC19211_var);
        if (autoCFC19211_var < 0) { break; }
        if ((PlayerHandle(autoCFC19211_var) == "1-S2-1-2538043")) {
            DialogControlSetVisible(gv_voteKickButton, PlayerGroupSingle(autoCFC19211_var), false);
        }

    }
}

trigger auto_gf_KickDelay_Trigger = null;
playergroup auto_gf_KickDelay_lp_player;
int auto_gf_KickDelay_lp_time;

void gf_KickDelay (playergroup lp_player, int lp_time) {
    auto_gf_KickDelay_lp_player = lp_player;
    auto_gf_KickDelay_lp_time = lp_time;

    if (auto_gf_KickDelay_Trigger == null) {
        auto_gf_KickDelay_Trigger = TriggerCreate("auto_gf_KickDelay_TriggerFunc");
    }

    TriggerExecute(auto_gf_KickDelay_Trigger, false, false);
}

bool auto_gf_KickDelay_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_player = auto_gf_KickDelay_lp_player;
    int lp_time = auto_gf_KickDelay_lp_time;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(gv_voteKickButton, lp_player, false);
    Wait(lp_time, c_timeGame);
    DialogControlSetEnabled(gv_voteKickButton, lp_player, true);
    return true;
}

void gf_CreateUnlockableDialog () {
    // Variable Declarations
    int lv_int;
    int lv_yoffset;
    int lv_xoffset;

    // Automatic Variable Declarations
    int autoB2624626_ae;
    const int autoB2624626_ai = 1;
    int auto75BAB445_ae;
    const int auto75BAB445_ai = 1;
    playergroup auto78011798_g;
    int auto78011798_var;

    // Variable Initialization
    lv_yoffset = 100;
    lv_xoffset = 30;

    // Implementation
    DialogCreate(730, 785, c_anchorLeft, 0, -160, true);
    gv_unlockDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/A4570D21"));
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 645, 25, StringExternal("Param/Value/E455BE7D"), "Assets\\Textures\\ui_glues_icons_infogeneric.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    autoB2624626_ae = UserDataInstanceCount("Decals");
    lv_int = 0;
    for ( ; ( (autoB2624626_ai >= 0 && lv_int <= autoB2624626_ae) || (autoB2624626_ai < 0 && lv_int >= autoB2624626_ae) ) ; lv_int += autoB2624626_ai ) {
        if ((lv_int == 0)) {
            libNtve_gf_CreateDialogItemButton(gv_unlockDialog, 50, 50, c_anchorTopLeft, lv_xoffset, lv_yoffset, StringExternal("Param/Value/D6A5F645"), StringExternal("Param/Value/F7AE61AD"), "");
        }
        else {
            libNtve_gf_CreateDialogItemButton(gv_unlockDialog, 50, 50, c_anchorTopLeft, lv_xoffset, lv_yoffset, StringToText(UserDataGetString("Decals", UserDataInstance("Decals", lv_int), "Decal Name", 1)), StringToText(StringSub(UserDataGetString("Decals", UserDataInstance("Decals", lv_int), "Decal Name", 1), 1, 2)), "");
        }
        gv_decalDialogButtons[lv_int] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefCenterSize24Bold", PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(gv_decalDialogButtons[lv_int], true, PlayerGroupAll());
        lv_xoffset = (lv_xoffset + 50);
        if ((lv_xoffset >= 210)) {
            lv_xoffset = 30;
            lv_yoffset = (lv_yoffset + 50);
        }

    }
    lv_xoffset = 490;
    lv_yoffset = 100;
    auto75BAB445_ae = UserDataInstanceCount("Camos");
    lv_int = 1;
    for ( ; ( (auto75BAB445_ai >= 0 && lv_int <= auto75BAB445_ae) || (auto75BAB445_ai < 0 && lv_int >= auto75BAB445_ae) ) ; lv_int += auto75BAB445_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_unlockDialog, 50, 50, c_anchorTopLeft, lv_xoffset, lv_yoffset, StringToText(UserDataGetString("Camos", UserDataInstance("Camos", lv_int), "Camo Name", 1)), StringToText(StringSub(UserDataGetString("Camos", UserDataInstance("Camos", lv_int), "Camo Name", 1), 1, 2)), "");
        gv_camoDialogButtons[lv_int] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefCenterSize24Bold", PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(gv_camoDialogButtons[lv_int], true, PlayerGroupAll());
        lv_xoffset = (lv_xoffset + 50);
        if ((lv_xoffset >= 690)) {
            lv_xoffset = 490;
            lv_yoffset = (lv_yoffset + 50);
        }

    }
    auto78011798_g = gv_players;
    auto78011798_var = -1;
    while (true) {
        auto78011798_var = PlayerGroupNextPlayer(auto78011798_g, auto78011798_var);
        if (auto78011798_var < 0) { break; }
        DialogControlCreate(gv_unlockDialog, c_triggerControlTypeUnitModel);
        gv_unlockDialogItems[auto78011798_var] = DialogControlLastCreated();
        DialogSetImageVisible(DialogControlGetDialog(DialogControlLastCreated()), false);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 50);
        DialogControlSetSize(gv_unlockDialogItems[auto78011798_var], PlayerGroupAll(), 600, 400);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto78011798_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
        gv_textureValue[auto78011798_var][0] = 0;
        libNtve_gf_SetDialogItemDesaturated(gv_decalDialogButtons[0], true, PlayerGroupSingle(auto78011798_var));
        libNtve_gf_SetDialogItemDesaturationColor(gv_decalDialogButtons[0], Color(254*100/255,138*100/255,14*100/255), PlayerGroupSingle(auto78011798_var));
        gv_textureValue[auto78011798_var][1] = 1;
        libNtve_gf_SetDialogItemDesaturated(gv_camoDialogButtons[1], true, PlayerGroupSingle(auto78011798_var));
        libNtve_gf_SetDialogItemDesaturationColor(gv_camoDialogButtons[1], Color(254*100/255,138*100/255,14*100/255), PlayerGroupSingle(auto78011798_var));
    }
}

void gf_UpdateUnlockableDialog (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto14916F93_ae;
    const int auto14916F93_ai = 1;
    int auto1948FCA5_ae;
    const int auto1948FCA5_ai = 1;

    // Variable Initialization

    // Implementation
    auto14916F93_ae = UserDataInstanceCount("Decals");
    lv_i = 1;
    for ( ; ( (auto14916F93_ai >= 0 && lv_i <= auto14916F93_ae) || (auto14916F93_ai < 0 && lv_i >= auto14916F93_ae) ) ; lv_i += auto14916F93_ai ) {
        if ((gv_playerdecalunlocked[lv_i][lp_player] == true)) {
            libNtve_gf_SetDialogItemDesaturated(gv_decalDialogButtons[lv_i], false, PlayerGroupSingle(lp_player));
        }
    }
    libNtve_gf_SetDialogItemDesaturated(gv_decalDialogButtons[gv_textureValue[lp_player][0]], true, PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemDesaturationColor(gv_decalDialogButtons[gv_textureValue[lp_player][0]], Color(254*100/255,138*100/255,14*100/255), PlayerGroupSingle(lp_player));
    auto1948FCA5_ae = UserDataInstanceCount("Camos");
    lv_i = 1;
    for ( ; ( (auto1948FCA5_ai >= 0 && lv_i <= auto1948FCA5_ae) || (auto1948FCA5_ai < 0 && lv_i >= auto1948FCA5_ae) ) ; lv_i += auto1948FCA5_ai ) {
        if ((gv_playercamounlocked[lv_i][lp_player] == true)) {
            libNtve_gf_SetDialogItemDesaturated(gv_camoDialogButtons[lv_i], false, PlayerGroupSingle(lp_player));
        }

    }
    libNtve_gf_SetDialogItemDesaturated(gv_camoDialogButtons[gv_textureValue[lp_player][1]], true, PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemDesaturationColor(gv_camoDialogButtons[gv_textureValue[lp_player][1]], Color(254*100/255,138*100/255,14*100/255), PlayerGroupSingle(lp_player));
}

void gf_RefreshButtons (int lp_player, int lp_unlockType, int lp_unlockSelected) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    int autoBE522071_val;
    int auto52402384_ae;
    const int auto52402384_ai = 1;
    int auto82CDC824_ae;
    const int auto82CDC824_ai = 1;
    int auto683BEC51_ae;
    const int auto683BEC51_ai = 1;

    // Variable Initialization

    // Implementation
    autoBE522071_val = lp_unlockType;
    if (autoBE522071_val == 1) {
        auto52402384_ae = UserDataInstanceCount("Camos");
        lv_int = 1;
        for ( ; ( (auto52402384_ai >= 0 && lv_int <= auto52402384_ae) || (auto52402384_ai < 0 && lv_int >= auto52402384_ae) ) ; lv_int += auto52402384_ai ) {
            if ((gv_playercamounlocked[lv_int][lp_player] == true)) {
                libNtve_gf_SetDialogItemDesaturated(gv_camoDialogButtons[lv_int], false, PlayerGroupSingle(lp_player));
            }
        }
        libNtve_gf_SetDialogItemDesaturated(gv_camoDialogButtons[lp_unlockSelected], true, PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemDesaturationColor(gv_camoDialogButtons[lp_unlockSelected], Color(254*100/255,138*100/255,14*100/255), PlayerGroupSingle(lp_player));
    }
    else if (autoBE522071_val == 2) {
        auto82CDC824_ae = UserDataInstanceCount("Decals");
        lv_int = 0;
        for ( ; ( (auto82CDC824_ai >= 0 && lv_int <= auto82CDC824_ae) || (auto82CDC824_ai < 0 && lv_int >= auto82CDC824_ae) ) ; lv_int += auto82CDC824_ai ) {
            if (((gv_playerdecalunlocked[lv_int][lp_player] == true) || (lv_int == 0))) {
                libNtve_gf_SetDialogItemDesaturated(gv_decalDialogButtons[lv_int], false, PlayerGroupSingle(lp_player));
            }
        }
        libNtve_gf_SetDialogItemDesaturated(gv_decalDialogButtons[lp_unlockSelected], true, PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemDesaturationColor(gv_decalDialogButtons[lp_unlockSelected], Color(254*100/255,138*100/255,14*100/255), PlayerGroupSingle(lp_player));
    }
    else if (autoBE522071_val == 3) {
        auto683BEC51_ae = UserDataInstanceCount("Accessories");
        lv_int = 1;
        for ( ; ( (auto683BEC51_ai >= 0 && lv_int <= auto683BEC51_ae) || (auto683BEC51_ai < 0 && lv_int >= auto683BEC51_ae) ) ; lv_int += auto683BEC51_ai ) {
            if ((gv_playeraccessoryunlocked[lv_int][lp_player] == true)) {
                libNtve_gf_SetDialogItemDesaturated(gv_accessoryDialogButtons[lv_int], false, PlayerGroupSingle(lp_player));
            }
        }
        libNtve_gf_SetDialogItemDesaturated(gv_accessoryDialogButtons[lp_unlockSelected], true, PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemDesaturationColor(gv_accessoryDialogButtons[lp_unlockSelected], Color(254*100/255,138*100/255,14*100/255), PlayerGroupSingle(lp_player));
    }
    else {
    }
}

trigger auto_gf_OctoCamo_Trigger = null;

void gf_OctoCamo () {
    if (auto_gf_OctoCamo_Trigger == null) {
        auto_gf_OctoCamo_Trigger = TriggerCreate("auto_gf_OctoCamo_TriggerFunc");
    }

    TriggerExecute(auto_gf_OctoCamo_Trigger, false, false);
}

bool auto_gf_OctoCamo_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    unitgroup autoCBBC1F2C_g;
    int autoCBBC1F2C_u;
    unit autoCBBC1F2C_var;
    int auto81802428_ae;
    const int auto81802428_ai = 1;

    // Variable Initialization

    // Implementation
    while ((TriggerIsEnabled(gt_OctoCamo) == false)) {
        autoCBBC1F2C_g = gv_octoCamos;
        autoCBBC1F2C_u = UnitGroupCount(autoCBBC1F2C_g, c_unitCountAll);
        for (;; autoCBBC1F2C_u -= 1) {
            autoCBBC1F2C_var = UnitGroupUnitFromEnd(autoCBBC1F2C_g, autoCBBC1F2C_u);
            if (autoCBBC1F2C_var == null) { break; }
            auto81802428_ae = UserDataInstanceCount("OctoCamoTextures");
            lv_loopint = 1;
            for ( ; ( (auto81802428_ai >= 0 && lv_loopint <= auto81802428_ae) || (auto81802428_ai < 0 && lv_loopint >= auto81802428_ae) ) ; lv_loopint += auto81802428_ai ) {
                if ((TerrainTexture(UnitGetPosition(autoCBBC1F2C_var)) == UserDataGetGameLink("OctoCamoTextures", UserDataInstance("OctoCamoTextures", lv_loopint), "Terrain Texture", 1)) && (UnitGetCustomValue(autoCBBC1F2C_var, 6) != IntToFixed(lv_loopint))) {
                    libNtve_gf_SendActorMessageToUnit(autoCBBC1F2C_var, libNtve_gf_TextureSelectByID(UserDataGetGameLink("OctoCamoTextures", UserDataInstance("OctoCamoTextures", lv_loopint), "Camo", 1)));
                    UnitSetCustomValue(autoCBBC1F2C_var, 6, IntToFixed(lv_loopint));
                }
            }
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

void gf_InitializeSIVars () {
    // Automatic Variable Declarations
    // Implementation
    gf_SetupSI(1, 600, 1, 1, StringExternal("Param/Value/1C12A728"), "SY", StringExternal("Param/Value/65B967F4"));
    gf_SetupSI(2, 2000, 1, 1, StringExternal("Param/Value/57396E8B"), "TA", StringExternal("Param/Value/FA474A9F"));
    gf_SetupSI(3, 3100, 1, 1, StringExternal("Param/Value/009DAE38"), "QT", StringExternal("Param/Value/64FE57A8"));
    gf_SetupSI(4, 4200, 1, 1, StringExternal("Param/Value/1B93D447"), "EN", StringExternal("Param/Value/AFB41F16"));
    gf_SetupSI(5, 8000, 1500, 1800, StringExternal("Param/Value/6F54E904"), "HE", StringExternal("Param/Value/D61398AD"));
    gf_SetupSI(6, 4000, 1200, 1200, StringExternal("Param/Value/B82AE09D"), "GN", StringExternal("Param/Value/60A3FAA7"));
    gf_SetupSI(7, 20000, 15000, 0, StringExternal("Param/Value/F9D432E7"), "TT", StringExternal("Param/Value/95E71EFF"));
    gf_SetupSI(8, 16000, 12000, 13000, StringExternal("Param/Value/1921E8CA"), "PB", StringExternal("Param/Value/2BE61EA1"));
    gf_SetupSI(9, 0, 4000, 8000, StringExternal("Param/Value/45A86DE3"), "IN", StringExternal("Param/Value/70583B4F"));
    gf_SetupSI(10, 0, 0, 15000, StringExternal("Param/Value/ED32E6F8"), "BL", StringExternal("Param/Value/BE5797AA"));
    gf_SetupSI(11, 25000, 12000, 19000, StringExternal("Param/Value/7D290EFA"), "BA", StringExternal("Param/Value/E040FB68"));
    gf_SetupSI(12, 0, 0, 45000, StringExternal("Param/Value/0D6550C6"), "IS", StringExternal("Param/Value/C2DB533D"));
    gf_SetupSI(13, 50000, 35000, 40000, StringExternal("Param/Value/D7AFD5FE"), "IP", StringExternal("Param/Value/B2F1673F"));
    gf_SetupSI(14, 26500, 20000, 20000, StringExternal("Param/Value/ABDFB481"), "NI", StringExternal("Param/Value/4B36CEF3"));
    gf_SetupSI(15, 0, 11000, 0, StringExternal("Param/Value/B3225297"), "PU", StringExternal("Param/Value/92CB2376"));
    gf_SetupSI(16, 15000, 6000, 14000, StringExternal("Param/Value/3AC43D8B"), "WK", StringExternal("Param/Value/81A73D31"));
    gf_SetupSI(17, 0, 34000, 35000, StringExternal("Param/Value/882A2DCD"), "RA", StringExternal("Param/Value/EB494290"));
    gf_SetupSI(18, 125000, 100000, 0, StringExternal("Param/Value/BE36F1B9"), "LY", StringExternal("Param/Value/D361001B"));
    gf_SetupSI(19, 95000, 0, 95000, StringExternal("Param/Value/410CE9C9"), "BT", StringExternal("Param/Value/50A791D9"));
    gf_SetupSI(20, 170000, 120000, 130000, StringExternal("Param/Value/0EC94D85"), "VT", StringExternal("Param/Value/C66BC957"));
    gf_SetupSI(21, 50000, 50000, 50000, StringExternal("Param/Value/BE5F25CC"), "LA", StringExternal("Param/Value/4F158237"));
    gf_SetupSI(22, 20000, 20000, 20000, StringExternal("Param/Value/E06E36F3"), "HA", StringExternal("Param/Value/3BB37ADE"));
    gf_SetupSI(23, 90000, 80000, 85000, StringExternal("Param/Value/8D4EE866"), "CL", StringExternal("Param/Value/94A6DE6D"));
    gf_SetupSI(24, 75000, 60000, 0, StringExternal("Param/Value/51771945"), "MA", StringExternal("Param/Value/B00C7DB9"));
    gf_SetupSI(25, 67500, 35000, 48000, StringExternal("Param/Value/4B4944FA"), "SI", StringExternal("Param/Value/0BBCC5A5"));
    gf_SetupSI(120, 13500, 5000, 0, StringExternal("Param/Value/995D5F3A"), "AR", StringExternal("Param/Value/880F3FC6"));
    gf_SetupSI(121, 100000, 100000, 100000, StringExternal("Param/Value/FFF9CC80"), "TD", StringExternal("Param/Value/ACB2085A"));
    gf_SetupSI(26, -1, -1, -1, StringExternal("Param/Value/88CEB8D0"), "BB", StringExternal("Param/Value/1160D62D"));
    gf_SetupSI(27, -1, -1, -1, StringExternal("Param/Value/5BA23D4B"), "BG", StringExternal("Param/Value/C579A6F5"));
    gf_SetupSI(28, -1, -1, -1, StringExternal("Param/Value/397D2211"), "FA", StringExternal("Param/Value/28A259C7"));
    gf_SetupSI(31, -1, -1, -1, StringExternal("Param/Value/74DE81CC"), "GR", StringExternal("Param/Value/EEDEF74D"));
    gf_SetupSI(32, -1, -1, -1, StringExternal("Param/Value/F8762CAE"), "AW", StringExternal("Param/Value/605FDA1D"));
    gf_SetupSI(33, -1, -1, -1, StringExternal("Param/Value/8DA3DD68"), "BO", StringExternal("Param/Value/D42D72E5"));
    gf_SetupSI(35, -1, -1, -1, StringExternal("Param/Value/5F5056FC"), "HT", StringExternal("Param/Value/6127B51D"));
    gf_SetupSI(37, -1, -1, -1, StringExternal("Param/Value/C781B67A"), "BR", StringExternal("Param/Value/A2F06035"));
    gf_SetupSI(38, -1, -1, -1, StringExternal("Param/Value/FF82DB19"), "PM", StringExternal("Param/Value/E10845B7"));
    gf_SetupSI(39, -1, -1, -1, StringExternal("Param/Value/84D059CD"), "DF", StringExternal("Param/Value/6C036211"));
    gf_SetupSI(41, -1, -1, -1, StringExternal("Param/Value/EDD33BF7"), "ST", StringExternal("Param/Value/2F7A07AA"));
    gf_SetupSI(43, -1, -1, -1, StringExternal("Param/Value/93FE0793"), "SC", StringExternal("Param/Value/6EFE9C8A"));
    gf_SetupSI(45, -1, -1, -1, StringExternal("Param/Value/70DB82AD"), "HE", StringExternal("Param/Value/80ED360E"));
    gf_SetupSI(46, -1, -1, -1, StringExternal("Param/Value/EB3E5BBC"), "AT", StringExternal("Param/Value/ACE2816B"));
    gf_SetupSI(47, -1, -1, -1, StringExternal("Param/Value/13027DC2"), "IS", StringExternal("Param/Value/CF9E3C14"));
    gf_SetupSI(48, -1, -1, -1, StringExternal("Param/Value/15B1D386"), "SF", StringExternal("Param/Value/4CDAA679"));
    gf_SetupSI(49, -1, -1, -1, StringExternal("Param/Value/DF3152A5"), "LO", StringExternal("Param/Value/735D8CDB"));
    gf_SetupSI(50, -1, -1, -1, StringExternal("Param/Value/D47E3882"), "GM", StringExternal("Param/Value/6890A5F0"));
    gf_SetupSI(51, -1, -1, -1, StringExternal("Param/Value/3E5A4BE9"), "OV", StringExternal("Param/Value/F68FDA93"));
    gf_SetupSI(53, -1, -1, -1, StringExternal("Param/Value/C8E519C8"), "EE", StringExternal("Param/Value/C8740D2A"));
    gf_SetupSI(54, -1, -1, -1, StringExternal("Param/Value/BAB560C1"), "CS", StringExternal("Param/Value/492E4ADB"));
    gf_SetupSI(55, -1, -1, -1, StringExternal("Param/Value/33D720EC"), "HA", StringExternal("Param/Value/8C119EE2"));
    gf_SetupSI(56, -1, -1, -1, StringExternal("Param/Value/1918D69E"), "RM", StringExternal("Param/Value/5B13C96E"));
    gf_SetupSI(57, -1, -1, -1, StringExternal("Param/Value/E3C246A0"), "SU", StringExternal("Param/Value/7136BAB4"));
    gf_SetupSI(59, -1, -1, -1, StringExternal("Param/Value/4361A1E5"), "VA", StringExternal("Param/Value/520DCB19"));
    gf_SetupSI(61, -1, -1, -1, StringExternal("Param/Value/37AE39D4"), "PH", StringExternal("Param/Value/90D999C4"));
    gf_SetupSI(62, -1, -1, -1, StringExternal("Param/Value/348ACEAD"), "WE", StringExternal("Param/Value/895D4502"));
    gf_SetupSI(63, -1, -1, -1, StringExternal("Param/Value/C54CB5A8"), "ES", StringExternal("Param/Value/23877F12"));
    gf_SetupSI(65, -1, -1, -1, StringExternal("Param/Value/71F2C9D5"), "SB", StringExternal("Param/Value/2E536AD6"));
    gf_SetupSI(67, -1, -1, -1, StringExternal("Param/Value/8C726701"), "FT", StringExternal("Param/Value/BABE3766"));
    gf_SetupSI(71, -1, -1, -1, StringExternal("Param/Value/777F7A98"), "SP", StringExternal("Param/Value/AD68319A"));
    gf_SetupBetaSI(1, -1, -1, -1, StringExternal("Param/Value/EC00FCC3"), "GR", StringExternal("Param/Value/74D7DAF0"));
    gf_SetupBetaSI(19, -1, -1, -1, StringExternal("Param/Value/ECDD6B42"), "AT", StringExternal("Param/Value/731A6150"));
    gf_SetupBetaSI(21, -1, -1, -1, StringExternal("Param/Value/9C3EC7DE"), "SF", StringExternal("Param/Value/F9F062C4"));
    gf_SetupBetaSI(27, -1, -1, -1, StringExternal("Param/Value/1FE22BB4"), "CS", StringExternal("Param/Value/F920E3F3"));
    gf_SetupBetaSI(29, -1, -1, -1, StringExternal("Param/Value/0B4FC105"), "RM", StringExternal("Param/Value/833D8416"));
    gv_sIImage[1] = "Assets\\Textures\\btn-upgrade-swann-improvednanorepair.dds";
    gv_sIImage[2] = "Buttons\\Abilities\\BTNFitness.dds";
    gv_sIImage[3] = "BTNHoldPos.dds";
    gv_sIImage[4] = "Assets\\Textures\\btn-ability-protoss-stealth-blink.dds";
    gv_sIImage[5] = "Assets\\Textures\\btn-ability-protoss-envision.dds";
    gv_sIImage[6] = "Assets\\Textures\\btn-tips-counter.dds";
    gv_sIImage[7] = "Buttons\\BTNSprint.dds";
    gv_sIImage[8] = "Assets\\Textures\\btn-ability-zerg-defilerplague.dds";
    gv_sIImage[9] = "Assets\\Textures\\btn-ability-protoss-mindblast.dds";
    gv_sIImage[10] = "Buttons\\Abilities\\BTNLeadership.dds";
    gv_sIImage[11] = "BTNMeleeAttack.dds";
    gv_sIImage[12] = "Buttons\\BTNLeadershipSkills.dds";
    gv_sIImage[13] = "Assets\\Textures\\timewarp.dds";
    gv_sIImage[14] = "Buttons\\Abilities\\BTNJump.dds";
    gv_sIImage[15] = "Assets\\Textures\\btn-ability-protoss-blinkshieldrestore.dds";
    gv_sIImage[16] = "Assets\\Textures\\btn-ability-zerg-extinction.dds";
    gv_sIImage[17] = "Assets\\Textures\\btn-ability-protoss-prodigalengineer.dds";
    gv_sIImage[18] = "Assets\\Textures\\BTN_shamrock_lucky_icon.dds";
    gv_sIImage[19] = "Assets\\Textures\\btn-upgrade-zerg-swarmfrenzy.dds";
    gv_sIImage[20] = "Assets\\Textures\\ui_list_battlereports_buildabettermarine.dds";
    gv_sIImage[21] = "Buttons\\BTNPlateCarrier.dds";
    gv_sIImage[22] = "Assets\\Buttons\\Btn_Custom_UAC_ABD.dds";
    gv_sIImage[23] = "Assets\\Buttons\\Btn_Custom_UAC_AmmoCaseEmpty.dds";
    gv_sIImage[24] = "Assets\\Textures\\btn-tips-terran-penetrator.dds";
    gv_sIImage[25] = "Assets\\Textures\\btn-ability-zerg-siphon.dds";
    gv_sIImage[120] = "Buttons\\BTNSatchelCharge.dds";
    gv_sIImage[121] = "Assets\\Textures\\btn-upgrade-terran-nova-snipeenergyrefund.dds";
    gv_sIImage[26] = "Assets\\Buttons\\Btn_Custom_UAC_Stand.dds";
    gv_sIImage[27] = "Assets\\Textures\\btn-hero-dehaka-death.dds";
    gv_sIImage[28] = "Assets\\Textures\\btn-upgrade-terran-reapercombatdrugs.dds";
    gv_sIImage[31] = "BTNFragGrenade.dds";
    gv_sIImage[32] = "Assets\\Textures\\btn-upgrade-nova-equipment-plasmagun.dds";
    gv_sIImage[33] = "Assets\\Textures\\btn-ability-terran-stimpack-color.dds";
    gv_sIImage[35] = "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel3.dds";
    gv_sIImage[37] = "Assets\\Textures\\btn-ability-protoss-hardenedshields-color.dds";
    gv_sIImage[38] = "Assets\\Textures\\btn-ability-zerg-fireroach-increasefiredamage.dds";
    gv_sIImage[39] = "Assets\\Textures\\btn-techupgrade-terran-combatshield-color.dds";
    gv_sIImage[41] = "Assets\\Textures\\btn-upgrade-nova-shotgun.dds";
    gv_sIImage[43] = "Assets\\Textures\\btn-upgrade-nova-equipment-ghostvisor.dds";
    gv_sIImage[45] = "Assets\\Textures\\btn-upgrade-terran-explosiveshrapnelshells.dds";
    gv_sIImage[46] = "Assets\\Textures\\btn-ability-terran-nuclearstrike-color.dds";
    gv_sIImage[47] = "Assets\\Textures\\btn-ability-terran-battlefieldawareness.dds";
    gv_sIImage[48] = "Assets\\Textures\\btn-minimap-toggleallies.dds";
    gv_sIImage[49] = "Assets\\Textures\\btn-building-terran-autoturret.dds";
    gv_sIImage[50] = "Assets\\Textures\\nova coop_lvl 15_top bar ability buffs dmatrix drone +2 charges.dds";
    gv_sIImage[51] = "Assets\\Textures\\btn-ability-protoss-thunderouscharge.dds";
    gv_sIImage[53] = "Assets\\Textures\\btn-upgrade-karax-energyregen200.dds";
    gv_sIImage[54] = "Assets\\Textures\\btn-upgrade-terran-nova-repairbeamcloak.dds";
    gv_sIImage[55] = "Assets\\Textures\\btn-ability-terran-punishergrenade-color.dds";
    gv_sIImage[56] = "Assets\\Textures\\btn-upgrade-terran-nova-bombingrun.dds";
    gv_sIImage[57] = "Assets\\Textures\\btn-ability-terran-domination.dds";
    gv_sIImage[59] = "Assets\\Textures\\btn-ability-protoss-thermallance.dds";
    gv_sIImage[61] = "Assets\\Textures\\btn-ability-terran-nova-permacloak.dds";
    gv_sIImage[62] = "Textures\\Decals\\T1Hunters.dds";
    gv_sIImage[63] = "Assets\\Textures\\btn-ability-terran-scannersweep-color.dds";
    gv_sIImage[65] = "Assets\\Textures\\btn-upgrade-raynor-phobosclassweaponssystem.dds";
    gv_sIImage[67] = "Assets\\Textures\\btn-unit-terran-vikingarchangel.dds";
    gv_sIImage[68] = "Assets\\Textures\\btn-ability-terran-stimpack-color.dds";
    gv_sIImage[69] = "Assets\\Textures\\btn-upgrade-nova-equipment-ui-superstimpackeffect.dds";
    gv_sIImage[70] = "Assets\\Textures\\btn-upgrade-nova-equipment-shotgun.dds";
    gv_sIImage[71] = "Assets\\Textures\\btn-upgrade-nova-equipment-rangefinderoculus.dds";
    gv_SIBetaImage[1] = "BTNFragGrenade.dds";
    gv_SIBetaImage[19] = "Assets\\Textures\\btn-ability-terran-nuclearstrike-color.dds";
    gv_SIBetaImage[21] = "Assets\\Textures\\btn-minimap-toggleallies.dds";
    gv_SIBetaImage[27] = "Assets\\Textures\\btn-upgrade-terran-nova-repairbeamcloak.dds";
    gv_SIBetaImage[29] = "Assets\\Textures\\btn-upgrade-terran-nova-bombingrun.dds";
}

void gf_CreateSIDialog () {
    // Variable Declarations
    int lv_int;
    int lv_xAxis;
    int lv_yAxis;
    int lv_yRelativeAxis;

    // Automatic Variable Declarations
    playergroup auto0D29BF2C_g;
    int auto0D29BF2C_var;
    const int auto48774319_ae = 25;
    const int auto48774319_ai = 1;
    const int auto9AA0118A_ae = 121;
    const int auto9AA0118A_ai = 1;
    const int autoD0FFB323_ae = 80;
    const int autoD0FFB323_ai = 1;
    const int auto228DB2AE_ae = 30;
    const int auto228DB2AE_ai = 1;
    const int auto98D588AB_ae = 80;
    const int auto98D588AB_ai = 1;
    const int auto59A05FB2_ae = 36;
    const int auto59A05FB2_ai = 1;

    // Variable Initialization
    lv_xAxis = -340;
    lv_yAxis = 45;
    lv_yRelativeAxis = 70;

    // Implementation
    DialogCreate(840, 735, c_anchorLeft, 0, -155, false);
    gv_sIDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 45, 45, c_anchorTop, 375, 22, StringExternal("Param/Value/E19E7965"), "Assets\\Textures\\ui_glues_icons_infogeneric.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTop, -250, 15, StringExternal("Param/Value/22524962"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize22Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTop, -250, 430, StringExternal("Param/Value/8B265319"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize22Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_sIDialog, 450, 50, c_anchorTop, -150, 555, StringToText(""), Color(100,100,100), false, 2.0);
    auto0D29BF2C_g = gv_players;
    auto0D29BF2C_var = -1;
    while (true) {
        auto0D29BF2C_var = PlayerGroupNextPlayer(auto0D29BF2C_g, auto0D29BF2C_var);
        if (auto0D29BF2C_var < 0) { break; }
        gv_sIMosName[auto0D29BF2C_var] = DialogControlLastCreated();
    }
    lv_int = 1;
    for ( ; ( (auto48774319_ai >= 0 && lv_int <= auto48774319_ae) || (auto48774319_ai < 0 && lv_int >= auto48774319_ae) ) ; lv_int += auto48774319_ai ) {
        gf_SetupStandardSpecialSIBoard(gv_sIDialog, lv_int, 105, 110, lv_xAxis, lv_yAxis, lv_xAxis, lv_yRelativeAxis);
        lv_xAxis += 75;
        if ((lv_xAxis >= 375)) {
            lv_xAxis = -340;
            lv_yAxis += 75;
            lv_yRelativeAxis += 75;
        }
    }
    lv_int = 120;
    for ( ; ( (auto9AA0118A_ai >= 0 && lv_int <= auto9AA0118A_ae) || (auto9AA0118A_ai < 0 && lv_int >= auto9AA0118A_ae) ) ; lv_int += auto9AA0118A_ai ) {
        gf_SetupStandardSpecialSIBoard(gv_sIDialog, lv_int, 105, 110, lv_xAxis, lv_yAxis, lv_xAxis, lv_yRelativeAxis);
        lv_xAxis += 75;
        if ((lv_xAxis >= 375)) {
            lv_xAxis = -340;
            lv_yAxis += 75;
            lv_yRelativeAxis += 75;
        }
    }
    lv_int = 66;
    for ( ; ( (autoD0FFB323_ai >= 0 && lv_int <= autoD0FFB323_ae) || (autoD0FFB323_ai < 0 && lv_int >= autoD0FFB323_ae) ) ; lv_int += autoD0FFB323_ai ) {
        gf_SetupStandardSpecialSIBoard(gv_sIDialog, lv_int, 105, 110, lv_xAxis, lv_yAxis, lv_xAxis, lv_yRelativeAxis);
        lv_xAxis += 75;
        if (((lv_xAxis >= 375) || (lv_int == 80))) {
            lv_xAxis = -340;
            lv_yAxis += 75;
            lv_yRelativeAxis += 75;
        }
    }
    lv_yAxis = 450;
    lv_yRelativeAxis = 475;
    lv_int = 26;
    for ( ; ( (auto228DB2AE_ai >= 0 && lv_int <= auto228DB2AE_ae) || (auto228DB2AE_ai < 0 && lv_int >= auto228DB2AE_ae) ) ; lv_int += auto228DB2AE_ai ) {
        gf_SetupStandardSpecialSIBoard(gv_sIDialog, lv_int, 105, 110, lv_xAxis, lv_yAxis, lv_xAxis, lv_yRelativeAxis);
        lv_xAxis += 75;
    }
    lv_int = 31;
    for ( ; ( (auto98D588AB_ai >= 0 && lv_int <= auto98D588AB_ae) || (auto98D588AB_ai < 0 && lv_int >= auto98D588AB_ae) ) ; lv_int += auto98D588AB_ai ) {
        if ((libE6C8C21C_gf_StringIsValid2(lv_int) == true)) {
            gf_CreateMosSI(gv_sIDialog, lv_int, 105, 110, -340, 565, -340, 590, 0);
        }
        else {
            gf_CreateMosSI(gv_sIDialog, lv_int, 105, 110, -265, 565, -265, 590, 0);
        }
    }
    lv_int = 1;
    for ( ; ( (auto59A05FB2_ai >= 0 && lv_int <= auto59A05FB2_ae) || (auto59A05FB2_ai < 0 && lv_int >= auto59A05FB2_ae) ) ; lv_int += auto59A05FB2_ai ) {
        if ((libE6C8C21C_gf_StringIsValid2(lv_int) == true)) {
            gf_CreateBetaMosSI(gv_sIDialog, lv_int, 105, 110, -340, 565, -340, 590, 0);
        }
        else {
            gf_CreateBetaMosSI(gv_sIDialog, lv_int, 105, 110, -265, 565, -265, 590, 0);
        }
    }
}

void gf_SetupStandardSpecialSIBoard (int lp_dialog, int lp_sI, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, int lp_relativeOffsetX, int lp_relativeOffsetY) {
    // Variable Declarations
    int lv_offsetY;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_offsetY = 35;

    // Implementation
    libNtve_gf_CreateDialogItemImage(lp_dialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_sIBorderFrameIndex[lp_sI] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(75.29, 75.29, 75.29), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(lp_dialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_sIBorderFrameHighlightIndex[lp_sI] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    DialogControlSetVisible(gv_sIBorderFrameHighlightIndex[lp_sI], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(lp_dialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_coop_lockicon_large.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_sIImageIndex[lp_sI] = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    libNtve_gf_CreateDialogItemLabel(lp_dialog, 50, 50, c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY, StringToText(StringSub(gv_sIabbreviation[lp_sI], 1, 2)), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    gv_sILabelColorIndex[lp_sI] = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, (lp_relativeOffsetY + lv_offsetY));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(lp_dialog, 60, 60, c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY, StringExternal("Param/Value/2134CC08"), StringToText(""), "");
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 412, PlayerGroupAll());
    gv_sIDialogButtons[lp_sI] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lp_sI], true, PlayerGroupAll());
}

void gf_UpdateSIDialogforPlayer (int lp_player) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int autoBECF4AC1_ae = 30;
    const int autoBECF4AC1_ai = 1;
    const int auto91606E9F_ae = 121;
    const int auto91606E9F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_int = 1;
    for ( ; ( (autoBECF4AC1_ai >= 0 && lv_int <= autoBECF4AC1_ae) || (autoBECF4AC1_ai < 0 && lv_int >= autoBECF4AC1_ae) ) ; lv_int += autoBECF4AC1_ai ) {
        if ((gv_sIunlocked[lv_int][lp_player] == true)) {
            libNtve_gf_SetDialogItemImage(gv_sIImageIndex[lv_int], gv_sIImage[lv_int], PlayerGroupSingle(lp_player));
            if ((gv_sIXPminimum[gv_playerRankSet[lp_player]][lv_int] != 0)) {
                libNtve_gf_SetDialogItemColor(gv_sIBorderFrameIndex[lv_int], Color(0.00, 100.00, 0.00), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemColor(gv_sILabelColorIndex[lv_int], Color(100.00, 100.00, 100.00), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lv_int], false, PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemTooltip(gv_sIDialogButtons[lv_int], (gv_sIname[lv_int] + StringExternal("Param/Value/D609152C") + gv_sIdescription[lv_int]), PlayerGroupSingle(lp_player));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_sIBorderFrameIndex[lv_int], Color(50.20, 50.20, 50.20), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemColor(gv_sILabelColorIndex[lv_int], Color(50.20, 50.20, 50.20), PlayerGroupSingle(lp_player));
                DialogControlFadeTransparency(gv_sIImageIndex[lv_int], PlayerGroupSingle(lp_player), 0.0, 75.0);
                if ((lv_int < 26)) {
                    if ((gv_rankPlayerSelected[lp_player] == 1)) {
                        libNtve_gf_SetDialogItemTooltip(gv_sIDialogButtons[lv_int], (gv_sIname[lv_int] + StringExternal("Param/Value/66A12A58")), PlayerGroupSingle(lp_player));
                    }
                    else if ((gv_rankPlayerSelected[lp_player] == 2)) {
                        libNtve_gf_SetDialogItemTooltip(gv_sIDialogButtons[lv_int], (gv_sIname[lv_int] + StringExternal("Param/Value/43D6E887")), PlayerGroupSingle(lp_player));
                    }
                    else if ((gv_rankPlayerSelected[lp_player] == 3)) {
                        libNtve_gf_SetDialogItemTooltip(gv_sIDialogButtons[lv_int], (gv_sIname[lv_int] + StringExternal("Param/Value/616BBD6A")), PlayerGroupSingle(lp_player));
                    }
                }
            }
        }
    }
    lv_int = 120;
    for ( ; ( (auto91606E9F_ai >= 0 && lv_int <= auto91606E9F_ae) || (auto91606E9F_ai < 0 && lv_int >= auto91606E9F_ae) ) ; lv_int += auto91606E9F_ai ) {
        if ((gv_sIunlocked[lv_int][lp_player] == true)) {
            libNtve_gf_SetDialogItemImage(gv_sIImageIndex[lv_int], gv_sIImage[lv_int], PlayerGroupSingle(lp_player));
            if ((gv_sIXPminimum[gv_playerRankSet[lp_player]][lv_int] != 0)) {
                libNtve_gf_SetDialogItemColor(gv_sIBorderFrameIndex[lv_int], Color(0.00, 100.00, 0.00), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemColor(gv_sILabelColorIndex[lv_int], Color(100.00, 100.00, 100.00), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lv_int], false, PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemTooltip(gv_sIDialogButtons[lv_int], (gv_sIname[lv_int] + StringExternal("Param/Value/E703F494") + gv_sIdescription[lv_int]), PlayerGroupSingle(lp_player));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_sIBorderFrameIndex[lv_int], Color(50.20, 50.20, 50.20), PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemColor(gv_sILabelColorIndex[lv_int], Color(50.20, 50.20, 50.20), PlayerGroupSingle(lp_player));
                DialogControlFadeTransparency(gv_sIImageIndex[lv_int], PlayerGroupSingle(lp_player), 0.0, 75.0);
                if ((lv_int >= 120)) {
                    if ((gv_rankPlayerSelected[lp_player] == 1)) {
                        libNtve_gf_SetDialogItemTooltip(gv_sIDialogButtons[lv_int], (gv_sIname[lv_int] + StringExternal("Param/Value/D3018023")), PlayerGroupSingle(lp_player));
                    }
                    else if ((gv_rankPlayerSelected[lp_player] == 2)) {
                        libNtve_gf_SetDialogItemTooltip(gv_sIDialogButtons[lv_int], (gv_sIname[lv_int] + StringExternal("Param/Value/7F23DEFA")), PlayerGroupSingle(lp_player));
                    }
                    else if ((gv_rankPlayerSelected[lp_player] == 3)) {
                        libNtve_gf_SetDialogItemTooltip(gv_sIDialogButtons[lv_int], (gv_sIname[lv_int] + StringExternal("Param/Value/BCEF7AD5")), PlayerGroupSingle(lp_player));
                    }
                }
            }
        }
    }
}

trigger auto_gf_CreateMosSI_Trigger = null;
int auto_gf_CreateMosSI_lp_dialog;
int auto_gf_CreateMosSI_lp_sI;
int auto_gf_CreateMosSI_lp_width;
int auto_gf_CreateMosSI_lp_height;
int auto_gf_CreateMosSI_lp_offsetX;
int auto_gf_CreateMosSI_lp_offsetY;
int auto_gf_CreateMosSI_lp_relativeOffsetX;
int auto_gf_CreateMosSI_lp_relativeOffsetY;
int auto_gf_CreateMosSI_lp_player;

void gf_CreateMosSI (int lp_dialog, int lp_sI, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, int lp_relativeOffsetX, int lp_relativeOffsetY, int lp_player) {
    auto_gf_CreateMosSI_lp_dialog = lp_dialog;
    auto_gf_CreateMosSI_lp_sI = lp_sI;
    auto_gf_CreateMosSI_lp_width = lp_width;
    auto_gf_CreateMosSI_lp_height = lp_height;
    auto_gf_CreateMosSI_lp_offsetX = lp_offsetX;
    auto_gf_CreateMosSI_lp_offsetY = lp_offsetY;
    auto_gf_CreateMosSI_lp_relativeOffsetX = lp_relativeOffsetX;
    auto_gf_CreateMosSI_lp_relativeOffsetY = lp_relativeOffsetY;
    auto_gf_CreateMosSI_lp_player = lp_player;

    if (auto_gf_CreateMosSI_Trigger == null) {
        auto_gf_CreateMosSI_Trigger = TriggerCreate("auto_gf_CreateMosSI_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateMosSI_Trigger, false, false);
}

bool auto_gf_CreateMosSI_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialog = auto_gf_CreateMosSI_lp_dialog;
    int lp_sI = auto_gf_CreateMosSI_lp_sI;
    int lp_width = auto_gf_CreateMosSI_lp_width;
    int lp_height = auto_gf_CreateMosSI_lp_height;
    int lp_offsetX = auto_gf_CreateMosSI_lp_offsetX;
    int lp_offsetY = auto_gf_CreateMosSI_lp_offsetY;
    int lp_relativeOffsetX = auto_gf_CreateMosSI_lp_relativeOffsetX;
    int lp_relativeOffsetY = auto_gf_CreateMosSI_lp_relativeOffsetY;
    int lp_player = auto_gf_CreateMosSI_lp_player;

    // Variable Declarations
    int lv_offsetY;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_offsetY = 35;

    // Implementation
    libNtve_gf_CreateDialogItemImage(lp_dialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_sIBorderFrameIndex[lp_sI] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(75.29, 75.29, 75.29), PlayerGroupAll());
    DialogControlSetVisible(gv_sIBorderFrameIndex[lp_sI], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(lp_dialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_sIBorderFrameHighlightIndex[lp_sI] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    DialogControlSetVisible(gv_sIBorderFrameHighlightIndex[lp_sI], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(lp_dialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_coop_lockicon_large.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_sIImageIndex[lp_sI] = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    DialogControlSetVisible(gv_sIImageIndex[lp_sI], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lp_dialog, 50, 50, c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY, StringToText(StringSub(gv_sIabbreviation[lp_sI], 1, 2)), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    gv_sILabelColorIndex[lp_sI] = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, (lp_relativeOffsetY + lv_offsetY));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    DialogControlSetVisible(gv_sILabelColorIndex[lp_sI], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_sIDialog, 60, 60, c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY, StringExternal("Param/Value/BE19ED9D"), StringToText(""), "");
    gv_sIDialogButtons[lp_sI] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 412, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lp_sI], true, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

trigger auto_gf_SetupMosSI_Trigger = null;
int auto_gf_SetupMosSI_lp_sI;
int auto_gf_SetupMosSI_lp_player;

void gf_SetupMosSI (int lp_sI, int lp_player) {
    auto_gf_SetupMosSI_lp_sI = lp_sI;
    auto_gf_SetupMosSI_lp_player = lp_player;

    if (auto_gf_SetupMosSI_Trigger == null) {
        auto_gf_SetupMosSI_Trigger = TriggerCreate("auto_gf_SetupMosSI_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetupMosSI_Trigger, false, false);
}

bool auto_gf_SetupMosSI_TriggerFunc (bool testConds, bool runActions) {
    int lp_sI = auto_gf_SetupMosSI_lp_sI;
    int lp_player = auto_gf_SetupMosSI_lp_player;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_sIBorderFrameIndex[lp_sI], PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(gv_sIImageIndex[lp_sI], PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(gv_sILabelColorIndex[lp_sI], PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(gv_sIDialogButtons[lp_sI], PlayerGroupSingle(lp_player), true);
    if ((gv_sIunlocked[lp_sI][lp_player] == true)) {
        libNtve_gf_SetDialogItemColor(gv_sIBorderFrameIndex[lp_sI], Color(0.00, 100.00, 0.00), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemImage(gv_sIImageIndex[lp_sI], gv_sIImage[lp_sI], PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemColor(gv_sILabelColorIndex[lp_sI], Color(100.00, 100.00, 100.00), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lp_sI], false, PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemTooltip(gv_sIDialogButtons[lp_sI], (gv_sIname[lp_sI] + StringExternal("Param/Value/F7F438D6") + gv_sIdescription[lp_sI]), PlayerGroupSingle(lp_player));
    }
    return true;
}

void gf_RefreshSIButtons (int lp_player) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int autoDC27A048_ae = gv_sIcount;
    const int autoDC27A048_ai = 1;

    // Variable Initialization

    // Implementation
    lv_int = 1;
    for ( ; ( (autoDC27A048_ai >= 0 && lv_int <= autoDC27A048_ae) || (autoDC27A048_ai < 0 && lv_int >= autoDC27A048_ae) ) ; lv_int += autoDC27A048_ai ) {
        if ((gv_sIunlocked[lv_int][lp_player] == true) && (gv_sIXPminimum[gv_playerRankSet[lp_player]][lv_int] != 0)) {
            libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lv_int], false, PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_sIDialogButtons[lv_int], (gv_sIname[lv_int] + StringExternal("Param/Value/53B8E610") + gv_sIdescription[lv_int]), PlayerGroupSingle(lp_player));
        }

    }
}

void gf_RemoveSIs (unit lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoBFBF5A13_ae = 2;
    const int autoBFBF5A13_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoBFBF5A13_ai >= 0 && lv_i <= autoBFBF5A13_ae) || (autoBFBF5A13_ai < 0 && lv_i >= autoBFBF5A13_ae) ) ; lv_i += autoBFBF5A13_ai ) {
        if ((UnitHasBehavior(lp_player, gv_playerSIbehaviors[lv_i][UnitGetOwner(lp_player)]) == true)) {
            UnitBehaviorRemove(lp_player, gv_playerSIbehaviors[lv_i][UnitGetOwner(lp_player)], 1);
        }
    }
}

void gf_SetupSI (int lp_array, int lp_enXP, int lp_wOXP, int lp_cOXP, text lp_name, string lp_abbreviation, text lp_description) {
    // Automatic Variable Declarations
    // Implementation
    gv_sIXPminimum[1][lp_array] = lp_enXP;
    gv_sIXPminimum[2][lp_array] = lp_wOXP;
    gv_sIXPminimum[3][lp_array] = lp_cOXP;
    gv_sIname[lp_array] = lp_name;
    gv_sIabbreviation[lp_array] = lp_abbreviation;
    gv_sIdescription[lp_array] = lp_description;
}

void gf_SetupBetaSI (int lp_array, int lp_enXP, int lp_wOXP, int lp_cOXP, text lp_name, string lp_abbreviation, text lp_description) {
    // Automatic Variable Declarations
    // Implementation
    gv_SIBetaName[lp_array] = lp_name;
    gv_SIBetaAbbreviation[lp_array] = lp_abbreviation;
    gv_SIBetaDescription[lp_array] = lp_description;
}

trigger auto_gf_CreateBetaMosSI_Trigger = null;
int auto_gf_CreateBetaMosSI_lp_dialog;
int auto_gf_CreateBetaMosSI_lp_sI;
int auto_gf_CreateBetaMosSI_lp_width;
int auto_gf_CreateBetaMosSI_lp_height;
int auto_gf_CreateBetaMosSI_lp_offsetX;
int auto_gf_CreateBetaMosSI_lp_offsetY;
int auto_gf_CreateBetaMosSI_lp_relativeOffsetX;
int auto_gf_CreateBetaMosSI_lp_relativeOffsetY;
int auto_gf_CreateBetaMosSI_lp_player;

void gf_CreateBetaMosSI (int lp_dialog, int lp_sI, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, int lp_relativeOffsetX, int lp_relativeOffsetY, int lp_player) {
    auto_gf_CreateBetaMosSI_lp_dialog = lp_dialog;
    auto_gf_CreateBetaMosSI_lp_sI = lp_sI;
    auto_gf_CreateBetaMosSI_lp_width = lp_width;
    auto_gf_CreateBetaMosSI_lp_height = lp_height;
    auto_gf_CreateBetaMosSI_lp_offsetX = lp_offsetX;
    auto_gf_CreateBetaMosSI_lp_offsetY = lp_offsetY;
    auto_gf_CreateBetaMosSI_lp_relativeOffsetX = lp_relativeOffsetX;
    auto_gf_CreateBetaMosSI_lp_relativeOffsetY = lp_relativeOffsetY;
    auto_gf_CreateBetaMosSI_lp_player = lp_player;

    if (auto_gf_CreateBetaMosSI_Trigger == null) {
        auto_gf_CreateBetaMosSI_Trigger = TriggerCreate("auto_gf_CreateBetaMosSI_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateBetaMosSI_Trigger, false, false);
}

bool auto_gf_CreateBetaMosSI_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialog = auto_gf_CreateBetaMosSI_lp_dialog;
    int lp_sI = auto_gf_CreateBetaMosSI_lp_sI;
    int lp_width = auto_gf_CreateBetaMosSI_lp_width;
    int lp_height = auto_gf_CreateBetaMosSI_lp_height;
    int lp_offsetX = auto_gf_CreateBetaMosSI_lp_offsetX;
    int lp_offsetY = auto_gf_CreateBetaMosSI_lp_offsetY;
    int lp_relativeOffsetX = auto_gf_CreateBetaMosSI_lp_relativeOffsetX;
    int lp_relativeOffsetY = auto_gf_CreateBetaMosSI_lp_relativeOffsetY;
    int lp_player = auto_gf_CreateBetaMosSI_lp_player;

    // Variable Declarations
    int lv_offsetY;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_offsetY = 35;

    // Implementation
    libNtve_gf_CreateDialogItemImage(lp_dialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_SIBetaBorderFrameIndex[lp_sI] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(75.29, 75.29, 75.29), PlayerGroupAll());
    DialogControlSetVisible(gv_SIBetaBorderFrameIndex[lp_sI], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(lp_dialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_SIBetaBorderFrameHighlightIndex[lp_sI] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    DialogControlSetVisible(gv_SIBetaBorderFrameHighlightIndex[lp_sI], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(lp_dialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_coop_lockicon_large.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_SIBetaImageIndex[lp_sI] = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    DialogControlSetVisible(gv_SIBetaImageIndex[lp_sI], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lp_dialog, 50, 50, c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY, StringToText(StringSub(gv_SIBetaAbbreviation[lp_sI], 1, 2)), Color(149*100/255,150*100/255,151*100/255), false, 2.0);
    gv_SIBetaLabelColorIndex[lp_sI] = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, (lp_relativeOffsetY + lv_offsetY));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    DialogControlSetVisible(gv_SIBetaLabelColorIndex[lp_sI], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_sIDialog, 60, 60, c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY, StringExternal("Param/Value/E17CCE7B"), StringToText(""), "");
    gv_SIBetaDialogButtons[lp_sI] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 412, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturated(gv_SIBetaDialogButtons[lp_sI], true, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

trigger auto_gf_SetupBetaMosSI_Trigger = null;
int auto_gf_SetupBetaMosSI_lp_sI;
int auto_gf_SetupBetaMosSI_lp_player;

void gf_SetupBetaMosSI (int lp_sI, int lp_player) {
    auto_gf_SetupBetaMosSI_lp_sI = lp_sI;
    auto_gf_SetupBetaMosSI_lp_player = lp_player;

    if (auto_gf_SetupBetaMosSI_Trigger == null) {
        auto_gf_SetupBetaMosSI_Trigger = TriggerCreate("auto_gf_SetupBetaMosSI_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetupBetaMosSI_Trigger, false, false);
}

bool auto_gf_SetupBetaMosSI_TriggerFunc (bool testConds, bool runActions) {
    int lp_sI = auto_gf_SetupBetaMosSI_lp_sI;
    int lp_player = auto_gf_SetupBetaMosSI_lp_player;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_SIBetaBorderFrameIndex[lp_sI], PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(gv_SIBetaImageIndex[lp_sI], PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(gv_SIBetaLabelColorIndex[lp_sI], PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(gv_SIBetaDialogButtons[lp_sI], PlayerGroupSingle(lp_player), true);
    libNtve_gf_SetDialogItemColor(gv_SIBetaBorderFrameIndex[lp_sI], Color(0.00, 100.00, 0.00), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemImage(gv_SIBetaImageIndex[lp_sI], gv_SIBetaImage[lp_sI], PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemColor(gv_SIBetaLabelColorIndex[lp_sI], Color(100.00, 100.00, 100.00), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemDesaturated(gv_SIBetaDialogButtons[lp_sI], false, PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemTooltip(gv_SIBetaDialogButtons[lp_sI], (gv_SIBetaName[lp_sI] + StringExternal("Param/Value/0CB788A4") + gv_SIBetaDescription[lp_sI]), PlayerGroupSingle(lp_player));
    if ((gv_SIBetaUnlocked[lp_sI][lp_player] == true)) {
        libNtve_gf_SetDialogItemColor(gv_SIBetaBorderFrameIndex[lp_sI], Color(0.00, 100.00, 0.00), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemImage(gv_SIBetaImageIndex[lp_sI], gv_SIBetaImage[lp_sI], PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemColor(gv_SIBetaLabelColorIndex[lp_sI], Color(100.00, 100.00, 100.00), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemDesaturated(gv_SIBetaDialogButtons[lp_sI], false, PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemTooltip(gv_SIBetaDialogButtons[lp_sI], (gv_SIBetaName[lp_sI] + StringExternal("Param/Value/D1831EC4") + gv_SIBetaDescription[lp_sI]), PlayerGroupSingle(lp_player));
    }
    return true;
}

void gf_CreateBattleBuddyDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(360, 425, c_anchorLeft, 465, -310, true);
    gv_battleBuddySelectionScreen = DialogLastCreated();
    DialogSetImageVisible(gv_battleBuddySelectionScreen, false);
    libNtve_gf_CreateDialogItemImage(gv_battleBuddySelectionScreen, DialogGetWidth(gv_battleBuddySelectionScreen), DialogGetHeight(gv_battleBuddySelectionScreen), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_battleBuddySelectionScreen, 200, 50, c_anchorTop, 50, 25, StringExternal("Param/Value/626362FB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(gv_battleBuddySelectionScreen, 300, 50, c_anchorTop, 0, 50, StringToText(""), StringToText(gv_mini1), "");
    gv_miniButtons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_battleBuddySelectionScreen, 300, 50, c_anchorTop, 0, 100, StringToText(""), StringToText(gv_mini2), "");
    gv_miniButtons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_battleBuddySelectionScreen, 300, 50, c_anchorTop, 0, 150, StringToText(""), StringToText(gv_mini3), "");
    gv_miniButtons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_battleBuddySelectionScreen, 300, 50, c_anchorTop, 0, 200, StringToText(""), StringToText(gv_mini4), "");
    gv_miniButtons[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_battleBuddySelectionScreen, 300, 50, c_anchorTop, 0, 250, StringToText(""), StringToText(gv_mini5), "");
    gv_miniButtons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_battleBuddySelectionScreen, 300, 50, c_anchorTop, 0, 300, StringToText(""), StringToText(gv_mini6), "");
    gv_miniButtons[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_battleBuddySelectionScreen, 300, 50, c_anchorTop, 0, 350, StringToText(""), StringToText(gv_mini7), "");
    gv_miniButtons[7] = DialogControlLastCreated();
}

string gf_BattleBuddyReinforcementType (int lp_player) {
    // Automatic Variable Declarations
    int auto382B299C_val;

    // Implementation
    auto382B299C_val = gv_battleBuddyType[lp_player];
    if (auto382B299C_val == 1) {
        return "InfantryRifleman";
    }
    else if (auto382B299C_val == 2) {
        return "InfantryAutomaticRifleman";
    }
    else if (auto382B299C_val == 3) {
        return "CombatEngineerMini";
    }
    else if (auto382B299C_val == 4) {
        return "InfantryJavelinGunner";
    }
    else if (auto382B299C_val == 5) {
        return "Infantry74DFlamethrower";
    }
    else if (auto382B299C_val == 6) {
        return "InfantrySDM";
    }
    else if (auto382B299C_val == 7) {
        return "Infantry68WCombatMedic";
    }
    else {
        return "InfantryRifleman";
    }
}

void gf_PlayerTags (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TextTagCreate(TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))), 24, UnitGetPosition(gv_playerHeroes[lp_player]), -1.0, true, false, PlayerGroupAll());
    gv_heroNameTag[lp_player] = TextTagLastCreated();
    TextTagAttachToUnit(gv_heroNameTag[lp_player], gv_playerHeroes[lp_player], -1.0);
    TextTagSetFontSize(gv_heroNameTag[lp_player], 16);
    TextTagSetTextShadow(gv_heroNameTag[lp_player], false);
    TextTagShow(gv_heroNameTag[lp_player], PlayerGroupAll(), true);
}

trigger auto_gf_DisplayUIButtons_Trigger = null;
bool auto_gf_DisplayUIButtons_lp_option;

void gf_DisplayUIButtons (bool lp_option) {
    auto_gf_DisplayUIButtons_lp_option = lp_option;

    if (auto_gf_DisplayUIButtons_Trigger == null) {
        auto_gf_DisplayUIButtons_Trigger = TriggerCreate("auto_gf_DisplayUIButtons_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisplayUIButtons_Trigger, false, false);
}

bool auto_gf_DisplayUIButtons_TriggerFunc (bool testConds, bool runActions) {
    bool lp_option = auto_gf_DisplayUIButtons_lp_option;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_HideScreenButton(lp_option, 2);
    libNtve_gf_HideScreenButton(lp_option, 3);
    libNtve_gf_HideScreenButton(lp_option, 4);
    libNtve_gf_HideScreenButton(lp_option, 5);
    libNtve_gf_HideScreenButton(lp_option, 6);
    libNtve_gf_HideScreenButton(lp_option, 7);
    libNtve_gf_HideScreenButton(lp_option, 8);
    libNtve_gf_HideScreenButton(lp_option, 9);
    libNtve_gf_HideScreenButton(lp_option, 10);
    libNtve_gf_HideScreenButton(lp_option, 11);
    libNtve_gf_HideScreenButton(lp_option, 12);
    libNtve_gf_HideScreenButton(lp_option, 13);
    libNtve_gf_HideScreenButton(lp_option, 14);
    DialogControlSetVisible(gv_cameraButton, PlayerGroupAll(), lp_option);
    return true;
}

trigger auto_gf_FloatingTextforPlayer_Trigger = null;
unit auto_gf_FloatingTextforPlayer_lp_unit;
text auto_gf_FloatingTextforPlayer_lp_text;
int auto_gf_FloatingTextforPlayer_lp_player;

void gf_FloatingTextforPlayer (unit lp_unit, text lp_text, int lp_player) {
    auto_gf_FloatingTextforPlayer_lp_unit = lp_unit;
    auto_gf_FloatingTextforPlayer_lp_text = lp_text;
    auto_gf_FloatingTextforPlayer_lp_player = lp_player;

    if (auto_gf_FloatingTextforPlayer_Trigger == null) {
        auto_gf_FloatingTextforPlayer_Trigger = TriggerCreate("auto_gf_FloatingTextforPlayer_TriggerFunc");
    }

    TriggerExecute(auto_gf_FloatingTextforPlayer_Trigger, false, false);
}

bool auto_gf_FloatingTextforPlayer_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_FloatingTextforPlayer_lp_unit;
    text lp_text = auto_gf_FloatingTextforPlayer_lp_text;
    int lp_player = auto_gf_FloatingTextforPlayer_lp_player;

    // Automatic Variable Declarations
    // Implementation
    SoundPlayOnUnit(SoundLink("RadioChatter", -1), PlayerGroupSingle(lp_player), lp_unit, 0.0, 100.0, 0.0);
    TextTagCreate(lp_text, 17, UnitGetPosition(lp_unit), 1.0, true, false, PlayerGroupSingle(lp_player));
    TextTagSetTextShadow(TextTagLastCreated(), false);
    TextTagAttachToUnit(TextTagLastCreated(), lp_unit, 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
    return true;
}

trigger auto_gf_SetHUDBars_Trigger = null;
int auto_gf_SetHUDBars_lp_hUDBarPlayer;

void gf_SetHUDBars (int lp_hUDBarPlayer) {
    auto_gf_SetHUDBars_lp_hUDBarPlayer = lp_hUDBarPlayer;

    if (auto_gf_SetHUDBars_Trigger == null) {
        auto_gf_SetHUDBars_Trigger = TriggerCreate("auto_gf_SetHUDBars_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetHUDBars_Trigger, false, false);
}

bool auto_gf_SetHUDBars_TriggerFunc (bool testConds, bool runActions) {
    int lp_hUDBarPlayer = auto_gf_SetHUDBars_lp_hUDBarPlayer;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetSize(gv_statusDialogItems[6][lp_hUDBarPlayer], PlayerGroupAll(), FixedToInt((100.0 * (UnitGetPropertyFixed(gv_playerHeroes[lp_hUDBarPlayer], c_unitPropLifePercent, c_unitPropCurrent) * 0.01))), DialogControlGetHeight(gv_statusDialogItems[6][lp_hUDBarPlayer], lp_hUDBarPlayer));
    libNtve_gf_SetDialogItemColor(gv_statusDialogItems[6][lp_hUDBarPlayer], Color((100.0 - UnitGetPropertyFixed(gv_playerHeroes[lp_hUDBarPlayer], c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(gv_playerHeroes[lp_hUDBarPlayer], c_unitPropLifePercent, c_unitPropCurrent), 0.0), PlayerGroupAll());
    DialogControlSetSize(gv_statusDialogItems[7][lp_hUDBarPlayer], PlayerGroupAll(), FixedToInt((100.0 * (UnitGetPropertyFixed(gv_playerHeroes[lp_hUDBarPlayer], c_unitPropEnergyPercent, c_unitPropCurrent) * 0.01))), DialogControlGetHeight(gv_statusDialogItems[7][lp_hUDBarPlayer], lp_hUDBarPlayer));
    return true;
}

void gf_CreateInfoDialog () {
    // Variable Declarations
    int lv_yoffset;
    int lv_i;
    int lv_z;

    // Automatic Variable Declarations
    const int autoF01BDB4C_ae = 12;
    const int autoF01BDB4C_ai = 1;

    // Variable Initialization
    lv_yoffset = 10;

    // Implementation
    DialogCreate(600, (20 + (50 * 12)), c_anchorRight, 50, 200, true);
    gv_infoDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_i = 1;
    for ( ; ( (autoF01BDB4C_ai >= 0 && lv_i <= autoF01BDB4C_ae) || (autoF01BDB4C_ai < 0 && lv_i >= autoF01BDB4C_ae) ) ; lv_i += autoF01BDB4C_ai ) {
        lv_yoffset = (10 + (lv_z * 30));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 575, 25, c_anchorTopLeft, 15, lv_yoffset, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BossBarHP", PlayerGroupAll());
        gv_infoText[1][lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
        lv_z = (lv_z + 1);
    }
    DialogSetVisible(gv_infoDialog, PlayerGroupAll(), true);
}

trigger auto_gf_InfoModeText_Trigger = null;
int auto_gf_InfoModeText_lp_player;
int auto_gf_InfoModeText_lp_placement;
int auto_gf_InfoModeText_lp_modeVoted;

void gf_InfoModeText (int lp_player, int lp_placement, int lp_modeVoted) {
    auto_gf_InfoModeText_lp_player = lp_player;
    auto_gf_InfoModeText_lp_placement = lp_placement;
    auto_gf_InfoModeText_lp_modeVoted = lp_modeVoted;

    if (auto_gf_InfoModeText_Trigger == null) {
        auto_gf_InfoModeText_Trigger = TriggerCreate("auto_gf_InfoModeText_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfoModeText_Trigger, false, false);
}

bool auto_gf_InfoModeText_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_InfoModeText_lp_player;
    int lp_placement = auto_gf_InfoModeText_lp_placement;
    int lp_modeVoted = auto_gf_InfoModeText_lp_modeVoted;

    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto0CDA0D32_ae = 12;
    const int auto0CDA0D32_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto0CDA0D32_ai >= 0 && lv_index <= auto0CDA0D32_ae) || (auto0CDA0D32_ai < 0 && lv_index >= auto0CDA0D32_ae) ) ; lv_index += auto0CDA0D32_ai ) {
        if ((lv_index == lp_placement)) {
            libNtve_gf_SetDialogItemText(gv_infoText[1][lp_placement], (TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/A5587391") + UserDataGetText("GameModes", UserDataInstance("GameModes", lp_modeVoted), "Name", 1)), PlayerGroupAll());
            break;
        }
    }
    return true;
}

trigger auto_gf_InfoRankText_Trigger = null;
int auto_gf_InfoRankText_lp_player;
int auto_gf_InfoRankText_lp_placement;
text auto_gf_InfoRankText_lp_rank;
text auto_gf_InfoRankText_lp_modifiersVoted;

void gf_InfoRankText (int lp_player, int lp_placement, text lp_rank, text lp_modifiersVoted) {
    auto_gf_InfoRankText_lp_player = lp_player;
    auto_gf_InfoRankText_lp_placement = lp_placement;
    auto_gf_InfoRankText_lp_rank = lp_rank;
    auto_gf_InfoRankText_lp_modifiersVoted = lp_modifiersVoted;

    if (auto_gf_InfoRankText_Trigger == null) {
        auto_gf_InfoRankText_Trigger = TriggerCreate("auto_gf_InfoRankText_TriggerFunc");
    }

    TriggerExecute(auto_gf_InfoRankText_Trigger, false, false);
}

bool auto_gf_InfoRankText_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_InfoRankText_lp_player;
    int lp_placement = auto_gf_InfoRankText_lp_placement;
    text lp_rank = auto_gf_InfoRankText_lp_rank;
    text lp_modifiersVoted = auto_gf_InfoRankText_lp_modifiersVoted;

    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto658CECB0_ae = 12;
    const int auto658CECB0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto658CECB0_ai >= 0 && lv_index <= auto658CECB0_ae) || (auto658CECB0_ai < 0 && lv_index >= auto658CECB0_ae) ) ; lv_index += auto658CECB0_ai ) {
        if ((lv_index == lp_placement)) {
            libNtve_gf_SetDialogItemText(gv_infoText[1][lp_placement], (TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/E33E7CFD") + lp_rank + lp_modifiersVoted), PlayerGroupAll());
            break;
        }
    }
    return true;
}

void gf_ResetInfoText () {
    // Variable Declarations
    text lv_text;
    int lv_i;

    // Automatic Variable Declarations
    const int auto1B993BF6_ae = 12;
    const int auto1B993BF6_ai = 1;

    // Variable Initialization

    // Implementation
    gv_infoPlacement = 0;
    lv_i = 1;
    for ( ; ( (auto1B993BF6_ai >= 0 && lv_i <= auto1B993BF6_ae) || (auto1B993BF6_ai < 0 && lv_i >= auto1B993BF6_ae) ) ; lv_i += auto1B993BF6_ai ) {
        libNtve_gf_SetDialogItemText(gv_infoText[1][lv_i], lv_text, PlayerGroupAll());
    }
}

void gf_CreateDifficultyButtonLeft (int lp_dialog, int lp_difficulty, string lp_image, int lp_buttonPosition) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemButton(lp_dialog, 280, 150, c_anchorTop, -160, 0, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_hackingbutton_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_hackingbutton_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 45.0);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, -130, (-10 + (lp_buttonPosition * 125)));
    gv_modeitem[lp_difficulty] = DialogControlLastCreated();
    if ((lp_buttonPosition == 1)) {
        libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(gv_modeitem[lp_difficulty]), 225, 90, c_anchorTop, -130, (-10 + (lp_buttonPosition * 155)), StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    }
    else if ((lp_buttonPosition == 2)) {
        libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(gv_modeitem[lp_difficulty]), 225, 90, c_anchorTop, -130, (-10 + (lp_buttonPosition * 140)), StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    }
    else if ((lp_buttonPosition == 3)) {
        libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(gv_modeitem[lp_difficulty]), 225, 90, c_anchorTop, -130, (-10 + (lp_buttonPosition * 135)), StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    }
    else if ((lp_buttonPosition == 4)) {
        libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(gv_modeitem[lp_difficulty]), 225, 90, c_anchorTop, -130, (-12 + (lp_buttonPosition * 133)), StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    }
    else if ((lp_buttonPosition == 5)) {
        libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(gv_modeitem[lp_difficulty]), 225, 90, c_anchorTop, -130, (-10 + (lp_buttonPosition * 131)), StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    }
}

void gf_CreateDifficultyButtonRight (int lp_dialog, int lp_difficulty, string lp_image, int lp_buttonPosition) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemButton(lp_dialog, 280, 150, c_anchorTop, -160, 0, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_hackingbutton_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_hackingbutton_normaloverpressedover.dds", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 45.0);
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 130, (-10 + (lp_buttonPosition * 125)));
    gv_modeitem[lp_difficulty] = DialogControlLastCreated();
    if ((lp_buttonPosition == 1)) {
        libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(gv_modeitem[lp_difficulty]), 225, 90, c_anchorTop, 130, (-10 + (lp_buttonPosition * 155)), StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    }
    else if ((lp_buttonPosition == 2)) {
        libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(gv_modeitem[lp_difficulty]), 225, 90, c_anchorTop, 130, (-10 + (lp_buttonPosition * 140)), StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    }
    else if ((lp_buttonPosition == 3)) {
        libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(gv_modeitem[lp_difficulty]), 225, 90, c_anchorTop, 130, (-10 + (lp_buttonPosition * 135)), StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    }
    else if ((lp_buttonPosition == 4)) {
        libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(gv_modeitem[lp_difficulty]), 225, 90, c_anchorTop, 130, (-12 + (lp_buttonPosition * 133)), StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    }
    else if ((lp_buttonPosition == 5)) {
        libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(gv_modeitem[lp_difficulty]), 225, 90, c_anchorTop, 130, (-10 + (lp_buttonPosition * 131)), StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    }
}

int gf_GetNewFTLeader (int lp_fireteam) {
    // Variable Declarations
    int lv_index;
    int lv_slot;

    // Automatic Variable Declarations
    const int auto6E8B0DE9_ae = 4;
    const int auto6E8B0DE9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto6E8B0DE9_ai >= 0 && lv_index <= auto6E8B0DE9_ae) || (auto6E8B0DE9_ai < 0 && lv_index >= auto6E8B0DE9_ae) ) ; lv_index += auto6E8B0DE9_ai ) {
        if ((gv_placementOccupied[lv_index][lp_fireteam] == true)) {
            lv_slot = lv_index;
            break;
        }
    }
    return lv_slot;
}

void gf_CreateFTImage (int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, int lp_relativeOffsetX, int lp_relativeOffsetY) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemImage(gv_fireteamDialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 50.20, 100.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_fireteamDialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Textures\\Fireteam Alpha.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
}

trigger auto_gf_AddRemovePlayerFromFireteam_Trigger = null;
int auto_gf_AddRemovePlayerFromFireteam_lp_placement;
int auto_gf_AddRemovePlayerFromFireteam_lp_player;
int auto_gf_AddRemovePlayerFromFireteam_lp_fireteam;
int auto_gf_AddRemovePlayerFromFireteam_lp_status;

void gf_AddRemovePlayerFromFireteam (int lp_placement, int lp_player, int lp_fireteam, int lp_status) {
    auto_gf_AddRemovePlayerFromFireteam_lp_placement = lp_placement;
    auto_gf_AddRemovePlayerFromFireteam_lp_player = lp_player;
    auto_gf_AddRemovePlayerFromFireteam_lp_fireteam = lp_fireteam;
    auto_gf_AddRemovePlayerFromFireteam_lp_status = lp_status;

    if (auto_gf_AddRemovePlayerFromFireteam_Trigger == null) {
        auto_gf_AddRemovePlayerFromFireteam_Trigger = TriggerCreate("auto_gf_AddRemovePlayerFromFireteam_TriggerFunc");
    }

    TriggerExecute(auto_gf_AddRemovePlayerFromFireteam_Trigger, false, false);
}

bool auto_gf_AddRemovePlayerFromFireteam_TriggerFunc (bool testConds, bool runActions) {
    int lp_placement = auto_gf_AddRemovePlayerFromFireteam_lp_placement;
    int lp_player = auto_gf_AddRemovePlayerFromFireteam_lp_player;
    int lp_fireteam = auto_gf_AddRemovePlayerFromFireteam_lp_fireteam;
    int lp_status = auto_gf_AddRemovePlayerFromFireteam_lp_status;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_status == ge_Fireteam_Join)) {
        UIDisplayMessage(gv_fireteamGroups[lp_fireteam], c_messageAreaSubtitle, (TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/B61D8E0E")));
        PlayerGroupAdd(gv_fireteamGroups[lp_fireteam], lp_player);
        gv_playersfireteam[EventPlayer()] = lp_fireteam;
        libNtve_gf_SetDialogItemText(gv_fireteamlabels[lp_placement][lp_fireteam], TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))), PlayerGroupAll());
        gv_fireteamPlacement[lp_fireteam][lp_player] = lp_placement;
        gv_placementOccupied[lp_placement][lp_fireteam] = true;
    }
    else if ((lp_status == ge_Fireteam_Leave)) {
        UIDisplayMessage(gv_fireteamGroups[lp_fireteam], c_messageAreaSubtitle, (TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/40657E5F")));
        PlayerGroupRemove(gv_fireteamGroups[lp_fireteam], lp_player);
        UnitRemove(gv_fireteamORPpoints[EventPlayer()]);
        gv_fireteamPlacement[lp_fireteam][lp_player] = 0;
        gv_placementOccupied[lp_placement][lp_fireteam] = false;
        gv_playersfireteam[lp_player] = 0;
        libNtve_gf_SetDialogItemText(gv_fireteamlabels[lp_placement][lp_fireteam], StringToText(""), PlayerGroupAll());
        if ((gv_fireteamTLs[lp_fireteam] == lp_player)) {
            PingDestroy(gv_fireteamORP[lp_fireteam]);
            if ((PlayerGroupCount(gv_fireteamGroups[lp_fireteam]) >= 1)) {
                gv_fireteamTLs[lp_fireteam] = PlayerGroupPlayer(gv_fireteamGroups[lp_fireteam], 1);
                UIDisplayMessage(PlayerGroupSingle(gv_fireteamTLs[lp_fireteam]), c_messageAreaSubtitle, StringExternal("Param/Value/FF848E88"));
                libNtve_gf_SetDialogItemText(gv_fireteamlabels[gf_GetNewFTLeader(lp_fireteam)][lp_fireteam], (StringExternal("Param/Value/D9A2B85D") + TextWithColor(PlayerName(PlayerGroupPlayer(gv_fireteamGroups[lp_fireteam], 1)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupPlayer(gv_fireteamGroups[lp_fireteam], 1), false)))), PlayerGroupAll());
                if ((PlayerGroupCount(gv_fireteamGroups[lp_fireteam]) > 1)) {
                    UIDisplayMessage(PlayerGroupSingle(gv_fireteamTLs[lp_fireteam]), c_messageAreaSubtitle, (PlayerName(gv_fireteamTLs[lp_fireteam]) + StringExternal("Param/Value/4BE47F34")));
                }
            }
        }
    }
    return true;
}

void gf_UpdateFireteamVision () {
    // Variable Declarations
    int lv_fireteams;
    int lv_index;

    // Automatic Variable Declarations
    const int auto8B15E819_ae = 4;
    const int auto8B15E819_ai = 1;
    playergroup autoC60467F6_g;
    int autoC60467F6_var;
    int autoBB8E6918_ae;
    const int autoBB8E6918_ai = 1;

    // Variable Initialization

    // Implementation
    while ((gv_intenseFog == false)) {
        lv_fireteams = 1;
        for ( ; ( (auto8B15E819_ai >= 0 && lv_fireteams <= auto8B15E819_ae) || (auto8B15E819_ai < 0 && lv_fireteams >= auto8B15E819_ae) ) ; lv_fireteams += auto8B15E819_ai ) {
            if ((PlayerGroupCount(gv_fireteamGroups[lv_fireteams]) > 0)) {
                autoC60467F6_g = gv_fireteamGroups[lv_fireteams];
                autoC60467F6_var = -1;
                while (true) {
                    autoC60467F6_var = PlayerGroupNextPlayer(autoC60467F6_g, autoC60467F6_var);
                    if (autoC60467F6_var < 0) { break; }
                    autoBB8E6918_ae = PlayerGroupCount(gv_fireteamGroups[lv_fireteams]);
                    lv_index = 1;
                    for ( ; ( (autoBB8E6918_ai >= 0 && lv_index <= autoBB8E6918_ae) || (autoBB8E6918_ai < 0 && lv_index >= autoBB8E6918_ae) ) ; lv_index += autoBB8E6918_ai ) {
                        if ((autoC60467F6_var != PlayerGroupPlayer(gv_fireteamGroups[lv_fireteams], lv_index))) {
                            VisRevealArea(autoC60467F6_var, RegionCircle(UnitGetPosition(gv_playerHeroes[PlayerGroupPlayer(gv_fireteamGroups[lv_fireteams], lv_index)]), 2.0), 1.0, false);
                        }
                    }
                }
            }
        }
        Wait(0.3, c_timeGame);
    }
}

trigger auto_gf_InitializeAmmoSprintBar_Trigger = null;

void gf_InitializeAmmoSprintBar () {
    if (auto_gf_InitializeAmmoSprintBar_Trigger == null) {
        auto_gf_InitializeAmmoSprintBar_Trigger = TriggerCreate("auto_gf_InitializeAmmoSprintBar_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitializeAmmoSprintBar_Trigger, false, false);
}

bool auto_gf_InitializeAmmoSprintBar_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialog2;
    text lv_temptext;
    int lv_dialog;
    int lv_progressbar;
    fixed lv_psprint;
    int lv_xoffset;
    int lv_x;
    int lv_rounds;

    // Automatic Variable Declarations
    const int autoCECDD09E_n = 9;
    int autoCECDD09E_i;
    playergroup autoA90D3CAC_g;
    int autoA90D3CAC_var;

    // Variable Initialization
    lv_dialog2 = c_invalidDialogId;
    lv_temptext = StringExternal("Param/Value/2201B1D4");
    lv_dialog = c_invalidDialogId;
    lv_progressbar = c_invalidDialogControlId;
    lv_xoffset = 37;

    // Implementation
    DialogCreate(400, 35, c_anchorBottom, 0, 325, true);
    lv_dialog2 = DialogLastCreated();
    gv_ammoDialogue = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_frame_message.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    libNtve_gf_CreateDialogItemImage(gv_ammoDialogue, 25, 25, c_anchorLeft, 25, 0, StringExternal("Param/Value/9037CD08"), "Assets\\Textures\\btn-techupgrade-terran-fullborecanisterammo.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ammoDialogueItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_ammoDialogue, 75, 25, c_anchorLeft, 50, 0, StringExternal("Param/Value/02614884"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ammoDialogueItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_ammoDialogue, 25, 25, c_anchorLeft, 150, 0, StringExternal("Param/Value/C7302E60"), "Assets\\Custom Icons\\icon-mags.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ammoDialogueItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_ammoDialogue, 75, 25, c_anchorLeft, 175, 0, StringExternal("Param/Value/C9C7E9B5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ammoDialogueItems[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_ammoDialogue, 25, 25, c_anchorLeft, 150, 0, StringExternal("Param/Value/720F34FF"), "Assets\\Textures\\fireball_10.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ammoDialogueItems[7] = DialogControlLastCreated();
    DialogControlSetVisible(gv_ammoDialogueItems[7], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(gv_ammoDialogue, 75, 25, c_anchorLeft, 175, 0, StringExternal("Param/Value/DABCFB79"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ammoDialogueItems[8] = DialogControlLastCreated();
    DialogControlSetVisible(gv_ammoDialogueItems[8], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_ammoDialogue, 25, 25, c_anchorLeft, 275, 0, StringExternal("Param/Value/5495A5DC"), "Assets\\Textures\\ui_battlenet_glue_icons_zerg_highlight.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ammoDialogueItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_ammoDialogue, 75, 25, c_anchorLeft, 300, 0, StringExternal("Param/Value/F9829B09"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ammoDialogueItems[6] = DialogControlLastCreated();
    DialogCreate(275, 75, c_anchorBottomRight, 410, 225, true);
    lv_dialog = DialogLastCreated();
    gv_sprintBar = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 20, c_anchorLeft, 27, 0, StringExternal("Param/Value/C5272114"), "Assets\\Textures\\ui_ingame_lotv_healthbar.dds", c_triggerImageTypeNormal, false, Color(0.00, 100.00, 50.20), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 15.0);
    lv_progressbar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 400, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 250, 70, c_anchorLeft, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 800, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 45.0);
    for (autoCECDD09E_i = 1; autoCECDD09E_i <= autoCECDD09E_n; autoCECDD09E_i += 1) {
        lv_rounds += 1;
        if ((lv_rounds != 4) && (lv_rounds != 5) && (lv_rounds != 9)) {
            libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(lv_progressbar), 20, 1, c_anchorLeft, lv_xoffset, 0, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_line01.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
        }
        else {
            libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(lv_progressbar), 20, 1, c_anchorLeft, (lv_xoffset + 1), 0, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_line01.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
        }
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 850, PlayerGroupAll());
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
        lv_xoffset += 20;
    }
    DialogSetVisible(lv_dialog, PlayerGroupAll(), false);
    gf_SprintLoop();
    while (true) {
        autoA90D3CAC_g = gv_players;
        autoA90D3CAC_var = -1;
        while (true) {
            autoA90D3CAC_var = PlayerGroupNextPlayer(autoA90D3CAC_g, autoA90D3CAC_var);
            if (autoA90D3CAC_var < 0) { break; }
            if (((gv_functionaldialog[autoA90D3CAC_var] == c_invalidDialogId) || (DialogIsVisible(gv_functionaldialog[autoA90D3CAC_var], autoA90D3CAC_var) == false) || (gv_playerHeroes[autoA90D3CAC_var] == null))) {
                DialogSetVisible(lv_dialog, PlayerGroupSingle(autoA90D3CAC_var), false);
                DialogSetVisible(lv_dialog2, PlayerGroupSingle(autoA90D3CAC_var), false);
            }
            else {
                DialogSetVisible(lv_dialog, PlayerGroupSingle(autoA90D3CAC_var), true);
                DialogSetVisible(lv_dialog2, PlayerGroupSingle(autoA90D3CAC_var), true);
                lv_psprint = UnitGetCustomValue(gv_playerHeroes[autoA90D3CAC_var], 2);
                libNtve_gf_SetDialogItemCurrentValue(lv_progressbar, lv_psprint, PlayerGroupSingle(autoA90D3CAC_var));
                if ((lv_psprint >= 0.1)) {
                    DialogControlSetSize(lv_progressbar, PlayerGroupSingle(autoA90D3CAC_var), FixedToInt((200.0 * ((lv_psprint * 6.25) * 0.01))), DialogControlGetHeight(lv_progressbar, autoA90D3CAC_var));
                    libNtve_gf_SetDialogItemColor(lv_progressbar, Color((100.0 - (lv_psprint * 6.25)), (lv_psprint * 6.25), 10.0), PlayerGroupSingle(autoA90D3CAC_var));
                }
                else {
                    DialogControlSetSize(lv_progressbar, PlayerGroupSingle(autoA90D3CAC_var), -1, DialogControlGetHeight(lv_progressbar, autoA90D3CAC_var));
                }
                if ((TriggerIsEnabled(gt_AdvancedInfestationLevelDisplay) == false)) {
                    if ((gv_infestationLevel < 30)) {
                        lv_temptext = StringExternal("Param/Value/C8B097C3");
                    }
                    else {
                        if ((gv_infestationLevel < 35)) {
                            lv_temptext = StringExternal("Param/Value/19071590");
                        }
                        else {
                            if ((gv_infestationLevel < 40)) {
                                lv_temptext = StringExternal("Param/Value/B797F9C1");
                            }
                            else {
                                lv_temptext = StringExternal("Param/Value/AC2EA4E6");
                            }
                        }
                    }
                    libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[6], (StringExternal("Param/Value/2B7E4505") + lv_temptext + IntToText(gv_infestationLevel) + StringExternal("Param/Value/A7AE8FF7")), PlayerGroupAll());
                }
                if ((gv__12ManExtraction == gv_LUNATICEnable) && (gv_fogevent == false)) {
                    if ((GameTimeOfDayGet() == "06:00:00")) {
                        gv_currentlighting = "UACDay";
                        gf_BlendFog(50.0, 50.0, 50.0, 6.0, 1.0, 5.0, 15.0);
                    }
                    else if ((GameTimeOfDayGet() == "08:00:00")) {
                        gf_BlendFog(50.0, 50.0, 50.0, 0.0, 1.0, 0.0, 18.75);
                    }
                    else if ((GameTimeOfDayGet() == "18:00:00")) {
                        gv_currentlighting = "IceWorldNight";
                    }
                }

            }
        }
        Wait(0.75, c_timeGame);
    }
    return true;
}

trigger auto_gf_SprintLoop_Trigger = null;

void gf_SprintLoop () {
    if (auto_gf_SprintLoop_Trigger == null) {
        auto_gf_SprintLoop_Trigger = TriggerCreate("auto_gf_SprintLoop_TriggerFunc");
    }

    TriggerExecute(auto_gf_SprintLoop_Trigger, false, false);
}

bool auto_gf_SprintLoop_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5E7CF76C_g;
    int auto5E7CF76C_u;
    unit auto5E7CF76C_var;

    // Implementation
    while ((gv_gameOver == false)) {
        if ((gv_pauseSprintLoop == false)) {
            auto5E7CF76C_g = gv_sprinters;
            auto5E7CF76C_u = UnitGroupCount(auto5E7CF76C_g, c_unitCountAll);
            for (;; auto5E7CF76C_u -= 1) {
                auto5E7CF76C_var = UnitGroupUnitFromEnd(auto5E7CF76C_g, auto5E7CF76C_u);
                if (auto5E7CF76C_var == null) { break; }
                if ((UnitHasBehavior(auto5E7CF76C_var, "Sprint") == true)) {
                    UnitBehaviorRemove(auto5E7CF76C_var, "Sprint", 1);
                    UnitSetCustomValue(auto5E7CF76C_var, 2, IntToFixed(UnitBehaviorCount(auto5E7CF76C_var, "Sprint")));
                    if ((UnitHasBehavior(auto5E7CF76C_var, "Sprint") == false)) {
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(auto5E7CF76C_var)), c_messageAreaError, StringExternal("Param/Value/2669A4E4"));
                    }
                }
                else {
                    if ((UnitGetCustomValue(auto5E7CF76C_var, 2) <= 15.2)) {
                        UnitSetCustomValue(auto5E7CF76C_var, 2, (UnitGetCustomValue(auto5E7CF76C_var, 2) + 0.8));
                    }
                    else {
                        if ((UnitGetCustomValue(auto5E7CF76C_var, 2) < 16.0) && (UnitGetCustomValue(auto5E7CF76C_var, 2) > 15.2)) {
                            UnitSetCustomValue(auto5E7CF76C_var, 2, 16.0);
                        }
                    }
                }
            }
        }
        Wait(0.75, c_timeGame);
    }
    return true;
}

trigger auto_gf_SprintCheck_Trigger = null;
unit auto_gf_SprintCheck_lp_unit;

void gf_SprintCheck (unit lp_unit) {
    auto_gf_SprintCheck_lp_unit = lp_unit;

    if (auto_gf_SprintCheck_Trigger == null) {
        auto_gf_SprintCheck_Trigger = TriggerCreate("auto_gf_SprintCheck_TriggerFunc");
    }

    TriggerExecute(auto_gf_SprintCheck_Trigger, false, false);
}

bool auto_gf_SprintCheck_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_SprintCheck_lp_unit;

    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((UnitHasBehavior2(lp_unit, "Sprint") == true)) {
        lv_point = UnitGetPosition(lp_unit);
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(lp_unit) == false)) {
        }
        else {
            if ((lv_point == UnitGetPosition(lp_unit))) {
                UnitBehaviorRemove(EventUnit(), "Sprint", -1);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaError, StringExternal("Param/Value/836E1B92"));
            }
            else {
                lv_point = null;
            }
        }
    }
    return true;
}

string gf_GetArmorType (int lp_listItem) {
    // Variable Declarations
    string lv_item;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_listItem == 1)) {
        lv_item = "BioSuit";
    }
    else if ((lp_listItem == 2)) {
        lv_item = "KevlarBodyArmor";
    }
    else if ((lp_listItem == 3)) {
        lv_item = "OPA";
    }
    else if ((lp_listItem == 4)) {
        lv_item = "ShieldGenerator";
    }
    else if ((lp_listItem == 5)) {
        lv_item = "SPCS";
    }
    return lv_item;
}

string gf_GetWeaponType (int lp_listItem) {
    // Variable Declarations
    string lv_item;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_listItem == 1)) {
        lv_item = "MGL";
    }
    else if ((lp_listItem == 2)) {
        lv_item = "MRL";
    }
    else if ((lp_listItem == 3)) {
        lv_item = "M5MAR";
    }
    else if ((lp_listItem == 4)) {
        lv_item = "USMCR";
    }
    else if ((lp_listItem == 5)) {
        lv_item = "HK42";
    }
    else if ((lp_listItem == 6)) {
        lv_item = "StynerSPR";
    }
    else if ((lp_listItem == 7)) {
        lv_item = "StynerBR3";
    }
    else if ((lp_listItem == 8)) {
        lv_item = "SOFAR";
    }
    else if ((lp_listItem == 9)) {
        lv_item = "ATLASX50";
    }
    else if ((lp_listItem == 10)) {
        lv_item = "M241MMG";
    }
    else if ((lp_listItem == 11)) {
        lv_item = "M41SAW";
    }
    else if ((lp_listItem == 12)) {
        lv_item = "M135Minigun";
    }
    else if ((lp_listItem == 13)) {
        lv_item = "IDMR2";
    }
    else if ((lp_listItem == 14)) {
        lv_item = "M92Torrent";
    }
    else if ((lp_listItem == 15)) {
        lv_item = "XR900";
    }
    else if ((lp_listItem == 16)) {
        lv_item = "AS50Bipod";
    }
    else if ((lp_listItem == 17)) {
        lv_item = "M79Flamethrower";
    }
    else if ((lp_listItem == 18)) {
        lv_item = "Inferno";
    }
    else if ((lp_listItem == 19)) {
        lv_item = "ISS7";
    }
    else if ((lp_listItem == 20)) {
        lv_item = "AA12";
    }
    else if ((lp_listItem == 21)) {
        lv_item = "M1014";
    }
    else if ((lp_listItem == 22)) {
        lv_item = "IPR";
    }
    else if ((lp_listItem == 23)) {
        lv_item = "PR34E";
    }
    else if ((lp_listItem == 24)) {
        lv_item = "PR42C";
    }
    else if ((lp_listItem == 25)) {
        lv_item = "D20LaserRifle";
    }
    return lv_item;
}

string gf_GetItemType (int lp_listItem) {
    // Variable Declarations
    string lv_item;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_listItem == 1)) {
        lv_item = "AimAssistant";
    }
    else if ((lp_listItem == 2)) {
        lv_item = "AmmoCase";
    }
    else if ((lp_listItem == 3)) {
        lv_item = "APRounds";
    }
    else if ((lp_listItem == 4)) {
        lv_item = "Binoculars";
    }
    else if ((lp_listItem == 5)) {
        lv_item = "C4Charge";
    }
    else if ((lp_listItem == 6)) {
        lv_item = "Claymore";
    }
    else if ((lp_listItem == 7)) {
        lv_item = "DURounds";
    }
    else if ((lp_listItem == 8)) {
        lv_item = "EnergyCell";
    }
    else if ((lp_listItem == 9)) {
        lv_item = "ExplosiveCharge";
    }
    else if ((lp_listItem == 10)) {
        lv_item = "FirstAidKit";
    }
    else if ((lp_listItem == 11)) {
        lv_item = "FlareGun";
    }
    else if ((lp_listItem == 12)) {
        lv_item = "Flashlight";
    }
    else if ((lp_listItem == 13)) {
        lv_item = "FragGrenade";
    }
    else if ((lp_listItem == 14)) {
        lv_item = "40mmGrenade";
    }
    else if ((lp_listItem == 15)) {
        lv_item = "GasCompressor";
    }
    else if ((lp_listItem == 16)) {
        lv_item = "GroundFlare";
    }
    else if ((lp_listItem == 17)) {
        lv_item = "KineticIntegrator";
    }
    else if ((lp_listItem == 18)) {
        lv_item = "LiftBoots";
    }
    else if ((lp_listItem == 19)) {
        lv_item = "LLDR";
    }
    else if ((lp_listItem == 20)) {
        lv_item = "Magazines";
    }
    else if ((lp_listItem == 21)) {
        lv_item = "MK44SentryGunPacked";
    }
    else if ((lp_listItem == 22)) {
        lv_item = "MK79SentryGunPacked";
    }
    else if ((lp_listItem == 23)) {
        lv_item = "MRLRocket";
    }
    else if ((lp_listItem == 24)) {
        lv_item = "MuscleRelaxant";
    }
    else if ((lp_listItem == 25)) {
        lv_item = "PlasmaInducer";
    }
    else if ((lp_listItem == 26)) {
        lv_item = "PlasmaMine";
    }
    else if ((lp_listItem == 27)) {
        lv_item = "ProjectileAccelerator";
    }
    else if ((lp_listItem == 27)) {
        lv_item = "SmokeGrenade";
    }
    else if ((lp_listItem == 28)) {
        lv_item = "StrafeDesignator";
    }
    return lv_item;
}

void gf_CreateItemScannerDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(330, 330, c_anchorRight, 100, 100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_itemScannerMenuDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorLeft, 40, -95, StringExternal("Param/Value/F8979F99"), false);
    gv_itemScannerBoxes[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorLeft, 40, -25, StringExternal("Param/Value/9201BE70"), false);
    gv_itemScannerBoxes[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 25, 25, c_anchorLeft, 40, 40, StringExternal("Param/Value/768F2FEC"), false);
    gv_itemScannerBoxes[3] = DialogControlLastCreated();
    gf_CreateDialogItemAny(c_triggerControlTypePulldown, DialogLastCreated(), "", 200, 50, c_anchorLeft, 90, -95, null, null, "", "", "", PlayerGroupAll());
    gv_itemScannerPullDownTabs[1] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/FB60A7D2"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/8D81F9E6"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/FED427F0"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6B6040CF"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/3C69A7AD"));
    DialogControlSelectItem(gv_itemScannerPullDownTabs[1], PlayerGroupAll(), 1);
    gf_CreateDialogItemAny(c_triggerControlTypePulldown, DialogLastCreated(), "", 200, 50, c_anchorLeft, 90, -25, null, null, "", "", "", PlayerGroupAll());
    gv_itemScannerPullDownTabs[2] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/552E4EFD"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6B848EF9"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/0366BCBB"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/A0F641A2"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/FE5647E1"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F2AEDC96"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/03A4158F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/CCB49613"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/D2F4BF81"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/FE2F2FB8"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/FAC4C14E"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/03CF9EB5"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/23CF8E8C"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/8920CD75"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/061B1C90"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/8F1F7E5B"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E7F342A9"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/81D3BBB9"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/14CFAC5E"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/501F8EC1"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/157A2CC7"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/88F8875A"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/C76C3DC9"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/FB0F29AC"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E487FC2E"));
    DialogControlSelectItem(gv_itemScannerPullDownTabs[2], PlayerGroupAll(), 1);
    gf_CreateDialogItemAny(c_triggerControlTypePulldown, DialogLastCreated(), "", 200, 50, c_anchorLeft, 90, 40, null, null, "", "", "", PlayerGroupAll());
    gv_itemScannerPullDownTabs[3] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/9C44A43B"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/3E8D3943"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/DAD836AE"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/4FE0B188"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/3388BF13"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/CA6D0370"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/9791FF29"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/45CE3D92"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F71D48BD"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/BD270EE4"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/B96E2054"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6B048580"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/54A96175"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/0BC47419"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/AFA282E3"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F901175F"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/DC19BD2B"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/5FEE028C"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/72403682"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/A71C8365"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/20DCE1BD"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/1A064781"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/0C0F2439"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F56F84B5"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F7AA3A65"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/FF6051C8"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/CD6CE9B2"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/1C527B57"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/61E47952"));
    DialogControlSelectItem(gv_itemScannerPullDownTabs[3], PlayerGroupAll(), 1);
    libNtve_gf_CreateDialogItemLabel(gv_itemScannerMenuDialog, 125, 25, c_anchorLeft, 100, -125, StringExternal("Param/Value/828C2C4F"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_itemScannerMenuDialog, 125, 25, c_anchorLeft, 100, -55, StringExternal("Param/Value/13CB75A1"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_itemScannerMenuDialog, 125, 25, c_anchorLeft, 100, 11, StringExternal("Param/Value/AF11CFD7"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemButton(gv_itemScannerMenuDialog, 125, 70, c_anchorLeft, 35, 105, StringToText(""), StringExternal("Param/Value/C6BDD3EF"), "");
    gv_itemScannerDialogButtons[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_itemScannerDialogButtons[1], "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(gv_itemScannerDialogButtons[1], "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_itemScannerDialogButtons[1], c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_itemScannerMenuDialog, 125, 70, c_anchorLeft, 169, 105, StringToText(""), StringExternal("Param/Value/3809126F"), "");
    gv_itemScannerDialogButtons[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_itemScannerDialogButtons[2], "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(gv_itemScannerDialogButtons[2], "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_itemScannerDialogButtons[2], c_triggerImageTypeEndCap, PlayerGroupAll());
    DialogSetVisible(gv_itemScannerMenuDialog, PlayerGroupAll(), false);
}

string gf_ConvertGamelinkUnitToString (string lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return lp_item;
}

fixed gf_GetItemCharge (unit lp_item) {
    // Variable Declarations
    unit lv_inventoryItem;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_inventoryItem = lp_item;
    lv_chargecount = FixedToInt(0.0);

    // Implementation
    if ((UnitGetType(lv_inventoryItem) == "M5MAR")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 10.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "QuikClot")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 3.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "AmmoCase")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "AmmoCharges", 10.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "MGL")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 10.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "MRL")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 3.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "MRLRocket")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 3.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "LLDR")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 5.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "Magazines")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "AmmoCharges", 3.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "C4Charge")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 3.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "EnergyCell")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "EnergyCharges", 3.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "FlareGun")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 5.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "GroundFlare")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 5.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "FragGrenade")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 5.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "FirstAidKit")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 5.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "ExplosiveCharge")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 12.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "PlasmaMine")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 3.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "SmokeGrenade")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 5.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "Claymore")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 2.0);
    }
    else if ((UnitGetType(lv_inventoryItem) == "40mmGrenade")) {
        lv_chargecount = gf_chargesremaining(lv_inventoryItem, "ItemCharges", 10.0);
    }
    return lv_chargecount;
}

bool gf_ItemList (unit lp_item) {
    // Variable Declarations
    unit lv_inventoryItem;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_inventoryItem = lp_item;
    lv_chargecount = FixedToInt(0.0);

    // Implementation
    if (((UnitGetType(lv_inventoryItem) == "QuikClot") || (UnitGetType(lv_inventoryItem) == "MK44SentryGunPacked") || (UnitGetType(lv_inventoryItem) == "MK79SentryGunPacked") || (UnitGetType(lv_inventoryItem) == "AmmoCase") || (UnitGetType(lv_inventoryItem) == "MGL") || (UnitGetType(lv_inventoryItem) == "MRL") || (UnitGetType(lv_inventoryItem) == "MRLRocket") || (UnitGetType(lv_inventoryItem) == "LLDR") || (UnitGetType(lv_inventoryItem) == "Magazines") || (UnitGetType(lv_inventoryItem) == "C4Charge") || (UnitGetType(lv_inventoryItem) == "EnergyCell") || (UnitGetType(lv_inventoryItem) == "FlareGun") || (UnitGetType(lv_inventoryItem) == "GroundFlare") || (UnitGetType(lv_inventoryItem) == "FragGrenade") || (UnitGetType(lv_inventoryItem) == "FirstAidKit") || (UnitGetType(lv_inventoryItem) == "ExplosiveCharge") || (UnitGetType(lv_inventoryItem) == "PlasmaMine") || (UnitGetType(lv_inventoryItem) == "SmokeGrenade") || (UnitGetType(lv_inventoryItem) == "Claymore") || (UnitGetType(lv_inventoryItem) == "40mmGrenade") || (UnitGetType(lv_inventoryItem) == "M5MAR"))) {
        return true;
    }
    return false;
}

void gf_InitializeItemVars () {
    // Automatic Variable Declarations
    // Implementation
    gf_SetupItems(1, "Casualty2", "Assets\\Textures\\changelingportrait_static.dds");
    gf_SetupItems(2, "KevlarBodyArmor", "Assets\\Buttons\\Btn_Custom_UAC_StabVest.dds");
    gf_SetupItems(3, "OPA", "Buttons\\BTNPlateCarrier.dds");
    gf_SetupItems(4, "ShieldGenerator", "Assets\\Buttons\\Btn_Custom_UAC_KineticBodyArmor.dds");
    gf_SetupItems(5, "SPCS", "Assets\\Buttons\\Btn_Custom_UAC_InterceptorBodyArmor.dds");
    gf_SetupItems(6, "MGL", "Buttons\\Misc Items\\BTNM320.dds");
    gf_SetupItems(7, "MRL", "Buttons\\Misc Items\\BTNRocketLauncher.dds");
    gf_SetupItems(8, "M5MAR", "Buttons/BTNMAR.dds");
    gf_SetupItems(9, "USMCR", "Buttons/BTNUSMCR.dds");
    gf_SetupItems(10, "HK42", "Buttons\\BTNVOSS.dds");
    gf_SetupItems(11, "SOFAR", "Buttons\\Weapons\\MEN7.dds");
    gf_SetupItems(12, "StynerSPR", "Buttons\\BTNSCAR.dds");
    gf_SetupItems(13, "StynerBR3", "Assets\\Custom Icons\\BTN_StynerBR-3.dds");
    gf_SetupItems(14, "ATLASX50", "Buttons\\Weapons\\HK416.dds");
    gf_SetupItems(15, "M241MMG", "Buttons\\BTNM241.dds");
    gf_SetupItems(16, "M41SAW", "Buttons\\Weapons\\BTNLMG.dds");
    gf_SetupItems(17, "M135Minigun", "Buttons\\BTNMinigun.dds");
    gf_SetupItems(18, "XR900", "Buttons\\Weapons\\weapon3.dds");
    gf_SetupItems(19, "M92Torrent", "Buttons\\M92.dds");
    gf_SetupItems(20, "IDMR2", "Buttons\\Weapons\\IDMR2.dds");
    gf_SetupItems(21, "IPR", "Buttons\\Weapons\\BTNIPR.dds");
    gf_SetupItems(22, "PR34E", "Assets\\Custom Icons\\BTN_PlasmaRifle1.dds");
    gf_SetupItems(23, "PR42C", "Assets\\Custom Icons\\BTN_PlasmaRifle2.dds");
    gf_SetupItems(24, "M79Flamethrower", "Assets\\Textures\\fireball_7.dds");
    gf_SetupItems(25, "Inferno", "Buttons\\Weapons\\weapon4.dds");
    gf_SetupItems(26, "AA12", "Assets\\Custom Icons\\AA12Cameo.dds");
    gf_SetupItems(27, "ISS7", "Buttons\\Weapons\\ISS-7.dds");
    gf_SetupItems(28, "40mmGrenade", "Assets\\Textures\\BTN40mmGrenade.dds");
    gf_SetupItems(29, "AimAssistant", "Assets\\Buttons\\Btn_Custom_UAC_AimAssist.dds");
    gf_SetupItems(30, "EnergyCell", "Assets\\Textures\\btn-ability-protoss-blink-color.dds");
    gf_SetupItems(31, "FirstAidKit", "Buttons\\BTNMedicalKit.dds");
    gf_SetupItems(32, "QuikClot", "Assets\\Textures\\btn-ability-terran-stimpack-color.dds");
    gf_SetupItems(33, "ShockPaddles", "Buttons\\BTNRevive.dds");
    gf_SetupItems(34, "FlareGun", "Assets\\Buttons\\Btn_Custom_UAC_Flare.dds");
    gf_SetupItems(35, "GroundFlare", "BTN_CR_Mindblast.dds");
    gf_SetupItems(36, "SmokeGrenade", "Assets\\Buttons\\Btn_Custom_UAC_SmokeGrenade.dds");
    gf_SetupItems(37, "LLDR", "Assets\\Textures\\btn-ability-terran-snipe-color.dds");
    gf_SetupItems(38, "StrafeDesignator", "Assets\\Custom Icons\\A10Select.dds");
    gf_SetupItems(39, "Flashlight", "Assets\\Textures\\btn-ability-terran-decloak.dds");
    gf_SetupItems(40, "Binoculars", "Assets\\Buttons\\Btn_Custom_UAC_Binoculars.dds");
    gf_SetupItems(41, "ExplosiveCharge", "Assets\\Textures\\btn-ability-terran-d8charge.dds");
    gf_SetupItems(42, "C4Charge", "Assets\\Textures\\btn-ability-terran-activatemine.dds");
    gf_SetupItems(43, "PlasmaMine", "Assets\\Textures\\btn-upgrade-terran-mobiusreactor.dds");
    gf_SetupItems(44, "MK44SentryGun", "Assets\\Textures\\btn-building-terran-autoturret.dds");
    gf_SetupItems(45, "MK79SentryGun", "Assets\\Textures\\btn-building-terran-autoturret.dds");
    gf_SetupItems(46, "APRounds", "Assets\\Textures\\btn-techupgrade-terran-impalerrounds.dds");
    gf_SetupItems(47, "DURounds", "Assets\\Textures\\btn-techupgrade-terran-u238rounds.dds");
    gf_SetupItems(48, "Claymore", "Buttons\\BTNClaymore.dds");
    gf_SetupItems(49, "LiftBoots", "Buttons/BTNLiftBoots.dds");
    gf_SetupItems(50, "MRLRocket", "Assets\\Textures\\btn-techupgrade-terran-attacksair.dds");
    gf_SetupItems(51, "GasCompressor", "Assets\\Textures\\btn-ability-terran-emergencythrusters.dds");
    gf_SetupItems(52, "ProjectileAccelerator", "Assets\\Textures\\btn-ability-terran-fireonthemove.dds");
    gf_SetupItems(53, "KineticIntegrator", "Buttons\\BTNEnergyGenerator.dds");
    gf_SetupItems(54, "MuscleRelaxant", "Buttons\\BTNMuscle Relaxant.dds");
    gf_SetupItems(55, "PlasmaInducer", "Assets\\Textures\\btn-ability-protoss-energize.dds");
    gf_SetupItems(56, "FragGrenade", "Assets\\Buttons\\Btn_Custom_UAC_FragGrenade.dds");
    gf_SetupItems(57, "AmmoCase", "Assets\\Buttons\\Btn_Custom_UAC_AmmoCase.dds");
    gf_SetupItems(58, "Magazines", "Assets\\Buttons\\Btn_Custom_UAC_Magazine.dds");
    gf_SetupItems(59, "AS50Bipod", "Assets\\Custom Icons\\BTN_Sniper.dds");
    gf_SetupItems(60, "M1014", "Assets\\Custom Icons\\BTN-SuperShotty.dds");
    gf_SetupItems(61, "SecurityArmor", "Assets\\Custom Icons\\BTN-SecArmorRA.dds");
    gf_SetupItems(62, "BioSuit", "Assets\\Buttons\\Btn_Custom_UAC_STF.dds");
    gf_SetupItems(63, "KEC", "Assets\\Textures\\btn-research-terran-ultracapacitors.dds");
    gf_SetupItems(64, "FuelContainer", "Assets\\Textures\\bulletshell1.dds");
    gf_SetupItems(65, "ResearchData", "Assets\\Textures\\btn-tips-computerterminals.dds");
    gf_SetupItems(66, "Casualty", "Assets\\Textures\\btn-unit-terran-marine.dds");
    gf_SetupItems(67, "Vaccine", "Assets\\Textures\\btn-techupgrade-terran-stimpack.dds");
    gf_SetupItems(68, "Tranquilizer", "Assets\\Textures\\btn-upgrade-terran-reapercombatdrugs.dds");
    gf_SetupItems(69, "EnergyBattery", "Assets\\Textures\\btn-ability-protoss-protoncharge-color.dds");
}

void gf_SetupItems (int lp_index, string lp_gameLink, string lp_itemimagepath) {
    // Automatic Variable Declarations
    // Implementation
    gv_itemName[lp_index] = lp_gameLink;
    gv_itemImages[lp_index] = lp_itemimagepath;
}

trigger auto_gf_ItemInventoryCount_Trigger = null;
int auto_gf_ItemInventoryCount_lp_item;
int auto_gf_ItemInventoryCount_lp_enterLeave;
int auto_gf_ItemInventoryCount_lp_owner;

void gf_ItemInventoryCount (int lp_item, int lp_enterLeave, int lp_owner) {
    auto_gf_ItemInventoryCount_lp_item = lp_item;
    auto_gf_ItemInventoryCount_lp_enterLeave = lp_enterLeave;
    auto_gf_ItemInventoryCount_lp_owner = lp_owner;

    if (auto_gf_ItemInventoryCount_Trigger == null) {
        auto_gf_ItemInventoryCount_Trigger = TriggerCreate("auto_gf_ItemInventoryCount_TriggerFunc");
    }

    TriggerExecute(auto_gf_ItemInventoryCount_Trigger, false, false);
}

bool auto_gf_ItemInventoryCount_TriggerFunc (bool testConds, bool runActions) {
    int lp_item = auto_gf_ItemInventoryCount_lp_item;
    int lp_enterLeave = auto_gf_ItemInventoryCount_lp_enterLeave;
    int lp_owner = auto_gf_ItemInventoryCount_lp_owner;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_enterLeave == 1)) {
        gv_itemInventoryCount[lp_item][lp_owner] += 1;
        if ((gv_itemInventoryCount[lp_item][lp_owner] >= 1)) {
            gv_itemInInventory[lp_item][lp_owner] = true;
        }

    }
    else {
        if ((lp_enterLeave == 2)) {
            gv_itemInventoryCount[lp_item][lp_owner] -= 1;
            if ((gv_itemInventoryCount[lp_item][lp_owner] <= 0)) {
                gv_itemInInventory[lp_item][lp_owner] = false;
            }

        }

    }
    return true;
}

void gf_CreateInventoryDialog () {
    // Automatic Variable Declarations
    const int autoE813836A_ae = 5;
    int autoE813836A_var;
    const int autoF9DEAA82_ae = 2;
    int autoF9DEAA82_var;

    // Implementation
    DialogCreate(600, 800, c_anchorRight, 80, 50, true);
    gv_inventory = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(gv_inventory, 600, 800, c_anchorBottom, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), true, 0.15);
    gv_playerInventory = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AllianceHeader_Terr", PlayerGroupAll());
    DialogCreate(500, 100, c_anchorBottom, 17, 215, true);
    gv_heroInventoryDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroInventoryDialog, 76, 76, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[0][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroInventoryDialog, 76, 76, c_anchorTopLeft, 78, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[0][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroInventoryDialog, 76, 76, c_anchorTopLeft, 156, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[0][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroInventoryDialog, 76, 76, c_anchorTopLeft, 234, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[0][3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroInventoryDialog, 76, 76, c_anchorTopLeft, 312, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[0][4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroInventoryDialog, 76, 76, c_anchorTopLeft, 390, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[0][5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroInventoryDialog, 76, 76, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[1][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroInventoryDialog, 76, 76, c_anchorTopLeft, 78, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[1][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroInventoryDialog, 76, 76, c_anchorTopLeft, 156, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[1][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroInventoryDialog, 76, 76, c_anchorTopLeft, 234, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[1][3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroInventoryDialog, 76, 76, c_anchorTopLeft, 312, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[1][4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_heroInventoryDialog, 76, 76, c_anchorTopLeft, 390, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[1][5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_heroInventoryDialog, 40, 23, c_anchorTopLeft, 40, 50, StringExternal("Param/Value/0F6AB367"), Color(0.00, 100.00, 50.20), false, 0.0);
    gv_inventorySlots[2][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_heroInventoryDialog, 40, 23, c_anchorTopLeft, 120, 50, StringExternal("Param/Value/736C0889"), Color(0.00, 100.00, 50.20), false, 0.0);
    gv_inventorySlots[2][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_heroInventoryDialog, 40, 23, c_anchorTopLeft, 198, 50, StringExternal("Param/Value/527343E7"), Color(0.00, 100.00, 50.20), false, 0.0);
    gv_inventorySlots[2][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_heroInventoryDialog, 40, 23, c_anchorTopLeft, 276, 50, StringExternal("Param/Value/F209449E"), Color(0.00, 100.00, 50.20), false, 0.0);
    gv_inventorySlots[2][3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_heroInventoryDialog, 40, 23, c_anchorTopLeft, 353, 50, StringExternal("Param/Value/B12E0CC7"), Color(0.00, 100.00, 50.20), false, 0.0);
    gv_inventorySlots[2][4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_heroInventoryDialog, 40, 23, c_anchorTopLeft, 433, 50, StringExternal("Param/Value/A253BD0C"), Color(0.00, 100.00, 50.20), false, 0.0);
    gv_inventorySlots[2][5] = DialogControlLastCreated();
    autoE813836A_var = 0;
    for ( ; autoE813836A_var <= autoE813836A_ae; autoE813836A_var += 1 ) {
        libNtve_gf_SetDialogItemRenderType(gv_inventorySlots[2][autoE813836A_var], c_triggerRenderTypeLDR, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(gv_inventorySlots[2][autoE813836A_var], 640, PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(gv_inventorySlots[2][autoE813836A_var], "ModCenterSize16Bold", PlayerGroupAll());
        DialogControlSetVisible(gv_inventorySlots[0][autoE813836A_var], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_inventorySlots[1][autoE813836A_var], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_inventorySlots[2][autoE813836A_var], PlayerGroupAll(), true);
    }
    DialogSetImageVisible(gv_heroInventoryDialog, false);
    DialogSetVisible(gv_heroInventoryDialog, PlayerGroupAll(), false);
    DialogCreate(500, 100, c_anchorBottom, 124, 215, true);
    gv_nPCInventoryDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_nPCInventoryDialog, 76, 76, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[3][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_nPCInventoryDialog, 76, 76, c_anchorTopLeft, 78, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[3][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_nPCInventoryDialog, 76, 76, c_anchorTopLeft, 156, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[3][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_nPCInventoryDialog, 76, 76, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[4][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_nPCInventoryDialog, 76, 76, c_anchorTopLeft, 78, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[4][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_nPCInventoryDialog, 76, 76, c_anchorTopLeft, 156, 0, StringToText(""), "Assets\\Textures\\btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_inventorySlots[4][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_nPCInventoryDialog, 40, 23, c_anchorTopLeft, 40, 50, StringExternal("Param/Value/6B230934"), Color(0.00, 100.00, 50.20), false, 0.0);
    gv_inventorySlots[5][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_nPCInventoryDialog, 40, 23, c_anchorTopLeft, 120, 50, StringExternal("Param/Value/A9F9AD50"), Color(0.00, 100.00, 50.20), false, 0.0);
    gv_inventorySlots[5][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_nPCInventoryDialog, 40, 23, c_anchorTopLeft, 198, 50, StringExternal("Param/Value/0322E7B1"), Color(0.00, 100.00, 50.20), false, 0.0);
    gv_inventorySlots[5][2] = DialogControlLastCreated();
    autoF9DEAA82_var = 0;
    for ( ; autoF9DEAA82_var <= autoF9DEAA82_ae; autoF9DEAA82_var += 1 ) {
        libNtve_gf_SetDialogItemRenderType(gv_inventorySlots[5][autoF9DEAA82_var], c_triggerRenderTypeLDR, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(gv_inventorySlots[5][autoF9DEAA82_var], 640, PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(gv_inventorySlots[5][autoF9DEAA82_var], "ModCenterSize16Bold", PlayerGroupAll());
        DialogControlSetVisible(gv_inventorySlots[3][autoF9DEAA82_var], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_inventorySlots[4][autoF9DEAA82_var], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_inventorySlots[5][autoF9DEAA82_var], PlayerGroupAll(), true);
    }
    DialogSetImageVisible(gv_nPCInventoryDialog, false);
    DialogSetVisible(gv_nPCInventoryDialog, PlayerGroupAll(), false);
}

void gf_UpdateInventoryDialog (int lp_player, int lp_targetPlayer, int lp_unitType) {
    // Variable Declarations
    string lv_itemButtonPath;
    string lv_chargeLink;
    string lv_itemLink;
    fixed lv_maxCharges;
    fixed lv_chargesLeft;

    // Automatic Variable Declarations
    const int auto6B08C4A3_ae = 5;
    int auto6B08C4A3_var;
    const int auto90BB22D1_ae = 2;
    int auto90BB22D1_var;

    // Variable Initialization
    lv_itemButtonPath = "";
    lv_chargeLink = "";
    lv_itemLink = "";

    // Implementation
    if ((lp_player != lp_targetPlayer)) {
        if ((lp_unitType == 3)) {
            auto6B08C4A3_var = 0;
            for ( ; auto6B08C4A3_var <= auto6B08C4A3_ae; auto6B08C4A3_var += 1 ) {
                if ((UnitInventoryItem(gv_selected[lp_player], (auto6B08C4A3_var + 1)) == null)) {
                    libNtve_gf_SetDialogItemImage(gv_inventorySlots[1][auto6B08C4A3_var], "Assets\\Textures\\btn-border-ability.dds", PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemTooltip(gv_inventorySlots[1][auto6B08C4A3_var], StringToText(""), PlayerGroupSingle(lp_player));
                    DialogControlSetVisible(gv_inventorySlots[1][auto6B08C4A3_var], PlayerGroupSingle(lp_player), false);
                    DialogControlSetVisible(gv_inventorySlots[2][auto6B08C4A3_var], PlayerGroupSingle(lp_player), false);
                }
                else {
                    lv_itemButtonPath = CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(UnitInventoryItem(gv_selected[lp_player], (auto6B08C4A3_var + 1))), "EquipmentArray[" + IntToString(0) + "].Icon", c_playerAny);
                    libNtve_gf_SetDialogItemImage(gv_inventorySlots[1][auto6B08C4A3_var], (lv_itemButtonPath), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemTooltip(gv_inventorySlots[1][auto6B08C4A3_var], UnitTypeGetName(UnitGetType(UnitInventoryItem(gv_selected[lp_player], (auto6B08C4A3_var + 1)))), PlayerGroupSingle(lp_player));
                    DialogControlSetVisible(gv_inventorySlots[1][auto6B08C4A3_var], PlayerGroupSingle(lp_player), true);
                    if ((gf_ItemList(UnitInventoryItem(gv_selected[lp_player], (auto6B08C4A3_var + 1))) == true)) {
                        libNtve_gf_SetDialogItemText(gv_inventorySlots[2][auto6B08C4A3_var], FixedToText(gf_GetItemCharge(UnitInventoryItem(gv_selected[lp_player], (auto6B08C4A3_var + 1))), 0), PlayerGroupSingle(lp_player));
                        DialogControlSetVisible(gv_inventorySlots[2][auto6B08C4A3_var], PlayerGroupSingle(lp_player), true);
                    }
                    else {
                        DialogControlSetVisible(gv_inventorySlots[2][auto6B08C4A3_var], PlayerGroupSingle(lp_player), false);
                    }
                }
            }
            DialogSetVisible(gv_heroInventoryDialog, PlayerGroupSingle(lp_player), true);
        }
        else {
            if ((lp_unitType == 4)) {
                auto90BB22D1_var = 0;
                for ( ; auto90BB22D1_var <= auto90BB22D1_ae; auto90BB22D1_var += 1 ) {
                    if ((UnitInventoryItem(gv_selected[lp_player], (auto90BB22D1_var + 1)) == null)) {
                        libNtve_gf_SetDialogItemImage(gv_inventorySlots[4][auto90BB22D1_var], "Assets\\Textures\\btn-border-ability.dds", PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemTooltip(gv_inventorySlots[4][auto90BB22D1_var], StringToText(""), PlayerGroupSingle(lp_player));
                        DialogControlSetVisible(gv_inventorySlots[4][auto90BB22D1_var], PlayerGroupSingle(lp_player), false);
                        DialogControlSetVisible(gv_inventorySlots[5][auto90BB22D1_var], PlayerGroupSingle(lp_player), false);
                    }
                    else {
                        lv_itemButtonPath = CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(UnitInventoryItem(gv_selected[lp_player], (auto90BB22D1_var + 1))), "EquipmentArray[" + IntToString(0) + "].Icon", c_playerAny);
                        libNtve_gf_SetDialogItemImage(gv_inventorySlots[4][auto90BB22D1_var], (lv_itemButtonPath), PlayerGroupSingle(lp_player));
                        libNtve_gf_SetDialogItemTooltip(gv_inventorySlots[4][auto90BB22D1_var], UnitTypeGetName(UnitGetType(UnitInventoryItem(gv_selected[lp_player], (auto90BB22D1_var + 1)))), PlayerGroupSingle(lp_player));
                        DialogControlSetVisible(gv_inventorySlots[4][auto90BB22D1_var], PlayerGroupSingle(lp_player), true);
                        if ((gf_ItemList(UnitInventoryItem(gv_selected[lp_player], (auto90BB22D1_var + 1))) == true)) {
                            libNtve_gf_SetDialogItemText(gv_inventorySlots[5][auto90BB22D1_var], FixedToText(gf_GetItemCharge(UnitInventoryItem(gv_selected[lp_player], (auto90BB22D1_var + 1))), 0), PlayerGroupSingle(lp_player));
                            DialogControlSetVisible(gv_inventorySlots[5][auto90BB22D1_var], PlayerGroupSingle(lp_player), true);
                        }
                        else {
                            DialogControlSetVisible(gv_inventorySlots[5][auto90BB22D1_var], PlayerGroupSingle(lp_player), false);
                        }
                    }
                }
                DialogSetVisible(gv_nPCInventoryDialog, PlayerGroupSingle(lp_player), true);
            }
        }
    }
}

void gf_CreateVisorTextDialog () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int autoFCC4F445_ae = 12;
    const int autoFCC4F445_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (autoFCC4F445_ai >= 0 && lv_player <= autoFCC4F445_ae) || (autoFCC4F445_ai < 0 && lv_player >= autoFCC4F445_ae) ) ; lv_player += autoFCC4F445_ai ) {
        DialogCreate(600, 800, c_anchorRight, 300, -225, true);
        gv_visorTextDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lv_player), true);
        libNtve_gf_CreateDialogItemLabel(gv_visorTextDialog, 600, 600, c_anchorBottom, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), true, 0.15);
        gv_visorText[lv_player] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
}

void gf_DisplayVisorTextDialog (text lp_text, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("UI_TipSelect", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
    libNtve_gf_SetDialogItemText(gv_visorText[lp_player], lp_text, PlayerGroupSingle(lp_player));
    DialogControlFadeTransparency(gv_visorText[lp_player], PlayerGroupSingle(lp_player), 0.0, 0.0);
    TimerStart(gv_visorTextTimer[lp_player], 8.0, false, c_timeGame);
}

trigger auto_gf_FadeVisorTextDialog_Trigger = null;
int auto_gf_FadeVisorTextDialog_lp_player;

void gf_FadeVisorTextDialog (int lp_player) {
    auto_gf_FadeVisorTextDialog_lp_player = lp_player;

    if (auto_gf_FadeVisorTextDialog_Trigger == null) {
        auto_gf_FadeVisorTextDialog_Trigger = TriggerCreate("auto_gf_FadeVisorTextDialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_FadeVisorTextDialog_Trigger, false, false);
}

bool auto_gf_FadeVisorTextDialog_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_FadeVisorTextDialog_lp_player;

    // Automatic Variable Declarations
    // Implementation
    DialogControlFadeTransparency(gv_visorText[lp_player], PlayerGroupSingle(lp_player), 0.0625, 100.0);
    return true;
}

void gf_CreateCheckBox (int lp_mod, int lp_offsetX, int lp_offsetY) {
    // Automatic Variable Declarations
    int auto0D3805F7_val;

    // Implementation
    auto0D3805F7_val = lp_mod;
    if (auto0D3805F7_val == 1) {
        libNtve_gf_CreateDialogItemCheckBox(gv_rankdialog, 60, 30, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), false);
        gv_dialogmodifier[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_dialogmodifier[lp_mod], StringExternal("Param/Value/E4CC044B"), PlayerGroupAll());
    }
    else if (auto0D3805F7_val == 2) {
        libNtve_gf_CreateDialogItemCheckBox(gv_rankdialog, 60, 30, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), false);
        gv_dialogmodifier[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_dialogmodifier[lp_mod], StringExternal("Param/Value/DB8CF2D4"), PlayerGroupAll());
    }
    else if (auto0D3805F7_val == 3) {
        libNtve_gf_CreateDialogItemCheckBox(gv_rankdialog, 60, 30, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), false);
        gv_dialogmodifier[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_dialogmodifier[lp_mod], StringExternal("Param/Value/76D97D94"), PlayerGroupAll());
    }
    else if (auto0D3805F7_val == 4) {
        libNtve_gf_CreateDialogItemCheckBox(gv_rankdialog, 60, 30, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), false);
        gv_dialogmodifier[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_dialogmodifier[lp_mod], StringExternal("Param/Value/2FDF078C"), PlayerGroupAll());
    }
    else if (auto0D3805F7_val == 5) {
        libNtve_gf_CreateDialogItemCheckBox(gv_rankdialog, 60, 30, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), false);
        gv_dialogmodifier[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_dialogmodifier[lp_mod], StringExternal("Param/Value/AFC75B0D"), PlayerGroupAll());
        if ((PlayerGroupCount(gv_players) < 3)) {
            DialogControlSetEnabled(gv_dialogmodifier[lp_mod], PlayerGroupAll(), false);
        }
    }
    else if (auto0D3805F7_val == 6) {
        libNtve_gf_CreateDialogItemCheckBox(gv_rankdialog, 60, 30, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), false);
        gv_dialogmodifier[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_dialogmodifier[lp_mod], StringExternal("Param/Value/AC92CD6D"), PlayerGroupAll());
        if ((PlayerGroupCount(gv_players) < 7)) {
            DialogControlSetEnabled(gv_dialogmodifier[lp_mod], PlayerGroupAll(), false);
        }
    }
    else if (auto0D3805F7_val == 7) {
        libNtve_gf_CreateDialogItemCheckBox(gv_rankdialog, 60, 30, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), false);
        gv_dialogmodifier[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_dialogmodifier[lp_mod], StringExternal("Param/Value/12D25521"), PlayerGroupAll());
    }
    else if (auto0D3805F7_val == 8) {
        libNtve_gf_CreateDialogItemCheckBox(gv_rankdialog, 60, 30, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), false);
        gv_dialogmodifier[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_dialogmodifier[lp_mod], StringExternal("Param/Value/D5AA0B2C"), PlayerGroupAll());
    }
    else if (auto0D3805F7_val == 9) {
        libNtve_gf_CreateDialogItemCheckBox(gv_rankdialog, 60, 30, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), false);
        gv_dialogmodifier[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_dialogmodifier[lp_mod], StringExternal("Param/Value/4542C31C"), PlayerGroupAll());
    }
    else if (auto0D3805F7_val == 10) {
        libNtve_gf_CreateDialogItemCheckBox(gv_rankdialog, 60, 30, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), false);
        gv_dialogmodifier[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_dialogmodifier[lp_mod], StringExternal("Param/Value/1C27A4BF"), PlayerGroupAll());
    }
    else if (auto0D3805F7_val == 11) {
        libNtve_gf_CreateDialogItemCheckBox(gv_rankdialog, 60, 30, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), false);
        gv_dialogmodifier[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_dialogmodifier[lp_mod], StringExternal("Param/Value/AE67E09A"), PlayerGroupAll());
        DialogControlSetEnabled(gv_dialogmodifier[lp_mod], PlayerGroupAll(), false);
    }
    else if (auto0D3805F7_val == 12) {
        libNtve_gf_CreateDialogItemCheckBox(gv_rankdialog, 60, 30, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), false);
        gv_dialogmodifier[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_dialogmodifier[lp_mod], StringExternal("Param/Value/CDC5A489"), PlayerGroupAll());
    }
    else {
    }
}

void gf_CreateModLabel (int lp_mod, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY) {
    // Automatic Variable Declarations
    int auto8DDC385B_val;

    // Implementation
    auto8DDC385B_val = lp_mod;
    if (auto8DDC385B_val == 1) {
        libNtve_gf_CreateDialogItemLabel(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringExternal("Param/Value/236D3AD1"), Color(22*100/255,128*100/255,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
    else if (auto8DDC385B_val == 2) {
        libNtve_gf_CreateDialogItemLabel(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringExternal("Param/Value/9CEB941C"), Color(0,66*100/255,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
    else if (auto8DDC385B_val == 3) {
        libNtve_gf_CreateDialogItemLabel(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringExternal("Param/Value/2F50FC11"), Color(100.00, 0.00, 0.00), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
    else if (auto8DDC385B_val == 4) {
        libNtve_gf_CreateDialogItemLabel(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringExternal("Param/Value/0339105B"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
    else if (auto8DDC385B_val == 5) {
        libNtve_gf_CreateDialogItemLabel(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringExternal("Param/Value/A0FFB3FD"), Color(254*100/255,138*100/255,14*100/255), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
    else if (auto8DDC385B_val == 6) {
        libNtve_gf_CreateDialogItemLabel(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringExternal("Param/Value/802D26E0"), Color(78*100/255,42*100/255,4*100/255), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
    else if (auto8DDC385B_val == 7) {
        libNtve_gf_CreateDialogItemLabel(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringExternal("Param/Value/A14EEA0A"), Color(229*100/255,91*100/255,176*100/255), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
    else if (auto8DDC385B_val == 8) {
        libNtve_gf_CreateDialogItemLabel(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringExternal("Param/Value/250D505C"), Color(84*100/255,0,129*100/255), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
    else if (auto8DDC385B_val == 9) {
        libNtve_gf_CreateDialogItemLabel(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringExternal("Param/Value/C8597E00"), Color(20*100/255,134*100/255,107*100/255), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
    else if (auto8DDC385B_val == 10) {
        libNtve_gf_CreateDialogItemLabel(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringExternal("Param/Value/56061BB3"), Color(229*100/255,91*100/255,176*100/255), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
    else if (auto8DDC385B_val == 11) {
        libNtve_gf_CreateDialogItemLabel(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringExternal("Param/Value/A459843A"), Color(20*100/255,134*100/255,107*100/255), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
    else if (auto8DDC385B_val == 12) {
        libNtve_gf_CreateDialogItemLabel(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringExternal("Param/Value/07338F71"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
    else {
    }
}

void gf_CreateDividerLine (int lp_width, int lp_height, int lp_offsetX, int lp_offsetY) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemImage(gv_rankdialog, 55, 2, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_line01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
}

void gf_CreateImageFrame (int lp_mod, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, int lp_relativeOffsetX, int lp_relativeOffsetY) {
    // Automatic Variable Declarations
    int autoCE89B66A_val;

    // Implementation
    autoCE89B66A_val = lp_mod;
    if (autoCE89B66A_val == 1) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_modifierFrameHighlighted[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_modifierFrameHighlighted[lp_mod], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Custom Icons\\Mod_T3.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    }
    else if (autoCE89B66A_val == 2) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_modifierFrameHighlighted[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_modifierFrameHighlighted[lp_mod], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Custom Icons\\Mod_T2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    }
    else if (autoCE89B66A_val == 3) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_modifierFrameHighlighted[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_modifierFrameHighlighted[lp_mod], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Custom Icons\\Mod_T1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    }
    else if (autoCE89B66A_val == 4) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_modifierFrameHighlighted[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_modifierFrameHighlighted[lp_mod], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Buttons\\Weapons\\MANTEL-75.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    }
    else if (autoCE89B66A_val == 5) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_modifierFrameHighlighted[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_modifierFrameHighlighted[lp_mod], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Custom Icons\\Soldier_Skull.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    }
    else if (autoCE89B66A_val == 6) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_modifierFrameHighlighted[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_modifierFrameHighlighted[lp_mod], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Buttons\\Btn_Custom_UAC_AmmoCase.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    }
    else if (autoCE89B66A_val == 7) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_modifierFrameHighlighted[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_modifierFrameHighlighted[lp_mod], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Custom Icons\\btn-extra-chefbanana.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    }
    else if (autoCE89B66A_val == 8) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_modifierFrameHighlighted[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_modifierFrameHighlighted[lp_mod], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Textures\\btn-upgrade-artanis-healingpsionicstorm.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    }
    else if (autoCE89B66A_val == 9) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_modifierFrameHighlighted[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_modifierFrameHighlighted[lp_mod], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Textures\\Decals\\T1Hunters.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    }
    else if (autoCE89B66A_val == 10) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_modifierFrameHighlighted[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_modifierFrameHighlighted[lp_mod], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Images\\Difficulties\\Mod_Genesis.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    }
    else if (autoCE89B66A_val == 11) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_modifierFrameHighlighted[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_modifierFrameHighlighted[lp_mod], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Assets\\Buttons\\Btn_Custom_UAC_Stand.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    }
    else if (autoCE89B66A_val == 12) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_modifierFrameHighlighted[lp_mod] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_modifierFrameHighlighted[lp_mod], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 60, 60, c_anchorTop, 0, 0, StringToText(""), "Textures\\btn-other-Dice.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
    }
    else {
    }
}

void gf_CreateRankFrame (int lp_image, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, int lp_relativeOffsetX, int lp_relativeOffsetY) {
    // Automatic Variable Declarations
    int auto92356B69_val;

    // Implementation
    auto92356B69_val = lp_image;
    if (auto92356B69_val == 1) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_rankHighlighted[lp_image] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_rankHighlighted[lp_image], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 125, 111, c_anchorTop, 0, 0, StringToText(""), "Textures\\enlisted2.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
        libNtve_gf_CreateDialogItemButton(gv_rankdialog, 73, 75, c_anchorTop, -225, 123, (gf_TextImage("Buttons\\BTNSoldier.dds", 20) + StringExternal("Param/Value/C1BA228A") + gf_TextImage("Assets\\Textures\\medicportrait_static.dds", 20) + StringExternal("Param/Value/EDF2F93F") + gf_TextImage("Buttons\\BTNAutoRifle.dds", 20) + StringExternal("Param/Value/455C6C9D") + gf_TextImage("firebat.dds", 20) + StringExternal("Param/Value/6D72BA64") + gf_TextImage("Buttons\\Portraits\\BTNSFAAT.dds", 20) + StringExternal("Param/Value/B321796B") + gf_TextImage("Buttons\\Portraits\\BTNCavalryScout.dds", 20) + StringExternal("Param/Value/F813E67A") + gf_TextImage("Buttons\\Portraits\\BTNMarksman.dds", 20) + StringExternal("Param/Value/89E8A4C6") + gf_TextImage("Assets\\Textures\\hillportrait_static.dds", 20) + StringExternal("Param/Value/4E45B426") + gf_TextImage("Assets\\Textures\\kachinskyportrait_static.dds", 20) + StringExternal("Param/Value/1D5ACF96") + gf_TextImage("Assets\\Textures\\marinemercenaryportrait_static.dds", 20) + StringExternal("Param/Value/5228F1FD") + gf_TextImage("Assets\\Textures\\herculesportrait_static.dds", 20) + StringExternal("Param/Value/E9DF7FA7") + gf_TextImage("Buttons\\BTNMedic.dds", 20) + StringExternal("Param/Value/469C5A2D") + gf_TextImage("Assets\\Textures\\hornerportrait_static.dds", 20) + StringExternal("Param/Value/AFA0AE30") + gf_TextImage("Assets\\Textures\\vikingmercenaryfighterportrait_static.dds", 20) + StringExternal("Param/Value/7AD90736")), StringToText(""), "");
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 412, PlayerGroupAll());
        gv_rankitem[lp_image] = DialogControlLastCreated();
        gf_CreateDialogItemAny(c_triggerControlTypeLabel, gv_rankdialog, "", 125, 75, c_anchorTop, -225, 180, null, StringExternal("Param/Value/B7429F2D"), "ModCenterSize12Bold", "", "", PlayerGroupAll());
        gv_rankLabel[lp_image] = DialogControlLastCreated();
    }
    else if (auto92356B69_val == 2) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_rankHighlighted[lp_image] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_rankHighlighted[lp_image], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 125, 111, c_anchorTop, 0, 0, StringToText(""), "Textures\\warrant officer2.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
        libNtve_gf_CreateDialogItemButton(gv_rankdialog, 76, 75, c_anchorTop, 0, 121, (gf_TextImage("Buttons\\BTNSoldier.dds", 20) + StringExternal("Param/Value/FB28F1C6") + gf_TextImage("Assets\\Textures\\medicportrait_static.dds", 20) + StringExternal("Param/Value/E4CCC36E") + gf_TextImage("Buttons\\BTNAutoRifle.dds", 20) + StringExternal("Param/Value/9E8932DD") + gf_TextImage("firebat.dds", 20) + StringExternal("Param/Value/08380A9B") + gf_TextImage("Buttons\\Portraits\\BTNSFAAT.dds", 20) + StringExternal("Param/Value/C5ADBD60") + gf_TextImage("Buttons\\Portraits\\BTNCavalryScout.dds", 20) + StringExternal("Param/Value/281E8ED3") + gf_TextImage("Assets\\Textures\\hillportrait_static.dds", 20) + StringExternal("Param/Value/A91A67D2") + gf_TextImage("Assets\\Textures\\kachinskyportrait_static.dds", 20) + StringExternal("Param/Value/C3CFCBBE") + gf_TextImage("Assets\\Textures\\marinemercenaryportrait_static.dds", 20) + StringExternal("Param/Value/DABFD211") + gf_TextImage("Assets\\Textures\\ghostportrait_static.dds", 20) + StringExternal("Param/Value/82BB97F5") + gf_TextImage("Assets\\Custom Icons\\CommandoSelect.dds", 20) + StringExternal("Param/Value/EB434938") + gf_TextImage("Assets\\Textures\\hornerportrait_static.dds", 20) + StringExternal("Param/Value/55D296DC") + gf_TextImage("Assets\\Textures\\vikingmercenaryfighterportrait_static.dds", 20) + StringExternal("Param/Value/D2FDD572")), StringToText(""), "");
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 412, PlayerGroupAll());
        gv_rankitem[lp_image] = DialogControlLastCreated();
        gf_CreateDialogItemAny(c_triggerControlTypeLabel, gv_rankdialog, "", 125, 75, c_anchorTop, 0, 180, null, StringExternal("Param/Value/873949A8"), "ModCenterSize12Bold", "", "", PlayerGroupAll());
        gv_rankLabel[lp_image] = DialogControlLastCreated();
    }
    else if (auto92356B69_val == 3) {
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, lp_width, lp_height, c_anchorTop, lp_offsetX, lp_offsetY, StringToText(""), "Assets\\Textures\\ui_aiurchef_frame_ingredient_highlighted.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_rankHighlighted[lp_image] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlSetVisible(gv_rankHighlighted[lp_image], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_rankdialog, 125, 111, c_anchorTop, 0, 0, StringToText(""), "Textures\\Commissioned Officer2.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lp_relativeOffsetX, lp_relativeOffsetY);
        libNtve_gf_CreateDialogItemButton(gv_rankdialog, 75, 75, c_anchorTop, 225, 122, (gf_TextImage("Buttons\\BTNSoldier.dds", 20) + StringExternal("Param/Value/9117DDA2") + gf_TextImage("Assets\\Textures\\medicportrait_static.dds", 20) + StringExternal("Param/Value/9B86FD98") + gf_TextImage("Buttons\\BTNAutoRifle.dds", 20) + StringExternal("Param/Value/6FCEA366") + gf_TextImage("firebat.dds", 20) + StringExternal("Param/Value/BE36910B") + gf_TextImage("Buttons\\Portraits\\BTNSFAAT.dds", 20) + StringExternal("Param/Value/E9DD48A8") + gf_TextImage("Buttons\\Portraits\\BTNCavalryScout.dds", 20) + StringExternal("Param/Value/B6EA56C4") + gf_TextImage("Assets\\Textures\\hillportrait_static.dds", 20) + StringExternal("Param/Value/70BF2821") + gf_TextImage("Assets\\Textures\\ui-heroicon-tosh.dds", 20) + StringExternal("Param/Value/EDF4F787") + gf_TextImage("Assets\\Textures\\kachinskyportrait_static.dds", 20) + StringExternal("Param/Value/564A98B4") + gf_TextImage("Assets\\Textures\\marinemercenaryportrait_static.dds", 20) + StringExternal("Param/Value/08551BA4") + gf_TextImage("Assets\\Textures\\herculesportrait_static.dds", 20) + StringExternal("Param/Value/44A285C0") + gf_TextImage("Assets\\Custom Icons\\CommandoSelect.dds", 20) + StringExternal("Param/Value/5F94C213") + gf_TextImage("Assets\\Textures\\spectreportrait_static.dds", 20) + StringExternal("Param/Value/6204DDAD") + gf_TextImage("Assets\\Textures\\vikingmercenaryfighterportrait_static.dds", 20) + StringExternal("Param/Value/5EDB730F")), StringToText(""), "");
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 412, PlayerGroupAll());
        gv_rankitem[lp_image] = DialogControlLastCreated();
        gf_CreateDialogItemAny(c_triggerControlTypeLabel, gv_rankdialog, "", 125, 75, c_anchorTop, 225, 185, null, StringExternal("Param/Value/FFF9CC5B"), "ModCenterSize12Bold", "", "", PlayerGroupAll());
        gv_rankLabel[lp_image] = DialogControlLastCreated();
    }
    else {
    }
}

void gf_UICreateC2ABBehaviorsC2BB () {
    // Variable Declarations
    int lv__width;
    int lv__height;
    int lv__player;

    // Automatic Variable Declarations
    playergroup auto1B5F8F68_g;

    // Variable Initialization
    lv__width = 500;
    lv__height = 65;

    // Implementation
    auto1B5F8F68_g = gv_players;
    lv__player = -1;
    while (true) {
        lv__player = PlayerGroupNextPlayer(auto1B5F8F68_g, lv__player);
        if (lv__player < 0) { break; }
        DialogCreate(lv__width, lv__height, c_anchorBottom, ((lv__width / 2) - 487), -22, false);
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lv__player), true);
        gv_uIDialogs.lv_behaviorDialog[lv__player] = DialogLastCreated();
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 0, 0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_uIDialogs.lv_behaviorPin[lv__player] = DialogControlLastCreated();
    }
}

void gf_UIBehaviorProcess (unit lp_unit, int lp_index) {
    // Variable Declarations
    int lv__index;
    unit lv__unit;
    int lv__player;
    string lv__behavior;
    int lv__panel;
    int lv__icon;
    int lv__itemduration;
    string lv__behaviorname;
    fixed lv__maxtime;
    fixed lv__time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = lp_index;
    lv__unit = lp_unit;
    lv__player = UnitGetOwner(lv__unit);
    lv__panel = c_invalidDialogControlId;
    lv__icon = c_invalidDialogControlId;
    lv__itemduration = c_invalidDialogControlId;
    lv__behaviorname = "";

    // Implementation
    lv__behavior = gv_playerData[lv__player].lv_behaviors[lv__index].lv__behavior;
    lv__panel = gv_playerData[lv__player].lv_behaviors[lv__index].lv__panel;
    lv__icon = gv_playerData[lv__player].lv_behaviors[lv__index].lv__icon;
    lv__itemduration = gv_playerData[lv__player].lv_behaviors[lv__index].lv__duration;
    lv__behaviorname = ("<c val=\"FF0000\">" + (lv__behavior) + "</c>");
    lv__maxtime = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv__behavior, "Duration", c_playerAny));
    if ((lv__maxtime > 0.0)) {
        while ((UnitIsValid(lv__unit) == true) && (UnitHasBehavior2(lv__unit, lv__behavior) == true)) {
            lv__time = UnitBehaviorDuration(lv__unit, lv__behavior);
            TextExpressionSetToken("Param/Expression/8D63E0DF", "A", StringToText(lv__behaviorname));
            TextExpressionSetToken("Param/Expression/8D63E0DF", "image", gf_TextImage("Assets/Textures/icon-time-terran.dds", 18));
            TextExpressionSetToken("Param/Expression/8D63E0DF", "time", FixedToText(lv__time, 1));
            libNtve_gf_SetDialogItemTooltip(lv__icon, TextExpressionAssemble("Param/Expression/8D63E0DF"), PlayerGroupAll());
            DialogControlSetSize(lv__itemduration, PlayerGroupAll(), (3 + FixedToInt((58 * ((lv__time * 1.0) / lv__maxtime)))), 58);
            Wait(0.125, c_timeGame);
        }
    }
    else {
        return ;
    }
}

void gf_UIBehaviorRemove (string lp_behavior, int lp_player) {
    // Variable Declarations
    int lv__index;
    int lv__player;
    string lv__behavior;
    int lv__panel;
    int lv__itemduration;
    fixed lv__maxtime;
    fixed lv__time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__index = -1;
    lv__player = lp_player;
    lv__panel = c_invalidDialogControlId;
    lv__itemduration = c_invalidDialogControlId;

    // Implementation
    lv__index = gf_UIBehaviorsFindCurrentIndexByBehavior(lp_behavior, lp_player);
    lv__behavior = gv_playerData[lv__player].lv_behaviors[lv__index].lv__behavior;
    lv__panel = gv_playerData[lv__player].lv_behaviors[lv__index].lv__panel;
    lv__itemduration = gv_playerData[lv__player].lv_behaviors[lv__index].lv__duration;
    if ((lv__index == 0)) {
        if ((gv_playerData[lv__player].lv_behaviors[(lv__index + 1)].lv__panel == c_invalidDialogControlId)) {
        }
        else {
            DialogControlSetPositionRelative(gv_playerData[lv__player].lv_behaviors[(lv__index + 1)].lv__panel, PlayerGroupSingle(lp_player), c_anchorTopLeft, gv_uIDialogs.lv_behaviorPin[lv__player], c_anchorTopRight, 0, 0);
        }
    }
    else {
        if ((gv_playerData[lv__player].lv_behaviors[(lv__index + 1)].lv__panel == c_invalidDialogControlId)) {
        }
        else {
            DialogControlSetPositionRelative(gv_playerData[lv__player].lv_behaviors[(lv__index + 1)].lv__panel, PlayerGroupSingle(lp_player), c_anchorTopLeft, gv_playerData[lv__player].lv_behaviors[(lv__index - 1)].lv__panel, c_anchorTopRight, 0, 0);
        }
    }
    DialogControlDestroy(gv_playerData[lv__player].lv_behaviors[lv__index].lv__border);
    DialogControlDestroy(gv_playerData[lv__player].lv_behaviors[lv__index].lv__duration);
    DialogControlDestroy(gv_playerData[lv__player].lv_behaviors[lv__index].lv__icon);
    DialogControlDestroy(gv_playerData[lv__player].lv_behaviors[lv__index].lv__panel);
    gv_playerData[lv__player].lv_behaviors[lv__index].lv__behavior = null;
    gv_playerData[lv__player].lv_behaviors[lv__index].lv__border = c_invalidDialogControlId;
    gv_playerData[lv__player].lv_behaviors[lv__index].lv__duration = c_invalidDialogControlId;
    gv_playerData[lv__player].lv_behaviors[lv__index].lv__icon = c_invalidDialogControlId;
    gv_playerData[lv__player].lv_behaviors[lv__index].lv__panel = c_invalidDialogControlId;
    if ((gv_playerData[lv__player].lv_behaviors[(lv__index + 1)].lv__panel != c_invalidDialogControlId)) {
        lv__index = (lv__index + 1);
        while ((gv_playerData[lv__player].lv_behaviors[lv__index].lv__panel != c_invalidDialogControlId)) {
            gv_playerData[lv__player].lv_behaviors[lv__index - 1].lv__behavior = gv_playerData[lv__player].lv_behaviors[lv__index].lv__behavior ;
            gv_playerData[lv__player].lv_behaviors[lv__index - 1].lv__border = gv_playerData[lv__player].lv_behaviors[lv__index].lv__border ;
            gv_playerData[lv__player].lv_behaviors[lv__index - 1].lv__duration = gv_playerData[lv__player].lv_behaviors[lv__index].lv__duration ;
            gv_playerData[lv__player].lv_behaviors[lv__index - 1].lv__icon = gv_playerData[lv__player].lv_behaviors[lv__index].lv__icon ;
            gv_playerData[lv__player].lv_behaviors[lv__index - 1].lv__panel = gv_playerData[lv__player].lv_behaviors[lv__index].lv__panel ;
            lv__index = (lv__index + 1);
        }
        gv_playerData[lv__player].lv_behaviors[lv__index - 1].lv__behavior = null ;
        gv_playerData[lv__player].lv_behaviors[lv__index - 1].lv__border = c_invalidDialogControlId ;
        gv_playerData[lv__player].lv_behaviors[lv__index - 1].lv__duration = c_invalidDialogControlId;
        gv_playerData[lv__player].lv_behaviors[lv__index - 1].lv__icon = c_invalidDialogControlId;
        gv_playerData[lv__player].lv_behaviors[lv__index - 1].lv__panel = c_invalidDialogControlId;
    }
}

int gf_UIBehaviorsFindCurrentIndex (int lp_item, int lp_player) {
    // Variable Declarations
    int lv__index;
    int lv__i;

    // Automatic Variable Declarations
    const int auto7E4E2EA9_ae = 12;
    const int auto7E4E2EA9_ai = 1;

    // Variable Initialization
    lv__index = -1;

    // Implementation
    lv__i = 0;
    for ( ; ( (auto7E4E2EA9_ai >= 0 && lv__i <= auto7E4E2EA9_ae) || (auto7E4E2EA9_ai < 0 && lv__i >= auto7E4E2EA9_ae) ) ; lv__i += auto7E4E2EA9_ai ) {
        if ((lp_item == gv_playerData[lp_player].lv_behaviors[lv__i].lv__panel)) {
            return lv__i;
        }
    }
    return lv__index;
}

int gf_UIBehaviorsFindLastIndex (int lp_player) {
    // Variable Declarations
    int lv__i;
    int lv__player;

    // Automatic Variable Declarations
    const int autoC9ED4408_ae = 12;
    const int autoC9ED4408_ai = 1;

    // Variable Initialization
    lv__player = lp_player;

    // Implementation
    lv__i = 0;
    for ( ; ( (autoC9ED4408_ai >= 0 && lv__i <= autoC9ED4408_ae) || (autoC9ED4408_ai < 0 && lv__i >= autoC9ED4408_ae) ) ; lv__i += autoC9ED4408_ai ) {
        if ((gv_playerData[lv__player].lv_behaviors[lv__i].lv__panel == c_invalidDialogControlId)) {
            return (lv__i - 1);
        }
    }
    return -1;
}

int gf_UIBehaviorsFindCurrentIndexByBehavior (string lp_behavior, int lp_player) {
    // Variable Declarations
    int lv__index;
    int lv__i;

    // Automatic Variable Declarations
    const int autoB64ED17E_ae = 12;
    const int autoB64ED17E_ai = 1;

    // Variable Initialization
    lv__index = -1;

    // Implementation
    lv__i = 0;
    for ( ; ( (autoB64ED17E_ai >= 0 && lv__i <= autoB64ED17E_ae) || (autoB64ED17E_ai < 0 && lv__i >= autoB64ED17E_ae) ) ; lv__i += autoB64ED17E_ai ) {
        if ((lp_behavior == gv_playerData[lp_player].lv_behaviors[lv__i].lv__behavior)) {
            return lv__i;
        }
    }
    return lv__index;
}

trigger auto_gf_DisplayTipPanel_Trigger = null;
int auto_gf_DisplayTipPanel_lp_player;

void gf_DisplayTipPanel (int lp_player) {
    auto_gf_DisplayTipPanel_lp_player = lp_player;

    if (auto_gf_DisplayTipPanel_Trigger == null) {
        auto_gf_DisplayTipPanel_Trigger = TriggerCreate("auto_gf_DisplayTipPanel_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisplayTipPanel_Trigger, false, false);
}

bool auto_gf_DisplayTipPanel_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_DisplayTipPanel_lp_player;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_tipPanel[0], PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(gv_tipPanel[1], PlayerGroupSingle(lp_player), true);
    Wait(8.0, c_timeGame);
    DialogControlSetVisible(gv_tipPanel[0], PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(gv_tipPanel[1], PlayerGroupSingle(lp_player), false);
    return true;
}

trigger auto_gf_DisplayOverheatBar_Trigger = null;
bool auto_gf_DisplayOverheatBar_lp_showHide;
int auto_gf_DisplayOverheatBar_lp_player;

void gf_DisplayOverheatBar (bool lp_showHide, int lp_player) {
    auto_gf_DisplayOverheatBar_lp_showHide = lp_showHide;
    auto_gf_DisplayOverheatBar_lp_player = lp_player;

    if (auto_gf_DisplayOverheatBar_Trigger == null) {
        auto_gf_DisplayOverheatBar_Trigger = TriggerCreate("auto_gf_DisplayOverheatBar_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisplayOverheatBar_Trigger, false, false);
}

bool auto_gf_DisplayOverheatBar_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showHide = auto_gf_DisplayOverheatBar_lp_showHide;
    int lp_player = auto_gf_DisplayOverheatBar_lp_player;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_overheatProgressBar, PlayerGroupSingle(lp_player), lp_showHide);
    DialogControlSetVisible(gv_overheatProgressBarBorder, PlayerGroupSingle(lp_player), lp_showHide);
    return true;
}

int gf_GetScoreboardRanks (int lp_player, int lp_rank) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    const int autoDAC26598_ae = 16;
    const int autoDAC26598_ai = 1;

    // Variable Initialization

    // Implementation
    lv_loopint = 1;
    for ( ; ( (autoDAC26598_ai >= 0 && lv_loopint <= autoDAC26598_ae) || (autoDAC26598_ai < 0 && lv_loopint >= autoDAC26598_ae) ) ; lv_loopint += autoDAC26598_ai ) {
        if ((((gv_playerExperience[lp_rank][lp_player] >= gv_rankXPMin[lp_rank][lv_loopint]) && (gv_playerExperience[lp_rank][lp_player] < gv_rankXPMin[lp_rank][(lv_loopint + 1)])) || ((gv_playerExperience[lp_rank][lp_player] >= gv_rankXPMin[lp_rank][lv_loopint]) && (lv_loopint == gv_rankMax[lp_rank])))) {
            return lv_loopint;
        }

    }
    return 1;
}

string gf_GetHDRankImage (int lp_player, int lp_rank) {
    // Variable Declarations
    int lv_rank1;

    // Automatic Variable Declarations
    int auto6CDBACDD_val;

    // Variable Initialization
    lv_rank1 = (gf_GetScoreboardRanks(lp_player, lp_rank) + 1);

    // Implementation
    auto6CDBACDD_val = lp_rank;
    if (auto6CDBACDD_val == 1) {
        if ((lv_rank1 == 2)) {
            return "Assets\\Textures\\HDRanks\\PVT.dds";
        }
        else if ((lv_rank1 == 3)) {
            return "Assets\\Textures\\HDRanks\\PFC.dds";
        }
        else if ((lv_rank1 == 4)) {
            return "Assets\\Textures\\HDRanks\\SPC.dds";
        }
        else if ((lv_rank1 == 5)) {
            return "Assets\\Textures\\HDRanks\\CPL.dds";
        }
        else if ((lv_rank1 == 6)) {
            return "Assets\\Textures\\HDRanks\\SGT.dds";
        }
        else if ((lv_rank1 == 7)) {
            return "Assets\\Textures\\HDRanks\\SSG.dds";
        }
        else if ((lv_rank1 == 8)) {
            return "Assets\\Textures\\HDRanks\\SFC.dds";
        }
        else if ((lv_rank1 == 9)) {
            return "Assets\\Textures\\HDRanks\\MSG.dds";
        }
        else if ((lv_rank1 == 10)) {
            return "Assets\\Textures\\HDRanks\\1SG.dds";
        }
        else if ((lv_rank1 == 11)) {
            return "Assets\\Textures\\HDRanks\\SGM.dds";
        }
        else if ((lv_rank1 == 12)) {
            return "Assets\\Textures\\HDRanks\\CSM.dds";
        }
        else if ((lv_rank1 == 13)) {
            return "Assets\\Textures\\HDRanks\\SMA.dds";
        }
        else if ((lv_rank1 == 14)) {
            return "Assets\\Textures\\HDRanks\\CMA1.dds";
        }
        else if ((lv_rank1 == 15)) {
            return "Assets\\Textures\\HDRanks\\CMA2.dds";
        }
        else if ((lv_rank1 == 16)) {
            return "Assets\\Textures\\HDRanks\\CMA3.dds";
        }
    }
    else if (auto6CDBACDD_val == 2) {
        if ((lv_rank1 == 2)) {
            return "Assets\\Textures\\HDRanks\\WO2.dds";
        }
        else if ((lv_rank1 == 3)) {
            return "Assets\\Textures\\HDRanks\\WO3.dds";
        }
        else if ((lv_rank1 == 4)) {
            return "Assets\\Textures\\HDRanks\\WO4.dds";
        }
        else if ((lv_rank1 == 5)) {
            return "Assets\\Textures\\HDRanks\\WO5.dds";
        }
        else if ((lv_rank1 == 6)) {
            return "Assets\\Textures\\HDRanks\\MW1.dds";
        }
        else if ((lv_rank1 == 7)) {
            return "Assets\\Textures\\HDRanks\\MW2.dds";
        }
        else if ((lv_rank1 == 8)) {
            return "Assets\\Textures\\HDRanks\\MW3.dds";
        }
        else if ((lv_rank1 == 9)) {
            return "Assets\\Textures\\HDRanks\\MW4.dds";
        }
        else if ((lv_rank1 == 10)) {
            return "Assets\\Textures\\HDRanks\\MW5.dds";
        }
    }
    else if (auto6CDBACDD_val == 3) {
        if ((lv_rank1 == 2)) {
            return "Assets\\Textures\\HDRanks\\1LT.dds";
        }
        else if ((lv_rank1 == 3)) {
            return "Assets\\Textures\\HDRanks\\CPT.dds";
        }
        else if ((lv_rank1 == 4)) {
            return "Assets\\Textures\\HDRanks\\MAJ.dds";
        }
        else if ((lv_rank1 == 5)) {
            return "Assets\\Textures\\HDRanks\\LTC.dds";
        }
        else if ((lv_rank1 == 6)) {
            return "Assets\\Textures\\HDRanks\\COL.dds";
        }
        else if ((lv_rank1 == 7)) {
            return "Assets\\Textures\\HDRanks\\BG.dds";
        }
        else if ((lv_rank1 == 8)) {
            return "Assets\\Textures\\HDRanks\\MG.dds";
        }
        else if ((lv_rank1 == 9)) {
            return "Assets\\Textures\\HDRanks\\LTG.dds";
        }
        else if ((lv_rank1 == 10)) {
            return "Assets\\Textures\\HDRanks\\GEN.dds";
        }
        else if ((lv_rank1 == 11)) {
            return "Assets\\Textures\\HDRanks\\GOA.dds";
        }
    }
    else {
    }
    return null;
}

int gf_ReturnPlayerIndexMaximumScoreType (int lp_sortType) {
    // Variable Declarations
    int lv_index;
    int lv_indexMax;
    int lv_score;
    int lv_scoreMax;
    int lv_highestValue;

    // Automatic Variable Declarations
    const int autoD31EED22_ae = 12;
    const int autoD31EED22_ai = 1;
    int auto2BF354CF_val;

    // Variable Initialization

    // Implementation
    lv_indexMax = 1;
    lv_index = 2;
    for ( ; ( (autoD31EED22_ai >= 0 && lv_index <= autoD31EED22_ae) || (autoD31EED22_ai < 0 && lv_index >= autoD31EED22_ae) ) ; lv_index += autoD31EED22_ai ) {
        auto2BF354CF_val = lp_sortType;
        if (auto2BF354CF_val == ge_ScoreType_Kills) {
            lv_score = gv_playerkills[lv_index];
            lv_scoreMax = gv_playerkills[lv_indexMax];
        }
        else if (auto2BF354CF_val == ge_ScoreType_MassiveKills) {
            lv_score = gv_playermassivekills[lv_index];
            lv_scoreMax = gv_playermassivekills[lv_indexMax];
        }
        else if (auto2BF354CF_val == ge_ScoreType_Revives) {
            lv_score = gv_playerRevivesGame[lv_index];
            lv_scoreMax = gv_playerRevivesGame[lv_indexMax];
        }
        else if (auto2BF354CF_val == ge_ScoreType_Heals) {
            lv_score = gv_playerheals[lv_index];
            lv_scoreMax = gv_playerheals[lv_indexMax];
        }
        else if (auto2BF354CF_val == ge_ScoreType_Hits) {
            lv_score = gv_playerhits[lv_index];
            lv_scoreMax = gv_playerhits[lv_indexMax];
        }
        else if (auto2BF354CF_val == ge_ScoreType_Deaths) {
            lv_score = gv_playerDeaths[lv_index];
            lv_scoreMax = gv_playerDeaths[lv_indexMax];
        }
        else {
        }
        if ((lv_score > lv_scoreMax)) {
            lv_indexMax = lv_index;
        }
    }
    return lv_indexMax;
}

int gf_ReturnPlayerIndexMinimumScoreType (int lp_sortType) {
    // Variable Declarations
    int lv_index;
    int lv_indexMax;
    int lv_score;
    int lv_scoreMax;

    // Automatic Variable Declarations
    const int autoAECF7C56_ae = 12;
    const int autoAECF7C56_ai = 1;
    int autoEB5C7265_val;

    // Variable Initialization

    // Implementation
    lv_indexMax = 1;
    lv_index = 2;
    for ( ; ( (autoAECF7C56_ai >= 0 && lv_index <= autoAECF7C56_ae) || (autoAECF7C56_ai < 0 && lv_index >= autoAECF7C56_ae) ) ; lv_index += autoAECF7C56_ai ) {
        autoEB5C7265_val = lp_sortType;
        if (autoEB5C7265_val == ge_ScoreType_Kills) {
            lv_score = gv_playerkills[lv_index];
            lv_scoreMax = gv_playerkills[lv_indexMax];
        }
        else if (autoEB5C7265_val == ge_ScoreType_MassiveKills) {
            lv_score = gv_playermassivekills[lv_index];
            lv_scoreMax = gv_playermassivekills[lv_indexMax];
        }
        else if (autoEB5C7265_val == ge_ScoreType_Revives) {
            lv_score = gv_playerRevivesGame[lv_index];
            lv_scoreMax = gv_playerRevivesGame[lv_indexMax];
        }
        else if (autoEB5C7265_val == ge_ScoreType_Heals) {
            lv_score = gv_playerheals[lv_index];
            lv_scoreMax = gv_playerheals[lv_indexMax];
        }
        else if (autoEB5C7265_val == ge_ScoreType_Hits) {
            lv_score = gv_playerhits[lv_index];
            lv_scoreMax = gv_playerhits[lv_indexMax];
        }
        else if (autoEB5C7265_val == ge_ScoreType_Deaths) {
            lv_score = gv_playerDeaths[lv_index];
            lv_scoreMax = gv_playerDeaths[lv_indexMax];
        }
        else {
        }
        if ((lv_score < lv_scoreMax)) {
            lv_indexMax = lv_index;
        }
    }
    return lv_indexMax;
}

int gf_ReturnMaximumScoreValueType (int lp_sortType) {
    // Variable Declarations
    int lv_index;
    int lv_indexMax;
    int lv_score;
    int lv_scoreMax;

    // Automatic Variable Declarations
    const int autoEEA7645A_ae = 12;
    const int autoEEA7645A_ai = 1;
    int autoADD12C4F_val;
    int auto369F33B6_val;

    // Variable Initialization

    // Implementation
    lv_indexMax = 1;
    lv_index = 2;
    for ( ; ( (autoEEA7645A_ai >= 0 && lv_index <= autoEEA7645A_ae) || (autoEEA7645A_ai < 0 && lv_index >= autoEEA7645A_ae) ) ; lv_index += autoEEA7645A_ai ) {
        autoADD12C4F_val = lp_sortType;
        if (autoADD12C4F_val == ge_ScoreType_Kills) {
            lv_score = gv_playerkills[lv_index];
            lv_scoreMax = gv_playerkills[lv_indexMax];
        }
        else if (autoADD12C4F_val == ge_ScoreType_MassiveKills) {
            lv_score = gv_playermassivekills[lv_index];
            lv_scoreMax = gv_playermassivekills[lv_indexMax];
        }
        else if (autoADD12C4F_val == ge_ScoreType_Revives) {
            lv_score = gv_playerRevivesGame[lv_index];
            lv_scoreMax = gv_playerRevivesGame[lv_indexMax];
        }
        else if (autoADD12C4F_val == ge_ScoreType_Heals) {
            lv_score = gv_playerheals[lv_index];
            lv_scoreMax = gv_playerheals[lv_indexMax];
        }
        else if (autoADD12C4F_val == ge_ScoreType_Hits) {
            lv_score = gv_playerhits[lv_index];
            lv_scoreMax = gv_playerhits[lv_indexMax];
        }
        else if (autoADD12C4F_val == ge_ScoreType_Deaths) {
            lv_score = gv_playerDeaths[lv_index];
            lv_scoreMax = gv_playerDeaths[lv_indexMax];
        }
        else {
        }
        if ((lv_score > lv_scoreMax)) {
            lv_indexMax = lv_index;
        }
    }
    auto369F33B6_val = lp_sortType;
    if (auto369F33B6_val == ge_ScoreType_Kills) {
        lv_scoreMax = gv_playerkills[lv_indexMax];
    }
    else if (auto369F33B6_val == ge_ScoreType_MassiveKills) {
        lv_scoreMax = gv_playermassivekills[lv_indexMax];
    }
    else if (auto369F33B6_val == ge_ScoreType_Revives) {
        lv_scoreMax = gv_playerRevivesGame[lv_indexMax];
    }
    else if (auto369F33B6_val == ge_ScoreType_Heals) {
        lv_scoreMax = gv_playerheals[lv_indexMax];
    }
    else if (auto369F33B6_val == ge_ScoreType_Hits) {
        lv_scoreMax = gv_playerhits[lv_indexMax];
    }
    else if (auto369F33B6_val == ge_ScoreType_Deaths) {
        lv_scoreMax = gv_playerDeaths[lv_indexMax];
    }
    else {
    }
    return lv_scoreMax;
}

int gf_ReturnMinimumScoreValueType (int lp_sortType) {
    // Variable Declarations
    int lv_index;
    int lv_indexMax;
    int lv_score;
    int lv_scoreMin;

    // Automatic Variable Declarations
    const int auto08A2679C_ae = 12;
    const int auto08A2679C_ai = 1;
    int autoE5C65ACD_val;
    int autoCF39B6E6_val;

    // Variable Initialization

    // Implementation
    lv_indexMax = 1;
    lv_index = 2;
    for ( ; ( (auto08A2679C_ai >= 0 && lv_index <= auto08A2679C_ae) || (auto08A2679C_ai < 0 && lv_index >= auto08A2679C_ae) ) ; lv_index += auto08A2679C_ai ) {
        autoE5C65ACD_val = lp_sortType;
        if (autoE5C65ACD_val == ge_ScoreType_Kills) {
            lv_score = gv_playerkills[lv_index];
            lv_scoreMin = gv_playerkills[lv_indexMax];
        }
        else if (autoE5C65ACD_val == ge_ScoreType_MassiveKills) {
            lv_score = gv_playermassivekills[lv_index];
            lv_scoreMin = gv_playermassivekills[lv_indexMax];
        }
        else if (autoE5C65ACD_val == ge_ScoreType_Revives) {
            lv_score = gv_playerRevivesGame[lv_index];
            lv_scoreMin = gv_playerRevivesGame[lv_indexMax];
        }
        else if (autoE5C65ACD_val == ge_ScoreType_Heals) {
            lv_score = gv_playerheals[lv_index];
            lv_scoreMin = gv_playerheals[lv_indexMax];
        }
        else if (autoE5C65ACD_val == ge_ScoreType_Hits) {
            lv_score = gv_playerhits[lv_index];
            lv_scoreMin = gv_playerhits[lv_indexMax];
        }
        else if (autoE5C65ACD_val == ge_ScoreType_Deaths) {
            lv_score = gv_playerDeaths[lv_index];
            lv_scoreMin = gv_playerDeaths[lv_indexMax];
        }
        else {
        }
        if ((lv_score < lv_scoreMin)) {
            lv_indexMax = lv_index;
        }
    }
    autoCF39B6E6_val = lp_sortType;
    if (autoCF39B6E6_val == ge_ScoreType_Kills) {
        lv_scoreMin = gv_playerkills[lv_indexMax];
    }
    else if (autoCF39B6E6_val == ge_ScoreType_MassiveKills) {
        lv_scoreMin = gv_playermassivekills[lv_indexMax];
    }
    else if (autoCF39B6E6_val == ge_ScoreType_Revives) {
        lv_scoreMin = gv_playerRevivesGame[lv_indexMax];
    }
    else if (autoCF39B6E6_val == ge_ScoreType_Heals) {
        lv_scoreMin = gv_playerheals[lv_indexMax];
    }
    else if (autoCF39B6E6_val == ge_ScoreType_Hits) {
        lv_scoreMin = gv_playerhits[lv_indexMax];
    }
    else if (autoCF39B6E6_val == ge_ScoreType_Deaths) {
        lv_scoreMin = gv_playerDeaths[lv_indexMax];
    }
    else {
    }
    return lv_scoreMin;
}

trigger auto_gf_DisplayScoreScreen_Trigger = null;

void gf_DisplayScoreScreen () {
    if (auto_gf_DisplayScoreScreen_Trigger == null) {
        auto_gf_DisplayScoreScreen_Trigger = TriggerCreate("auto_gf_DisplayScoreScreen_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisplayScoreScreen_Trigger, false, false);
}

bool auto_gf_DisplayScoreScreen_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_z;
    int lv_scoreScreen;
    int lv_pBKillMax;
    int lv_pBMKillMax;
    int lv_pBHitMax;
    int lv_pBHitMin;
    int lv_pBDeathMax;
    int lv_pBDeathMin;
    int lv_pBRevivesMax;

    // Automatic Variable Declarations
    int autoB837721B_ae;
    const int autoB837721B_ai = 1;

    // Variable Initialization
    lv_scoreScreen = c_invalidDialogControlId;

    // Implementation
    UISetCursorVisible(PlayerGroupAll(), true);
    libNtve_gf_HideScreenButton(false, 1);
    DialogSetVisible(gv_hUDDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_statusDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_unlockDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_itemScannerMenuDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_sIDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_sIDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_sM.lv_dialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_fireteamDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_heroInventoryDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_nPCInventoryDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupAll(), false);
    TriggerEnable(gt_HUDUpdate, false);
    TriggerEnable(gt_ShowHUDDialogButton, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 4.0);
    gf_ChapterIntermissionOn();
    CinematicFade(false, 4.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    lv_pBKillMax = gf_ReturnMaximumScoreValueType(ge_ScoreType_Kills);
    lv_pBMKillMax = gf_ReturnMaximumScoreValueType(ge_ScoreType_MassiveKills);
    lv_pBHitMax = gf_ReturnMaximumScoreValueType(ge_ScoreType_Hits);
    lv_pBHitMin = gf_ReturnMinimumScoreValueType(ge_ScoreType_Hits);
    lv_pBDeathMax = gf_ReturnMaximumScoreValueType(ge_ScoreType_Deaths);
    lv_pBDeathMin = gf_ReturnMinimumScoreValueType(ge_ScoreType_Deaths);
    lv_pBRevivesMax = gf_ReturnMaximumScoreValueType(ge_ScoreType_Revives);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/DebugDisplay");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 0, 50);
    if ((gv_victory == false)) {
        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "MusicVictory_ZergLoop", c_soundtrackCueAny, c_soundtrackIndexAny);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/98F4D5D0"));
    }
    else {
        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "MusicVictory_TerranLoop", c_soundtrackCueAny, c_soundtrackIndexAny);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/72E251CF"));
    }
    SoundtrackSetContinuous(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ScoreScreen");
    lv_scoreScreen = DialogControlLastCreated();
    DialogControlHookup(lv_scoreScreen, c_triggerControlTypePanel, "TabButtonsContainer");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeButton, "Button01");
    gv_rankMenu = DialogControlLastCreated();
    if (((gv_gamemode == 8) || (gv_gamemode == 11))) {
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/Title2"));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlDestroy(DialogControlLastCreated());
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/Title6"));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        DialogControlDestroy(DialogControlLastCreated());
    }
    autoB837721B_ae = PlayerGroupCount(gv_scoreBoard);
    lv_i = 1;
    for ( ; ( (autoB837721B_ai >= 0 && lv_i <= autoB837721B_ae) || (autoB837721B_ai < 0 && lv_i >= autoB837721B_ae) ) ; lv_i += autoB837721B_ai ) {
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/MOS0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        if ((gv_playerHeroImage[lv_i] != null)) {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_playerHeroImage[lv_i], PlayerGroupAll());
        }
        DialogControlDestroy(DialogControlLastCreated());
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/Name0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), PlayerName(lv_i), PlayerGroupAll());
        DialogControlDestroy(DialogControlLastCreated());
        DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/KillPB0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), FixedToInt(lv_pBKillMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerkills[lv_i]), PlayerGroupAll());
        DialogControlDestroy(DialogControlLastCreated());
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/KillText0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlDestroy(DialogControlLastCreated());
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/KillBarBorder0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        if ((gv_playerkills[lv_i] == lv_pBKillMax) && (gv_startingplayers > 1)) {
            libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        }
        DialogControlDestroy(DialogControlLastCreated());
        DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/MKillPB0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), FixedToInt(lv_pBMKillMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playermassivekills[lv_i]), PlayerGroupAll());
        DialogControlDestroy(DialogControlLastCreated());
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/MKillText0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlDestroy(DialogControlLastCreated());
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/MKillBarBorder0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        if ((gv_playermassivekills[lv_i] == lv_pBMKillMax) && (gv_startingplayers > 1)) {
            libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        }
        DialogControlDestroy(DialogControlLastCreated());
        DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/HitPB0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), FixedToInt(lv_pBHitMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerhits[lv_i]), PlayerGroupAll());
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/HitText0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/HitBarBorder0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        if ((gv_playerhits[lv_i] == lv_pBHitMin) && (gv_startingplayers > 1)) {
            libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        }
        DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/DeathPB0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), FixedToInt(lv_pBDeathMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerDeaths[lv_i]), PlayerGroupAll());
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/DeathText0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/DeathBarBorder0" + IntToString(lv_i)));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        if ((gv_playerDeaths[lv_i] == lv_pBDeathMin) && (gv_playerLeftGame[lv_i] == false) && (gv_startingplayers > 1)) {
            libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        }
        if ((gv_medicScoreboard[lv_i] == true)) {
            DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/RevivePB0" + IntToString(lv_i)));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
            libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), FixedToInt(lv_pBRevivesMax), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerRevivesGame[lv_i]), PlayerGroupAll());
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/ReviveText0" + IntToString(lv_i)));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel00/OverviewFrame/ReviveBarBorder0" + IntToString(lv_i)));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            if ((gv_playerRevivesGame[lv_i] == lv_pBRevivesMax) && (gv_startingplayers > 1)) {
                libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
            }
        }
    }
    DialogControlSetVisible(lv_scoreScreen, PlayerGroupAll(), true);
    DialogCreate(200, 200, c_anchorBottom, 0, 175, true);
    gv_endGame = DialogLastCreated();
    DialogSetImageVisible(gv_endGame, false);
    libNtve_gf_CreateDialogItemButton(gv_endGame, 125, 50, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/B3E447D6"), "");
    gv_endGameButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(gv_endGameButton, "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(gv_endGameButton, "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(gv_endGameButton, c_triggerImageTypeEndCap, PlayerGroupAll());
    DialogSetVisible(gv_endGame, PlayerGroupAll(), true);
    TriggerEnable(gt_EndGameButton, true);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatBar");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 45, 50);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatDisplay");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 0, 200);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 725, PlayerGroupAll());
    TriggerEnable(gt_RankMenu, true);
    return true;
}

fixed gf_ProgressBarPercent () {
    // Automatic Variable Declarations
    // Implementation
    return (100.0 * (gv_barCurrent / gv_barMax));
}

bool gf_ProgressBarLoop () {
    // Automatic Variable Declarations
    // Implementation
    return gv_progressBarBool;
}

void gf_ShowHideProgressBar (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        if ((gv_progressBarDialog == c_invalidDialogControlId)) {
            DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullScreenUpperContainer/MissionFrame");
            gv_progressBarDialog = DialogControlLastCreated();
            DialogControlHookup(gv_progressBarDialog, c_triggerControlTypeProgressBar, "MissionPB");
            gv_progressBar_PB = DialogControlLastCreated();
            DialogControlHookup(gv_progressBarDialog, c_triggerControlTypeLabel, "Title");
            gv_progressBarTitle = DialogControlLastCreated();
            DialogControlHookup(gv_progressBarDialog, c_triggerControlTypeLabel, "Percent");
            gv_progressBarValueLabel = DialogControlLastCreated();
        }
        DialogControlSetVisible(gv_progressBarDialog, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(gv_progressBarDialog, PlayerGroupAll(), false);
    }
}

void gf_SetProgressBarMax (fixed lp_max) {
    // Automatic Variable Declarations
    // Implementation
    gv_barMax = lp_max;
    libNtve_gf_SetDialogItemMaximumValue(gv_progressBar_PB, gv_barMax, PlayerGroupAll());
}

void gf_SetProgressBarIncrement (fixed lp_increment) {
    // Automatic Variable Declarations
    // Implementation
    gv_barIncrement = lp_increment;
}

void gf_SetProgressBarTitle (text lp_title) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_progressBarTitle, lp_title, PlayerGroupAll());
}

trigger auto_gf_StartProgressBarLoop_Trigger = null;
bool auto_gf_StartProgressBarLoop_lp_bool;

void gf_StartProgressBarLoop (bool lp_bool) {
    auto_gf_StartProgressBarLoop_lp_bool = lp_bool;

    if (auto_gf_StartProgressBarLoop_Trigger == null) {
        auto_gf_StartProgressBarLoop_Trigger = TriggerCreate("auto_gf_StartProgressBarLoop_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartProgressBarLoop_Trigger, false, false);
}

bool auto_gf_StartProgressBarLoop_TriggerFunc (bool testConds, bool runActions) {
    bool lp_bool = auto_gf_StartProgressBarLoop_lp_bool;

    // Variable Declarations
    bool lv_bool_False;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_progressBarBool = lp_bool;
    while ((gv_barCurrent != gv_barMax)) {
        gv_barCurrent += gv_barIncrement;
        TextExpressionSetToken("Param/Expression/B6A9BBB8", "A", FixedToText(gf_ProgressBarPercent(), 1));
        libNtve_gf_SetDialogItemText(gv_progressBarValueLabel, TextExpressionAssemble("Param/Expression/B6A9BBB8"), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(gv_progressBar_PB, gv_barCurrent, PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    if ((gv_gameOver == false)) {
        gv_progressBarBool = lv_bool_False;
    }
    return true;
}

void gf_DistributeXP (int lp_xp, int lp_Player) {
    // Variable Declarations
    int lv_xpmod;
    int lv_newXP;
    int lv_oldXP;

    // Automatic Variable Declarations
    int autoAACDEE95_val;

    // Variable Initialization
    lv_xpmod = FixedToInt((IntToFixed(lp_xp) * gv_xpmodifier));

    // Implementation
    autoAACDEE95_val = gv_playerRankSet[lp_Player];
    if (autoAACDEE95_val == 1) {
        gv_playerExperience[1][lp_Player] = (gv_playerExperience[1][lp_Player] + lv_xpmod);
        gv_playerExperience[2][lp_Player] = (gv_playerExperience[2][lp_Player] + (lv_xpmod / 2));
        gv_playerExperience[3][lp_Player] = (gv_playerExperience[3][lp_Player] + (lv_xpmod / 2));
    }
    else if (autoAACDEE95_val == 2) {
        gv_playerExperience[2][lp_Player] = (gv_playerExperience[2][lp_Player] + lv_xpmod);
        gv_playerExperience[1][lp_Player] = (gv_playerExperience[1][lp_Player] + (lv_xpmod / 2));
        gv_playerExperience[3][lp_Player] = (gv_playerExperience[3][lp_Player] + (lv_xpmod / 2));
    }
    else if (autoAACDEE95_val == 3) {
        gv_playerExperience[3][lp_Player] = (gv_playerExperience[3][lp_Player] + lv_xpmod);
        gv_playerExperience[2][lp_Player] = (gv_playerExperience[2][lp_Player] + (lv_xpmod / 2));
        gv_playerExperience[1][lp_Player] = (gv_playerExperience[1][lp_Player] + (lv_xpmod / 2));
    }
    else {
    }
}

fixed gf_MissionTrackerPercent () {
    // Automatic Variable Declarations
    // Implementation
    return (100.0 * (gv_objective_Mission_Tracker_Current / gv_objective_Mission_Tracker_Max));
}

void gf_MoveObjectivePanel (int lp_xOffset, int lp_yOffset, int lp_anchor) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_objective_Panel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ObjectivePanel");
        gv_objective_Panel = DialogControlLastCreated();
    }
    DialogControlSetPosition(gv_objective_Panel, PlayerGroupAll(), lp_anchor, lp_xOffset, lp_yOffset);
}

void gf_DisplayObjectiveMissionCounter (int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_type == ge_ObjectiveMissionType_Show)) {
        DialogControlSetVisible(gv_objective_Mission_Tracker, PlayerGroupAll(), true);
    }
    else if ((lp_type == ge_ObjectiveMissionType_Hide)) {
        DialogControlSetVisible(gv_objective_Mission_Tracker, PlayerGroupAll(), false);
    }
    else if ((lp_type == ge_ObjectiveMissionType_Completed)) {
        DialogControlSetVisible(gv_objective_Mission_Tracker_Check, PlayerGroupAll(), true);
    }
}

trigger auto_gf_UpdateMissionCompletionTracker_Trigger = null;
bool auto_gf_UpdateMissionCompletionTracker_lp_bool;

void gf_UpdateMissionCompletionTracker (bool lp_bool) {
    auto_gf_UpdateMissionCompletionTracker_lp_bool = lp_bool;

    if (auto_gf_UpdateMissionCompletionTracker_Trigger == null) {
        auto_gf_UpdateMissionCompletionTracker_Trigger = TriggerCreate("auto_gf_UpdateMissionCompletionTracker_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateMissionCompletionTracker_Trigger, false, false);
}

bool auto_gf_UpdateMissionCompletionTracker_TriggerFunc (bool testConds, bool runActions) {
    bool lp_bool = auto_gf_UpdateMissionCompletionTracker_lp_bool;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_bool == true)) {
        gv_missionCompleted += 1.0;
    }
    gv_totalMissions += 1.0;
    gv_objective_Mission_Tracker_Max = gv_totalMissions;
    gv_objective_Mission_Tracker_Current = gv_missionCompleted;
    libNtve_gf_SetDialogItemMaximumValue(gv_objective_Mission_Tracker_PB, gv_objective_Mission_Tracker_Max, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(gv_objective_Mission_Tracker_PB, gv_objective_Mission_Tracker_Current, PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/EE56E408", "A", FixedToText(gf_MissionTrackerPercent(), 0));
    libNtve_gf_SetDialogItemText(gv_objective_Mission_Tracker_Label, TextExpressionAssemble("Param/Expression/EE56E408"), PlayerGroupAll());
    return true;
}

void gf_SucceedMission (int lp_xp, text lp_mission, int lp_iLdelta, bool lp_bonusXp) {
    // Variable Declarations
    int lv_fireteams;
    int lv_players;
    int lv_loopint;
    int lv_xpmod;
    int lv_modifiersXpGain;
    int lv_oldxp;
    int lv_newxp;
    fixed lv__25;
    text lv_temptext;

    // Automatic Variable Declarations
    playergroup auto0787B329_g;
    int auto0787B329_var;
    const int auto50BFC255_ae = gv_sIcount;
    const int auto50BFC255_ai = 1;

    // Variable Initialization
    lv_xpmod = FixedToInt((IntToFixed(lp_xp) * gv_xpmodifier));
    lv_modifiersXpGain = FixedToInt((IntToFixed(lp_xp) * gv_xpModifierFromMods));

    // Implementation
    if ((gv_gameOver == true)) {
        return ;
    }

    if ((lp_xp == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, lp_mission);
    }
    else {
        SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
        if ((lp_bonusXp == true)) {
            gv_xPGained = (gv_xPGained + lp_xp);
            gv_bonusXpGained = 0;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (lp_mission + StringExternal("Param/Value/4DDBEF2F") + IntToText(lp_xp)));
        }
        else {
            gv_xPGained = (gv_xPGained + lv_xpmod);
            gv_bonusXpGained = (gv_bonusXpGained + lv_modifiersXpGain);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (lp_mission + StringExternal("Param/Value/DA322CE8") + IntToText(lv_xpmod) + StringExternal("Param/Value/CD1156B3") + StringExternal("Param/Value/089DD672") + IntToText(lv_modifiersXpGain)));
        }
        gv_infestationLevel = (gv_infestationLevel + lp_iLdelta);
        auto0787B329_g = gv_players;
        auto0787B329_var = -1;
        while (true) {
            auto0787B329_var = PlayerGroupNextPlayer(auto0787B329_g, auto0787B329_var);
            if (auto0787B329_var < 0) { break; }
            if ((PlayerStatus(auto0787B329_var) == c_playerStatusActive)) {
                lv_oldxp = gv_playerExperience[gv_playerRankSet[auto0787B329_var]][auto0787B329_var];
                if ((lp_bonusXp == true)) {
                    lv_newxp = (gv_playerExperience[gv_playerRankSet[auto0787B329_var]][auto0787B329_var] + lp_xp);
                }
                else {
                    lv_newxp = (gv_playerExperience[gv_playerRankSet[auto0787B329_var]][auto0787B329_var] + lv_xpmod);
                }
                lv_loopint = 1;
                for ( ; ( (auto50BFC255_ai >= 0 && lv_loopint <= auto50BFC255_ae) || (auto50BFC255_ai < 0 && lv_loopint >= auto50BFC255_ae) ) ; lv_loopint += auto50BFC255_ai ) {
                    if ((gv_sIunlocked[lv_loopint][auto0787B329_var] == false) && (lv_newxp >= gv_sIXPminimum[gv_playerRankSet[auto0787B329_var]][lv_loopint]) && (gv_sIXPminimum[gv_playerRankSet[auto0787B329_var]][lv_loopint] > 0)) {
                        UIDisplayMessage(PlayerGroupSingle(auto0787B329_var), c_messageAreaDebug, (gv_sIname[lv_loopint] + StringExternal("Param/Value/44DE00D8")));
                        gv_sIunlocked[lv_loopint][auto0787B329_var] = true;
                        gf_UnlockAchievement(auto0787B329_var);
                    }

                }
                if ((lv_oldxp < gv_rankXPMin[gv_playerRankSet[auto0787B329_var]][(gf_GetPlayerRank(auto0787B329_var) + 1)]) && (lv_newxp >= gv_rankXPMin[gv_playerRankSet[auto0787B329_var]][(gf_GetPlayerRank(auto0787B329_var) + 1)])) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(auto0787B329_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto0787B329_var, false))) + StringExternal("Param/Value/81720FE5") + gv_rankPrefix[gv_playerRankSet[auto0787B329_var]][(gf_GetPlayerRank(auto0787B329_var) + 1)]));
                    libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[auto0787B329_var], gv_rankActorMsg[gv_playerRankSet[auto0787B329_var]][(gf_GetPlayerRank(auto0787B329_var) + 1)]);
                    libNtve_gf_SetDialogItemImage(gv_hUDDialogItems[1][auto0787B329_var], gv_rankDecal[gv_playerRankSet[auto0787B329_var]][gf_GetPlayerRank(auto0787B329_var)], PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[1][auto0787B329_var], gv_rankPrefix[gv_playerRankSet[auto0787B329_var]][gf_GetPlayerRank(auto0787B329_var)], PlayerGroupAll());
                    libNtve_gf_SetDialogItemImage(gv_statusDialogItems[1][auto0787B329_var], gv_rankDecal[gv_playerRankSet[auto0787B329_var]][gf_GetPlayerRank(auto0787B329_var)], PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[1][auto0787B329_var], gv_rankPrefix[gv_playerRankSet[auto0787B329_var]][gf_GetPlayerRank(auto0787B329_var)], PlayerGroupAll());
                }

                if ((gv_playerxphalved[auto0787B329_var] == true)) {
                    gf_DistributeXP((lv_xpmod / 2), auto0787B329_var);
                }
                else {
                    gf_DistributeXP(lv_xpmod, auto0787B329_var);
                }
                lv_temptext = StringToText("");
                lv_temptext = (lv_temptext + (StringExternal("Param/Value/01094791") + FormatNumber(gv_playerExperience[1][auto0787B329_var]) + StringExternal("Param/Value/79523AFE") + FormatNumber(gv_playerExperience[2][auto0787B329_var]) + StringExternal("Param/Value/62866461") + FormatNumber(gv_playerExperience[3][auto0787B329_var])));
                lv_temptext = (lv_temptext + (StringExternal("Param/Value/72AB02CF") + IntToText(gv_playerAchCnt[auto0787B329_var]) + StringExternal("Param/Value/C251BBBD") + StringExternal("Param/Value/A4D00B72")));
                lv_temptext = (lv_temptext + (StringExternal("Param/Value/43D5036C") + IntToText(gf_GetPointCount(auto0787B329_var))));
                libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[2][auto0787B329_var], lv_temptext, PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[2][auto0787B329_var], (StringExternal("Param/Value/4A13E5FA") + FormatNumber(gv_playerExperience[gv_playerRankSet[auto0787B329_var]][auto0787B329_var])), PlayerGroupAll());
            }

        }
    }
}

void gf_FailMission (int lp_xplost, text lp_mission, int lp_iLdelta) {
    // Variable Declarations
    int lv_randomPenaltySpawn;
    int lv_loopint;
    int lv_xplostmod;
    int lv_xplostmodifiers;
    fixed lv__25;

    // Automatic Variable Declarations
    const int autoC50B9B43_ae = 12;
    const int autoC50B9B43_ai = 1;

    // Variable Initialization
    lv_xplostmod = FixedToInt((IntToFixed(lp_xplost) * gv_xpmodifier));
    lv_xplostmodifiers = FixedToInt((IntToFixed(lp_xplost) * gv_xpModifierFromMods));

    // Implementation
    if ((gv_gameOver == true)) {
        return ;
    }
    if ((lp_xplost == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, lp_mission);
    }
    else {
        gv_xPGained = ((gv_xPGained - lv_xplostmodifiers) - lv_xplostmod);
        gv_infestationLevel = (gv_infestationLevel + lp_iLdelta);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (lp_mission + StringExternal("Param/Value/13C1CF5B") + IntToText(lv_xplostmod) + StringExternal("Param/Value/B8FC9750")));
        lv_loopint = 1;
        for ( ; ( (autoC50B9B43_ai >= 0 && lv_loopint <= autoC50B9B43_ae) || (autoC50B9B43_ai < 0 && lv_loopint >= autoC50B9B43_ae) ) ; lv_loopint += autoC50B9B43_ai ) {
            if ((gv_playerExperience[gv_playerRankSet[lv_loopint]][lv_loopint] > lv_xplostmod)) {
                gv_playerExperience[gv_playerRankSet[lv_loopint]][lv_loopint] = (gv_playerExperience[gv_playerRankSet[lv_loopint]][lv_loopint] - lv_xplostmod);
            }
            else {
                gv_playerExperience[gv_playerRankSet[lv_loopint]][lv_loopint] = 1;
            }
        }
    }
}

void gf_AwardPlayerXP (int lp_xp, text lp_mission, int lp_player) {
    // Variable Declarations
    int lv_loopint;
    int lv_xpmod;
    int lv_oldxp;
    int lv_newxp;

    // Automatic Variable Declarations
    const int autoFE0E1EDD_ae = gv_sIcount;
    const int autoFE0E1EDD_ai = 1;

    // Variable Initialization
    lv_xpmod = FixedToInt((IntToFixed(lp_xp) * gv_xpmodifier));

    // Implementation
    if ((gv_gameOver == true)) {
        return ;
    }

    if ((lp_xp == 0)) {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, lp_mission);
    }
    else {
        SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, (lp_mission + StringExternal("Param/Value/2EF97179") + IntToText(lv_xpmod) + StringExternal("Param/Value/2916D81F")));
        lv_oldxp = gv_playerExperience[gv_playerRankSet[lp_player]][lp_player];
        lv_newxp = (gv_playerExperience[gv_playerRankSet[lp_player]][lp_player] + lv_xpmod);
        lv_loopint = 1;
        for ( ; ( (autoFE0E1EDD_ai >= 0 && lv_loopint <= autoFE0E1EDD_ae) || (autoFE0E1EDD_ai < 0 && lv_loopint >= autoFE0E1EDD_ae) ) ; lv_loopint += autoFE0E1EDD_ai ) {
            if ((gv_sIunlocked[lv_loopint][lp_player] == false) && (lv_newxp >= gv_sIXPminimum[gv_playerRankSet[lp_player]][lv_loopint]) && (gv_sIXPminimum[gv_playerRankSet[lp_player]][lv_loopint] > 0)) {
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, (gv_sIname[lv_loopint] + StringExternal("Param/Value/01F06C60")));
                gv_sIunlocked[lv_loopint][lp_player] = true;
                gf_UnlockAchievement(lp_player);
            }

        }
        if ((lv_oldxp < gv_rankXPMin[gv_playerRankSet[lp_player]][(gf_GetPlayerRank(lp_player) + 1)]) && (lv_newxp >= gv_rankXPMin[gv_playerRankSet[lp_player]][(gf_GetPlayerRank(lp_player) + 1)])) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/21D422CE") + gv_rankPrefix[gv_playerRankSet[lp_player]][(gf_GetPlayerRank(lp_player) + 1)]));
            libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lp_player], gv_rankActorMsg[gv_playerRankSet[lp_player]][(gf_GetPlayerRank(lp_player) + 1)]);
            if ((lv_oldxp < gv_rankXPMin[1][7]) && (lv_newxp >= gv_rankXPMin[1][7])) {
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/5FF05981"));
                gv_playerExperience[2][lp_player] = 1;
                gv_playerExperience[3][lp_player] = 1;
            }

        }

        if ((gv_playerxphalved[lp_player] == true)) {
            gf_DistributeXP((lv_xpmod / 2), lp_player);
        }
        else {
            gf_DistributeXP(lv_xpmod, lp_player);
        }
    }
}

void gf_LosePlayerXP (int lp_xplost, text lp_mission, int lp_iLdelta) {
    // Variable Declarations
    int lv_randomPenaltySpawn;
    int lv_loopint;
    int lv_xplostmod;

    // Automatic Variable Declarations
    const int auto50AE0B56_ae = 12;
    const int auto50AE0B56_ai = 1;

    // Variable Initialization
    lv_xplostmod = FixedToInt((IntToFixed(lp_xplost) * gv_xpmodifier));

    // Implementation
    if ((gv_gameOver == true)) {
        return ;
    }

    if ((lp_xplost == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, lp_mission);
    }
    else {
        gv_xPGained = (gv_xPGained - lv_xplostmod);
        gv_infestationLevel = (gv_infestationLevel + lp_iLdelta);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (lp_mission + StringExternal("Param/Value/BDE2A8DE") + IntToText(lv_xplostmod) + StringExternal("Param/Value/D7543C3C")));
        lv_loopint = 1;
        for ( ; ( (auto50AE0B56_ai >= 0 && lv_loopint <= auto50AE0B56_ae) || (auto50AE0B56_ai < 0 && lv_loopint >= auto50AE0B56_ae) ) ; lv_loopint += auto50AE0B56_ai ) {
            gv_playerExperience[gv_playerRankSet[lv_loopint]][lv_loopint] = (gv_playerExperience[gv_playerRankSet[lv_loopint]][lv_loopint] - lv_xplostmod);
        }
    }
}

int gf_UnitHighestAilment (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitHasBehavior2(lp_unit, "MinorLacerations") == true) || (UnitHasBehavior2(lp_unit, "UnidentifiedInfection") == true))) {
        return 1;
    }
    else if (((UnitHasBehavior2(lp_unit, "ClassIIIHemmorrhaging") == true) || (UnitHasBehavior2(lp_unit, "FracturedArm") == true) || (UnitHasBehavior2(lp_unit, "FracturedLeg") == true) || (UnitHasBehavior2(lp_unit, "TraumaticBrainInjury") == true) || (UnitHasBehavior2(lp_unit, "EnergyLeak") == true) || (UnitHasBehavior2(lp_unit, "MalignantInfection") == true))) {
        return 2;
    }
    else if (((UnitHasBehavior2(lp_unit, "ClassIVHemmorrhaging") == true) || (UnitHasBehavior2(lp_unit, "InfectedBite") == true) || (UnitHasBehavior2(lp_unit, "ParasiticInfection") == true) || (UnitHasBehavior2(lp_unit, "DebilitatingInfection") == true) || (UnitHasBehavior2(lp_unit, "HatchedParasites") == true))) {
        return 3;
    }
    else if (((UnitHasBehavior2(lp_unit, "NecroticVenom") == true) || (UnitHasBehavior2(lp_unit, "NeurotoxicVenom") == true))) {
        return 4;
    }
    return 0;
}

void gf_InitializeAilmentVars () {
    // Automatic Variable Declarations
    // Implementation
    gf_SetupAilments(0, "NecroticVenom", 1, "Assets\\Textures\\btn-ability-zerg-contaminate-color.dds");
    gf_SetupAilments(1, "NeurotoxicVenom", 1, "Assets\\Textures\\btn-ability-zerg-banelingspooge.dds");
    gf_SetupAilments(2, "MinorLacerations", 4, "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level0.dds");
    gf_SetupAilments(3, "UnidentifiedInfection", 5, "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level0.dds");
    gf_SetupAilments(4, "ClassIIIHemmorrhaging", 5, "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level2.dds");
    gf_SetupAilments(5, "FracturedArm", 5, "Assets\\Textures\\btn-ability-zerg-harvestcorpse.dds");
    gf_SetupAilments(6, "FracturedLeg", 6, "Assets\\Textures\\btn-ability-protoss-charge-color.dds");
    gf_SetupAilments(7, "TraumaticBrainInjury", 6, "Assets\\Textures\\stunswirl1_orange.dds");
    gf_SetupAilments(8, "EnergyLeak", 6, "Assets\\Textures\\btn-upgrade-protoss-researchbosoniccore.dds");
    gf_SetupAilments(9, "InfectedBite", 6, "Assets\\Textures\\btn-ability-zerg-infestation.dds");
    gf_SetupAilments(10, "ClassIVHemmorrhaging", 7, "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level3.dds");
    gf_SetupAilments(11, "ParasiticInfection", 6, "Assets\\Textures\\btn-upgrade-zerg-evolveincreasedlocustlifetime.dds");
    libEBB916F2_gf_CreateArray("Blunt_Ailments");
    libEBB916F2_gf_PushArrayValueInteger("Blunt_Ailments", 4);
    libEBB916F2_gf_PushArrayValueInteger("Blunt_Ailments", 5);
    libEBB916F2_gf_PushArrayValueInteger("Blunt_Ailments", 6);
    libEBB916F2_gf_PushArrayValueInteger("Blunt_Ailments", 7);
    libEBB916F2_gf_PushArrayValueInteger("Blunt_Ailments", 10);
    libEBB916F2_gf_CreateArray("Slash_Ailments");
    libEBB916F2_gf_PushArrayValueInteger("Slash_Ailments", 2);
    libEBB916F2_gf_PushArrayValueInteger("Slash_Ailments", 3);
    libEBB916F2_gf_PushArrayValueInteger("Slash_Ailments", 4);
    libEBB916F2_gf_PushArrayValueInteger("Slash_Ailments", 7);
    libEBB916F2_gf_PushArrayValueInteger("Slash_Ailments", 9);
    libEBB916F2_gf_PushArrayValueInteger("Slash_Ailments", 11);
    libEBB916F2_gf_CreateArray("Pierce_Ailments");
    libEBB916F2_gf_PushArrayValueInteger("Pierce_Ailments", 4);
    libEBB916F2_gf_PushArrayValueInteger("Pierce_Ailments", 8);
    libEBB916F2_gf_PushArrayValueInteger("Pierce_Ailments", 10);
}

void gf_SetupAilments (int lp_array, string lp_ailmentbehavior, int lp_ailmentchance, string lp_ailmentimagepath) {
    // Automatic Variable Declarations
    // Implementation
    gv_ailmentIndividualChance[lp_array] = lp_ailmentchance;
    gv_ailments[lp_array] = lp_ailmentbehavior;
    gv_ailmentImages[lp_array] = lp_ailmentimagepath;
}

trigger auto_gf_RemoveAilments_Trigger = null;
unit auto_gf_RemoveAilments_lp_player;

void gf_RemoveAilments (unit lp_player) {
    auto_gf_RemoveAilments_lp_player = lp_player;

    if (auto_gf_RemoveAilments_Trigger == null) {
        auto_gf_RemoveAilments_Trigger = TriggerCreate("auto_gf_RemoveAilments_TriggerFunc");
    }

    TriggerExecute(auto_gf_RemoveAilments_Trigger, false, false);
}

bool auto_gf_RemoveAilments_TriggerFunc (bool testConds, bool runActions) {
    unit lp_player = auto_gf_RemoveAilments_lp_player;

    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto54CEF5F0_ae = gv_ailmentCount;
    const int auto54CEF5F0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 0;
    for ( ; ( (auto54CEF5F0_ai >= 0 && lv_i <= auto54CEF5F0_ae) || (auto54CEF5F0_ai < 0 && lv_i >= auto54CEF5F0_ae) ) ; lv_i += auto54CEF5F0_ai ) {
        if ((UnitHasBehavior(lp_player, gv_ailments[lv_i]) == true)) {
            UnitBehaviorRemove(lp_player, gv_ailments[lv_i], 1);
            if ((lv_i == 7)) {
                CameraShakeStop(UnitGetOwner(lp_player));
            }
        }
    }
    return true;
}

void gf_InitializeMiniVars () {
    // Automatic Variable Declarations
    // Implementation
    gv_minitypes[1] = "InfantryRifleman";
    gv_minitypes[2] = "InfantryAutomaticRifleman";
    gv_minitypes[3] = "CombatEngineerMini";
    gv_minitypes[4] = "InfantryJavelinGunner";
    gv_minitypes[5] = "Infantry74DFlamethrower";
    gv_minitypes[6] = "InfantrySDM";
    gv_minitypes[7] = "Infantry68WCombatMedic";
}

string gf_randomminitype () {
    // Variable Declarations
    int lv_randomDigit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_randomDigit = RandomInt(1, 20);
    if ((lv_randomDigit <= 6)) {
        return "InfantryRifleman";
    }
    else if ((lv_randomDigit > 6) && (lv_randomDigit <= 9)) {
        return "InfantryAutomaticRifleman";
    }
    else if ((lv_randomDigit > 9) && (lv_randomDigit <= 11)) {
        return "Infantry68WCombatMedic";
    }
    else if ((lv_randomDigit > 11) && (lv_randomDigit <= 14)) {
        return "Infantry74DFlamethrower";
    }
    else if ((lv_randomDigit > 14) && (lv_randomDigit <= 16)) {
        return "InfantrySDM";
    }
    else if ((lv_randomDigit > 16) && (lv_randomDigit <= 18) && (gv_ceallowed == true)) {
        return "CombatEngineerMini";
    }
    else if ((lv_randomDigit > 18) && (lv_randomDigit <= 20)) {
        return "InfantryJavelinGunner";
    }
    return "InfantryRifleman";
}

trigger auto_gf_RandomMiniFlagDecal_Trigger = null;
unit auto_gf_RandomMiniFlagDecal_lp_unit;

void gf_RandomMiniFlagDecal (unit lp_unit) {
    auto_gf_RandomMiniFlagDecal_lp_unit = lp_unit;

    if (auto_gf_RandomMiniFlagDecal_Trigger == null) {
        auto_gf_RandomMiniFlagDecal_Trigger = TriggerCreate("auto_gf_RandomMiniFlagDecal_TriggerFunc");
    }

    TriggerExecute(auto_gf_RandomMiniFlagDecal_Trigger, false, false);
}

bool auto_gf_RandomMiniFlagDecal_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_RandomMiniFlagDecal_lp_unit;

    // Automatic Variable Declarations
    int auto2C9F9F3B_val;

    // Implementation
    auto2C9F9F3B_val = RandomInt(0, 14);
    if (auto2C9F9F3B_val == 0) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalUSFlag2");
    }
    else if (auto2C9F9F3B_val == 1) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalUkraineFlag");
    }
    else if (auto2C9F9F3B_val == 2) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalSouthKoreaFlag");
    }
    else if (auto2C9F9F3B_val == 3) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalRussiaFlag");
    }
    else if (auto2C9F9F3B_val == 4) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalGermanyFlag");
    }
    else if (auto2C9F9F3B_val == 5) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalGBFlag");
    }
    else if (auto2C9F9F3B_val == 6) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalFranceFlag");
    }
    else if (auto2C9F9F3B_val == 7) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalCanadaFlag");
    }
    else if (auto2C9F9F3B_val == 8) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalFinland");
    }
    else if (auto2C9F9F3B_val == 9) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalSingapore");
    }
    else if (auto2C9F9F3B_val == 10) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalUN");
    }
    else if (auto2C9F9F3B_val == 11) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalItaly");
    }
    else if (auto2C9F9F3B_val == 12) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalMexicoFlag");
    }
    else if (auto2C9F9F3B_val == 13) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalVietnamFlag");
    }
    else if (auto2C9F9F3B_val == 14) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalAustraliaFlag");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lp_unit, "TextureSelectById DecalUSFlag");
    }
    return true;
}

void gf_ResetDeadPlayerMini (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gv_deadPlayerMini[lp_player] = false;
}

trigger auto_gf_Reinforcements_Trigger = null;

void gf_Reinforcements () {
    if (auto_gf_Reinforcements_Trigger == null) {
        auto_gf_Reinforcements_Trigger = TriggerCreate("auto_gf_Reinforcements_TriggerFunc");
    }

    TriggerExecute(auto_gf_Reinforcements_Trigger, false, false);
}

bool auto_gf_Reinforcements_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    unit lv_heli;
    int lv_lz;
    int lv_loopint;
    bool lv_someonedead;

    // Automatic Variable Declarations
    playergroup autoC4FAB256_g;
    int autoC4FAB256_var;
    playergroup autoF92F307F_g;
    int autoF92F307F_var;

    // Variable Initialization
    lv_lz = RandomInt(1, 5);

    // Implementation
    autoC4FAB256_g = gv_players;
    autoC4FAB256_var = -1;
    while (true) {
        autoC4FAB256_var = PlayerGroupNextPlayer(autoC4FAB256_g, autoC4FAB256_var);
        if (autoC4FAB256_var < 0) { break; }
        if ((gv_deadPlayerMini[autoC4FAB256_var] == true) && (UnitIsAlive(gv_playerHeroes[autoC4FAB256_var]) == false) && (PlayerStatus(autoC4FAB256_var) == c_playerStatusActive) && (gv_mod_1life == false)) {
            lv_someonedead = true;
        }

    }
    if ((lv_someonedead == true)) {
        lv_hero = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
        libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", 0, 13, PointWithOffset(RegionGetCenter(gv_lZs[lv_lz]), -12.0, 0.0), RegionGetCenter(gv_lZs[lv_lz]));
        lv_heli = UnitLastCreated();
        UnitIssueOrder(lv_heli, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(gv_lZs[lv_lz])), c_orderQueueReplace);
        Wait(12.0, c_timeGame);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(gv_lZs[lv_lz]), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 8.0, 270.0);
        gf_PlayerTransmission(StringExternal("Param/Value/6604AA28"), 1, UnitGetOwner(lv_hero));
        autoF92F307F_g = gv_players;
        autoF92F307F_var = -1;
        while (true) {
            autoF92F307F_var = PlayerGroupNextPlayer(autoF92F307F_g, autoF92F307F_var);
            if (autoF92F307F_var < 0) { break; }
            if ((TechTreeUpgradeCount(autoF92F307F_var, "SpecialForces", c_techCountCompleteOnly) == 0) && (gv_deadPlayerMini[autoF92F307F_var] == true) && (UnitIsAlive(gv_playerHeroes[autoF92F307F_var]) == false) && (PlayerStatus(autoF92F307F_var) == c_playerStatusActive)) {
                UnitCreate(1, gf_randomminitype(), c_unitCreateIgnorePlacement, autoF92F307F_var, RegionGetCenter(gv_lZs[lv_lz]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_playerminis, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionGetCenter(gv_lZs[lv_lz]), 4.0, (30.0 * IntToFixed(autoF92F307F_var)))), c_orderQueueReplace);
                UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
                gf_RandomMiniFlagDecal(UnitLastCreated());
                CameraPan(autoF92F307F_var, UnitGetPosition(UnitLastCreated()), 0.5, -1, 10.0, true);
                gf_ResetDeadPlayerMini(autoF92F307F_var);
            }

        }
        Wait(15.0, c_timeGame);
        UnitIssueOrder(lv_heli, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        UnitIssueOrder(lv_heli, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(15.0, c_timeGame);
        UnitRemove(lv_heli);
    }

    return true;
}

trigger auto_gf_ReinforcementsGlobal_Trigger = null;

void gf_ReinforcementsGlobal () {
    if (auto_gf_ReinforcementsGlobal_Trigger == null) {
        auto_gf_ReinforcementsGlobal_Trigger = TriggerCreate("auto_gf_ReinforcementsGlobal_TriggerFunc");
    }

    TriggerExecute(auto_gf_ReinforcementsGlobal_Trigger, false, false);
}

bool auto_gf_ReinforcementsGlobal_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heli;
    int lv_lz;

    // Automatic Variable Declarations
    playergroup autoC9163378_g;
    int autoC9163378_var;

    // Variable Initialization
    lv_lz = RandomInt(1, 5);

    // Implementation
    if ((gv_gamemode == 11)) {
        gf_MissionText(StringExternal("Param/Value/5CB07847"));
    }
    libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", c_unitCreateIgnorePlacement, 13, PointWithOffset(RegionGetCenter(gv_lZs[lv_lz]), -12.0, 0.0), RegionGetCenter(gv_lZs[lv_lz]));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 8.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/DD428280"));
    lv_heli = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_heli, true);
    UnitIssueOrder(lv_heli, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(gv_lZs[lv_lz])), c_orderQueueReplace);
    Wait(12.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(gv_lZs[lv_lz]), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 8.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EA9B457F"));
    autoC9163378_g = gv_players;
    autoC9163378_var = -1;
    while (true) {
        autoC9163378_var = PlayerGroupNextPlayer(autoC9163378_g, autoC9163378_var);
        if (autoC9163378_var < 0) { break; }
        if ((TechTreeUpgradeCount(autoC9163378_var, "SpecialForces", c_techCountCompleteOnly) == 0) && (PlayerStatus(autoC9163378_var) == c_playerStatusActive)) {
            UnitCreate(1, gf_randomminitype(), c_unitCreateIgnorePlacement, autoC9163378_var, RegionGetCenter(gv_lZs[lv_lz]), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionGetCenter(gv_lZs[lv_lz]), 4.0, (30.0 * IntToFixed(autoC9163378_var)))), c_orderQueueReplace);
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
        }

    }
    Wait(15.0, c_timeGame);
    UnitIssueOrder(lv_heli, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lv_heli, true);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(lv_heli, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    UnitRemove(lv_heli);
    return true;
}

trigger auto_gf_FlashCCButton_Trigger = null;
int auto_gf_FlashCCButton_lp_player;
string auto_gf_FlashCCButton_lp_button_Ability;
fixed auto_gf_FlashCCButton_lp_time;

void gf_FlashCCButton (int lp_player, string lp_button_Ability, fixed lp_time) {
    auto_gf_FlashCCButton_lp_player = lp_player;
    auto_gf_FlashCCButton_lp_button_Ability = lp_button_Ability;
    auto_gf_FlashCCButton_lp_time = lp_time;

    if (auto_gf_FlashCCButton_Trigger == null) {
        auto_gf_FlashCCButton_Trigger = TriggerCreate("auto_gf_FlashCCButton_TriggerFunc");
    }

    TriggerExecute(auto_gf_FlashCCButton_Trigger, false, false);
}

bool auto_gf_FlashCCButton_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_FlashCCButton_lp_player;
    string lp_button_Ability = auto_gf_FlashCCButton_lp_button_Ability;
    fixed lp_time = auto_gf_FlashCCButton_lp_time;

    // Automatic Variable Declarations
    // Implementation
    UISetButtonFaceHighlighted(PlayerGroupSingle(lp_player), lp_button_Ability, true);
    Wait(lp_time, c_timeGame);
    UISetButtonFaceHighlighted(PlayerGroupSingle(lp_player), lp_button_Ability, false);
    return true;
}

int gf_AmmoChargeCheck (unit lp_unit, string lp_chargestring) {
    // Variable Declarations
    int lv_loopint;
    int lv_count;

    // Automatic Variable Declarations
    const int autoD6DBF7F6_ae = 6;
    const int autoD6DBF7F6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_loopint = 1;
    for ( ; ( (autoD6DBF7F6_ai >= 0 && lv_loopint <= autoD6DBF7F6_ae) || (autoD6DBF7F6_ai < 0 && lv_loopint >= autoD6DBF7F6_ae) ) ; lv_loopint += autoD6DBF7F6_ai ) {
        if (((UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == "Magazines") || (UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == "AmmoCase")) && (UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_loopint), lp_chargestring) >= 1.0)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

void gf_UpdateAmmoWeight (int lp_ammo, int lp_propertyChange, int lp_player) {
    // Variable Declarations
    int lv_change;
    int lv_buff;

    // Automatic Variable Declarations
    int auto9DC0688C_n;
    int auto9DC0688C_i;
    int autoE3F93006_n;
    int autoE3F93006_i;
    int auto3EBFBF16_n;
    int auto3EBFBF16_i;

    // Variable Initialization

    // Implementation
    lv_buff = UnitBehaviorCount(gv_playerHeroes[lp_player], "EncumberedStacks");
    if ((lp_ammo > gv_playerEncumbrance[lp_player])) {
        lv_change = (lp_ammo - gv_playerEncumbrance[lp_player]);
        if ((lp_propertyChange > 0)) {
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/0F9F1527"));
        }
        autoE3F93006_n = lv_buff;
        for (autoE3F93006_i = 1; autoE3F93006_i <= autoE3F93006_n; autoE3F93006_i += 1) {
            UnitBehaviorRemove(gv_playerHeroes[lp_player], "EncumberedStacks", 1);
        }
        auto3EBFBF16_n = lv_change;
        for (auto3EBFBF16_i = 1; auto3EBFBF16_i <= auto3EBFBF16_n; auto3EBFBF16_i += 1) {
            UnitBehaviorAdd(gv_playerHeroes[lp_player], "EncumberedStacks", gv_playerHeroes[lp_player], 1);
        }
        if ((UnitHasBehavior2(gv_playerHeroes[lp_player], "Encumbered") == false)) {
            UnitBehaviorAdd(gv_playerHeroes[lp_player], "Encumbered", gv_playerHeroes[lp_player], 1);
        }
    }
    else {
        if ((UnitHasBehavior2(gv_playerHeroes[lp_player], "EncumberedStacks") == true)) {
            auto9DC0688C_n = lv_buff;
            for (auto9DC0688C_i = 1; auto9DC0688C_i <= auto9DC0688C_n; auto9DC0688C_i += 1) {
                UnitBehaviorRemove(gv_playerHeroes[lp_player], "EncumberedStacks", 1);
            }
        }
        if ((UnitHasBehavior2(gv_playerHeroes[lp_player], "Encumbered") == true)) {
            UnitBehaviorRemove(gv_playerHeroes[lp_player], "Encumbered", 1);
        }
    }
}

void gf_ReloadWeapon (int lp_player, int lp_controller) {
    // Variable Declarations
    unit lv_hero;
    int lv_texttag;
    bool lv_empty;
    fixed lv_reloadbasetime;
    fixed lv_reloadmod;
    int lv_magsused;
    int lv_sSlevel;
    int lv_sysEnhLevel;
    soundlink lv_magout;
    soundlink lv_magin;
    soundlink lv_maginLE;
    soundlink lv_charginghandle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = gv_playerHeroes[lp_player];
    lv_texttag = c_textTagNone;
    lv_empty = (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) == 0);
    lv_reloadbasetime = gv_reloadbasetime[lp_player];
    lv_magsused = gv_magsused[lp_player];
    lv_sSlevel = (UnitAbilityGetLevel(lv_hero, "SoldierSkills") + 1);
    lv_sysEnhLevel = (UnitAbilityGetLevel(lv_hero, "SystemEnhancements") + 1);
    lv_magout = SoundLink("magout", -1);
    lv_magin = SoundLink("magin", -1);
    lv_maginLE = SoundLink("NoSound", -1);
    lv_charginghandle = SoundLink("charginghandle", -1);

    // Implementation
    if (((UnitGetType(lv_hero) == "HeavyGunner") || (UnitGetType(lv_hero) == "HeavyGunner2"))) {
        UnitBehaviorRemove(lv_hero, "Overheat", 100);
    }
    if (((UnitGetType(lv_hero) == "LaserEnforcer") || (UnitGetType(lv_hero) == "LaserEnforcer2"))) {
        lv_magin = SoundLink("maginlaser", -1);
        lv_magout = SoundLink("magoutlaser", -1);
        lv_empty = false;
        lv_maginLE = SoundLink("maginlaserstage2", -1);
    }
    if (((UnitHasBehavior2(lv_hero, "AdvancedWarfighter") == true) || (UnitGetType(lv_hero) == "GhostHero") || (UnitGetType(lv_hero) == "GhostHero2") || (UnitGetType(lv_hero) == "BioSpecialist") || (UnitGetType(lv_hero) == "BioSpecialist2"))) {
        lv_magin = SoundLink("maginplasma", -1);
        lv_magout = SoundLink("magoutplasma", -1);
        lv_empty = false;
    }
    if (((UnitGetType(lv_hero) == "Specter") || (UnitGetType(lv_hero) == "Specter2"))) {
        lv_magin = SoundLink("maginshotgun", -1);
        lv_magout = SoundLink("magoutshotgun", -1);
        lv_empty = false;
    }
    if (((UnitGetType(lv_hero) == "Enforcer") || (UnitGetType(lv_hero) == "Enforcer2") || (UnitGetType(lv_hero) == "CombatEngineer") || (UnitGetType(lv_hero) == "CombatEngineer2"))) {
        lv_magin = SoundLink("maginshotgun", -1);
        lv_magout = SoundLink("magoutshotgun", -1);
        lv_charginghandle = SoundLink("charginghandleshotgun", -1);
    }
    if (((UnitGetType(lv_hero) == "AutomaticRifleman") || (UnitGetType(lv_hero) == "AutomaticRifleman2") || (UnitGetType(lv_hero) == "HeavyGunner") || (UnitGetType(lv_hero) == "HeavyGunner2") || (UnitGetType(lv_hero) == "Cyborg") || (UnitGetType(lv_hero) == "Cyborg2"))) {
        lv_magin = SoundLink("maginmg", -1);
        lv_magout = SoundLink("magoutmg", -1);
        lv_empty = false;
    }
    if ((PlayerGetPropertyInt(lp_player, c_playerPropVespene) >= lv_magsused)) {
        UnitGroupAdd(gv_reloading, lv_hero);
        if (((UnitHasBehavior(lv_hero, "Dexterity20") == true))) {
            lv_reloadbasetime = (lv_reloadbasetime * (1.0 - (UnitBehaviorCount(lv_hero, "Dexterity20") * 0.01)));
        }

        if (((UnitHasBehavior(lv_hero, "SoldierSkills1") == true) || (UnitHasBehavior(lv_hero, "SoldierSkills2") == true) || (UnitHasBehavior(lv_hero, "SoldierSkills3") == true) || (UnitHasBehavior(lv_hero, "SoldierSkills4") == true))) {
            lv_reloadbasetime = (lv_reloadbasetime * (1.0 - (lv_sSlevel * 0.15)));
        }

        if (((UnitHasBehavior(lv_hero, "SystemEnhancements1") == true) || (UnitHasBehavior(lv_hero, "SystemEnhancements2") == true) || (UnitHasBehavior(lv_hero, "SystemEnhancements3") == true) || (UnitHasBehavior(lv_hero, "SystemEnhancements4") == true))) {
            lv_reloadbasetime = (lv_reloadbasetime * (1.0 - (lv_sysEnhLevel * 0.15)));
        }

        if ((UnitHasBehavior(lv_hero, "QuickThinking") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.6);
        }

        if ((UnitHasBehavior(lv_hero, "IDMR2") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.85);
        }

        if ((UnitHasBehavior(lv_hero, "HeavyWeaponsTraining") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.7);
        }

        if ((UnitHasBehavior(lv_hero, "PAgility2") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.8);
        }

        if ((UnitHasBehavior(lv_hero, "SpecterSkills2") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.8);
        }

        if (((UnitHasBehavior(lv_hero, "SOFAR") == true) || (UnitHasBehavior(lv_hero, "USMCR") == true) || (UnitHasBehavior(lv_hero, "AA12") == true) || (UnitHasBehavior(lv_hero, "IDMR2") == true))) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.85);
        }

        if ((UnitHasBehavior(lv_hero, "InstructorTarget") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.8);
        }

        if ((UnitHasBehavior(lv_hero, "CausticGoo") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 1.3);
        }

        if ((UnitHasBehavior(lv_hero, "Leadership4T") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.8);
        }
        else {
            if ((UnitHasBehavior(lv_hero, "Leadership3T") == true)) {
                lv_reloadbasetime = (lv_reloadbasetime * 0.85);
            }
            else {
                if ((UnitHasBehavior(lv_hero, "Leadership2T") == true)) {
                    lv_reloadbasetime = (lv_reloadbasetime * 0.9);
                }
                else {
                    if ((UnitHasBehavior(lv_hero, "Leadership1T") == true)) {
                        lv_reloadbasetime = (lv_reloadbasetime * 0.95);
                    }

                }
            }
        }
        if ((UnitHasBehavior(lv_hero, "WeaponProficiency4") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.6);
        }
        else {
            if ((UnitHasBehavior(lv_hero, "WeaponProficiency3") == true)) {
                lv_reloadbasetime = (lv_reloadbasetime * 0.7);
            }
            else {
                if ((UnitHasBehavior(lv_hero, "WeaponProficiency2") == true)) {
                    lv_reloadbasetime = (lv_reloadbasetime * 0.8);
                }
                else {
                    if ((UnitHasBehavior(lv_hero, "WeaponProficiency1") == true)) {
                        lv_reloadbasetime = (lv_reloadbasetime * 0.9);
                    }

                }
            }
        }
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSubtract, lv_magsused);
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, 0);
        TextTagDestroy(gv_jammedtext[lp_player]);
        TextTagCreate((TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/3EE33C59")), 16, UnitGetPosition(lv_hero), 1.0, true, true, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        lv_texttag = TextTagLastCreated();
        TextTagSetTextShadow(lv_texttag, false);
        TextTagSetTime(lv_texttag, c_textTagTimeDuration, 4.0);
        TextTagAttachToUnit(lv_texttag, lv_hero, 1.0);
        if (((UnitGetType(lv_hero) == "AutomaticRifleman") || (UnitGetType(lv_hero) == "AutomaticRifleman2") || (UnitGetType(lv_hero) == "HeavyGunner") || (UnitGetType(lv_hero) == "HeavyGunner2") || (UnitGetType(lv_hero) == "Cyborg"))) {
            SoundPlayAtPoint(SoundLink("charginghandlemg", -1), PlayerGroupAll(), UnitGetPosition(lv_hero), 0.0, 100.0, 0.0);
            Wait(1.5, c_timeGame);
        }

        SoundPlayAtPoint(lv_magout, PlayerGroupAll(), UnitGetPosition(lv_hero), 0.0, 100.0, 0.0);
        Wait((RandomFixed((lv_reloadbasetime - 0.2), (lv_reloadbasetime + 0.2)) - lv_reloadmod), c_timeGame);
        SoundPlayAtPoint(lv_magin, PlayerGroupAll(), UnitGetPosition(lv_hero), 0.0, 100.0, 0.0);
        SoundPlayAtPoint(lv_maginLE, PlayerGroupAll(), UnitGetPosition(lv_hero), 0.0, 100.0, 0.0);
        if ((lv_empty == true)) {
            Wait(1.0, c_timeGame);
            SoundPlayAtPoint(lv_charginghandle, PlayerGroupAll(), UnitGetPosition(lv_hero), 0.0, 100.0, 0.0);
        }
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lp_player]);
        TextTagDestroy(lv_texttag);
        UnitGroupRemove(gv_reloading, lv_hero);
        UnitGroupRemove(gv_jammed, lv_hero);
        UnitBehaviorRemove(lv_hero, "Jammed", 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_controller), c_messageAreaSubtitle, StringExternal("Param/Value/1A6E1ADA"));
        SoundPlayOnUnit(SoundLink("noammo", -1), PlayerGroupAll(), lv_hero, 0.0, 100.0, 0.0);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/9785E688") + IntToText(PlayerGetPropertyInt(lp_controller, c_playerPropMinerals))), PlayerGroupSingle(lp_controller));
    }
}

bool gf_UnitCanJam (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitHasBehavior(lp_unit, "BorgEquipDMR")) || (UnitHasBehavior(lp_unit, "BorgEquipMG")) || (UnitHasBehavior(lp_unit, "BorgEquipRifle")) || (UnitHasBehavior(lp_unit, "MandoEquipRifle")) || ((UnitHasBehavior(lp_unit, "AdvancedWarfighter") == false) && (UnitGetType(lp_unit) == "Rifleman")) || (UnitGetType(lp_unit) == "AutomaticRifleman") || (UnitGetType(lp_unit) == "CavalryScout") || (UnitGetType(lp_unit) == "CombatMedic") || (UnitGetType(lp_unit) == "FireSupportSpecialist") || (UnitGetType(lp_unit) == "JavelinGunnerRework") || (UnitGetType(lp_unit) == "PlatoonLeader") || (UnitGetType(lp_unit) == "Specter") || (UnitGetType(lp_unit) == "SquadDesignatedMarksman"))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_AH32ViperDeath (unit lp_aH32Viper) {
    // Variable Declarations
    int lv_aH32Viper;
    int lv_killingPlayer;

    // Automatic Variable Declarations
    playergroup auto2E89FF13_g;
    int auto2E89FF13_var;

    // Variable Initialization
    lv_aH32Viper = UnitGetOwner(lp_aH32Viper);
    lv_killingPlayer = UnitGetOwner(libNtve_gf_KillingUnit());

    // Implementation
    SoundPlayOnUnit(SoundLink("diebuzz", -1), PlayerGroupAll(), lp_aH32Viper, 0.0, 100.0, 0.0);
    gv_playerDeaths[lv_aH32Viper] += 1;
    auto2E89FF13_g = gv_players;
    auto2E89FF13_var = -1;
    while (true) {
        auto2E89FF13_var = PlayerGroupNextPlayer(auto2E89FF13_g, auto2E89FF13_var);
        if (auto2E89FF13_var < 0) { break; }
        if ((PlayerStatus(auto2E89FF13_var) == c_playerStatusActive)) {
            PlayerSetAlliance(auto2E89FF13_var, c_allianceIdVision, lv_aH32Viper, true);
        }

    }
    if ((lv_aH32Viper == libNtve_gf_KillingPlayer())) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_aH32Viper), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_aH32Viper, false))) + StringExternal("Param/Value/C9DA4501")));
    }
    else {
        if ((PlayerGroupHasPlayer(gv_players, lv_killingPlayer) == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_aH32Viper), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_aH32Viper, false))) + StringExternal("Param/Value/AC097C04") + TextWithColor(PlayerName(lv_killingPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingPlayer, false)))));
            if ((libNtve_gf_PlayerIsEnemy(lv_killingPlayer, lv_aH32Viper, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                gv_playerkickable[lv_killingPlayer] = true;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/CEF9D3E5") + TextWithColor(PlayerName(lv_killingPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingPlayer, false))) + StringExternal("Param/Value/00552C04")));
                UnitGroupAdd(gv_heroskilledbyplayer[lv_killingPlayer], lp_aH32Viper);
            }

        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_aH32Viper), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_aH32Viper, false))) + StringExternal("Param/Value/11437052")));
        }
    }
}

void gf_StartSpawnLoop (int lp_loop, int lp_loopType) {
    // Automatic Variable Declarations
    int auto9C6F5BDF_val;

    // Implementation
    auto9C6F5BDF_val = lp_loop;
    if (auto9C6F5BDF_val == 1) {
        if ((lp_loopType == 0)) {
            TriggerEnable(gt_UndeadSpawning1, true);
        }
        else if ((lp_loopType == 1)) {
            TriggerEnable(gt_UndeadSpawningOutbreak1, true);
        }
        else if ((lp_loopType == 2)) {
            TriggerEnable(gt_UndeadSpawningOnslaught1, true);
        }
        else if ((lp_loopType == 3)) {
            gv_stopNoviceCommander = false;
                        //if (gv_devingame) { libNtve_gf_DisplayBossBar(46, "Assets\\Textures\\btn-tips-computerterminals.dds", StringToText("T1 - The Beginning"), gv_noviceInvasionPoints, PlayerGroupAll()); libNtve_gf_ShowHideBossBar(true, 46); }
                        TriggerEnable(gt_UndeadSpawning1, true);
                        gv_mod_tier1 = true;
                        gf_InvasionCommanderNovice(gv_noviceInvasionPoints);
        }
        else if ((lp_loopType == 4)) {
            TriggerEnable(gt_GenesisSpawning1, true);
        }
    }
    else if (auto9C6F5BDF_val == 2) {
        if ((lp_loopType == 0)) {
            TriggerEnable(gt_UndeadSpawning2, true);
        }
        else if ((lp_loopType == 1)) {
            TriggerEnable(gt_UndeadSpawningOutbreak2, true);
        }
        else if ((lp_loopType == 2)) {
            TriggerEnable(gt_UndeadSpawningOnslaught2, true);
        }
        else if ((lp_loopType == 3)) {
            gv_stopAdvancedCommander = false;
                        gv_mod_tier1 = true;
                        //if (gv_devingame) { libNtve_gf_DisplayBossBar(47, "Assets\\Textures\\btn-tips-computerterminals.dds", StringToText("T1 - Advanced"), gv_advancedInvasionPoints, PlayerGroupAll()); libNtve_gf_ShowHideBossBar(true, 47); }
                        libNtve_gf_MoveBossBar(46, c_anchorTop, -300, 50);
                        libNtve_gf_MoveBossBar(47, c_anchorTop, 300, 50);
                        TriggerEnable(gt_UndeadSpawning2, true);
                        gf_InvasionCommanderAdvanced(gv_advancedInvasionPoints);
        }
        else if ((lp_loopType == 4)) {
            TriggerEnable(gt_GenesisSpawning2, true);
        }
    }
    else if (auto9C6F5BDF_val == 3) {
        if ((lp_loopType == 0)) {
            TriggerEnable(gt_UndeadSpawning3, true);
        }
        else if ((lp_loopType == 1)) {
            TriggerEnable(gt_UndeadSpawningOutbreak3, true);
        }
        else if ((lp_loopType == 2)) {
            TriggerEnable(gt_UndeadSpawningOnslaught3, true);
        }
        else if ((lp_loopType == 3)) {
            gv_stopMasterCommander = false;
                        gv_mod_tier1 = true;
                        //if (gv_devingame) { libNtve_gf_DisplayBossBar(48, "Assets\\Textures\\btn-tips-computerterminals.dds", StringToText("T1 - Master"), gv_masterInvasionPoints, PlayerGroupAll()); libNtve_gf_ShowHideBossBar(true, 48); }
                        libNtve_gf_MoveBossBar(46, c_anchorTop, -600, 50);
                        libNtve_gf_MoveBossBar(47, c_anchorTop, 0, 50);
                        libNtve_gf_MoveBossBar(48, c_anchorTop, 600, 50);
                        gf_InvasionCommanderMaster(gv_masterInvasionPoints);
                        TriggerEnable(gt_UndeadSpawning3, true);
        }
        else if ((lp_loopType == 4)) {
            TriggerEnable(gt_GenesisSpawning3, true);
        }
    }
    else {
    }
}

void gf_StopSpawnLoop (int lp_loop, int lp_loopType) {
    // Automatic Variable Declarations
    int auto5CED52B0_val;

    // Implementation
    auto5CED52B0_val = lp_loop;
    if (auto5CED52B0_val == 1) {
        if ((lp_loopType == 0)) {
            TriggerEnable(gt_UndeadSpawning1, false);
        }
        else if ((lp_loopType == 1)) {
            TriggerEnable(gt_UndeadSpawningOutbreak1, false);
        }
        else if ((lp_loopType == 2)) {
            TriggerEnable(gt_UndeadSpawningOnslaught1, false);
        }
        else if ((lp_loopType == 3)) {
            gv_stopNoviceCommander = true;
        }
        else if ((lp_loopType == 4)) {
            TriggerEnable(gt_GenesisSpawning1, false);
        }
    }
    else if (auto5CED52B0_val == 2) {
        if ((lp_loopType == 0)) {
            TriggerEnable(gt_UndeadSpawning2, false);
        }
        else if ((lp_loopType == 1)) {
            TriggerEnable(gt_UndeadSpawningOutbreak2, false);
        }
        else if ((lp_loopType == 2)) {
            TriggerEnable(gt_UndeadSpawningOnslaught2, false);
        }
        else if ((lp_loopType == 3)) {
            gv_stopAdvancedCommander = true;
        }
        else if ((lp_loopType == 4)) {
            TriggerEnable(gt_GenesisSpawning2, false);
        }
    }
    else if (auto5CED52B0_val == 3) {
        if ((lp_loopType == 0)) {
            TriggerEnable(gt_UndeadSpawning3, false);
        }
        else if ((lp_loopType == 1)) {
            TriggerEnable(gt_UndeadSpawningOutbreak3, false);
        }
        else if ((lp_loopType == 2)) {
            TriggerEnable(gt_UndeadSpawningOnslaught3, false);
        }
        else if ((lp_loopType == 3)) {
            gv_stopMasterCommander = true;
        }
        else if ((lp_loopType == 4)) {
            TriggerEnable(gt_GenesisSpawning3, false);
        }
    }
    else {
    }
}

trigger auto_gf_SpawnUndead_Trigger = null;
int auto_gf_SpawnUndead_lp_count;
string auto_gf_SpawnUndead_lp_type;
int auto_gf_SpawnUndead_lp_chance;

void gf_SpawnUndead (int lp_count, string lp_type, int lp_chance) {
    auto_gf_SpawnUndead_lp_count = lp_count;
    auto_gf_SpawnUndead_lp_type = lp_type;
    auto_gf_SpawnUndead_lp_chance = lp_chance;

    if (auto_gf_SpawnUndead_Trigger == null) {
        auto_gf_SpawnUndead_Trigger = TriggerCreate("auto_gf_SpawnUndead_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnUndead_Trigger, false, false);
}

bool auto_gf_SpawnUndead_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_gf_SpawnUndead_lp_count;
    string lp_type = auto_gf_SpawnUndead_lp_type;
    int lp_chance = auto_gf_SpawnUndead_lp_chance;

    // Variable Declarations
    int lv_randomTCP;
    unitgroup lv_spawngroup;
    point lv_spawnpoint;
    int lv_currentsupply;

    // Automatic Variable Declarations
    int autoBAC15B88_n;
    int autoBAC15B88_i;
    unitgroup auto571AE22A_g;
    int auto571AE22A_u;
    unit auto571AE22A_var;

    // Variable Initialization
    lv_randomTCP = RandomInt(1, 4);
    lv_spawngroup = UnitGroupEmpty();
    lv_spawnpoint = RegionRandomPoint(gv_spawnRegion);

    // Implementation
    if (((gv_HyperPulseAcc) || (gv_HyperPulseSpawns))) {
        Wait(0.0625, c_timeGame);
    }
    else {
        Wait(1.0, c_timeGame);
    }
    if ((gv_pauseSpawning == true)) {
        return true;
    }
    if ((UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true)) {
        gv_tier1Threads += 1;
    }
    lv_currentsupply = (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) + lp_count);
    if ((RandomInt(1, lp_chance) == 1) && (UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1) && ((lv_currentsupply <= gv_undeadSupplyCap) || (UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true))) {
        if ((UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true)) {
            if ((gv_tCPspawning == true) && (RandomInt(0, 4) >= 2)) {
                lv_spawnpoint = RegionRandomPoint(gv_tCPSpawns[lv_randomTCP]);
                libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 14, lv_spawnpoint);
                UnitGroupAddUnitGroup(gv_tCPhostiles, UnitLastCreatedGroup());
            }
            else {
                lv_spawnpoint = RegionRandomPoint(gv_bossSpawnRegion);
                libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 14, lv_spawnpoint);
            }
        }
        else {
            if (!gv_HyperPulseAcc) { Wait(RandomFixed(0.05, 5.0), c_timeGame); } else { Wait(0.0625, c_timeGame); }
            if ((gv_tCPspawning == true) && (RandomInt(0, 4) >= 2)) {
                lv_spawnpoint = RegionRandomPoint(gv_tCPSpawns[lv_randomTCP]);
                libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 14, lv_spawnpoint);
                UnitGroupAddUnitGroup(gv_tCPhostiles, UnitLastCreatedGroup());
            }
            else {
                autoBAC15B88_n = lp_count;
                for (autoBAC15B88_i = 1; autoBAC15B88_i <= autoBAC15B88_n; autoBAC15B88_i += 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_type, 0, 14, lv_spawnpoint);
                    UnitGroupAdd(lv_spawngroup, UnitLastCreated());
                    Wait(RandomFixed(0.03, 0.1), c_timeGame);
                }
                UnitGroupAddUnitGroup(UnitLastCreatedGroup(), lv_spawngroup);
            }
        }
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        auto571AE22A_g = UnitLastCreatedGroup();
        auto571AE22A_u = UnitGroupCount(auto571AE22A_g, c_unitCountAll);
        for (;; auto571AE22A_u -= 1) {
            auto571AE22A_var = UnitGroupUnitFromEnd(auto571AE22A_g, auto571AE22A_u);
            if (auto571AE22A_var == null) { break; }
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(auto571AE22A_var, "PlayerHandicap", auto571AE22A_var, (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(auto571AE22A_var, "PlayerModifier", auto571AE22A_var, PlayerGroupCount(gv_players));
            }
            if (((gv_gamemode == 13) || ((gv_gamemode > 1) && (gv_gamemode <= 11)))) {
                if ((UnitTypeTestAttribute(UnitGetType(auto571AE22A_var), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(auto571AE22A_var, "DifficultyModifierBoss", auto571AE22A_var, gv_zombieBuffAmount);
                }
                else {
                    UnitBehaviorAdd(auto571AE22A_var, "DifficultyModifier", auto571AE22A_var, gv_zombieBuffAmount);
                }
            }
            else {
                if ((gv_gamemode == 12)) {
                    if ((UnitTypeTestAttribute(UnitGetType(auto571AE22A_var), c_unitAttributeMassive) == true)) {
                        UnitBehaviorAdd(auto571AE22A_var, "DifficultyModifierBoss", auto571AE22A_var, gv_sandboxDifficultyModifier);
                    }
                    else {
                        UnitBehaviorAdd(auto571AE22A_var, "DifficultyModifier", auto571AE22A_var, gv_sandboxDifficultyModifier);
                    }
                }
            }
        }
    }
    if ((UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true)) {
        gv_tier1Threads -= 1;
    }
    return true;
}

void gf_SpawnThanatos () {
    // Variable Declarations
    point lv_spawnpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnpoint = RegionRandomPoint(gv_spawnRegion);

    // Implementation
    while (!((gv_pauseSpawning == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1)) {
        lv_spawnpoint = RegionRandomPoint(gv_bossSpawnRegion);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Thanatos", 0, 14, lv_spawnpoint);
        gv_Thanatos = UnitLastCreated();
        UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), gv_zombieBuffAmount);
        gv_infestationLevel += 2;
    }

}

trigger auto_gf_SpawnUndeadIgnoreSupply_Trigger = null;
int auto_gf_SpawnUndeadIgnoreSupply_lp_count;
string auto_gf_SpawnUndeadIgnoreSupply_lp_type;
int auto_gf_SpawnUndeadIgnoreSupply_lp_chance;

void gf_SpawnUndeadIgnoreSupply (int lp_count, string lp_type, int lp_chance) {
    auto_gf_SpawnUndeadIgnoreSupply_lp_count = lp_count;
    auto_gf_SpawnUndeadIgnoreSupply_lp_type = lp_type;
    auto_gf_SpawnUndeadIgnoreSupply_lp_chance = lp_chance;

    if (auto_gf_SpawnUndeadIgnoreSupply_Trigger == null) {
        auto_gf_SpawnUndeadIgnoreSupply_Trigger = TriggerCreate("auto_gf_SpawnUndeadIgnoreSupply_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnUndeadIgnoreSupply_Trigger, false, false);
}

bool auto_gf_SpawnUndeadIgnoreSupply_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_gf_SpawnUndeadIgnoreSupply_lp_count;
    string lp_type = auto_gf_SpawnUndeadIgnoreSupply_lp_type;
    int lp_chance = auto_gf_SpawnUndeadIgnoreSupply_lp_chance;

    // Variable Declarations
    int lv_randomTCP;
    unitgroup lv_spawngroup;
    point lv_spawnpoint;
    int lv_currentsupply;

    // Automatic Variable Declarations
    int autoD4D074DD_n;
    int autoD4D074DD_i;
    unitgroup auto2E1D99A6_g;
    int auto2E1D99A6_u;
    unit auto2E1D99A6_var;

    // Variable Initialization
    lv_randomTCP = RandomInt(1, 4);
    lv_spawngroup = UnitGroupEmpty();
    lv_spawnpoint = RegionRandomPoint(gv_spawnRegion);

    // Implementation
    Wait(RandomFixed(0.03, 0.1), c_timeGame);
    if ((gv_pauseSpawning == true)) {
        return true;
    }
    lv_currentsupply = (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) + lp_count);
    if ((RandomInt(1, lp_chance) == 1) && (UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1)) {
        Wait(RandomFixed(0.05, 5.0), c_timeGame);
        if ((gv_tCPspawning == true) && (RandomInt(0, 4) >= 2)) {
            lv_spawnpoint = RegionRandomPoint(gv_tCPSpawns[lv_randomTCP]);
            libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 14, lv_spawnpoint);
            UnitGroupAddUnitGroup(gv_tCPhostiles, UnitLastCreatedGroup());
        }
        else {
            autoD4D074DD_n = lp_count;
            for (autoD4D074DD_i = 1; autoD4D074DD_i <= autoD4D074DD_n; autoD4D074DD_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_type, 0, 14, lv_spawnpoint);
                UnitGroupAdd(lv_spawngroup, UnitLastCreated());
                Wait(RandomFixed(0.03, 0.1), c_timeGame);
            }
            UnitGroupAddUnitGroup(UnitLastCreatedGroup(), lv_spawngroup);
        }
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        auto2E1D99A6_g = UnitLastCreatedGroup();
        auto2E1D99A6_u = UnitGroupCount(auto2E1D99A6_g, c_unitCountAll);
        for (;; auto2E1D99A6_u -= 1) {
            auto2E1D99A6_var = UnitGroupUnitFromEnd(auto2E1D99A6_g, auto2E1D99A6_u);
            if (auto2E1D99A6_var == null) { break; }
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(auto2E1D99A6_var, "PlayerHandicap", auto2E1D99A6_var, (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(auto2E1D99A6_var, "PlayerModifier", auto2E1D99A6_var, PlayerGroupCount(gv_players));
            }
            if ((gv_gamemode > 1) && (gv_gamemode <= 11)) {
                if ((UnitTypeTestAttribute(UnitGetType(auto2E1D99A6_var), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(auto2E1D99A6_var, "DifficultyModifierBoss", auto2E1D99A6_var, gv_zombieBuffAmount);
                }
                else {
                    UnitBehaviorAdd(auto2E1D99A6_var, "DifficultyModifier", auto2E1D99A6_var, gv_zombieBuffAmount);
                }
            }
            else {
                if ((gv_gamemode == 12)) {
                    if ((UnitTypeTestAttribute(UnitGetType(auto2E1D99A6_var), c_unitAttributeMassive) == true)) {
                        UnitBehaviorAdd(auto2E1D99A6_var, "DifficultyModifierBoss", auto2E1D99A6_var, gv_sandboxDifficultyModifier);
                    }
                    else {
                        UnitBehaviorAdd(auto2E1D99A6_var, "DifficultyModifier", auto2E1D99A6_var, gv_sandboxDifficultyModifier);
                    }
                }
            }
        }
    }

    return true;
}

void gf_SpawnUndeadImmediate (int lp_count, string lp_type, int lp_chance) {
    // Variable Declarations
    int lv_randomTCP;
    point lv_point;
    region lv_movementregion;
    int lv_currentsupply;

    // Automatic Variable Declarations
    unitgroup auto7D799797_g;
    int auto7D799797_u;
    unit auto7D799797_var;
    const int auto4070CCFB_n = 15;
    int auto4070CCFB_i;
    unitgroup autoB966C570_g;
    int autoB966C570_u;
    unit autoB966C570_var;

    // Variable Initialization
    lv_randomTCP = RandomInt(1, 4);
    lv_movementregion = RegionEmpty();

    // Implementation
    Wait(RandomFixed(0.03, 0.1), c_timeGame);
    if ((gv_pauseSpawning == true)) {
        return ;
    }
    lv_currentsupply = (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) + lp_count);
    if ((RandomInt(1, lp_chance) == 1) && (UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1) && (UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == false) && (lv_currentsupply <= gv_undeadSupplyCap)) {
        lv_movementregion = RegionEmpty();
        auto7D799797_g = gv_undeadTargetGroup;
        auto7D799797_u = UnitGroupCount(auto7D799797_g, c_unitCountAll);
        for (;; auto7D799797_u -= 1) {
            auto7D799797_var = UnitGroupUnitFromEnd(auto7D799797_g, auto7D799797_u);
            if (auto7D799797_var == null) { break; }
            RegionAddCircle(lv_movementregion, true, UnitGetPosition(auto7D799797_var), 40.0);
            RegionAddCircle(lv_movementregion, false, UnitGetPosition(auto7D799797_var), 25.0);
        }
        for (auto4070CCFB_i = 1; auto4070CCFB_i <= auto4070CCFB_n; auto4070CCFB_i += 1) {
            lv_point = RegionRandomPoint(lv_movementregion);
            if ((PointPathingPassable(lv_point) == true) && (RegionContainsPoint(RegionFromId(112), lv_point) == false)) {
                break;
            }

        }
        Wait(RandomFixed(0.05, 5.0), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 14, lv_point);
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", UnitGroupCenterOfGroup(UnitLastCreatedGroup()));
        SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGroupCenterOfGroup(UnitLastCreatedGroup()), 0.0, 100.0, 0.0);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        autoB966C570_g = UnitLastCreatedGroup();
        autoB966C570_u = UnitGroupCount(autoB966C570_g, c_unitCountAll);
        for (;; autoB966C570_u -= 1) {
            autoB966C570_var = UnitGroupUnitFromEnd(autoB966C570_g, autoB966C570_u);
            if (autoB966C570_var == null) { break; }
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(autoB966C570_var, "PlayerHandicap", autoB966C570_var, (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(autoB966C570_var, "PlayerModifier", autoB966C570_var, PlayerGroupCount(gv_players));
            }
            if ((gv_gamemode > 1) && (gv_gamemode <= 11)) {
                if ((UnitTypeTestAttribute(UnitGetType(autoB966C570_var), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(autoB966C570_var, "DifficultyModifierBoss", autoB966C570_var, gv_zombieBuffAmount);
                }
                else {
                    UnitBehaviorAdd(autoB966C570_var, "DifficultyModifier", autoB966C570_var, gv_zombieBuffAmount);
                }
            }
            else {
                if ((gv_gamemode == 12)) {
                    if ((UnitTypeTestAttribute(UnitGetType(autoB966C570_var), c_unitAttributeMassive) == true)) {
                        UnitBehaviorAdd(autoB966C570_var, "DifficultyModifierBoss", autoB966C570_var, gv_sandboxDifficultyModifier);
                    }
                    else {
                        UnitBehaviorAdd(autoB966C570_var, "DifficultyModifier", autoB966C570_var, gv_sandboxDifficultyModifier);
                    }
                }
            }
        }
    }

}

void gf_SpawnUndeadMixed (int lp_chance, string lp_type1, string lp_type2, string lp_type3, int lp_count1, int lp_count2, int lp_count3) {
    // Variable Declarations
    unitgroup lv_mixedgroup1;
    unitgroup lv_mixedgroup2;
    unitgroup lv_mixedgroup3;
    int lv_intloop;
    int lv_randomTCP;
    unitgroup lv_spawngroup;
    point lv_spawnpoint;
    int lv_currentsupply;

    // Automatic Variable Declarations
    int autoF830F47F_n;
    int autoF830F47F_i;
    unitgroup autoDD409ACA_g;
    int autoDD409ACA_u;
    unit autoDD409ACA_var;
    int autoADABDA54_n;
    int autoADABDA54_i;
    unitgroup auto68DD2DA4_g;
    int auto68DD2DA4_u;
    unit auto68DD2DA4_var;
    int auto76BF5076_n;
    int auto76BF5076_i;
    unitgroup auto37B54594_g;
    int auto37B54594_u;
    unit auto37B54594_var;

    // Variable Initialization
    lv_mixedgroup1 = UnitGroupEmpty();
    lv_mixedgroup2 = UnitGroupEmpty();
    lv_mixedgroup3 = UnitGroupEmpty();
    lv_randomTCP = RandomInt(1, 4);
    lv_spawngroup = UnitGroupEmpty();
    lv_spawnpoint = RegionRandomPoint(gv_spawnRegion);

    // Implementation
    Wait(RandomFixed(0.03, 0.1), c_timeGame);
    if ((gv_pauseSpawning == true)) {
        return ;
    }
    lv_currentsupply = (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) + (lp_count1 + lp_count2 + lp_count3));
    if ((RandomInt(1, lp_chance) == 1) && (UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1) && ((lv_currentsupply <= gv_undeadSupplyCap) || (UnitTypeTestAttribute(lp_type1, c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(lp_type2, c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(lp_type3, c_unitAttributeMassive) == true))) {
        autoF830F47F_n = lp_count1;
        for (autoF830F47F_i = 1; autoF830F47F_i <= autoF830F47F_n; autoF830F47F_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_type1, 0, 14, lv_spawnpoint);
            UnitGroupAdd(lv_mixedgroup1, UnitLastCreated());
            Wait(RandomFixed(0.03, 0.1), c_timeGame);
        }
        UnitGroupAddUnitGroup(UnitLastCreatedGroup(), lv_mixedgroup1);
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        UnitGroupIssueOrder(lv_mixedgroup1, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        autoDD409ACA_g = lv_mixedgroup1;
        autoDD409ACA_u = UnitGroupCount(autoDD409ACA_g, c_unitCountAll);
        for (;; autoDD409ACA_u -= 1) {
            autoDD409ACA_var = UnitGroupUnitFromEnd(autoDD409ACA_g, autoDD409ACA_u);
            if (autoDD409ACA_var == null) { break; }
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(autoDD409ACA_var, "PlayerHandicap", autoDD409ACA_var, (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(autoDD409ACA_var, "PlayerModifier", autoDD409ACA_var, PlayerGroupCount(gv_players));
            }
            if ((gv_gamemode > 1) && (gv_gamemode <= 11)) {
                if ((UnitTypeTestAttribute(UnitGetType(autoDD409ACA_var), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(autoDD409ACA_var, "DifficultyModifierBoss", autoDD409ACA_var, gv_zombieBuffAmount);
                }
                else {
                    UnitBehaviorAdd(autoDD409ACA_var, "DifficultyModifier", autoDD409ACA_var, gv_zombieBuffAmount);
                }
            }
            else {
                if ((gv_gamemode == 12)) {
                    if ((UnitTypeTestAttribute(UnitGetType(autoDD409ACA_var), c_unitAttributeMassive) == true)) {
                        UnitBehaviorAdd(autoDD409ACA_var, "DifficultyModifierBoss", autoDD409ACA_var, gv_sandboxDifficultyModifier);
                    }
                    else {
                        UnitBehaviorAdd(autoDD409ACA_var, "DifficultyModifier", autoDD409ACA_var, gv_sandboxDifficultyModifier);
                    }
                }
            }
        }
        autoADABDA54_n = lp_count2;
        for (autoADABDA54_i = 1; autoADABDA54_i <= autoADABDA54_n; autoADABDA54_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_type2, 0, 14, lv_spawnpoint);
            UnitGroupAdd(lv_mixedgroup2, UnitLastCreated());
            Wait(RandomFixed(0.03, 0.1), c_timeGame);
        }
        UnitGroupAddUnitGroup(UnitLastCreatedGroup(), lv_mixedgroup2);
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        UnitGroupIssueOrder(lv_mixedgroup2, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        auto68DD2DA4_g = lv_mixedgroup2;
        auto68DD2DA4_u = UnitGroupCount(auto68DD2DA4_g, c_unitCountAll);
        for (;; auto68DD2DA4_u -= 1) {
            auto68DD2DA4_var = UnitGroupUnitFromEnd(auto68DD2DA4_g, auto68DD2DA4_u);
            if (auto68DD2DA4_var == null) { break; }
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(auto68DD2DA4_var, "PlayerHandicap", auto68DD2DA4_var, (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(auto68DD2DA4_var, "PlayerModifier", auto68DD2DA4_var, PlayerGroupCount(gv_players));
            }
            if ((gv_gamemode > 1) && (gv_gamemode <= 11)) {
                if ((UnitTypeTestAttribute(UnitGetType(auto68DD2DA4_var), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(auto68DD2DA4_var, "DifficultyModifierBoss", auto68DD2DA4_var, gv_zombieBuffAmount);
                }
                else {
                    UnitBehaviorAdd(auto68DD2DA4_var, "DifficultyModifier", auto68DD2DA4_var, gv_zombieBuffAmount);
                }
            }
            else {
                if ((gv_gamemode == 12)) {
                    if ((UnitTypeTestAttribute(UnitGetType(auto68DD2DA4_var), c_unitAttributeMassive) == true)) {
                        UnitBehaviorAdd(auto68DD2DA4_var, "DifficultyModifierBoss", auto68DD2DA4_var, gv_sandboxDifficultyModifier);
                    }
                    else {
                        UnitBehaviorAdd(auto68DD2DA4_var, "DifficultyModifier", auto68DD2DA4_var, gv_sandboxDifficultyModifier);
                    }
                }
            }
        }
        if ((lp_type3 == null)) {
            return ;
        }
        else {
            auto76BF5076_n = lp_count3;
            for (auto76BF5076_i = 1; auto76BF5076_i <= auto76BF5076_n; auto76BF5076_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_type3, 0, 14, lv_spawnpoint);
                UnitGroupAdd(lv_mixedgroup3, UnitLastCreated());
                Wait(RandomFixed(0.03, 0.1), c_timeGame);
            }
            UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(UnitLastCreatedGroup(), lv_mixedgroup3);
        }
        UnitGroupIssueOrder(lv_mixedgroup3, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        auto37B54594_g = lv_mixedgroup3;
        auto37B54594_u = UnitGroupCount(auto37B54594_g, c_unitCountAll);
        for (;; auto37B54594_u -= 1) {
            auto37B54594_var = UnitGroupUnitFromEnd(auto37B54594_g, auto37B54594_u);
            if (auto37B54594_var == null) { break; }
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(auto37B54594_var, "PlayerHandicap", auto37B54594_var, (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(auto37B54594_var, "PlayerModifier", auto37B54594_var, PlayerGroupCount(gv_players));
            }
            if ((gv_gamemode > 1) && (gv_gamemode <= 11)) {
                if ((UnitTypeTestAttribute(UnitGetType(auto37B54594_var), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(auto37B54594_var, "DifficultyModifierBoss", auto37B54594_var, gv_zombieBuffAmount);
                }
                else {
                    UnitBehaviorAdd(auto37B54594_var, "DifficultyModifier", auto37B54594_var, gv_zombieBuffAmount);
                }
            }
            else {
                if ((gv_gamemode == 12)) {
                    if ((UnitTypeTestAttribute(UnitGetType(auto37B54594_var), c_unitAttributeMassive) == true)) {
                        UnitBehaviorAdd(auto37B54594_var, "DifficultyModifierBoss", auto37B54594_var, gv_sandboxDifficultyModifier);
                    }
                    else {
                        UnitBehaviorAdd(auto37B54594_var, "DifficultyModifier", auto37B54594_var, gv_sandboxDifficultyModifier);
                    }
                }
            }
        }
    }

}

void gf_SpawnUndeadMutated (int lp_count, string lp_type, int lp_add, string lp_mutation, int lp_chance) {
    // Variable Declarations
    int lv_randomTCP;
    unitgroup lv_spawngroup;
    point lv_spawnpoint;
    int lv_currentsupply;

    // Automatic Variable Declarations
    unitgroup autoEF04B041_g;
    int autoEF04B041_u;
    unit autoEF04B041_var;

    // Variable Initialization
    lv_randomTCP = RandomInt(1, 4);
    lv_spawngroup = UnitGroupEmpty();
    lv_spawnpoint = RegionRandomPoint(gv_spawnRegion);

    // Implementation
    Wait(RandomFixed(0.03, 0.1), c_timeGame);
    if ((gv_pauseSpawning == true)) {
        return ;
    }
    lv_currentsupply = (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) + lp_count);
    if ((RandomInt(1, lp_chance) == 1) && (UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1) && ((lv_currentsupply <= gv_undeadSupplyCap) || (UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true))) {
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        autoEF04B041_g = UnitLastCreatedGroup();
        autoEF04B041_u = UnitGroupCount(autoEF04B041_g, c_unitCountAll);
        for (;; autoEF04B041_u -= 1) {
            autoEF04B041_var = UnitGroupUnitFromEnd(autoEF04B041_g, autoEF04B041_u);
            if (autoEF04B041_var == null) { break; }
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(autoEF04B041_var, "PlayerHandicap", autoEF04B041_var, (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(autoEF04B041_var, "PlayerModifier", autoEF04B041_var, PlayerGroupCount(gv_players));
            }
            if ((gv_gamemode > 1) && (gv_gamemode <= 11)) {
                if ((UnitTypeTestAttribute(UnitGetType(autoEF04B041_var), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(autoEF04B041_var, "DifficultyModifierBoss", autoEF04B041_var, gv_zombieBuffAmount);
                }
                else {
                    UnitBehaviorAdd(autoEF04B041_var, "DifficultyModifier", autoEF04B041_var, gv_zombieBuffAmount);
                }
            }
            else {
                if ((gv_gamemode == 12)) {
                    if ((UnitTypeTestAttribute(UnitGetType(autoEF04B041_var), c_unitAttributeMassive) == true)) {
                        UnitBehaviorAdd(autoEF04B041_var, "DifficultyModifierBoss", autoEF04B041_var, gv_sandboxDifficultyModifier);
                    }
                    else {
                        UnitBehaviorAdd(autoEF04B041_var, "DifficultyModifier", autoEF04B041_var, gv_sandboxDifficultyModifier);
                    }
                }
            }
        }
    }

}

trigger auto_gf_SpawnUndeadInRegion_Trigger = null;
string auto_gf_SpawnUndeadInRegion_lp_type;
int auto_gf_SpawnUndeadInRegion_lp_count;
region auto_gf_SpawnUndeadInRegion_lp_region;
int auto_gf_SpawnUndeadInRegion_lp_supplycap;

void gf_SpawnUndeadInRegion (string lp_type, int lp_count, region lp_region, int lp_supplycap) {
    auto_gf_SpawnUndeadInRegion_lp_type = lp_type;
    auto_gf_SpawnUndeadInRegion_lp_count = lp_count;
    auto_gf_SpawnUndeadInRegion_lp_region = lp_region;
    auto_gf_SpawnUndeadInRegion_lp_supplycap = lp_supplycap;

    if (auto_gf_SpawnUndeadInRegion_Trigger == null) {
        auto_gf_SpawnUndeadInRegion_Trigger = TriggerCreate("auto_gf_SpawnUndeadInRegion_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnUndeadInRegion_Trigger, false, false);
}

bool auto_gf_SpawnUndeadInRegion_TriggerFunc (bool testConds, bool runActions) {
    string lp_type = auto_gf_SpawnUndeadInRegion_lp_type;
    int lp_count = auto_gf_SpawnUndeadInRegion_lp_count;
    region lp_region = auto_gf_SpawnUndeadInRegion_lp_region;
    int lp_supplycap = auto_gf_SpawnUndeadInRegion_lp_supplycap;

    // Variable Declarations
    unitgroup lv_spawngroup;
    int lv_satanspawns;
    int lv_currentsupply;

    // Automatic Variable Declarations
    int autoDE58A6BF_n;
    int autoDE58A6BF_i;
    unitgroup auto65DCBD06_g;
    int auto65DCBD06_u;
    unit auto65DCBD06_var;

    // Variable Initialization
    lv_spawngroup = UnitGroupEmpty();

    // Implementation
    Wait(RandomFixed(0.03, 0.1), c_timeGame);
    if ((gv_pauseSpawning == true)) {
        return true;
    }
    lv_currentsupply = (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) + lp_count);
    if ((lp_supplycap == 0)) {
        lv_satanspawns = 666;
    }
    if ((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1) && ((lv_satanspawns == 666) || (lv_currentsupply <= gv_undeadSupplyCap) || (UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true))) {
        autoDE58A6BF_n = lp_count;
        for (autoDE58A6BF_i = 1; autoDE58A6BF_i <= autoDE58A6BF_n; autoDE58A6BF_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_type, 0, 14, RegionRandomPoint(lp_region));
            UnitGroupAdd(lv_spawngroup, UnitLastCreated());
            Wait(RandomFixed(0.03, 0.1), c_timeGame);
        }
        UnitGroupAddUnitGroup(gv_undeadGroup, lv_spawngroup);
        UnitGroupIssueOrder(lv_spawngroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        auto65DCBD06_g = lv_spawngroup;
        auto65DCBD06_u = UnitGroupCount(auto65DCBD06_g, c_unitCountAll);
        for (;; auto65DCBD06_u -= 1) {
            auto65DCBD06_var = UnitGroupUnitFromEnd(auto65DCBD06_g, auto65DCBD06_u);
            if (auto65DCBD06_var == null) { break; }
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(auto65DCBD06_var, "PlayerHandicap", auto65DCBD06_var, (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(auto65DCBD06_var, "PlayerModifier", auto65DCBD06_var, PlayerGroupCount(gv_players));
            }
            if ((gv_gamemode > 1) && (gv_gamemode <= 11)) {
                if ((UnitTypeTestAttribute(UnitGetType(auto65DCBD06_var), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(auto65DCBD06_var, "DifficultyModifierBoss", auto65DCBD06_var, gv_zombieBuffAmount);
                }
                else {
                    UnitBehaviorAdd(auto65DCBD06_var, "DifficultyModifier", auto65DCBD06_var, gv_zombieBuffAmount);
                }
            }
            else {
                if ((gv_gamemode == 12)) {
                    if ((UnitTypeTestAttribute(UnitGetType(auto65DCBD06_var), c_unitAttributeMassive) == true)) {
                        UnitBehaviorAdd(auto65DCBD06_var, "DifficultyModifierBoss", auto65DCBD06_var, gv_sandboxDifficultyModifier);
                    }
                    else {
                        UnitBehaviorAdd(auto65DCBD06_var, "DifficultyModifier", auto65DCBD06_var, gv_sandboxDifficultyModifier);
                    }
                }
            }
        }
        lv_spawngroup = null;
    }
    return true;
}

trigger auto_gf_SpawnUndeadInRegionUseForNestedLoops_Trigger = null;
string auto_gf_SpawnUndeadInRegionUseForNestedLoops_lp_type;
int auto_gf_SpawnUndeadInRegionUseForNestedLoops_lp_count;
region auto_gf_SpawnUndeadInRegionUseForNestedLoops_lp_region;
int auto_gf_SpawnUndeadInRegionUseForNestedLoops_lp_supplycap;

void gf_SpawnUndeadInRegionUseForNestedLoops (string lp_type, int lp_count, region lp_region, int lp_supplycap) {
    auto_gf_SpawnUndeadInRegionUseForNestedLoops_lp_type = lp_type;
    auto_gf_SpawnUndeadInRegionUseForNestedLoops_lp_count = lp_count;
    auto_gf_SpawnUndeadInRegionUseForNestedLoops_lp_region = lp_region;
    auto_gf_SpawnUndeadInRegionUseForNestedLoops_lp_supplycap = lp_supplycap;

    if (auto_gf_SpawnUndeadInRegionUseForNestedLoops_Trigger == null) {
        auto_gf_SpawnUndeadInRegionUseForNestedLoops_Trigger = TriggerCreate("auto_gf_SpawnUndeadInRegionUseForNestedLoops_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnUndeadInRegionUseForNestedLoops_Trigger, false, false);
}

bool auto_gf_SpawnUndeadInRegionUseForNestedLoops_TriggerFunc (bool testConds, bool runActions) {
    string lp_type = auto_gf_SpawnUndeadInRegionUseForNestedLoops_lp_type;
    int lp_count = auto_gf_SpawnUndeadInRegionUseForNestedLoops_lp_count;
    region lp_region = auto_gf_SpawnUndeadInRegionUseForNestedLoops_lp_region;
    int lp_supplycap = auto_gf_SpawnUndeadInRegionUseForNestedLoops_lp_supplycap;

    // Variable Declarations
    unitgroup lv_spawngroup;
    int lv_satanspawns;
    int lv_currentsupply;

    // Automatic Variable Declarations
    int autoF8CBC6A6_n;
    int autoF8CBC6A6_i;
    unitgroup autoC460CB9E_g;
    int autoC460CB9E_u;
    unit autoC460CB9E_var;

    // Variable Initialization
    lv_spawngroup = UnitGroupEmpty();

    // Implementation
    Wait(RandomFixed(0.03, 0.1), c_timeGame);
    if ((gv_pauseSpawning == true)) {
        return true;
    }
    lv_currentsupply = (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) + lp_count);
    if ((lp_supplycap == 0)) {
        lv_satanspawns = 666;
    }
    if ((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1) && ((lv_satanspawns == 666) || (lv_currentsupply <= gv_undeadSupplyCap) || (UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true))) {
        autoF8CBC6A6_n = lp_count;
        for (autoF8CBC6A6_i = 1; autoF8CBC6A6_i <= autoF8CBC6A6_n; autoF8CBC6A6_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_type, 0, 14, RegionRandomPoint(lp_region));
            UnitGroupAdd(lv_spawngroup, UnitLastCreated());
            Wait(RandomFixed(0.03, 0.1), c_timeGame);
        }
        UnitGroupAddUnitGroup(UnitLastCreatedGroup(), lv_spawngroup);
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        autoC460CB9E_g = UnitLastCreatedGroup();
        autoC460CB9E_u = UnitGroupCount(autoC460CB9E_g, c_unitCountAll);
        for (;; autoC460CB9E_u -= 1) {
            autoC460CB9E_var = UnitGroupUnitFromEnd(autoC460CB9E_g, autoC460CB9E_u);
            if (autoC460CB9E_var == null) { break; }
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(autoC460CB9E_var, "PlayerHandicap", autoC460CB9E_var, (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(autoC460CB9E_var, "PlayerModifier", autoC460CB9E_var, PlayerGroupCount(gv_players));
            }
            if ((gv_gamemode > 1) && (gv_gamemode <= 11)) {
                if ((UnitTypeTestAttribute(UnitGetType(autoC460CB9E_var), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(autoC460CB9E_var, "DifficultyModifierBoss", autoC460CB9E_var, gv_zombieBuffAmount);
                }
                else {
                    UnitBehaviorAdd(autoC460CB9E_var, "DifficultyModifier", autoC460CB9E_var, gv_zombieBuffAmount);
                }
            }
            else {
                if ((gv_gamemode == 12)) {
                    if ((UnitTypeTestAttribute(UnitGetType(autoC460CB9E_var), c_unitAttributeMassive) == true)) {
                        UnitBehaviorAdd(autoC460CB9E_var, "DifficultyModifierBoss", autoC460CB9E_var, gv_sandboxDifficultyModifier);
                    }
                    else {
                        UnitBehaviorAdd(autoC460CB9E_var, "DifficultyModifier", autoC460CB9E_var, gv_sandboxDifficultyModifier);
                    }
                }
            }
        }
    }
    return true;
}

trigger auto_gf_CommanderBonusPoints_Trigger = null;

void gf_CommanderBonusPoints () {
    if (auto_gf_CommanderBonusPoints_Trigger == null) {
        auto_gf_CommanderBonusPoints_Trigger = TriggerCreate("auto_gf_CommanderBonusPoints_TriggerFunc");
    }

    TriggerExecute(auto_gf_CommanderBonusPoints_Trigger, false, false);
}

bool auto_gf_CommanderBonusPoints_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_gamemode >= 2)) {
        gv_masterInvasionPoints += 1;
    }
    if ((gv_gamemode >= 6)) {
        gv_noviceInvasionPoints += 1;
        gv_advancedInvasionPoints += 1;
        gv_masterInvasionPoints += 1;
    }
    if ((gv_gamemode >= 3) && (gv_gamemode <= 6)) {
        gv_noviceInvasionPoints += 2;
        gv_advancedInvasionPoints += 2;
        gv_masterInvasionPoints += 2;
    }
    if ((gv_gamemode == 5)) {
        gv_noviceInvasionPoints += 3;
        gv_advancedInvasionPoints += 3;
        gv_masterInvasionPoints += 3;
    }
    if ((gv_averageXP >= 250000)) {
        gv_noviceInvasionPoints += 1;
        gv_advancedInvasionPoints += 1;
        gv_masterInvasionPoints += 1;
    }
    if ((gv_averageXP >= 500000)) {
        gv_noviceInvasionPoints += 1;
        gv_advancedInvasionPoints += 1;
        gv_masterInvasionPoints += 1;
    }
    return true;
}

trigger auto_gf_InvasionCommanderNovice_Trigger = null;
int auto_gf_InvasionCommanderNovice_lp_invasionPoints;

void gf_InvasionCommanderNovice (int lp_invasionPoints) {
    auto_gf_InvasionCommanderNovice_lp_invasionPoints = lp_invasionPoints;

    if (auto_gf_InvasionCommanderNovice_Trigger == null) {
        auto_gf_InvasionCommanderNovice_Trigger = TriggerCreate("auto_gf_InvasionCommanderNovice_TriggerFunc");
    }

    TriggerExecute(auto_gf_InvasionCommanderNovice_Trigger, false, false);
}

bool auto_gf_InvasionCommanderNovice_TriggerFunc (bool testConds, bool runActions) {
    int lp_invasionPoints = auto_gf_InvasionCommanderNovice_lp_invasionPoints;

    // Variable Declarations
    int lv_randomInteger;

    // Automatic Variable Declarations
    int auto9C8D5ECA_val;
    int auto3315D994_val;
    int autoFF4F5C55_val;
    int auto03935A89_val;

    // Variable Initialization

    // Implementation
    if ((gv_gameOver == false) && (gv_stopNoviceCommander == false)) {
        if ((lp_invasionPoints == 10) && (RandomInt(1, 16) == 5)) {
            if ((RandomInt(0, 1) == 0)) {
                gf_SpawnUndead(1, "Ares", 1);
            }
            else {
                gf_SpawnUndead(1, "Minerva", 1);
            }
            lp_invasionPoints -= 10;

        }
        else if ((lp_invasionPoints >= 5) && (RandomInt(1, 8) == 7)) {
            lv_randomInteger = RandomInt(0, 2);
            auto9C8D5ECA_val = lv_randomInteger;
            if (auto9C8D5ECA_val == 0) {
                gf_SpawnUndead(5, "Cursed", 1);
            }
            else if (auto9C8D5ECA_val == 1) {
                gf_SpawnUndead(1, "Gargantuan", 1);
            }
            else if (auto9C8D5ECA_val == 2) {
                gf_SpawnUndead(1, "Metasis", 1);
            }
            else {
                gf_SpawnUndead(1, "Gargantuan", 1);
            }
            lp_invasionPoints -= 5;

        }
        else if ((lp_invasionPoints >= 3) && (RandomInt(1, 4) == 2)) {
            lv_randomInteger = RandomInt(0, 3);
            auto3315D994_val = lv_randomInteger;
            if (auto3315D994_val == 0) {
                gf_SpawnUndead(1, "Immussilus", 1);
            }
            else if (auto3315D994_val == 1) {
                gf_SpawnUndead(2, "Gourmand", 1);
            }
            else if (auto3315D994_val == 2) {
                gf_SpawnUndead(1, "Lacerti", 1);
                gf_SpawnUndead(3, "Hunter", 1);
            }
            else if (auto3315D994_val == 3) {
                gf_SpawnUndead(1, "Lacerti", 1);
                gf_SpawnUndead(2, "ZombieYeti", 1);
            }
            else {
                gf_SpawnUndead(2, "Gourmand", 1);
            }
            lp_invasionPoints -= 3;

        }
        else if ((lp_invasionPoints >= 2) && (RandomInt(1, 2) == 1)) {
            lv_randomInteger = RandomInt(0, 3);
            autoFF4F5C55_val = lv_randomInteger;
            if (autoFF4F5C55_val == 0) {
                gf_SpawnUndead(2, "Raisuli", 1);
            }
            else if (autoFF4F5C55_val == 1) {
                gf_SpawnUndead(1, "Gourmand", 1);
            }
            else if (autoFF4F5C55_val == 2) {
                gf_SpawnUndead(1, "Lacerti", 1);
            }
            else if (autoFF4F5C55_val == 3) {
                gf_SpawnUndead(2, "Cursed", 1);
            }
            else {
                gf_SpawnUndead(2, "Raisuli", 1);
            }
            lp_invasionPoints -= 2;

        }
        else if ((lp_invasionPoints >= 1)) {
            lv_randomInteger = RandomInt(0, 5);
            auto03935A89_val = lv_randomInteger;
            if (auto03935A89_val == 0) {
                gf_SpawnUndead(1, "Raisuli", 1);
            }
            else if (auto03935A89_val == 1) {
                gf_SpawnUndead(2, "ZombieYeti", 1);
            }
            else if (auto03935A89_val == 2) {
                gf_SpawnUndead(3, "Hunter", 1);
            }
            else if (auto03935A89_val == 3) {
                gf_SpawnUndead(1, "Dilophosaur", 1);
            }
            else if (auto03935A89_val == 4) {
            }
            else if (auto03935A89_val == 5) {
            }
            else {
                gf_SpawnUndead(1, "Raisuli", 1);
            }
            lp_invasionPoints -= 1;
        }
        if ((lp_invasionPoints >= 1)) {
            if (gv_Tier1ModuleDisableSelfRespawn) { return true; }
            if (false)//(gv_devingame)
                        {
                            libNtve_gv__BB_Title[46] = StringToText("T1 - Novice Spawn " + "Processing" + "...");
                            libNtve_gf_SetBossBarCurrentValue(46, lp_invasionPoints, true);
                        }
                        if (!gv_HyperPulseT1Acc)
                        {
                            Wait(10.0, c_timeGame);
                        }
                        else
                        {
                            Wait(2.1, c_timeGame);
                        }
            gf_InvasionCommanderNovice(lp_invasionPoints);
        }
        else {
            if (false)//(gv_devingame)
                        {
                            libNtve_gf_SetBossBarCurrentValue(46, 0, true);
                            libNtve_gv__BB_Title[46] = StringToText("T1 - Novice Spawn " + "Cool Down" + "...");
                            libNtve_gf_SetBossBarMaximumValue(46, 130, false);
                            DialogSetTransparency(libNtve_gv__BB_Dialog[46], 60.0);
                        }
                        for (lv_randomInteger = 0; lv_randomInteger <= 120; lv_randomInteger += 1)
                        {
                            //if (gv_devingame) { libNtve_gf_SetBossBarCurrentValue(46, lv_randomInteger, true); }
                            if (!gv_HyperPulseT1Acc)
                            {
                                Wait(1.0, c_timeGame);
                            }
                            else
                            {
                                Wait(0.7, c_timeGame);
                            }
                        }
                        if (false)//(gv_devingame)
                        {
                            gf_TwinkleProgressBar(libNtve_gv__BB_Dialog[46]);
                            libNtve_gf_SetBossBarMaximumValue(46, gv_noviceInvasionPoints, false);
                        }
            gf_InvasionCommanderNovice(gv_noviceInvasionPoints);
        }
    }
    return true;
}

trigger auto_gf_InvasionCommanderAdvanced_Trigger = null;
int auto_gf_InvasionCommanderAdvanced_lp_invasionPoints;

void gf_InvasionCommanderAdvanced (int lp_invasionPoints) {
    auto_gf_InvasionCommanderAdvanced_lp_invasionPoints = lp_invasionPoints;

    if (auto_gf_InvasionCommanderAdvanced_Trigger == null) {
        auto_gf_InvasionCommanderAdvanced_Trigger = TriggerCreate("auto_gf_InvasionCommanderAdvanced_TriggerFunc");
    }

    TriggerExecute(auto_gf_InvasionCommanderAdvanced_Trigger, false, false);
}

bool auto_gf_InvasionCommanderAdvanced_TriggerFunc (bool testConds, bool runActions) {
    int lp_invasionPoints = auto_gf_InvasionCommanderAdvanced_lp_invasionPoints;

    // Variable Declarations
    int lv_randomInteger;

    // Automatic Variable Declarations
    int auto5F44E4AE_val;
    int auto8052172B_val;
    int auto93F3FFDA_val;
    int autoF68C0535_val;
    int auto75EBB270_val;

    // Variable Initialization

    // Implementation
    if ((gv_gameOver == false) && (gv_stopAdvancedCommander == false)) {
        if ((lp_invasionPoints >= 15) && (RandomInt(1, 16) == 11)) {
            lv_randomInteger = RandomInt(0, 2);
            auto5F44E4AE_val = lv_randomInteger;
            if (auto5F44E4AE_val == 0) {
                gf_SpawnUndead(1, "Arachnathid", 1);
                gf_SpawnUndead(1, "Arachnathid", 1);
                gf_SpawnUndead(1, "Immussilus", 1);
                gf_SpawnUndead(1, "Gargantuan", 1);
            }
            else if (auto5F44E4AE_val == 1) {
                gf_SpawnUndead(1, "Darreus", 1);
                gf_SpawnUndead(1, "Metasis", 1);
                gf_SpawnUndead(1, "Gourmand", 1);
                gf_SpawnUndead(1, "Gourmand", 1);
            }
            else if (auto5F44E4AE_val == 2) {
                gf_SpawnUndead(1, "ThresherMaw", 1);
                gf_SpawnUndead(1, "ThresherMaw", 1);
                gf_SpawnUndead(1, "Dilophosaur", 1);
                gf_SpawnUndead(1, "Dilophosaur", 1);
            }
            else {
                gf_SpawnUndead(1, "Darreus", 1);
            }
            lp_invasionPoints -= 15;

        }
        else if ((lp_invasionPoints >= 5) && (RandomInt(1, 8) == 6)) {
            lv_randomInteger = RandomInt(0, 2);
            auto8052172B_val = lv_randomInteger;
            if (auto8052172B_val == 0) {
                gf_SpawnUndead(5, "Cursed", 1);
            }
            else if (auto8052172B_val == 1) {
                gf_SpawnUndead(1, "Gargantuan", 1);
            }
            else if (auto8052172B_val == 2) {
                gf_SpawnUndead(1, "Metasis", 1);
            }
            else {
                gf_SpawnUndead(1, "Gargantuan", 1);
            }
            lp_invasionPoints -= 5;

        }
        else if ((lp_invasionPoints >= 3) && (RandomInt(1, 4) == 2)) {
            lv_randomInteger = RandomInt(0, 3);
            auto93F3FFDA_val = lv_randomInteger;
            if (auto93F3FFDA_val == 0) {
                gf_SpawnUndead(1, "Immussilus", 1);
            }
            else if (auto93F3FFDA_val == 1) {
                gf_SpawnUndead(2, "Gourmand", 1);
            }
            else if (auto93F3FFDA_val == 2) {
                gf_SpawnUndead(1, "Lacerti", 1);
                gf_SpawnUndead(3, "Hunter", 1);
            }
            else if (auto93F3FFDA_val == 3) {
                gf_SpawnUndead(1, "Lacerti", 1);
                gf_SpawnUndead(2, "ZombieYeti", 1);
            }
            else {
                gf_SpawnUndead(2, "Gourmand", 1);
            }
            lp_invasionPoints -= 3;

        }
        else if ((lp_invasionPoints >= 2) && (RandomInt(1, 2) == 1)) {
            lv_randomInteger = RandomInt(0, 3);
            autoF68C0535_val = lv_randomInteger;
            if (autoF68C0535_val == 0) {
                gf_SpawnUndead(2, "Raisuli", 1);
            }
            else if (autoF68C0535_val == 1) {
                gf_SpawnUndead(1, "Gourmand", 1);
            }
            else if (autoF68C0535_val == 2) {
                gf_SpawnUndead(1, "Lacerti", 1);
            }
            else if (autoF68C0535_val == 3) {
                gf_SpawnUndead(2, "Cursed", 1);
            }
            else {
                gf_SpawnUndead(2, "Raisuli", 1);
            }
            lp_invasionPoints -= 2;

        }
        else if ((lp_invasionPoints >= 1)) {
            lv_randomInteger = RandomInt(0, 5);
            auto75EBB270_val = lv_randomInteger;
            if (auto75EBB270_val == 0) {
                gf_SpawnUndead(1, "Raisuli", 1);
            }
            else if (auto75EBB270_val == 1) {
                gf_SpawnUndead(2, "ZombieYeti", 1);
            }
            else if (auto75EBB270_val == 2) {
                gf_SpawnUndead(3, "Hunter", 1);
            }
            else if (auto75EBB270_val == 3) {
                gf_SpawnUndead(1, "Dilophosaur", 1);
            }
            else if (auto75EBB270_val == 4) {
                gf_SpawnUndead(3, "Hunter", 1);
            }
            else if (auto75EBB270_val == 5) {
                gf_SpawnUndead(2, "ZombieYeti", 1);
            }
            else {
                gf_SpawnUndead(1, "Raisuli", 1);
            }
            lp_invasionPoints -= 1;
        }
        if ((lp_invasionPoints >= 1)) {
            if (gv_Tier1ModuleDisableSelfRespawn) { return true; }
            if (false)//(gv_devingame)
                        {
                            libNtve_gv__BB_Title[47] = StringToText("T1 - Advanced Spawn " + "Processing" + "...");
                            libNtve_gf_SetBossBarCurrentValue(47, lp_invasionPoints, true);
                        }
                        if (!gv_HyperPulseT1Acc)
                        {
                            Wait(12.5, c_timeGame);
                        }
                        else
                        {
                            Wait(2.5, c_timeGame);
                        }
            gf_InvasionCommanderAdvanced(lp_invasionPoints);
        }
        else {
            if (false)//(gv_devingame)
                        {
                            libNtve_gf_SetBossBarCurrentValue(47, 0, true);
                            libNtve_gv__BB_Title[47] = StringToText("T1 - Advanced Spawn " + "Cool Down" + "...");
                            libNtve_gf_SetBossBarMaximumValue(47, 225, false);
                            DialogSetTransparency(libNtve_gv__BB_Dialog[47], 60.0);
                        }
                        for (lv_randomInteger = 0; lv_randomInteger <= 210; lv_randomInteger += 1)
                        {
                            //if (gv_devingame) { libNtve_gf_SetBossBarCurrentValue(47, lv_randomInteger, true); }
                            if (!gv_HyperPulseT1Acc)
                            {
                                Wait(1.0, c_timeGame);
                            }
                            else
                            {
                                Wait(0.7, c_timeGame);
                            }
                        }
                        if (false)//(gv_devingame)
                        {
                            gf_TwinkleProgressBar(libNtve_gv__BB_Dialog[47]);
                            libNtve_gf_SetBossBarMaximumValue(47, gv_advancedInvasionPoints, false);
                        }
            gf_InvasionCommanderAdvanced(gv_advancedInvasionPoints);
        }
    }
    return true;
}

trigger auto_gf_InvasionCommanderMaster_Trigger = null;
int auto_gf_InvasionCommanderMaster_lp_invasionPoints;

void gf_InvasionCommanderMaster (int lp_invasionPoints) {
    auto_gf_InvasionCommanderMaster_lp_invasionPoints = lp_invasionPoints;

    if (auto_gf_InvasionCommanderMaster_Trigger == null) {
        auto_gf_InvasionCommanderMaster_Trigger = TriggerCreate("auto_gf_InvasionCommanderMaster_TriggerFunc");
    }

    TriggerExecute(auto_gf_InvasionCommanderMaster_Trigger, false, false);
}

bool auto_gf_InvasionCommanderMaster_TriggerFunc (bool testConds, bool runActions) {
    int lp_invasionPoints = auto_gf_InvasionCommanderMaster_lp_invasionPoints;

    // Variable Declarations
    int lv_randomInteger;

    // Automatic Variable Declarations
    int auto6FE170CD_val;
    int auto7F8254CD_val;
    int autoFB6839D2_val;
    int autoE4084EFD_val;
    int auto11C0C444_val;
    int auto7824EA3E_val;

    // Variable Initialization

    // Implementation
    if ((gv_gameOver == false) && (gv_stopMasterCommander == false)) {
        if ((lp_invasionPoints == 20) && (RandomInt(1, 32) == 24)) {
            lv_randomInteger = RandomInt(0, 2);
            auto6FE170CD_val = lv_randomInteger;
            if (auto6FE170CD_val == 0) {
                gf_SpawnUndead(1, "Darreus", 1);
                gf_SpawnUndead(1, "Grotesque", 1);
                gf_SpawnUndead(1, "Arachnathid", 1);
            }
            else if (auto6FE170CD_val == 1) {
                gf_SpawnUndead(1, "Livid", 1);
                gf_SpawnUndead(1, "Ares", 1);
                gf_SpawnUndead(1, "Minerva", 1);
            }
            else if (auto6FE170CD_val == 2) {
                gf_SpawnUndead(1, "Arachnathid", 1);
                gf_SpawnUndead(1, "ThresherMaw", 1);
                gf_SpawnUndead(1, "ThresherMaw", 1);
                gf_SpawnUndead(2, "Gourmand", 1);
            }
            else {
                gf_SpawnUndead(2, "Darreus", 1);
            }
            lp_invasionPoints -= 25;

        }
        else if ((lp_invasionPoints >= 10) && (RandomInt(1, 16) == 9)) {
            lv_randomInteger = RandomInt(0, 2);
            auto7F8254CD_val = lv_randomInteger;
            if (auto7F8254CD_val == 0) {
                gf_SpawnUndead(1, "Ares", 1);
                gf_SpawnUndead(3, "Hunter", 1);
                gf_SpawnUndead(3, "Hunter", 1);
            }
            else if (auto7F8254CD_val == 1) {
                gf_SpawnUndead(2, "Minerva", 1);
                gf_SpawnUndead(2, "ZombieYeti", 1);
                gf_SpawnUndead(2, "ZombieYeti", 1);
            }
            else if (auto7F8254CD_val == 2) {
                gf_SpawnUndead(1, "Grotesque", 1);
                gf_SpawnUndead(1, "Gourmand", 1);
                gf_SpawnUndead(1, "Gourmand", 1);
            }
            else {
                gf_SpawnUndead(2, "Metasis", 1);
            }
            lp_invasionPoints -= 10;

        }
        else if ((lp_invasionPoints >= 5) && (RandomInt(1, 8) == 6)) {
            lv_randomInteger = RandomInt(0, 2);
            autoFB6839D2_val = lv_randomInteger;
            if (autoFB6839D2_val == 0) {
                gf_SpawnUndead(5, "Cursed", 1);
            }
            else if (autoFB6839D2_val == 1) {
                gf_SpawnUndead(1, "Gargantuan", 1);
            }
            else if (autoFB6839D2_val == 2) {
                gf_SpawnUndead(1, "Metasis", 1);
            }
            else {
                gf_SpawnUndead(1, "Gargantuan", 1);
            }
            lp_invasionPoints -= 5;

        }
        else if ((lp_invasionPoints >= 3) && (RandomInt(1, 4) == 2)) {
            lv_randomInteger = RandomInt(0, 3);
            autoE4084EFD_val = lv_randomInteger;
            if (autoE4084EFD_val == 0) {
                gf_SpawnUndead(1, "Immussilus", 1);
            }
            else if (autoE4084EFD_val == 1) {
                gf_SpawnUndead(2, "Gourmand", 1);
            }
            else if (autoE4084EFD_val == 2) {
                gf_SpawnUndead(1, "Lacerti", 1);
                gf_SpawnUndead(3, "Hunter", 1);
            }
            else if (autoE4084EFD_val == 3) {
                gf_SpawnUndead(1, "Lacerti", 1);
                gf_SpawnUndead(2, "ZombieYeti", 1);
            }
            else {
                gf_SpawnUndead(2, "Gourmand", 1);
            }
            lp_invasionPoints -= 3;

        }
        else if ((lp_invasionPoints >= 2) && (RandomInt(1, 2) == 1)) {
            lv_randomInteger = RandomInt(0, 3);
            auto11C0C444_val = lv_randomInteger;
            if (auto11C0C444_val == 0) {
                gf_SpawnUndead(2, "Raisuli", 1);
            }
            else if (auto11C0C444_val == 1) {
                gf_SpawnUndead(1, "Gourmand", 1);
            }
            else if (auto11C0C444_val == 2) {
                gf_SpawnUndead(1, "Lacerti", 1);
            }
            else if (auto11C0C444_val == 3) {
                gf_SpawnUndead(2, "Cursed", 1);
            }
            else {
                gf_SpawnUndead(2, "Raisuli", 1);
            }
            lp_invasionPoints -= 2;

        }
        else if ((lp_invasionPoints >= 1)) {
            lv_randomInteger = RandomInt(0, 5);
            auto7824EA3E_val = lv_randomInteger;
            if (auto7824EA3E_val == 0) {
                gf_SpawnUndead(1, "Raisuli", 1);
            }
            else if (auto7824EA3E_val == 1) {
                gf_SpawnUndead(2, "ZombieYeti", 1);
            }
            else if (auto7824EA3E_val == 2) {
                gf_SpawnUndead(3, "Hunter", 1);
            }
            else if (auto7824EA3E_val == 3) {
                gf_SpawnUndead(1, "Dilophosaur", 1);
            }
            else if (auto7824EA3E_val == 4) {
                gf_SpawnUndead(1, "Raisuli", 1);
            }
            else if (auto7824EA3E_val == 5) {
                gf_SpawnUndead(1, "Dilophosaur", 1);
            }
            else {
                gf_SpawnUndead(1, "Raisuli", 1);
            }
            lp_invasionPoints -= 1;
        }
        if ((lp_invasionPoints >= 1)) {
            if (gv_Tier1ModuleDisableSelfRespawn) { return true; }
            if (false)//(gv_devingame)
                        {
                            libNtve_gv__BB_Title[48] = StringToText("T1 - Master Spawn " + "Processing" + "...");
                            libNtve_gf_SetBossBarCurrentValue(48, lp_invasionPoints, true);
                        }
                        if (!gv_HyperPulseT1Acc)
                        {
                            Wait(15.0, c_timeGame);
                        }
                        else
                        {
                            Wait(3.2, c_timeGame);
                        }
            gf_InvasionCommanderMaster(lp_invasionPoints);
        }
        else {
            if (false)//(gv_devingame)
                        {
                            libNtve_gf_SetBossBarCurrentValue(48, 0, true);
                            libNtve_gv__BB_Title[48] = StringToText("T1 - Master Spawn " + "Cool Down" + "...");
                            libNtve_gf_SetBossBarMaximumValue(48, 310, false);
                            DialogSetTransparency(libNtve_gv__BB_Dialog[48], 60.0);
                        }
                        for (lv_randomInteger = 0; lv_randomInteger <= 300; lv_randomInteger += 1)
                        {
                            //if (gv_devingame) { libNtve_gf_SetBossBarCurrentValue(48, lv_randomInteger, true); }
                            if (!gv_HyperPulseT1Acc)
                            {
                                Wait(1.0, c_timeGame);
                            }
                            else
                            {
                                Wait(0.7, c_timeGame);
                            }
                        }
                        if (false)//(gv_devingame)
                        {
                            gf_TwinkleProgressBar(libNtve_gv__BB_Dialog[48]);
                            libNtve_gf_SetBossBarMaximumValue(48, gv_masterInvasionPoints, false);
                        }
            gf_InvasionCommanderMaster(gv_masterInvasionPoints);
        }
    }
    return true;
}

int gf_ParasiteRandomizerFunction () {
    // Variable Declarations
    int lv_randomDigit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_randomDigit = RandomInt(1, 20);
    if ((lv_randomDigit >= 1) && (lv_randomDigit < 11)) {
        return 1;
    }
    else if ((lv_randomDigit >= 11) && (lv_randomDigit < 17)) {
        return 2;
    }
    else if ((lv_randomDigit >= 17) && (lv_randomDigit < 20)) {
        return 3;
    }
    else if ((lv_randomDigit == 20)) {
        return 4;
    }
    return 1;
}

void gf_ChokeABitch (unit lp_sourceUnit, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_targetUnit, "Choked") == true)) {

    }
    else {
        UnitIssueOrder(lp_sourceUnit, OrderTargetingUnit(AbilityCommand("Choke", 0), lp_targetUnit), c_orderQueueReplace);
    }
    while (!(((UnitIsAlive(lp_sourceUnit) == false) || (UnitIsAlive(lp_targetUnit) == false)))) {
        Wait(0.2, c_timeGame);
    }
    if ((UnitIsAlive(lp_sourceUnit) == true)) {
        UnitBehaviorRemove(lp_sourceUnit, "Choking", 1);
    }
    else {
        UnitBehaviorRemove(lp_targetUnit, "Choked", 1);
    }
}

trigger auto_gf_MutateUndead_Trigger = null;

void gf_MutateUndead () {
    if (auto_gf_MutateUndead_Trigger == null) {
        auto_gf_MutateUndead_Trigger = TriggerCreate("auto_gf_MutateUndead_TriggerFunc");
    }

    TriggerExecute(auto_gf_MutateUndead_Trigger, false, false);
}

bool auto_gf_MutateUndead_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mutated;
    int lv_infestationSeverity;
    int lv_currentIL;

    // Automatic Variable Declarations
    int auto393BFD20_n;
    int auto393BFD20_i;

    // Variable Initialization

    // Implementation
    while ((gv_undeadMutations == true)) {
        Wait(45.0, c_timeReal);
        if ((gv_undeadMutations == true)) {
            lv_mutated = null;
            lv_infestationSeverity = 0;
            lv_currentIL = gv_infestationLevel;
            lv_infestationSeverity = (lv_currentIL / 10);
            if ((gv_infestationLevel >= gv_ILAllow)) {
                auto393BFD20_n = (lv_infestationSeverity - (gv_ILAllow / 10 - 1));
                for (auto393BFD20_i = 1; auto393BFD20_i <= auto393BFD20_n; auto393BFD20_i += 1) {
                    lv_mutated = UnitGroupRandomUnit(gv_undeadGroup, c_unitCountAlive);
                    if ((UnitGetType(lv_mutated) != "InfestedSmithy")) {
                        UnitBehaviorAdd(lv_mutated, "Mutation", lv_mutated, 1);
                    }

                }
            }
        }
    }
    return true;
}

bool gf_DevHandles (string lp_handle) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto7CB4A13E_ae;
    const int auto7CB4A13E_ai = 1;

    // Variable Initialization

    // Implementation
    auto7CB4A13E_ae = UserDataInstanceCount("DevHandles");
    lv_i = 1;
    for ( ; ( (auto7CB4A13E_ai >= 0 && lv_i <= auto7CB4A13E_ae) || (auto7CB4A13E_ai < 0 && lv_i >= auto7CB4A13E_ae) ) ; lv_i += auto7CB4A13E_ai ) {
        if (((GameIsTestMap(false) == true) || (StringEqual("1-S2-1-7030064", lp_handle, c_stringCase)))) {
            return true;
        }
    }
    return false;
}

bool gf_ModHandles (string lp_handle) {
    // Automatic Variable Declarations
    // Implementation
    if (((StringEqual("1-S2-1-7030064", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-846169", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-7759743", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-9636031", lp_handle, c_stringCase)))) {
        return true;
    }
    return false;
}

bool gf_BetaHandles (string lp_handle) {
    // Automatic Variable Declarations
    // Implementation

    if ((gf_ModHandles(lp_handle) || ((GameIsTestMap(false) == true) || (StringEqual("1-S2-1-7030064", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-3378891", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-7386882", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-8096020", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-9636031", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-846169", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-7759743", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-20662698", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-7357056", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-4409565", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-12023198", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-9667667", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-5611433", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-10098685", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-1369450", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-5725404", lp_handle, c_stringCase))))) {
        return true;
        UnitAbilityChangeLevel(EventUnit(), null, 0);
    }
    return false;
}

bool gf_EventsTeamHandles (string lp_handle) {
    // Automatic Variable Declarations
    // Implementation
    if (((StringEqual("1-S2-1-3500828", lp_handle, c_stringCase)))) {
        return true;
    }
    return false;
}

bool gf_BasicHandles (string lp_handle) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool gf_VIPDonatorHandles (string lp_handle) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool gf_TournamentWinners (string lp_handle) {
    // Automatic Variable Declarations
    // Implementation
    if (((StringEqual("1-S2-1-9708448", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-9815132", lp_handle, c_stringCase)) || (StringEqual("1-S2-1-348793", lp_handle, c_stringCase)))) {
        return true;
    }
    return false;
}

void gf_RepickSis (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((DialogIsVisible(gv_battleBuddySelectionScreen, lp_player) == true)) {
        DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupSingle(lp_player), false);
    }
    gv_battleBuddySelected[lp_player] = false;
    libNtve_gf_SetDialogItemText(gv_sIDialogLabels[1], StringExternal("Param/Value/DFA41F17"), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_sIDialogLabels[2], StringExternal("Param/Value/D538E2DB"), PlayerGroupSingle(lp_player));
    gv_playerSIsused[1][lp_player] = 0;
    gv_playerSIsused[2][lp_player] = 0;
    gv_mosspecificSIsused[1][lp_player] = 0;
    gf_RefreshSIButtons(lp_player);
    gf_RemoveSIs(gv_playerHeroes[lp_player]);
    DialogSetVisible(gv_sIDialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(lp_player), false);
}

void gf_ResetAllAbilityCooldownsForUnit (unit lp_unit) {
    // Variable Declarations
    string lv_ability;
    int lv_abilities;
    int lv_abilitiesmax;
    int lv_commands;
    int lv_commandsmax;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilities = 1;
    lv_abilitiesmax = UnitAbilityCount(lp_unit);
    lv_commandsmax = 16;

    // Implementation
    while ((lv_abilities < lv_abilitiesmax)) {
        lv_ability = UnitAbilityGet(lp_unit, lv_abilities);
        lv_commands = 0;
        if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lv_ability), "CmdButtonArray") == true)) {
            lv_commandsmax = CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "CmdButtonArray", UnitGetOwner(lp_unit));
        }
        else {
            lv_commandsmax = 1;
        }
        while ((lv_commands < lv_commandsmax)) {
            UnitAbilityReset(lp_unit, AbilityCommand(lv_ability, lv_commands), c_spendLocationAll);
            lv_commands += 1;
        }
        lv_abilities += 1;
    }
}

void gf_PlayableMapAreaTest (int lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == 1)) {
        RegionPlayableMapSet(RegionCircle(Point(95.0, 0.0), 127.0));
    }

    if ((lp_map == 2)) {
        RegionPlayableMapSet(RegionCircle(Point(120.0, 110.0), 65.0));
    }

    if ((lp_map == 3)) {
        RegionPlayableMapSet(RegionCircle(Point(190.0, 70.0), 75.0));
    }

    if ((lp_map == 4)) {
        RegionPlayableMapSet(RegionCircle(Point(85.0, 210.0), 75.0));
    }

    if ((lp_map == 5)) {
        RegionPlayableMapSet(RegionCircle(Point(128.0, 128.0), 127.0));
        CameraSetBounds(PlayerGroupAll(), RegionPlayableMap(), true);
    }

}

bool gf_GameIsTestOrSandbox () {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_gamemode == 12) || (GameIsTestMap(false) == true))) {
        return true;
    }
    else {
        return false;
    }
}

int gf_GetColor (string lp_string, int lp_player) {
    // Automatic Variable Declarations
    string autoE3DCEDB5_val;

    // Implementation
    autoE3DCEDB5_val = StringCase(lp_string, true);
    if (autoE3DCEDB5_val == "WHITE") {
        return 0;
    }
    else if (autoE3DCEDB5_val == "STU") {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/948419FA"));
        return 0;
    }
    else if (autoE3DCEDB5_val == "RED") {
        return 1;
    }
    else if (autoE3DCEDB5_val == "BLUE") {
        return 2;
    }
    else if (autoE3DCEDB5_val == "TEAL") {
        return 3;
    }
    else if (autoE3DCEDB5_val == "PURPLE") {
        return 4;
    }
    else if (autoE3DCEDB5_val == "YELLOW") {
        return 5;
    }
    else if (autoE3DCEDB5_val == "ORANGE") {
        return 6;
    }
    else if (autoE3DCEDB5_val == "GREEN") {
        return 7;
    }
    else if (autoE3DCEDB5_val == "LIGHTPINK") {
        return 8;
    }
    else if (autoE3DCEDB5_val == "VIOLET") {
        return 9;
    }
    else if (autoE3DCEDB5_val == "LIGHTGRAY") {
        return 10;
    }
    else if (autoE3DCEDB5_val == "DARKGREEN") {
        return 11;
    }
    else if (autoE3DCEDB5_val == "BROWN") {
        return 12;
    }
    else if (autoE3DCEDB5_val == "LIGHTGREEN") {
        return 13;
    }
    else if (autoE3DCEDB5_val == "DARKGRAY") {
        return 14;
    }
    else if (autoE3DCEDB5_val == "PINK") {
        return 15;
    }
    else {
        return PlayerGetColorIndex(lp_player, false);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Mode Dialog 
//--------------------------------------------------------------------------------------------------
bool gt_InitializeModeDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[13] lv_commandcardsettings;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_InitVoteKick, true, false);
    DialogCreate(670, 800, c_anchorCenter, 0, -30, false);
    gv_modedialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    gf_CreateDialogItemAny(c_triggerControlTypeImage, DialogLastCreated(), "", 640, 100, c_anchorTop, 0, 0, null, null, "", "Assets\\Textures\\ui_battlenet_glue_coop_commandericon_scanlines.dds", "", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gf_CreateDialogItemAny(c_triggerControlTypeLabel, DialogLastCreated(), "", 740, 105, c_anchorTop, 0, 0, null, StringExternal("Param/Value/DF6C91EA"), "Military_Title", "", "", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 100.00, 100.00), PlayerGroupAll());
    gf_CreateDifficultyButtonLeft(gv_modedialog, 15, UserDataGetImagePath("GameModes", "Campaign Menu", "Image", 1), 1);
    gf_CreateDifficultyButtonLeft(gv_modedialog, 16, UserDataGetImagePath("GameModes", "Survival Menu", "Image", 1), 2);
    gf_CreateDifficultyButtonLeft(gv_modedialog, 17, UserDataGetImagePath("GameModes", "Quick Match", "Image", 1), 3);
    gf_CreateDifficultyButtonRight(gv_modedialog, 13, UserDataGetImagePath("GameModes", "LUNATIC", "Image", 1), 1);
    gf_CreateDifficultyButtonRight(gv_modedialog, 12, UserDataGetImagePath("GameModes", "Sand Box", "Image", 1), 2);
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[12], UserDataGetText("GameModes", "Sand Box", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[13], UserDataGetText("GameModes", "LUNATIC", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[15], UserDataGetText("GameModes", "Campaign Menu", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[16], UserDataGetText("GameModes", "Survival Menu", "Tooltip", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[17], UserDataGetText("GameModes", "Quick Match", "Tooltip", 1), PlayerGroupAll());
    DialogSetVisible(gv_modedialog, PlayerGroupAll(), true);
    TimerWindowCreate(gv_modetimer, StringExternal("Param/Value/D82A0CDD"), true, false);
    TimerStart(gv_modetimer, 15.0, false, c_timeGame);
    gv_modetimeoutwindow = TimerWindowLastCreated();
    gv_beginning = true;
    TriggerEnable(gt_ModeTimerEnd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeModeDialog_Init () {
    gt_InitializeModeDialog = TriggerCreate("gt_InitializeModeDialog_Func");
    TriggerAddEventTimeElapsed(gt_InitializeModeDialog, 3.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mode Select
//--------------------------------------------------------------------------------------------------
bool gt_ModeSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_modevoted;
    text lv_modifiersvoted;
    int lv_loopint;

    // Automatic Variable Declarations
    int auto24959C73_ae;
    const int auto24959C73_ai = 1;
    const int auto5F6DCC79_ae = 12;
    const int auto5F6DCC79_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(gt_ModeTimerEnd) == true))) {
            return false;
        }

        if (!((gv_playermodevote[EventPlayer()] == 0))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_modeitem[1]) || (EventDialogControl() == gv_modeitem[2]) || (EventDialogControl() == gv_modeitem[3]) || (EventDialogControl() == gv_modeitem[4]) || (EventDialogControl() == gv_modeitem[5]) || (EventDialogControl() == gv_modeitem[7]) || (EventDialogControl() == gv_modeitem[8]) || (EventDialogControl() == gv_modeitem[9]) || (EventDialogControl() == gv_modeitem[11]) || (EventDialogControl() == gv_modeitem[12]) || (EventDialogControl() == gv_modeitem[13]) || (EventDialogControl() == gv_modeitem[14]) || (EventDialogControl() == gv_modeitem[15]) || (EventDialogControl() == gv_modeitem[16]) || (EventDialogControl() == gv_modeitem[17]) || (EventDialogControl() == gv_modeitem[18]) || (EventDialogControl() == gv_modeitem[19])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerVoted[EventPlayer()] = true;
    auto24959C73_ae = gv_modetotal;
    lv_loopint = 1;
    for ( ; ( (auto24959C73_ai >= 0 && lv_loopint <= auto24959C73_ae) || (auto24959C73_ai < 0 && lv_loopint >= auto24959C73_ae) ) ; lv_loopint += auto24959C73_ai ) {
        if ((EventDialogControl() == gv_modeitem[lv_loopint])) {
            lv_modevoted = lv_loopint;
            gv_playermodevote[EventPlayer()] = lv_loopint;
        }

    }
    gv_votestotal = 0;
    lv_loopint = 1;
    for ( ; ( (auto5F6DCC79_ai >= 0 && lv_loopint <= auto5F6DCC79_ae) || (auto5F6DCC79_ai < 0 && lv_loopint >= auto5F6DCC79_ae) ) ; lv_loopint += auto5F6DCC79_ai ) {
        if ((gv_playermodevote[lv_loopint] != 0)) {
            gv_votestotal = (gv_votestotal + 1);
        }

    }
    DialogSetVisible(gv_modedialog, PlayerGroupSingle(EventPlayer()), false);
    gv_infoPlacement += 1;
    gf_InfoModeText(EventPlayer(), gv_infoPlacement, lv_modevoted);
    if ((gv_votestotal == PlayerGroupCount(gv_players))) {
        gv_beginning = false;
        DialogSetVisible(gv_modedialog, PlayerGroupAll(), false);
        TriggerEnable(gt_ModeTimerEnd, false);
        TimerPause(gv_modetimer, true);
        TimerWindowDestroy(gv_modetimeoutwindow);
        gf_ResetInfoText();
        gf_CountVotes();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModeSelect_Init () {
    gt_ModeSelect = TriggerCreate("gt_ModeSelect_Func");
    TriggerAddEventDialogControl(gt_ModeSelect, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mode Timer End
//--------------------------------------------------------------------------------------------------
bool gt_ModeTimerEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_beginning = false;
    TimerPause(gv_modetimer, true);
    TimerWindowDestroy(gv_modetimeoutwindow);
    DialogSetVisible(gv_modedialog, PlayerGroupAll(), false);
    gf_ResetInfoText();
    gf_CountVotes();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModeTimerEnd_Init () {
    gt_ModeTimerEnd = TriggerCreate("gt_ModeTimerEnd_Func");
    TriggerEnable(gt_ModeTimerEnd, false);
    TriggerAddEventTimer(gt_ModeTimerEnd, gv_modetimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Rank/Modifiers Dialog
//--------------------------------------------------------------------------------------------------
bool gt_InitializeRankModifiersDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[13] lv_commandcardsettings;

    // Automatic Variable Declarations
    playergroup autoA2505945_g;
    int autoA2505945_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(850, 1000, c_anchorCenter, 0, 0, false);
    gv_rankdialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gf_CreateDialogItemAny(c_triggerControlTypeImage, gv_rankdialog, "", 740, 100, c_anchorTop, 0, 0, null, null, "", "Assets\\Textures\\ui_battlenet_glue_coop_commandericon_scanlines.dds", "", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    gf_CreateDialogItemAny(c_triggerControlTypeLabel, gv_rankdialog, "", 740, 105, c_anchorTop, 0, 0, null, StringExternal("Param/Value/82E0C408"), "Military_Title", "", "", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 100.00, 100.00), PlayerGroupAll());
    gf_CreateRankFrame(1, 165, 185, -225, 80, -225, 100);
    gf_CreateRankFrame(2, 165, 185, 0, 80, 0, 100);
    gf_CreateRankFrame(3, 165, 185, 225, 80, 225, 105);
    autoA2505945_g = gv_players;
    autoA2505945_var = -1;
    while (true) {
        autoA2505945_var = PlayerGroupNextPlayer(autoA2505945_g, autoA2505945_var);
        if (autoA2505945_var < 0) { break; }
        gv_customCommandCard[autoA2505945_var] = false;
    }
    gf_CreateDialogItemAny(c_triggerControlTypeImage, gv_rankdialog, "", 740, 100, c_anchorTop, 0, 300, null, null, "", "Assets\\Textures\\ui_battlenet_glue_coop_commandericon_scanlines.dds", "", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    gf_CreateDialogItemAny(c_triggerControlTypeLabel, gv_rankdialog, "", 740, 105, c_anchorTop, 0, 300, null, StringExternal("Param/Value/51D4A23C"), "Military_Title", "", "", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 100.00, 100.00), PlayerGroupAll());
    gf_CreateModLabel(1, 360, 40, -148, 390);
    gf_CreateImageFrame(1, 100, 150, -300, 400, -300, 425);
    gf_CreateDividerLine(5, 2, -300, 485);
    gf_CreateCheckBox(1, -300, 490);
    gf_CreateModLabel(2, 360, 40, 52, 390);
    gf_CreateImageFrame(2, 100, 150, -100, 400, -100, 425);
    gf_CreateDividerLine(5, 2, -100, 485);
    gf_CreateCheckBox(2, -100, 490);
    gf_CreateModLabel(3, 360, 40, 252, 390);
    gf_CreateImageFrame(3, 100, 150, 100, 400, 100, 425);
    gf_CreateDividerLine(5, 2, 100, 485);
    gf_CreateCheckBox(3, 100, 490);
    gf_CreateModLabel(4, 360, 40, -140, 540);
    gf_CreateImageFrame(4, 100, 150, -300, 550, -300, 575);
    gf_CreateDividerLine(5, 2, -300, 635);
    gf_CreateCheckBox(4, -300, 640);
    gf_CreateModLabel(5, 360, 40, 52, 540);
    gf_CreateImageFrame(5, 100, 150, -100, 550, -100, 575);
    gf_CreateDividerLine(5, 2, -100, 635);
    gf_CreateCheckBox(5, -100, 640);
    gf_CreateModLabel(6, 360, 40, 203, 540);
    gf_CreateImageFrame(6, 100, 150, 100, 550, 100, 575);
    gf_CreateDividerLine(5, 2, 100, 635);
    gf_CreateCheckBox(6, 100, 640);
    gf_CreateModLabel(7, 360, 40, -190, 690);
    gf_CreateImageFrame(7, 100, 150, -300, 700, -300, 725);
    gf_CreateDividerLine(5, 2, -300, 785);
    gf_CreateCheckBox(7, -300, 790);
    gf_CreateModLabel(8, 360, 40, 15, 690);
    gf_CreateImageFrame(8, 100, 150, -100, 700, -100, 725);
    gf_CreateDividerLine(5, 2, -100, 785);
    gf_CreateCheckBox(8, -100, 790);
    DialogControlCreate(gv_rankdialog, c_triggerControlTypePulldown);
    gv_weatherTypeSelected = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_glue_dropdownbutton_normalpressed_terran.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F48E027C"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/B6778ED0"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/11AA35FB"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/962B2D63"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/FB5B5658"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 820);
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gf_CreateModLabel(9, 360, 40, 215, 690);
    gf_CreateImageFrame(9, 100, 150, 100, 700, 100, 725);
    gf_CreateDividerLine(5, 2, 100, 785);
    gf_CreateCheckBox(9, 100, 790);
    gf_CreateModLabel(10, 360, 40, 445, 390);
    gf_CreateImageFrame(10, 100, 150, 300, 400, 300, 425);
    gf_CreateDividerLine(5, 2, 300, 485);
    gf_CreateCheckBox(10, 300, 490);
    gf_CreateModLabel(11, 360, 40, 438, 540);
    gf_CreateImageFrame(11, 100, 150, 300, 550, 300, 575);
    gf_CreateDividerLine(5, 2, 300, 635);
    gf_CreateCheckBox(11, 300, 640);
    gf_CreateModLabel(12, 360, 40, 430, 690);
    gf_CreateImageFrame(12, 100, 150, 300, 700, 300, 725);
    gf_CreateDividerLine(5, 2, 300, 785);
    gf_CreateCheckBox(12, 300, 790);
    libNtve_gf_CreateDialogItemButton(gv_rankdialog, 200, 50, c_anchorTop, 0, 890, StringExternal("Param/Value/DE355055"), StringExternal("Param/Value/790B46B4"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    gv_submitButton = DialogControlLastCreated();
    DialogSetVisible(gv_rankdialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeRankModifiersDialog_Init () {
    gt_InitializeRankModifiersDialog = TriggerCreate("gt_InitializeRankModifiersDialog_Func");
    TriggerAddEventTimeElapsed(gt_InitializeRankModifiersDialog, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rank Selected
//--------------------------------------------------------------------------------------------------
bool gt_RankSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_rankdialog, EventPlayer()) == true))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_rankitem[1]) || (EventDialogControl() == gv_rankitem[2]) || (EventDialogControl() == gv_rankitem[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_rankitem[1])) {
        gv_rankPlayerSelected[lv_player] = 1;
        DialogControlSetVisible(gv_rankHighlighted[1], PlayerGroupSingle(lv_player), true);
        DialogControlSetVisible(gv_rankHighlighted[2], PlayerGroupSingle(lv_player), false);
        DialogControlSetVisible(gv_rankHighlighted[3], PlayerGroupSingle(lv_player), false);
    }
    else if ((EventDialogControl() == gv_rankitem[2])) {
        gv_rankPlayerSelected[lv_player] = 2;
        DialogControlSetVisible(gv_rankHighlighted[2], PlayerGroupSingle(lv_player), true);
        DialogControlSetVisible(gv_rankHighlighted[1], PlayerGroupSingle(lv_player), false);
        DialogControlSetVisible(gv_rankHighlighted[3], PlayerGroupSingle(lv_player), false);
    }
    else if ((EventDialogControl() == gv_rankitem[3])) {
        gv_rankPlayerSelected[lv_player] = 3;
        DialogControlSetVisible(gv_rankHighlighted[3], PlayerGroupSingle(lv_player), true);
        DialogControlSetVisible(gv_rankHighlighted[1], PlayerGroupSingle(lv_player), false);
        DialogControlSetVisible(gv_rankHighlighted[2], PlayerGroupSingle(lv_player), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RankSelected_Init () {
    gt_RankSelected = TriggerCreate("gt_RankSelected_Func");
    TriggerEnable(gt_RankSelected, false);
    TriggerAddEventDialogControl(gt_RankSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Modifier Checked
//--------------------------------------------------------------------------------------------------
bool gt_ModifierChecked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_rankdialog, EventPlayer()) == true))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_dialogmodifier[1]) || (EventDialogControl() == gv_dialogmodifier[2]) || (EventDialogControl() == gv_dialogmodifier[3]) || (EventDialogControl() == gv_dialogmodifier[4]) || (EventDialogControl() == gv_dialogmodifier[5]) || (EventDialogControl() == gv_dialogmodifier[6]) || (EventDialogControl() == gv_dialogmodifier[7]) || (EventDialogControl() == gv_dialogmodifier[8]) || (EventDialogControl() == gv_dialogmodifier[9]) || (EventDialogControl() == gv_dialogmodifier[10]) || (EventDialogControl() == gv_dialogmodifier[11]) || (EventDialogControl() == gv_dialogmodifier[12])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_dialogmodifier[1])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[1], lv_player) == true)) {
            DialogControlSetVisible(gv_modifierFrameHighlighted[1], PlayerGroupSingle(lv_player), true);
            DialogControlSetEnabled(gv_dialogmodifier[2], PlayerGroupSingle(lv_player), false);
            DialogControlSetEnabled(gv_dialogmodifier[3], PlayerGroupSingle(lv_player), false);
            DialogControlSetEnabled(gv_dialogmodifier[10], PlayerGroupSingle(lv_player), false);
        }
        else {
            DialogControlSetVisible(gv_modifierFrameHighlighted[1], PlayerGroupSingle(lv_player), false);
            DialogControlSetEnabled(gv_dialogmodifier[2], PlayerGroupSingle(lv_player), true);
            DialogControlSetEnabled(gv_dialogmodifier[3], PlayerGroupSingle(lv_player), true);
            DialogControlSetEnabled(gv_dialogmodifier[10], PlayerGroupSingle(lv_player), true);
        }
    }
    else if ((EventDialogControl() == gv_dialogmodifier[2])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[2], lv_player) == true)) {
            DialogControlSetVisible(gv_modifierFrameHighlighted[2], PlayerGroupSingle(lv_player), true);
            DialogControlSetEnabled(gv_dialogmodifier[1], PlayerGroupSingle(lv_player), false);
            DialogControlSetEnabled(gv_dialogmodifier[3], PlayerGroupSingle(lv_player), false);
            DialogControlSetEnabled(gv_dialogmodifier[10], PlayerGroupSingle(lv_player), false);
        }
        else {
            DialogControlSetVisible(gv_modifierFrameHighlighted[2], PlayerGroupSingle(lv_player), false);
            DialogControlSetEnabled(gv_dialogmodifier[1], PlayerGroupSingle(lv_player), true);
            DialogControlSetEnabled(gv_dialogmodifier[3], PlayerGroupSingle(lv_player), true);
            DialogControlSetEnabled(gv_dialogmodifier[10], PlayerGroupSingle(lv_player), true);
        }
    }
    else if ((EventDialogControl() == gv_dialogmodifier[3])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[3], lv_player) == true)) {
            DialogControlSetVisible(gv_modifierFrameHighlighted[3], PlayerGroupSingle(lv_player), true);
            DialogControlSetEnabled(gv_dialogmodifier[1], PlayerGroupSingle(lv_player), false);
            DialogControlSetEnabled(gv_dialogmodifier[2], PlayerGroupSingle(lv_player), false);
            DialogControlSetEnabled(gv_dialogmodifier[10], PlayerGroupSingle(lv_player), false);
        }
        else {
            DialogControlSetVisible(gv_modifierFrameHighlighted[3], PlayerGroupSingle(lv_player), false);
            DialogControlSetEnabled(gv_dialogmodifier[1], PlayerGroupSingle(lv_player), true);
            DialogControlSetEnabled(gv_dialogmodifier[2], PlayerGroupSingle(lv_player), true);
            DialogControlSetEnabled(gv_dialogmodifier[10], PlayerGroupSingle(lv_player), true);
        }
    }
    else if ((EventDialogControl() == gv_dialogmodifier[4])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[4], lv_player) == true)) {
            DialogControlSetVisible(gv_modifierFrameHighlighted[4], PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(gv_modifierFrameHighlighted[4], PlayerGroupSingle(lv_player), false);
        }
    }
    else if ((EventDialogControl() == gv_dialogmodifier[5])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[5], lv_player) == true)) {
            DialogControlSetVisible(gv_modifierFrameHighlighted[5], PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(gv_modifierFrameHighlighted[5], PlayerGroupSingle(lv_player), false);
        }
    }
    else if ((EventDialogControl() == gv_dialogmodifier[6])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[6], lv_player) == true)) {
            DialogControlSetVisible(gv_modifierFrameHighlighted[6], PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(gv_modifierFrameHighlighted[6], PlayerGroupSingle(lv_player), false);
        }
    }
    else if ((EventDialogControl() == gv_dialogmodifier[7])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[7], lv_player) == true)) {
            DialogControlSetVisible(gv_modifierFrameHighlighted[7], PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(gv_modifierFrameHighlighted[7], PlayerGroupSingle(lv_player), false);
        }
    }
    else if ((EventDialogControl() == gv_dialogmodifier[8])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[8], lv_player) == true)) {
            DialogControlSetVisible(gv_modifierFrameHighlighted[8], PlayerGroupSingle(lv_player), true);
            DialogControlSetVisible(gv_weatherTypeSelected, PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(gv_modifierFrameHighlighted[8], PlayerGroupSingle(lv_player), false);
            DialogControlSetVisible(gv_weatherTypeSelected, PlayerGroupSingle(lv_player), false);
        }
    }
    else if ((EventDialogControl() == gv_dialogmodifier[9])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[9], lv_player) == true)) {
            DialogControlSetVisible(gv_modifierFrameHighlighted[9], PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(gv_modifierFrameHighlighted[9], PlayerGroupSingle(lv_player), false);
        }
    }
    else if ((EventDialogControl() == gv_dialogmodifier[10])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[10], lv_player) == true)) {
            DialogControlSetVisible(gv_modifierFrameHighlighted[10], PlayerGroupSingle(lv_player), true);
            DialogControlSetEnabled(gv_dialogmodifier[1], PlayerGroupSingle(lv_player), false);
            DialogControlSetEnabled(gv_dialogmodifier[2], PlayerGroupSingle(lv_player), false);
            DialogControlSetEnabled(gv_dialogmodifier[3], PlayerGroupSingle(lv_player), false);
        }
        else {
            DialogControlSetVisible(gv_modifierFrameHighlighted[10], PlayerGroupSingle(lv_player), false);
            DialogControlSetEnabled(gv_dialogmodifier[1], PlayerGroupSingle(lv_player), true);
            DialogControlSetEnabled(gv_dialogmodifier[2], PlayerGroupSingle(lv_player), true);
            DialogControlSetEnabled(gv_dialogmodifier[3], PlayerGroupSingle(lv_player), true);
        }
    }
    else if ((EventDialogControl() == gv_dialogmodifier[11])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[11], lv_player) == true)) {
            DialogControlSetVisible(gv_modifierFrameHighlighted[11], PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(gv_modifierFrameHighlighted[11], PlayerGroupSingle(lv_player), false);
        }
    }
    else if ((EventDialogControl() == gv_dialogmodifier[12])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[12], lv_player) == true)) {
            DialogControlSetVisible(gv_modifierFrameHighlighted[12], PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(gv_modifierFrameHighlighted[12], PlayerGroupSingle(lv_player), false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModifierChecked_Init () {
    gt_ModifierChecked = TriggerCreate("gt_ModifierChecked_Func");
    TriggerEnable(gt_ModifierChecked, false);
    TriggerAddEventDialogControl(gt_ModifierChecked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rank/Modifier Submit
//--------------------------------------------------------------------------------------------------
bool gt_RankModifierSubmit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[13] lv_rankplayerselected;
    int lv_loopint;
    text lv_rankselected;
    text lv_modifiersvoted;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_rankdialog, EventPlayer()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == gv_submitButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_submitButton) && (gv_rankPlayerSelected[EventPlayer()] != 0) && (gv_submit[EventPlayer()] == false)) {
        gv_submit[EventPlayer()] = true;
        DialogSetVisible(gv_rankdialog, PlayerGroupSingle(EventPlayer()), false);
        gv_rankcount += 1;
        if ((gv_rankSelected[EventPlayer()] == false) && (gv_rankPlayerSelected[EventPlayer()] == 1)) {
            gv_rankSelected[EventPlayer()] = true;
            lv_rankplayerselected[EventPlayer()] = 1;
            gf_SetupRankSet(EventPlayer(), lv_rankplayerselected[EventPlayer()]);
            lv_rankselected = gf_TextImage("Textures\\enlisted2.tga", 22);
        }
        else if ((gv_rankSelected[EventPlayer()] == false) && (gv_rankPlayerSelected[EventPlayer()] == 2)) {
            gv_rankSelected[EventPlayer()] = true;
            lv_rankplayerselected[EventPlayer()] = 2;
            gf_SetupRankSet(EventPlayer(), lv_rankplayerselected[EventPlayer()]);
            lv_rankselected = gf_TextImage("Textures\\warrant officer2.tga", 22);
        }
        else if ((gv_rankSelected[EventPlayer()] == false) && (gv_rankPlayerSelected[EventPlayer()] == 3)) {
            gv_rankSelected[EventPlayer()] = true;
            lv_rankplayerselected[EventPlayer()] = 3;
            gf_SetupRankSet(EventPlayer(), lv_rankplayerselected[EventPlayer()]);
            lv_rankselected = gf_TextImage("Textures\\Commissioned Officer2.tga", 22);
        }
        if ((gv_rankSelected[EventPlayer()] == true)) {
            libNtve_gf_SetDialogItemImage(gv_hUDDialogItems[1][EventPlayer()], gv_rankDecal[gv_playerRankSet[EventPlayer()]][gf_GetPlayerRank(EventPlayer())], PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[1][EventPlayer()], gv_rankPrefix[gv_playerRankSet[EventPlayer()]][gf_GetPlayerRank(EventPlayer())], PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(gv_statusDialogItems[1][EventPlayer()], gv_rankDecal[gv_playerRankSet[EventPlayer()]][gf_GetPlayerRank(EventPlayer())], PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[1][EventPlayer()], gv_rankPrefix[gv_playerRankSet[EventPlayer()]][gf_GetPlayerRank(EventPlayer())], PlayerGroupAll());
            if ((gv_playerExperience[1][EventPlayer()] < 5500)) {
                lv_rankselected = gf_TextImage("Textures\\enlisted2.tga", 22);
            }
            if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[1], EventPlayer()) == true)) {
                gv_modifiervote[1] = (gv_modifiervote[1] + 1);
                lv_modifiersvoted = (lv_modifiersvoted + (StringExternal("Param/Value/894A1C39") + gf_TextImage("Assets\\Custom Icons\\Mod_T3.dds", 22)));
            }
            if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[2], EventPlayer()) == true)) {
                gv_modifiervote[2] = (gv_modifiervote[2] + 1);
                lv_modifiersvoted = (lv_modifiersvoted + (StringExternal("Param/Value/0DEF4D18") + gf_TextImage("Assets\\Custom Icons\\Mod_T2.dds", 22)));
            }
            if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[3], EventPlayer()) == true)) {
                gv_modifiervote[3] = (gv_modifiervote[3] + 1);
                lv_modifiersvoted = (lv_modifiersvoted + (StringExternal("Param/Value/2F7B8313") + gf_TextImage("Assets\\Custom Icons\\Mod_T1.dds", 22)));
            }
            if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[4], EventPlayer()) == true)) {
                gv_modifiervote[4] = (gv_modifiervote[4] + 1);
                lv_modifiersvoted = (lv_modifiersvoted + (StringExternal("Param/Value/E3EEEE9C") + gf_TextImage("Buttons\\Weapons\\MANTEL-75.dds", 22)));
            }
            if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[5], EventPlayer()) == true) && (PlayerGroupCount(gv_players) >= 3)) {
                gv_modifiervote[5] = (gv_modifiervote[5] + 1);
                lv_modifiersvoted = (lv_modifiersvoted + (StringExternal("Param/Value/F3281D91") + gf_TextImage("Assets\\Custom Icons\\Soldier_Skull.dds", 22)));
            }
            if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[6], EventPlayer()) == true) && (PlayerGroupCount(gv_players) >= 7)) {
                gv_modifiervote[6] = (gv_modifiervote[6] + 1);
                lv_modifiersvoted = (lv_modifiersvoted + (StringExternal("Param/Value/2FB4A43C") + gf_TextImage("Assets\\Buttons\\Btn_Custom_UAC_AmmoCase.dds", 22)));
            }
            if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[7], EventPlayer()) == true)) {
                gv_modifiervote[7] = (gv_modifiervote[7] + 1);
                lv_modifiersvoted = (lv_modifiersvoted + (StringExternal("Param/Value/D8B3C769") + gf_TextImage("Assets\\Custom Icons\\btn-extra-chefbanana.dds", 22)));
            }
            if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[8], EventPlayer()) == true)) {
                gv_modifiervote[8] = (gv_modifiervote[8] + 1);
                lv_modifiersvoted = (lv_modifiersvoted + (StringExternal("Param/Value/86C2B12A") + gf_TextImage("Assets\\Textures\\btn-upgrade-artanis-healingpsionicstorm.dds", 22)));
                gv_weatherTypeVoted[DialogControlGetSelectedItem(gv_weatherTypeSelected, EventPlayer())] = (gv_weatherTypeVoted[DialogControlGetSelectedItem(gv_weatherTypeSelected, EventPlayer())] + 1);
            }
            if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[9], EventPlayer()) == true)) {
                gv_modifiervote[9] = (gv_modifiervote[9] + 1);
                lv_modifiersvoted = (lv_modifiersvoted + (StringExternal("Param/Value/B7D48066") + gf_TextImage("Textures\\Decals\\T1Hunters.dds", 22)));
            }
            if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[10], EventPlayer()) == true)) {
                gv_modifiervote[10] = (gv_modifiervote[10] + 1);
                lv_modifiersvoted = (lv_modifiersvoted + (StringExternal("Param/Value/1540DADD") + gf_TextImage("Assets\\Images\\Difficulties\\Mod_Genesis.dds", 22)));
            }
            if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[11], EventPlayer()) == true)) {
                gv_modifiervote[11] = (gv_modifiervote[11] + 1);
                lv_modifiersvoted = (lv_modifiersvoted + (StringExternal("Param/Value/1E4F34C4") + gf_TextImage("Assets\\Buttons\\Btn_Custom_UAC_Stand.dds", 22)));
            }
            if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[12], EventPlayer()) == true)) {
                gv_modifiervote[12] = (gv_modifiervote[12] + 1);
                lv_modifiersvoted = (lv_modifiersvoted + (StringExternal("Param/Value/9686E979") + gf_TextImage("Textures\\btn-other-Dice.dds", 22)));
            }
            gv_infoPlacement += 1;
            gf_InfoRankText(EventPlayer(), gv_infoPlacement, lv_rankselected, lv_modifiersvoted);
            gv_playerVotesModifiers += 1;
            if ((gv_rankcount == PlayerGroupCount(gv_players))) {
                TriggerEnable(gt_ModifierChecked, false);
                TriggerEnable(gt_RankSelected, false);
                DialogSetVisible(gv_rankdialog, PlayerGroupAll(), false);
                DialogSetVisible(gv_infoDialog, PlayerGroupAll(), false);
                TriggerEnable(gt_RankTimerEnd, false);
                TimerPause(gv_modetimer, true);
                TimerWindowDestroy(gv_modetimeoutwindow);
                TriggerEnable(TriggerGetCurrent(), false);
                gf_SetModifiers();
                gf_GameStart();
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RankModifierSubmit_Init () {
    gt_RankModifierSubmit = TriggerCreate("gt_RankModifierSubmit_Func");
    TriggerEnable(gt_RankModifierSubmit, false);
    TriggerAddEventDialogControl(gt_RankModifierSubmit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rank Timer End
//--------------------------------------------------------------------------------------------------
bool gt_RankTimerEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoAC0926CE_g;
    int autoAC0926CE_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RankModifierSubmit, false);
    TriggerEnable(gt_RankSelected, false);
    TriggerEnable(gt_ModifierChecked, false);
    TimerPause(gv_modetimer, true);
    TimerWindowDestroy(gv_modetimeoutwindow);
    DialogSetVisible(gv_rankdialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_infoDialog, PlayerGroupAll(), false);
    autoAC0926CE_g = gv_players;
    autoAC0926CE_var = -1;
    while (true) {
        autoAC0926CE_var = PlayerGroupNextPlayer(autoAC0926CE_g, autoAC0926CE_var);
        if (autoAC0926CE_var < 0) { break; }
        if ((gv_playerRankChosen[autoAC0926CE_var] == false)) {
            gf_SetupRankSet(autoAC0926CE_var, 1);
        }
    }
    gf_SetModifiers();
    gf_GameStart();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RankTimerEnd_Init () {
    gt_RankTimerEnd = TriggerCreate("gt_RankTimerEnd_Func");
    TriggerEnable(gt_RankTimerEnd, false);
    TriggerAddEventTimer(gt_RankTimerEnd, gv_modetimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Modes: Training/Surv/PMC Surv/Boss Mode
//--------------------------------------------------------------------------------------------------
bool gt_StartGameModesTrainingSurvPMCSurvBossMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    unitgroup auto0409588E_g;
    int auto0409588E_u;
    unit auto0409588E_var;
    unitgroup auto125B79E7_g;
    int auto125B79E7_u;
    unit auto125B79E7_var;
    const int auto8C3D3A27_n = 30;
    int auto8C3D3A27_i;
    playergroup autoF4AE0A38_g;
    int autoF4AE0A38_var;
    unitgroup autoC5B054ED_g;
    int autoC5B054ED_u;
    unit autoC5B054ED_var;
    unitgroup autoBAF2FF93_g;
    int autoBAF2FF93_u;
    unit autoBAF2FF93_var;
    playergroup auto606ACA0B_g;
    int auto606ACA0B_var;
    playergroup auto95307222_g;
    int auto95307222_var;
    playergroup autoC56D623F_g;

    // Variable Initialization
    lv_loopint = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gamemode == 18)) {
        auto0409588E_g = UnitGroup(null, c_playerAny, RegionRect(0.0, 0.0, 255.0, 171.0), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        auto0409588E_u = UnitGroupCount(auto0409588E_g, c_unitCountAll);
        for (;; auto0409588E_u -= 1) {
            auto0409588E_var = UnitGroupUnitFromEnd(auto0409588E_g, auto0409588E_u);
            if (auto0409588E_var == null) { break; }
            UnitRemove(auto0409588E_var);
        }
        Wait(1.0, c_timeGame);
        auto125B79E7_g = UnitGroup(null, c_playerAny, RegionRect(0.0, 0.0, 255.0, 171.0), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        auto125B79E7_u = UnitGroupCount(auto125B79E7_g, c_unitCountAll);
        for (;; auto125B79E7_u -= 1) {
            auto125B79E7_var = UnitGroupUnitFromEnd(auto125B79E7_g, auto125B79E7_u);
            if (auto125B79E7_var == null) { break; }
            UnitRemove(auto125B79E7_var);
        }
        RegionPlayableMapSet(RegionRect(0.0, 168.0, 218.0, 255.0));
        for (auto8C3D3A27_i = 1; auto8C3D3A27_i <= auto8C3D3A27_n; auto8C3D3A27_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, 0, RegionRandomPoint(RegionRect(47.0, 204.0, 145.0, 239.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, 0, RegionRandomPoint(RegionRect(47.0, 204.0, 145.0, 239.0)));
        }
    }

    autoF4AE0A38_g = gv_players;
    autoF4AE0A38_var = -1;
    while (true) {
        autoF4AE0A38_var = PlayerGroupNextPlayer(autoF4AE0A38_g, autoF4AE0A38_var);
        if (autoF4AE0A38_var < 0) { break; }
        CameraRestore(autoF4AE0A38_var, 0.0, -1, 10);
        VisEnable(c_visTypeMask, true);
        VisEnable(c_visTypeFog, true);
        autoC5B054ED_g = UnitGroup("Planet", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC5B054ED_u = UnitGroupCount(autoC5B054ED_g, c_unitCountAll);
        for (;; autoC5B054ED_u -= 1) {
            autoC5B054ED_var = UnitGroupUnitFromEnd(autoC5B054ED_g, autoC5B054ED_u);
            if (autoC5B054ED_var == null) { break; }
            UnitRemove(autoC5B054ED_var);
        }
        autoBAF2FF93_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoBAF2FF93_u = UnitGroupCount(autoBAF2FF93_g, c_unitCountAll);
        for (;; autoBAF2FF93_u -= 1) {
            autoBAF2FF93_var = UnitGroupUnitFromEnd(autoBAF2FF93_g, autoBAF2FF93_u);
            if (autoBAF2FF93_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(autoBAF2FF93_var, false);
            libNtve_gf_ShowHideUnit(autoBAF2FF93_var, true);
        }
        CameraPan(autoF4AE0A38_var, RegionGetCenter(gv_startingLZ), 0.0, -1, 10, false);
        CameraLockInput(autoF4AE0A38_var, true);
    }
    Wait(2.0, c_timeGame);
    if (gv_LUNATICEnable) { TriggerExecute(gt_LUNATIC, false, false); }
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, true);
    UISetCursorVisible(PlayerGroupAll(), true);
    auto606ACA0B_g = gv_players;
    auto606ACA0B_var = -1;
    while (true) {
        auto606ACA0B_var = PlayerGroupNextPlayer(auto606ACA0B_g, auto606ACA0B_var);
        if (auto606ACA0B_var < 0) { break; }
        DialogSetVisible(gv_functionaldialog[auto606ACA0B_var], PlayerGroupSingle(auto606ACA0B_var), true);
        DialogSetVisible(gv_sprintBar, PlayerGroupSingle(auto606ACA0B_var), true);
    }
    gf_DisplayUIButtons(true);
    UnitCreate(1, "ColonistShipFlying", 0, 13, gv_phantomBeginning, 270.0);
    TriggerSendEvent("AutoHeroSelect");
    gv_phantombeginning = UnitLastCreated();
    if (gv_LUNATICEnable) { libHots_gf_PlaySoundLinkasMusic(SoundLink("idle", -1), false, true); }
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    auto95307222_g = PlayerGroupAll();
    auto95307222_var = -1;
    while (true) {
        auto95307222_var = PlayerGroupNextPlayer(auto95307222_g, auto95307222_var);
        if (auto95307222_var < 0) { break; }
        CameraPan(auto95307222_var, RegionGetCenter(gv_startingLZ), 0.0, -1, 10, false);
        CameraLockInput(auto95307222_var, true);
    }
    UnitIssueOrder(gv_phantombeginning, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(gv_startingLZ)), c_orderQueueReplace);
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/1604D581"));
    Wait(8.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/72694AF5"));
    Wait(1.5, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/59A9B4C8"));
    autoC56D623F_g = gv_players;
    lv_loopint = -1;
    while (true) {
        lv_loopint = PlayerGroupNextPlayer(autoC56D623F_g, lv_loopint);
        if (lv_loopint < 0) { break; }
        if ((gv_mod_rifle == true)) {
            TechTreeUpgradeAddLevel(lv_loopint, "RifleMode", 1);
        }

        if ((gv_mod_1life == true)) {
            TechTreeUpgradeAddLevel(lv_loopint, "1Life", 1);
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroSelector", 0, lv_loopint, RegionGetCenter(gv_startingLZ));
        gv_heroselector[lv_loopint] = UnitLastCreated();
        UnitClearSelection(lv_loopint);
        if ((gv_mod_allrandom)) {
            UnitIssueOrder(gv_heroselector[lv_loopint], Order(AbilityCommand("ChooseRandomMos", 0)), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
        }
        else {
            UnitSelect(UnitLastCreated(), lv_loopint, true);
            UnitGroupAdd(gv_heroselectors, UnitLastCreated());
        }
    }
    Wait(0.1, c_timeGame);
    TriggerEnable(gt_SelectHeroSelector, true);
    Wait(5.0, c_timeGame);
    if ((gv_averageXP >= 100000)) {
        gv_spawnCount = (gv_spawnCount + 1);
    }
    if ((gv_averageXP >= 225000)) {
        gv_spawnCount = (gv_spawnCount + 1);
    }
    if ((gv_averageXP >= 1000000)) {
        gv_spawnCount = (gv_spawnCount + 1);
    }
    if (gv_LUNATICEnable) { return true; }
    if ((gv_gamemode == 7)) {
        TriggerExecute(gt_SurvivalMode, true, false);
        gf_SwitchSolarToHigh();
    }
    else if ((gv_gamemode == 8)) {
        TriggerExecute(gt_PMCSurvivalMode, true, false);
    }
    else if ((gv_gamemode == 9)) {
        TriggerExecute(gt_NewBossModeLoadSequences, true, false);
    }
    else if ((gv_gamemode == 18)) {
        TriggerExecute(gt_ThalimHoldout, true, false);
    }
    else if ((gv_gamemode == 19)) {
        TriggerExecute(gt_ClassicSurvival, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameModesTrainingSurvPMCSurvBossMode_Init () {
    gt_StartGameModesTrainingSurvPMCSurvBossMode = TriggerCreate("gt_StartGameModesTrainingSurvPMCSurvBossMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Start | Check for All MOS
//--------------------------------------------------------------------------------------------------
bool gt_GameStartCheckforAllMOS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGroupCount(gv_heroesGroup, c_unitCountAll) == PlayerGroupCount(gv_players)) || (GameGetMissionTime() >= 270.0))) {
        gv_allselectors = true;
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_GameOver, true);
        TriggerEnable(gt_RandomHeroSelect, false);
        if ((gv_gamemode == 12)) {
            TriggerEnable(gt_GameOver, false);
        }
        else {
            if ((gf_PlayerRandomedCount() == true)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/503B670B"));
                gv_randomEnabled = true;
            }
            Wait(5.0, c_timeGame);
            if (((gv_gamemode == 7) || (gv_gamemode == 8) || (gv_gamemode == 9) || (gv_gamemode == 18))) {
                gf_MissionText(StringExternal("Param/Value/62BE4773"));
            }
            UnitIssueOrder(gv_phantombeginning, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
            libNtve_gf_MakeUnitInvulnerable(gv_phantombeginning, true);
            Wait(4.0, c_timeGame);
            UnitIssueOrder(gv_phantombeginning, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
            Wait(8.0, c_timeGame);
            UnitRemove(gv_phantombeginning);
            TriggerEnable(gt_SelectHeroSelector, false);
            TriggerStop(gt_AutoselectHero);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameStartCheckforAllMOS_Init () {
    gt_GameStartCheckforAllMOS = TriggerCreate("gt_GameStartCheckforAllMOS_Func");
    TriggerAddEventTimePeriodic(gt_GameStartCheckforAllMOS, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Selection
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_herounit;
    int lv_pindex;
    string lv_string;
    int lv_hook;

    // Automatic Variable Declarations
    string autoBB82F22A_val;

    // Variable Initialization
    lv_herounit = EventUnitCreatedUnit();
    lv_pindex = UnitGetOwner(EventUnitCreatedUnit());
    lv_string = "";
    lv_hook = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnitCreatedUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((gv_playerHeroes[lv_pindex] == null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerHeroes[lv_pindex] != null)) {
        UnitRemove(lv_herounit);
        return true;
    }

    if ((gv_gamemode == 18)) {
        UnitSetPropertyFixed(lv_herounit, c_unitPropLevel, 6.0);
    }

    if (((UnitGetType(gv_playerHeroes[lv_pindex]) != "AH32Viper"))) {
        if ((gv_playerRankSet[lv_pindex] == 1)) {
            UnitBehaviorAdd(lv_herounit, "RankModifier", lv_herounit, (gf_GetPlayerRank(lv_pindex) - 1));
        }
        else {
            if ((gv_playerRankSet[lv_pindex] == 2)) {
                UnitBehaviorAdd(lv_herounit, "RankModifier", lv_herounit, (gf_GetPlayerRank(lv_pindex) + 5));
            }
            else {
                UnitBehaviorAdd(lv_herounit, "RankModifier", lv_herounit, (gf_GetPlayerRank(lv_pindex) + 4));
            }
        }
    }

    UnitGroupRemove(gv_heroselectors, gv_heroselector[lv_pindex]);
    UnitRemove(gv_heroselector[lv_pindex]);
    libNtve_gf_ShareVisionofUnit(gv_phantombeginning, false, lv_pindex);
    CameraLockInput(lv_pindex, false);
    if ((gv_playerRandomed[lv_pindex] == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_pindex), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pindex, false))) + (StringExternal("Param/Value/9E2D6A23") + UnitTypeGetName(UnitGetType(lv_herounit)))));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_pindex), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pindex, false))) + (StringExternal("Param/Value/6F3A6E5E") + UnitTypeGetName(UnitGetType(lv_herounit)))));
    }
    libNtve_gf_SendActorMessageToUnit(lv_herounit, gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);

    autoBB82F22A_val = UnitGetType(lv_herounit);
    if (autoBB82F22A_val == "Rifleman") {
        gv_rifleman = true;
        gv_countRifleman += 1;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/E79F8E85") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(31, lv_pindex);
        gf_SetupMosSI(32, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(UnitGetOwner(lv_herounit), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(lv_herounit), c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Marine_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Buttons\\BTNSoldier.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/58B065FB") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/BEC2B64F") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        if ((TechTreeUpgradeCount(lv_pindex, "MGEN", c_techCountCompleteOnly) == 1)) {
            UnitCreate(1, "InfantryRifleman", c_unitCreateIgnorePlacement, lv_pindex, UnitGetPosition(lv_herounit), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            UnitSelect(UnitLastCreated(), lv_pindex, true);
            UnitControlGroupAddUnit(lv_pindex, 2, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
        }

    }
    else if (autoBB82F22A_val == "CommandoHero") {
        gv_commando = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/E56F1223") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(57, lv_pindex);
        gf_SetupMosSI(58, lv_pindex);
        gv_magsize[lv_pindex] = 25;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Battlecruiser_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Custom Icons\\CommandoSelect.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/71A04DD2") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/4A53E86D") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "GhostHero") {
        gv_ghost = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/BA1489C2") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(53, lv_pindex);
        gf_SetupMosSI(54, lv_pindex);
        gv_magsize[lv_pindex] = 80;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Ghost_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Ghost_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/E7EA932E") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/3651275A") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "OrbitalSupportSpecialist") {
        gv_orbitalSupportSpecialist = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/3AA018C7") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(63, lv_pindex);
        gf_SetupMosSI(64, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("zUnit_HeroHyperion_Horner_027", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_OSS_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/AEE5C025") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/3E5E0FFC") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "CombatMedic") {
        gv_combatMedic = true;
        gv_medicScoreboard[lv_pindex] = true;
        gv_combatMedics += 1;
        PlayerGroupAdd(gv_medics, lv_pindex);
        PlayerOptionOverride(lv_pindex, "displayunitstatus", "All");
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/B72FD50C") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(33, lv_pindex);
        gf_SetupMosSI(34, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Medic_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Combat_Medic_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/31E62542") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/63280245") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        if ((TechTreeUpgradeCount(lv_pindex, "MGEN", c_techCountCompleteOnly) == 1)) {
            UnitCreate(1, "Infantry68WCombatMedic", c_unitCreateIgnorePlacement, lv_pindex, UnitGetPosition(lv_herounit), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            UnitSelect(UnitLastCreated(), lv_pindex, true);
            UnitControlGroupAddUnit(lv_pindex, 2, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
        }

    }
    else if (autoBB82F22A_val == "FireSupportSpecialist") {
        gv_fireSupportSpecialist = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/2CF23FEC") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(55, lv_pindex);
        gf_SetupMosSI(56, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Hercules_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_FSS_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/BD8B5BF9") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/0F9C0B7E") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/CommandPanel/CommandButton14/ChargeLabel"));
        lv_hook = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(lv_hook, Color(100.00, 27.45, 27.45), PlayerGroupSingle(lv_pindex));
        DialogControlDestroy(lv_hook);
    }
    else if (autoBB82F22A_val == "PlatoonLeader") {
        gv_platoonLeader = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/0CA5ABBA") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(47, lv_pindex);
        gf_SetupMosSI(48, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        PlayerGroupAdd(gv_sFAATs, lv_pindex);
        TriggerExecute(gt_InitLNS, true, false);
        SoundPlayOnUnit(SoundLink("Tosh_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_PL_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/5146D683") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/5ADEDD81") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "Enforcer") {
        gv_enforcer = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/15654B83") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(39, lv_pindex);
        gf_SetupMosSI(40, lv_pindex);
        gv_magsize[lv_pindex] = 25;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Raynor_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Buttons\\Portraits\\BTNSFAAT.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/E23A62C9") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/6F6DE74D") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "LaserEnforcer") {
        gv_laserEnforcer = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/9B6EBA4F") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(59, lv_pindex);
        gf_SetupMosSI(60, lv_pindex);
        gv_magsize[lv_pindex] = 40;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("WarHound_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Buttons\\BTNMedic.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/5D529AF0") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/8B172BF7") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "CombatEngineer") {
        gv_combatEngineer = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/059773AE") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(49, lv_pindex);
        gf_SetupMosSI(50, lv_pindex);
        gv_magsize[lv_pindex] = 25;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Swann_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Combat_Engineer_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/5E0ABF2C") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/DC961B3C") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "AutomaticRifleman") {
        gv_automaticRifleman = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/D1147C36") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(35, lv_pindex);
        gf_SetupMosSI(36, lv_pindex);
        gv_magsize[lv_pindex] = 100;
        gv_reloadbasetime[lv_pindex] = 4.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Tychus_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Buttons\\BTNAutoRifle.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/666A1656") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/F64D95C5") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "HeavyGunner") {
        gv_heavyGunner = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/1B2B6EA8") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(65, lv_pindex);
        gf_SetupMosSI(66, lv_pindex);
        gv_magsize[lv_pindex] = 100;
        gv_reloadbasetime[lv_pindex] = 6.5;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Viking_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_HG_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectHG, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectHG, gv_playerHeroes[lv_pindex], false, lv_pindex);
        gf_DisplayOverheatBar(true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/2B6917E3") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/177D2684") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "Cyborg") {
        gv_cyborgMos = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/96322E0F") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(51, lv_pindex);
        gf_SetupMosSI(52, lv_pindex);
        gv_magsize[lv_pindex] = 35;
        gv_reloadbasetime[lv_pindex] = 4.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Marauder_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Cyborg_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/6E571161") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/FAF9FE9B") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "CavalryScout") {
        gv_calvaryScout = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/3EC61751") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(41, lv_pindex);
        gf_SetupMosSI(42, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 4.0;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Diamondback_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Cavalry_Scout_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/5757E9FA") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/5E3F642D") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "Flamethrower") {
        gv_flamethrower = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/4AF0A54B") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(37, lv_pindex);
        gf_SetupMosSI(38, lv_pindex);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropTerrazine, c_playerPropOperSetTo, 1000);
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeTerrazine, true);
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeVespene, false);
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeMinerals, false);
        gv_playerEncumbrance[lv_pindex] = 2000;
        DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[7], PlayerGroupSingle(lv_pindex), true);
        DialogControlSetVisible(gv_ammoDialogueItems[8], PlayerGroupSingle(lv_pindex), true);
        SoundPlayOnUnit(SoundLink("Firebat_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "firebat.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[8], (StringExternal("Param/Value/142A0102") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropTerrazine))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "SquadDesignatedMarksman") {
        gv_sDM = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/864AA1E5") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(43, lv_pindex);
        gf_SetupMosSI(44, lv_pindex);
        gv_magsize[lv_pindex] = 35;
        gv_reloadbasetime[lv_pindex] = 5.0;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Spectre_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Buttons\\Portraits\\BTNMarksman.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/1841F9A3") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/9971EB66") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "FarmerAkmaMOS") {
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeVespene, false);
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeMinerals, false);
        gv_playerEncumbrance[lv_pindex] = 2000;
        gv_playerMagMax[lv_pindex] = 3000;
        DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lv_pindex), false);
        SoundPlayOnUnit(SoundLink("THanson01Civilian700005", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\malecivilian1portrait_diff.dds";
    }
    else if (autoBB82F22A_val == "DrJashanMOS") {
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeVespene, false);
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeMinerals, false);
        gv_playerEncumbrance[lv_pindex] = 2000;
        gv_playerMagMax[lv_pindex] = 3000;
        DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lv_pindex), false);
        SoundPlayOnUnit(SoundLink("UnitVOScientistScientist00004", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\malecivilian1portrait_diff.dds";
    }
    else if (autoBB82F22A_val == "AH32Viper") {
        UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeVespene, true);
        gv_magsize[lv_pindex] = 500;
        gv_reloadbasetime[lv_pindex] = 8.0;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 25);
        gv_playerEncumbrance[lv_pindex] = 30;
        DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lv_pindex), false);
        SoundPlayOnUnit(SoundLink("Banshee_Attack", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\bansheeportrait_static.dds";
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/48012788") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/500AC343") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "Specter") {
        gv_specter = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/5060EB45") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(61, lv_pindex);
        gf_SetupMosSI(62, lv_pindex);
        gv_magsize[lv_pindex] = 80;
        gv_reloadbasetime[lv_pindex] = 5.0;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Nova_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Specter_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/CDE24475") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/407DB27C") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "JavelinGunnerRework") {
        gv_javelinGunner = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/1E93B2C6") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(45, lv_pindex);
        gf_SetupMosSI(46, lv_pindex);
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 4.0;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        CatalogFieldValueSet(c_gameCatalogButton, "BinocularsPL", "Hotkey", lv_pindex, gv_hotkeyBind[6]);
        SoundPlayOnUnit(SoundLink("Hill_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Jav_Portrait.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/78828973") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/B9A0E65B") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "MechOperator") {
        gv_mechOperator = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/923B743E") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gf_SetupMosSI(67, lv_pindex);
        gf_SetupMosSI(68, lv_pindex);
        gv_magsize[lv_pindex] = 80;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Banshee_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Images\\Mechoperator_static.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/78C8A1A7") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/F02F36F7") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "Vesania30") {
        gv_vesania30 = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/BFD5A784") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gv_magsize[lv_pindex] = 30;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Marauder_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\marauder_heavens_coop_portrait_static.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/F859B2B3") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/F2792E67") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "Cyborg20") {
        gv_cyborg20 = true;
        libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/2DDDA762") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
        gv_magsize[lv_pindex] = 80;
        gv_reloadbasetime[lv_pindex] = 3.9;
        SoundPlayOnUnit(SoundLink("Marauder_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\ghost_umojan_portrait_static.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        gf_SetupMosSI(71, lv_pindex);
        gf_SetupMosSI(72, lv_pindex);
        UnitBehaviorAddPlayer(lv_herounit, "CyborgPickingWeapon", lv_pindex, 1);
        DialogSetVisible(gv_borgWeaponDialog, PlayerGroupSingle(lv_pindex), true);
    }
    else if (autoBB82F22A_val == "Spectator") {
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        UnitKill(lv_herounit);
    }
    else if (autoBB82F22A_val == "Mercenary") {
        gv_mercenary = true;
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 4.5;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Reaper_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\reaperportrait_static.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/2D31BAD5") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/9C982892") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else if (autoBB82F22A_val == "BioSpecialist") {
        gv_bioSpecialist = true;
        gv_magsize[lv_pindex] = 80;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("LabresearchStetmann00017", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
        gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\stetmann_portrait_static.dds";
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
        libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/520B115D") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/9664C0B9") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
    }
    else {
    }

    UnitGroupAdd(gv_heroesGroup, lv_herounit);
    UnitGroupAdd(gv_undeadTargetGroup, lv_herounit);
    UnitControlGroupAddUnit(lv_pindex, 1, lv_herounit);
    UnitSelect(lv_herounit, lv_pindex, true);
    gv_playerHeroes[lv_pindex] = lv_herounit;
    UnitSetCustomValue(lv_herounit, 2, 16.0);
    libNtve_gf_SetDialogItemUnitLink(gv_unlockDialogItems[lv_pindex], UnitGetType(lv_herounit), PlayerGroupAll());
    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_pindex]), gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);
    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_pindex]), gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);
    UnitBehaviorAdd(lv_herounit, "AllyReveal", lv_herounit, 1);
    gv_heroCount += 1;
    libNtve_gf_SetDialogItemImage(gv_statusDialogItems[4][lv_pindex], gv_playerHeroImage[lv_pindex], PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_hUDDialogItems[4][lv_pindex], UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex])), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[4][lv_pindex], UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex])), PlayerGroupAll());
    gf_LoadCamoDecalBank(lv_pindex);
    UISetFrameVisible(PlayerGroupSingle(lv_pindex), c_syncFrameTypeAllianceButton, true);
    if ((gv_gamemode == 11)) {
        UnitInventoryCreate(gv_playerHeroes[lv_pindex], "SecurityArmor");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
        UnitBehaviorAdd(gv_playerHeroes[lv_pindex], "KillXp33Percent", gv_playerHeroes[lv_pindex], 1);
    }
    if ((PlayerGroupCount(gv_players) <= 3)) {
        UnitCreate(1, "InfantryRifleman", c_unitCreateIgnorePlacement, lv_pindex, UnitGetPosition(lv_herounit), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_playerminis, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        UnitSelect(UnitLastCreated(), lv_pindex, true);
        UnitControlGroupAddUnit(lv_pindex, 2, UnitLastCreated());
        gf_RandomMiniFlagDecal(UnitLastCreated());
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/CommandPanel/CommandButton09/ChargeLabel"));
    lv_hook = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupSingle(lv_pindex));
    DialogControlDestroy(lv_hook);
    if ((gv_gamemode == 12)) {
        DialogControlSetVisible(gv_sand_Box_View_Button, PlayerGroupSingle(lv_pindex), true);
    }
    gf_DisplayTipPanel(lv_pindex);

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelection_Init () {
    gt_HeroSelection = TriggerCreate("gt_HeroSelection_Func");
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseRifleman", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseBioSpecialist", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseForceRecon", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseMercenary", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseMechOperator", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChoosePointman", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseCavalryScout", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseAutomaticRifleman", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseCombatMedic", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseFlamethrower", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseEnforcer", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseSDM", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChoosePlatoonLeader", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseJavelinGunner", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseCombatEngineer", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseGhost", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseFireSupportSpecialist", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseCyborg", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseCommando", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseLaserEnforcer", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseVesania30", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseSpecter", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseOrbitalSupportSpecialist", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseHeavyGunner", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseAkma", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseJashan", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseAH32Viper", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseSpectator", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseRegendare", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseCyborg20", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autoselect Hero
//--------------------------------------------------------------------------------------------------
bool gt_AutoselectHero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopplayer;

    // Automatic Variable Declarations
    playergroup autoACD9E98F_g;
    int autoACD9E98F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_gamemode == 13) || (gv_gamemode < 12) || (gv_gamemode >= 18))) {
        Wait(52.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/310895FD"));
        Wait(25.0, c_timeGame);
        autoACD9E98F_g = gv_players;
        autoACD9E98F_var = -1;
        while (true) {
            autoACD9E98F_var = PlayerGroupNextPlayer(autoACD9E98F_g, autoACD9E98F_var);
            if (autoACD9E98F_var < 0) { break; }
            if ((gv_playerHeroes[autoACD9E98F_var] == null)) {
                if ((PlayerStatus(autoACD9E98F_var) == c_playerStatusActive) && (UnitAbilityChargeInfo(gv_heroselector[autoACD9E98F_var], AbilityCommand("ChooseCombatMedic", 0), c_unitAbilChargeCountLeft) > 1)) {
                    gv_combatMedic = true;
                    UnitIssueOrder(gv_heroselector[autoACD9E98F_var], Order(AbilityCommand("ChooseCombatMedic", 0)), c_orderQueueReplace);
                }
                else {
                    gv_rifleman = true;
                    UnitIssueOrder(gv_heroselector[autoACD9E98F_var], Order(AbilityCommand("ChooseRifleman", 0)), c_orderQueueReplace);
                }
            }
        }
    }
    TriggerEnable(gt_SelectHeroSelector, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoselectHero_Init () {
    gt_AutoselectHero = TriggerCreate("gt_AutoselectHero_Func");
    TriggerEnable(gt_AutoselectHero, false);
    TriggerAddEventGeneric(gt_AutoselectHero, "AutoHeroSelect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Hero Selector
//--------------------------------------------------------------------------------------------------
bool gt_SelectHeroSelector_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsSelected(gv_heroselector[EventPlayer()], EventPlayer()) == false) && (gv_playerHeroes[EventPlayer()] == null)) {
        UnitClearSelection(EventPlayer());
        UnitSelect(gv_heroselector[EventPlayer()], EventPlayer(), true);
        if ((DialogIsVisible(gv_nPCInventoryDialog, EventPlayer()) == true)) {
            DialogSetVisible(gv_nPCInventoryDialog, PlayerGroupSingle(EventPlayer()), false);
        }
        if ((DialogIsVisible(gv_heroInventoryDialog, EventPlayer()) == true)) {
            DialogSetVisible(gv_heroInventoryDialog, PlayerGroupSingle(EventPlayer()), false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectHeroSelector_Init () {
    gt_SelectHeroSelector = TriggerCreate("gt_SelectHeroSelector_Func");
    TriggerAddEventUnitSelected(gt_SelectHeroSelector, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Random Hero Select
//--------------------------------------------------------------------------------------------------
bool gt_RandomHeroSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomMos;
    unit lv_user;
    unit lv_herounit;
    int lv_pindex;
    int lv_hook;

    // Automatic Variable Declarations
    int autoE2E6D98D_val;
    string auto27737429_val;

    // Variable Initialization
    lv_user = EventUnit();
    lv_pindex = UnitGetOwner(lv_user);
    lv_hook = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerHeroes[lv_pindex] == null)) {
        lv_randomMos = RandomInt(1, 21);
        autoE2E6D98D_val = lv_randomMos;
        if (autoE2E6D98D_val == 1) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseRifleman", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            UnitCreate(1, "Rifleman", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_rifleman = true;
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 2) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseCombatMedic", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_combatMedic = true;
            UnitCreate(1, "CombatMedic", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 3) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseAutomaticRifleman", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_automaticRifleman = true;
            UnitCreate(1, "AutomaticRifleman", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 4) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseFlamethrower", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_flamethrower = true;
            UnitCreate(1, "Flamethrower", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 5) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseEnforcer", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_enforcer = true;
            UnitCreate(1, "Enforcer", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 6) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseCavalryScout", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_calvaryScout = true;
            UnitCreate(1, "CavalryScout", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 7) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseSDM", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_sDM = true;
            UnitCreate(1, "SquadDesignatedMarksman", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 8) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseJavelinGunner", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_javelinGunner = true;
            UnitCreate(1, "JavelinGunnerRework", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 9) {
            if ((gv_platoonLeader == false)) {
                UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChoosePlatoonLeader", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
                gv_platoonLeader = true;
                UnitCreate(1, "PlatoonLeader", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
                gv_playerRandomed[lv_pindex] = true;
            }
            else {
                UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseRifleman", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
                UnitCreate(1, "Rifleman", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
                gv_rifleman = true;
                gv_playerRandomed[lv_pindex] = true;
            }
        }
        else if (autoE2E6D98D_val == 10) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseCombatEngineer", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_combatEngineer = true;
            UnitCreate(1, "CombatEngineer", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 11) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseCyborg", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_cyborgMos = true;
            UnitCreate(1, "Cyborg", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 12) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseGhost", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_ghost = true;
            UnitCreate(1, "GhostHero", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 13) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseFireSupportSpecialist", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_fireSupportSpecialist = true;
            UnitCreate(1, "FireSupportSpecialist", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 14) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseCommando", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_commando = true;
            UnitCreate(1, "CommandoHero", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 15) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseLaserEnforcer", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_laserEnforcer = true;
            UnitCreate(1, "LaserEnforcer", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 16) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseSpecter", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_specter = true;
            UnitCreate(1, "Specter", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 17) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseOrbitalSupportSpecialist", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_orbitalSupportSpecialist = true;
            UnitCreate(1, "OrbitalSupportSpecialist", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 18) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseHeavyGunner", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_heavyGunner = true;
            UnitCreate(1, "HeavyGunner", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 19) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseMechOperator", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_mechOperator = true;
            UnitCreate(1, "MechOperator", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 20) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseVesania30", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_vesania30 = true;
            UnitCreate(1, "Vesania30", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else if (autoE2E6D98D_val == 21) {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseCyborg20", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            gv_cyborg20 = true;
            UnitCreate(1, "Cyborg20", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_playerRandomed[lv_pindex] = true;
        }
        else {
            UnitAbilitySpendExplicit(gv_heroselector[lv_pindex], AbilityCommand("ChooseRifleman", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
            UnitCreate(1, "Rifleman", 0, lv_pindex, UnitGetPosition(gv_heroselector[lv_pindex]), libNtve_gf_RandomAngle());
            gv_rifleman = true;
            gv_playerRandomed[lv_pindex] = true;
        }

        Wait(0.1, c_timeGame);
        lv_herounit = UnitLastCreated();
        if ((gv_playerHeroes[lv_pindex] != null)) {
            UnitRemove(lv_herounit);
            return true;
        }

        if ((gv_gamemode == 18)) {
            UnitSetPropertyFixed(lv_herounit, c_unitPropLevel, 6.0);
        }

        if (((UnitGetType(gv_playerHeroes[lv_pindex]) != "AH32Viper"))) {
            if ((gv_playerRankSet[lv_pindex] == 1)) {
                UnitBehaviorAdd(lv_herounit, "RankModifier", lv_herounit, (gf_GetPlayerRank(lv_pindex) - 1));
            }
            else {
                if ((gv_playerRankSet[lv_pindex] == 2)) {
                    UnitBehaviorAdd(lv_herounit, "RankModifier", lv_herounit, (gf_GetPlayerRank(lv_pindex) + 5));
                }
                else {
                    UnitBehaviorAdd(lv_herounit, "RankModifier", lv_herounit, (gf_GetPlayerRank(lv_pindex) + 4));
                }
            }
        }

        UnitGroupRemove(gv_heroselectors, gv_heroselector[lv_pindex]);
        UnitRemove(gv_heroselector[lv_pindex]);
        libNtve_gf_ShareVisionofUnit(gv_phantombeginning, false, lv_pindex);
        CameraLockInput(lv_pindex, false);
        if ((gv_playerRandomed[lv_pindex] == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_pindex), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pindex, false))) + (StringExternal("Param/Value/7E88C340") + UnitTypeGetName(UnitGetType(lv_herounit)))));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_pindex), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pindex, false))) + (StringExternal("Param/Value/C3B29C0B") + UnitTypeGetName(UnitGetType(lv_herounit)))));
        }
        libNtve_gf_SendActorMessageToUnit(lv_herounit, gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);

        auto27737429_val = UnitGetType(lv_herounit);
        if (auto27737429_val == "Rifleman") {
            gv_rifleman = true;
            gv_countRifleman += 1;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/ECB7C203") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(31, lv_pindex);
            gf_SetupMosSI(32, lv_pindex);
            gv_magsize[lv_pindex] = 60;
            gv_reloadbasetime[lv_pindex] = 3.9;
            PlayerModifyPropertyInt(UnitGetOwner(lv_herounit), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(UnitGetOwner(lv_herounit), c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Marine_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Buttons\\BTNSoldier.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/DA1DAC1A") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/429F4991") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
            if ((TechTreeUpgradeCount(lv_pindex, "MGEN", c_techCountCompleteOnly) == 1)) {
                UnitCreate(1, "InfantryRifleman", c_unitCreateIgnorePlacement, lv_pindex, UnitGetPosition(lv_herounit), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_playerminis, UnitLastCreated());
                UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
                UnitSelect(UnitLastCreated(), lv_pindex, true);
                UnitControlGroupAddUnit(lv_pindex, 2, UnitLastCreated());
                gf_RandomMiniFlagDecal(UnitLastCreated());
            }

        }
        else if (auto27737429_val == "CommandoHero") {
            gv_commando = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/0EEACF9C") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(57, lv_pindex);
            gf_SetupMosSI(58, lv_pindex);
            gv_magsize[lv_pindex] = 25;
            gv_reloadbasetime[lv_pindex] = 3.9;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Battlecruiser_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Custom Icons\\CommandoSelect.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/967498EE") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/10A51375") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "GhostHero") {
            gv_ghost = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/4003CA50") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(53, lv_pindex);
            gf_SetupMosSI(54, lv_pindex);
            gv_magsize[lv_pindex] = 80;
            gv_reloadbasetime[lv_pindex] = 3.9;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Ghost_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Ghost_Portrait.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/30BDA336") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/8E555055") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "OrbitalSupportSpecialist") {
            gv_orbitalSupportSpecialist = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/DC7330C2") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(63, lv_pindex);
            gf_SetupMosSI(64, lv_pindex);
            gv_magsize[lv_pindex] = 60;
            gv_reloadbasetime[lv_pindex] = 3.9;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("zUnit_HeroHyperion_Horner_027", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_OSS_Portrait.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/B38C59A1") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/C4C88CE5") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "CombatMedic") {
            gv_combatMedic = true;
            gv_medicScoreboard[lv_pindex] = true;
            gv_combatMedics += 1;
            PlayerGroupAdd(gv_medics, lv_pindex);
            PlayerOptionOverride(lv_pindex, "displayunitstatus", "All");
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/AB2DB115") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(33, lv_pindex);
            gf_SetupMosSI(34, lv_pindex);
            gv_magsize[lv_pindex] = 60;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Medic_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Combat_Medic_Portrait.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/7FC9F176") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/8370432F") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
            if ((TechTreeUpgradeCount(lv_pindex, "MGEN", c_techCountCompleteOnly) == 1)) {
                UnitCreate(1, "Infantry68WCombatMedic", c_unitCreateIgnorePlacement, lv_pindex, UnitGetPosition(lv_herounit), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_playerminis, UnitLastCreated());
                UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
                UnitSelect(UnitLastCreated(), lv_pindex, true);
                UnitControlGroupAddUnit(lv_pindex, 2, UnitLastCreated());
                gf_RandomMiniFlagDecal(UnitLastCreated());
            }

        }
        else if (auto27737429_val == "FireSupportSpecialist") {
            gv_fireSupportSpecialist = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/22E2516C") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(55, lv_pindex);
            gf_SetupMosSI(56, lv_pindex);
            gv_magsize[lv_pindex] = 60;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Hercules_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_FSS_Portrait.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/A83B9B9B") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/6004A3A3") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/CommandPanel/CommandButton14/ChargeLabel"));
            lv_hook = DialogControlLastCreated();
            libNtve_gf_SetDialogItemColor(lv_hook, Color(100.00, 27.45, 27.45), PlayerGroupSingle(lv_pindex));
            DialogControlDestroy(lv_hook);
        }
        else if (auto27737429_val == "PlatoonLeader") {
            gv_platoonLeader = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/49F7596C") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(47, lv_pindex);
            gf_SetupMosSI(48, lv_pindex);
            gv_magsize[lv_pindex] = 60;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            PlayerGroupAdd(gv_sFAATs, lv_pindex);
            TriggerExecute(gt_InitLNS, true, false);
            SoundPlayOnUnit(SoundLink("Tosh_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_PL_Portrait.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/CE7ADD5F") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/2813FECE") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "Enforcer") {
            gv_enforcer = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/062D8A90") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(39, lv_pindex);
            gf_SetupMosSI(40, lv_pindex);
            gv_magsize[lv_pindex] = 25;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Raynor_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Buttons\\Portraits\\BTNSFAAT.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/4650D3B4") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/02F9F553") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "LaserEnforcer") {
            gv_laserEnforcer = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/6B7DB622") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(59, lv_pindex);
            gf_SetupMosSI(60, lv_pindex);
            gv_magsize[lv_pindex] = 40;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("WarHound_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Buttons\\BTNMedic.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/7E70A46A") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/F4AFCD6E") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "CombatEngineer") {
            gv_combatEngineer = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/90BD535C") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(49, lv_pindex);
            gf_SetupMosSI(50, lv_pindex);
            gv_magsize[lv_pindex] = 25;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Swann_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Combat_Engineer_Portrait.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/017DEE89") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/F23E2A94") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "AutomaticRifleman") {
            gv_automaticRifleman = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/333CB16C") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(35, lv_pindex);
            gf_SetupMosSI(36, lv_pindex);
            gv_magsize[lv_pindex] = 100;
            gv_reloadbasetime[lv_pindex] = 4.9;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Tychus_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Buttons\\BTNAutoRifle.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/932546E3") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/4107201B") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "HeavyGunner") {
            gv_heavyGunner = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/93C8ADD7") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(65, lv_pindex);
            gf_SetupMosSI(66, lv_pindex);
            gv_magsize[lv_pindex] = 100;
            gv_reloadbasetime[lv_pindex] = 6.5;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Viking_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_HG_Portrait.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectHG, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectHG, gv_playerHeroes[lv_pindex], false, lv_pindex);
            gf_DisplayOverheatBar(true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/A521684D") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/D61E41E2") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "Cyborg") {
            gv_cyborgMos = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/D2A60232") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(51, lv_pindex);
            gf_SetupMosSI(52, lv_pindex);
            gv_magsize[lv_pindex] = 35;
            gv_reloadbasetime[lv_pindex] = 4.9;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Marauder_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Cyborg_Portrait.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/F4573796") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/ADF5F4C9") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "CavalryScout") {
            gv_calvaryScout = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/6787F7C8") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(41, lv_pindex);
            gf_SetupMosSI(42, lv_pindex);
            gv_magsize[lv_pindex] = 60;
            gv_reloadbasetime[lv_pindex] = 4.0;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Diamondback_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Cavalry_Scout_Portrait.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/F0F7E2AB") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/2F456B6F") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "Flamethrower") {
            gv_flamethrower = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/30A1D933") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(37, lv_pindex);
            gf_SetupMosSI(38, lv_pindex);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropTerrazine, c_playerPropOperSetTo, 1000);
            UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeTerrazine, true);
            UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeVespene, false);
            UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeMinerals, false);
            gv_playerEncumbrance[lv_pindex] = 2000;
            DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lv_pindex), false);
            DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lv_pindex), false);
            DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lv_pindex), false);
            DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lv_pindex), false);
            DialogControlSetVisible(gv_ammoDialogueItems[7], PlayerGroupSingle(lv_pindex), true);
            DialogControlSetVisible(gv_ammoDialogueItems[8], PlayerGroupSingle(lv_pindex), true);
            SoundPlayOnUnit(SoundLink("Firebat_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "firebat.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[8], (StringExternal("Param/Value/376E16CB") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropTerrazine))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "SquadDesignatedMarksman") {
            gv_sDM = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/0DB2F059") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(43, lv_pindex);
            gf_SetupMosSI(44, lv_pindex);
            gv_magsize[lv_pindex] = 35;
            gv_reloadbasetime[lv_pindex] = 5.0;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Spectre_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Buttons\\Portraits\\BTNMarksman.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/68C99CD5") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/9469D3AB") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "FarmerAkmaMOS") {
            UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeVespene, false);
            UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeMinerals, false);
            gv_playerEncumbrance[lv_pindex] = 2000;
            gv_playerMagMax[lv_pindex] = 3000;
            DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lv_pindex), false);
            DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lv_pindex), false);
            DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lv_pindex), false);
            DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lv_pindex), false);
            SoundPlayOnUnit(SoundLink("THanson01Civilian700005", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\malecivilian1portrait_diff.dds";
        }
        else if (auto27737429_val == "DrJashanMOS") {
            UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeVespene, false);
            UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeMinerals, false);
            gv_playerEncumbrance[lv_pindex] = 2000;
            gv_playerMagMax[lv_pindex] = 3000;
            DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lv_pindex), false);
            DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lv_pindex), false);
            DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lv_pindex), false);
            DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lv_pindex), false);
            SoundPlayOnUnit(SoundLink("UnitVOScientistScientist00004", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\malecivilian1portrait_diff.dds";
        }
        else if (auto27737429_val == "AH32Viper") {
            UISetResourceVisible(PlayerGroupSingle(lv_pindex), c_resourceTypeVespene, true);
            gv_magsize[lv_pindex] = 500;
            gv_reloadbasetime[lv_pindex] = 8.0;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 25);
            gv_playerEncumbrance[lv_pindex] = 30;
            DialogControlSetVisible(gv_ammoDialogueItems[3], PlayerGroupSingle(lv_pindex), false);
            DialogControlSetVisible(gv_ammoDialogueItems[4], PlayerGroupSingle(lv_pindex), false);
            SoundPlayOnUnit(SoundLink("Banshee_Attack", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\bansheeportrait_static.dds";
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/F459307B") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/2C60CBEB") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "Specter") {
            gv_specter = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/BDF9C18A") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(61, lv_pindex);
            gf_SetupMosSI(62, lv_pindex);
            gv_magsize[lv_pindex] = 80;
            gv_reloadbasetime[lv_pindex] = 5.0;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Nova_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Specter_Portrait.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/7D738FB7") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/2919AA96") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "JavelinGunnerRework") {
            gv_javelinGunner = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/0A911939") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(45, lv_pindex);
            gf_SetupMosSI(46, lv_pindex);
            gv_magsize[lv_pindex] = 60;
            gv_reloadbasetime[lv_pindex] = 4.0;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            CatalogFieldValueSet(c_gameCatalogButton, "BinocularsPL", "Hotkey", lv_pindex, gv_hotkeyBind[6]);
            SoundPlayOnUnit(SoundLink("Hill_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Buttons\\Portraits\\BTN_Jav_Portrait.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/7E73FE1D") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/CFE6FFBD") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "MechOperator") {
            gv_mechOperator = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/153198CC") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gf_SetupMosSI(67, lv_pindex);
            gf_SetupMosSI(68, lv_pindex);
            gv_magsize[lv_pindex] = 80;
            gv_reloadbasetime[lv_pindex] = 3.9;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Banshee_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Images\\Mechoperator_static.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/9A2E197F") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/3BCD7AE0") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "Vesania30") {
            gv_vesania30 = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/36831560") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gv_magsize[lv_pindex] = 30;
            gv_reloadbasetime[lv_pindex] = 3.9;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Marauder_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\marauder_heavens_coop_portrait_static.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/8DB5B951") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/154EE5D1") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "Cyborg20") {
            gv_cyborg20 = true;
            libNtve_gf_SetDialogItemText(gv_sIMosName[lv_pindex], (StringExternal("Param/Value/6E044BAE") + UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex]))), PlayerGroupSingle(lv_pindex));
            gv_magsize[lv_pindex] = 80;
            gv_reloadbasetime[lv_pindex] = 3.9;
            SoundPlayOnUnit(SoundLink("Marauder_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\ghost_umojan_portrait_static.dds";
            gf_SetupMosSI(71, lv_pindex);
            gf_SetupMosSI(72, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            UnitBehaviorAddPlayer(lv_herounit, "CyborgPickingWeapon", lv_pindex, 1);
            DialogSetVisible(gv_borgWeaponDialog, PlayerGroupSingle(lv_pindex), true);
        }
        else if (auto27737429_val == "Spectator") {
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            UnitKill(lv_herounit);
        }
        else if (auto27737429_val == "Mercenary") {
            gv_mercenary = true;
            gv_magsize[lv_pindex] = 60;
            gv_reloadbasetime[lv_pindex] = 4.5;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("Reaper_Ready", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\reaperportrait_static.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/A33C29BE") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/147E0E7B") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else if (auto27737429_val == "BioSpecialist") {
            gv_bioSpecialist = true;
            gv_magsize[lv_pindex] = 80;
            gv_reloadbasetime[lv_pindex] = 3.9;
            PlayerModifyPropertyInt(lv_pindex, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
            PlayerModifyPropertyInt(lv_pindex, c_playerPropVespene, c_playerPropOperSetTo, 9);
            SoundPlayOnUnit(SoundLink("LabresearchStetmann00017", -1), PlayerGroupAll(), lv_herounit, 0.0, 100.0, 0.0);
            gv_playerHeroImage[lv_pindex] = "Assets\\Textures\\stetmann_portrait_static.dds";
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_SelectMos, gv_playerHeroes[lv_pindex], true, lv_pindex);
            libE6C8C21C_gf_RegisterUnitIsSelectedEvent(gt_DeselectMos, gv_playerHeroes[lv_pindex], false, lv_pindex);
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/2B05C5E4") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropMinerals))), PlayerGroupSingle(lv_pindex));
            libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/C6C49FE3") + IntToText(PlayerGetPropertyInt(lv_pindex, c_playerPropVespene))), PlayerGroupSingle(lv_pindex));
        }
        else {
        }

        UnitGroupAdd(gv_heroesGroup, lv_herounit);
        UnitGroupAdd(gv_undeadTargetGroup, lv_herounit);
        UnitControlGroupAddUnit(lv_pindex, 1, lv_herounit);
        UnitSelect(lv_herounit, lv_pindex, true);
        gv_playerHeroes[lv_pindex] = lv_herounit;
        UnitSetCustomValue(lv_herounit, 2, 16.0);
        libNtve_gf_SetDialogItemUnitLink(gv_unlockDialogItems[lv_pindex], UnitGetType(lv_herounit), PlayerGroupAll());
        ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_pindex]), gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);
        ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_pindex]), gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);
        UnitBehaviorAdd(lv_herounit, "AllyReveal", lv_herounit, 1);
        gv_heroCount += 1;
        libNtve_gf_SetDialogItemImage(gv_statusDialogItems[4][lv_pindex], gv_playerHeroImage[lv_pindex], PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_hUDDialogItems[4][lv_pindex], UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex])), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[4][lv_pindex], UnitTypeGetName(UnitGetType(gv_playerHeroes[lv_pindex])), PlayerGroupAll());
        gf_LoadCamoDecalBank(lv_pindex);
        UISetFrameVisible(PlayerGroupSingle(lv_pindex), c_syncFrameTypeAllianceButton, true);
        if ((gv_gamemode == 11)) {
            UnitInventoryCreate(gv_playerHeroes[lv_pindex], "SecurityArmor");
            UnitSetOwner(UnitInventoryLastCreated(), 0, true);
            UnitBehaviorAdd(gv_playerHeroes[lv_pindex], "KillXp33Percent", gv_playerHeroes[lv_pindex], 1);
        }
        if ((PlayerGroupCount(gv_players) <= 3)) {
            UnitCreate(1, "InfantryRifleman", c_unitCreateIgnorePlacement, lv_pindex, UnitGetPosition(lv_herounit), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            UnitSelect(UnitLastCreated(), lv_pindex, true);
            UnitControlGroupAddUnit(lv_pindex, 2, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
        }

        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/CommandPanel/CommandButton09/ChargeLabel"));
        lv_hook = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupSingle(lv_pindex));
        DialogControlDestroy(lv_hook);
        if ((gv_gamemode == 12)) {
            DialogControlSetVisible(gv_sand_Box_View_Button, PlayerGroupSingle(lv_pindex), true);
        }
        gf_DisplayTipPanel(lv_pindex);

        Wait(0.1, c_timeGame);
        if ((gv_playerHeroes[lv_pindex] == null)) {
            UIDisplayMessage(PlayerGroupSingle(lv_pindex), c_messageAreaSubtitle, StringExternal("Param/Value/506EB4E0"));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RandomHeroSelect_Init () {
    gt_RandomHeroSelect = TriggerCreate("gt_RandomHeroSelect_Func");
    TriggerAddEventUnitAbility(gt_RandomHeroSelect, null, AbilityCommand("ChooseRandomMos", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Setup Story
//--------------------------------------------------------------------------------------------------
bool gt_SetupStory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCD37F65C_g;
    int autoCD37F65C_u;
    unit autoCD37F65C_var;
    unitgroup auto61BA997D_g;
    int auto61BA997D_u;
    unit auto61BA997D_var;
    unitgroup autoBFB88DEC_g;
    int autoBFB88DEC_u;
    unit autoBFB88DEC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    GameSetLighting("UACDawn", 0.0);
    gv_ceallowed = false;
    libNtve_gf_SetAlliance(13, 15, libNtve_ge_AllianceSetting_Ally);
    autoCD37F65C_g = UnitGroup("Bunker", c_playerAny, RegionRect(0.0, 150.0, 200.0, 250.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCD37F65C_u = UnitGroupCount(autoCD37F65C_g, c_unitCountAll);
    for (;; autoCD37F65C_u -= 1) {
        autoCD37F65C_var = UnitGroupUnitFromEnd(autoCD37F65C_g, autoCD37F65C_u);
        if (autoCD37F65C_var == null) { break; }
        gf_FillBunker(autoCD37F65C_var);
    }

    ObjectiveCreate(StringExternal("Param/Value/EDC1F97C"), StringToText(""), c_objectiveStateActive, false);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_optionalObj = ObjectiveLastCreated();
    ObjectiveCreate(StringToText(""), StringToText(""), c_objectiveStateActive, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_mainObj = ObjectiveLastCreated();
    ObjectiveCreate(StringToText(""), StringToText(""), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_secondObj = ObjectiveLastCreated();
    ObjectiveCreate(StringToText(""), StringToText(""), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_thirdObj = ObjectiveLastCreated();
    gf_MoveObjectivePanel(0, 85, c_anchorTopLeft);
    libNtve_gf_SetDialogItemMaximumValue(gv_objective_Mission_Tracker, gv_objective_Mission_Tracker_Max, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(gv_objective_Mission_Tracker, gv_objective_Mission_Tracker_Current, PlayerGroupAll());

    TimerWindowCreate(gv_missiontimer, StringExternal("Param/Value/2F72BC7B"), false, false);
    gv_missiontimerwindow = TimerWindowLastCreated();
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(0.00, 50.20, 100.00), 1);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(92.55, 92.55, 0.00), 2);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 50.20, 0.00), 3);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 0.00, 0.00), 4);
    TimerWindowCreate(gv_missiontimer2, StringExternal("Param/Value/D12C99B2"), false, false);
    gv_missiontimerwindow2 = TimerWindowLastCreated();
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(0.00, 50.20, 100.00), 1);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(92.55, 92.55, 0.00), 2);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 50.20, 0.00), 3);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 0.00, 0.00), 4);
    TimerWindowCreate(gv_bossTimer, StringExternal("Param/Value/1FA59B4E"), false, false);
    gv_bossTimerWindow = TimerWindowLastCreated();
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(0.00, 50.20, 100.00), 1);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(92.55, 92.55, 0.00), 2);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 50.20, 0.00), 3);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 0.00, 0.00), 4);

    auto61BA997D_g = UnitGroup("Bunker", c_playerAny, RegionRect(0.0, 150.0, 200.0, 250.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto61BA997D_u = UnitGroupCount(auto61BA997D_g, c_unitCountAll);
    for (;; auto61BA997D_u -= 1) {
        auto61BA997D_var = UnitGroupUnitFromEnd(auto61BA997D_g, auto61BA997D_u);
        if (auto61BA997D_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto61BA997D_var, true);
    }
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(449830515), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1821781536), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1479446397), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1669777111), true);
    UnitGroupAdd(gv_bunkerGroup, UnitFromId(449830515));
    UnitGroupAdd(gv_bunkerGroup, UnitFromId(1821781536));
    UnitGroupAdd(gv_bunkerGroup, UnitFromId(1479446397));
    UnitGroupAdd(gv_bunkerGroup, UnitFromId(1669777111));

    UnitIssueOrder(UnitFromId(1240), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1241), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1238), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1239), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1928584749), Order(AbilityCommand("MetalGateStraightVerticalLFLowered", 0)), c_orderQueueReplace);

    autoBFB88DEC_g = UnitGroup("InfantryRifleman", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBFB88DEC_u = UnitGroupCount(autoBFB88DEC_g, c_unitCountAll);
    for (;; autoBFB88DEC_u -= 1) {
        autoBFB88DEC_var = UnitGroupUnitFromEnd(autoBFB88DEC_g, autoBFB88DEC_u);
        if (autoBFB88DEC_var == null) { break; }
        UnitGroupAdd(gv_bunkerSoldiers, autoBFB88DEC_var);
    }
    if ((gv_averageXP >= 100000)) {
        gv_spawnCount = (gv_spawnCount + 2);
    }
    else if ((gv_averageXP >= 300000)) {
        gv_spawnCount = (gv_spawnCount + 4);
    }
    else if ((gv_averageXP >= 1000000)) {
        gv_spawnCount = (gv_spawnCount + 6);
    }

    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/8A349C6F"), StringToText(""), 7.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    Wait(7.0, c_timeGame);
    TriggerSendEvent("Begin Story");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetupStory_Init () {
    gt_SetupStory = TriggerCreate("gt_SetupStory_Func");
    TriggerAddEventGeneric(gt_SetupStory, "Setup Story");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Begin Story
//--------------------------------------------------------------------------------------------------
bool gt_BeginStory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    playergroup autoF2CD97DB_g;
    int autoF2CD97DB_var;
    playergroup auto2609A95A_g;
    int auto2609A95A_var;
    playergroup autoD88D544E_g;

    // Variable Initialization
    lv_loopint = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "ColonistShipFlying", 0, 13, PointFromId(370), 270.0);
    gv_phantombeginning = UnitLastCreated();
    autoF2CD97DB_g = gv_players;
    autoF2CD97DB_var = -1;
    while (true) {
        autoF2CD97DB_var = PlayerGroupNextPlayer(autoF2CD97DB_g, autoF2CD97DB_var);
        if (autoF2CD97DB_var < 0) { break; }
        CameraPan(autoF2CD97DB_var, RegionGetCenter(RegionFromId(6)), 0.0, -1, 10, false);
        CameraLockInput(autoF2CD97DB_var, true);
    }
    UnitIssueOrder(gv_phantombeginning, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(RegionFromId(6))), c_orderQueueReplace);
    TriggerSendEvent("AutoHeroSelect");
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, true);
    auto2609A95A_g = gv_players;
    auto2609A95A_var = -1;
    while (true) {
        auto2609A95A_var = PlayerGroupNextPlayer(auto2609A95A_g, auto2609A95A_var);
        if (auto2609A95A_var < 0) { break; }
        DialogSetVisible(gv_functionaldialog[auto2609A95A_var], PlayerGroupSingle(auto2609A95A_var), true);
    }
    gf_DisplayUIButtons(true);
    gf_MissionText(StringExternal("Param/Value/EBB5B41B"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/DBD4E1DA"));
    Wait(9.0, c_timeGame);
    autoD88D544E_g = gv_players;
    lv_loopint = -1;
    while (true) {
        lv_loopint = PlayerGroupNextPlayer(autoD88D544E_g, lv_loopint);
        if (lv_loopint < 0) { break; }
        if ((gv_mod_1life == true)) {
            TechTreeUpgradeAddLevel(lv_loopint, "1Life", 1);
        }
        else if ((gv_mod_rifle == true)) {
            TechTreeUpgradeAddLevel(lv_loopint, "RifleMode", 1);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroSelector", 0, lv_loopint, PlayerStartLocation(lv_loopint));
        gv_heroselector[lv_loopint] = UnitLastCreated();
        UnitClearSelection(lv_loopint);
        if ((gv_mod_allrandom)) {
            UnitIssueOrder(gv_heroselector[lv_loopint], Order(AbilityCommand("ChooseRandomMos", 0)), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
        }
        else {
            UnitSelect(UnitLastCreated(), lv_loopint, true);
            UnitGroupAdd(gv_heroselectors, UnitLastCreated());
        }
    }
    Wait(0.1, c_timeGame);
    TriggerEnable(gt_SelectHeroSelector, true);
    TriggerEnable(gt_ConductKLE, true);
    gf_MissionText(StringExternal("Param/Value/9915900B"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(7)), ColorWithAlpha(0.00, 100.00, 0.00, 49.02), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/BA25CD8D"));
    gv_missionping = PingLastCreated();
    gf_DisplayObjectiveMissionCounter(ge_ObjectiveMissionType_Show);
    ObjectiveSetState(gv_missionCompletionAmount, c_objectiveStateActive);
    ObjectiveSetName(gv_missionCompletionAmount, (StringExternal("Param/Value/60B9BD7A") + FixedToText(0.0, 1) + StringExternal("Param/Value/3F5A774F")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeginStory_Init () {
    gt_BeginStory = TriggerCreate("gt_BeginStory_Func");
    TriggerAddEventGeneric(gt_BeginStory, "Begin Story");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conduct KLE
//--------------------------------------------------------------------------------------------------
bool gt_ConductKLE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SkipActionsIfGameOver();
    PingSetVisible(gv_missionping, false);
    UnitCreate(1, "Windsor", 0, 0, RegionGetCenter(RegionFromId(7)), 270.0);
    UnitSetInfoText(UnitLastCreated(), StringToText(""), StringExternal("Param/Value/2AF74D0D"), StringToText(""));
    gv_colWindsor = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_colWindsor, true);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", UnitGetPosition(gv_colWindsor));
    gv_sensorbeacon = libNtve_gf_ActorLastCreated();

    gf_MissionText(StringExternal("Param/Value/68B313B1"));
    Wait(4.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/13473A92"));
    Wait(6.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/BCA79EEE"));
    Wait(2.0, c_timeGame);

    TriggerEnable(gt_UndeadSpawningPrologue, true);
    PingDestroy(gv_missionping);
    libNtve_gf_KillModel(gv_sensorbeacon);
    gf_MissionText(StringExternal("Param/Value/50D10A83"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/6A0531DE"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/B2E53C6A"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/38ADB472"));
    Wait(7.0, c_timeGame);

    if ((RandomInt(0, 100) >= 50)) {
        gf_MissionText(StringExternal("Param/Value/AAB30823"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/EEF6E3E2"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/F582219D"));
        gf_SucceedMission(5, StringExternal("Param/Value/812CD72E"), 0, false);
        gf_UpdateMissionCompletionTracker(true);
        Wait(5.0, c_timeGame);
        UnitRemove(gv_colWindsor);
        if ((gv_missionAutostart)) {
            gf_BMDDTowerNetwork();
        }

    }
    else {
        gf_MissionText(StringExternal("Param/Value/18D6BB64"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/DB261D52"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/7B715C2D"));
        gf_SucceedMission(20, StringExternal("Param/Value/AE3DAB09"), 0, false);
        gf_UpdateMissionCompletionTracker(true);
        Wait(5.0, c_timeGame);
        UnitRemove(gv_colWindsor);
        if ((gv_missionAutostart)) {
            gf_SporeColonies();
        }

    }
    TriggerEnable(gt_InitWeaponCaches, true);
    TriggerSendEvent("weapon cache init");
    TriggerEnable(gt_YetiSpawnLoop, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConductKLE_Init () {
    gt_ConductKLE = TriggerCreate("gt_ConductKLE_Func");
    TriggerEnable(gt_ConductKLE, false);
    TriggerAddEventUnitRegion(gt_ConductKLE, null, RegionFromId(7), true);
    TriggerAddEventUnitRegion(gt_ConductKLE, null, RegionFromId(7), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yeti Spawn Loop
//--------------------------------------------------------------------------------------------------
bool gt_YetiSpawnLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    if ((gv_gamemode == 1)) {
        gf_SpawnUndead(2, "ZombieYeti", 10);
    }
    else if ((gv_gamemode == 2)) {
        gf_SpawnUndead(2, "ZombieYeti", 5);
    }
    else if ((gv_gamemode == 3)) {
        gf_SpawnUndead(2, "ZombieYeti", 4);
    }
    else if ((gv_gamemode == 4)) {
        gf_SpawnUndead(2, "ZombieYeti", 3);
    }
    else if ((gv_gamemode == 5)) {
        gf_SpawnUndead(2, "ZombieYeti", 2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YetiSpawnLoop_Init () {
    gt_YetiSpawnLoop = TriggerCreate("gt_YetiSpawnLoop_Func");
    TriggerEnable(gt_YetiSpawnLoop, false);
    TriggerAddEventTimePeriodic(gt_YetiSpawnLoop, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Approach Tower
//--------------------------------------------------------------------------------------------------
bool gt_ApproachTower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    bool lv_alldone;
    fixed lv_placenumber;

    // Automatic Variable Declarations
    int auto199095F0_ae;
    const int auto199095F0_ai = 1;
    int auto3F037303_ae;
    const int auto3F037303_ai = 1;
    unitgroup autoB883D019_g;
    int autoB883D019_u;
    unit autoB883D019_var;
    int auto34728864_ae;
    const int auto34728864_ai = 1;

    // Variable Initialization
    lv_alldone = true;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto199095F0_ae = gv_sensorcount;
    lv_loopint = 1;
    for ( ; ( (auto199095F0_ai >= 0 && lv_loopint <= auto199095F0_ae) || (auto199095F0_ai < 0 && lv_loopint >= auto199095F0_ae) ) ; lv_loopint += auto199095F0_ai ) {
        if ((gv_waterSiteActors[lv_loopint] != null)) {
            lv_alldone = false;
        }

    }
    if ((lv_alldone == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ApproachTower, false);
        gf_SucceedMission((10 + ((gv_gamemode * 1) * 5)), (StringExternal("Param/Value/64B6A1CA") + IntToText(gv_towerCount) + StringExternal("Param/Value/DFF4188A")), 0, false);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        gf_MissionText(StringExternal("Param/Value/7DF71B6D"));
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_UpdateMissionCompletionTracker(true);
        if ((gv_missionAutostart == true) && (gv_gamemode == 5)) {
            gf_SentryGuns();
        }
        else {
            if ((gv_missionAutostart == true) && (RandomInt(0, 1) == 1)) {
                gf_QuarantineCivilians();
            }
            else {
                gf_SentryGuns();
            }
        }
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        return true;
    }

    if ((TimerGetRemaining(gv_missiontimer) <= 1.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_UpdateMissionCompletionTracker(true);
        auto3F037303_ae = gv_sensorcount;
        lv_loopint = 1;
        for ( ; ( (auto3F037303_ai >= 0 && lv_loopint <= auto3F037303_ae) || (auto3F037303_ai < 0 && lv_loopint >= auto3F037303_ae) ) ; lv_loopint += auto3F037303_ai ) {
            PingDestroy(gv_aORegionPings[lv_loopint]);
            libNtve_gf_KillModel(gv_waterSiteActors[lv_loopint]);
            TextTagDestroy(gv_towerTag[lv_loopint]);
        }
        if ((gv_towerCount == 0)) {
            gv_pingRate = 0.0;
            gf_FailMission(20, StringExternal("Param/Value/0B0EB2E3"), 1);
            gf_MissionText(StringExternal("Param/Value/859ED8B3"));
        }
        else if ((gv_towerCount <= gv_sensorcount)) {
            gf_SucceedMission((gv_towerCount * 15), (StringExternal("Param/Value/9207F5DB") + IntToText(gv_towerCount) + StringExternal("Param/Value/1A5E7E3B")), 0, false);
            gf_SignalStrengthDialogue(gv_towerCount);
        }
        if ((gv_missionAutostart == true) && (gv_gamemode == 5)) {
            gf_SentryGuns();
        }
        else {
            if ((gv_missionAutostart == true) && (RandomInt(0, 1) == 1)) {
                gf_QuarantineCivilians();
            }
            else {
                gf_SentryGuns();
            }
        }
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        return true;
    }

    autoB883D019_g = gv_heroesGroup;
    autoB883D019_u = UnitGroupCount(autoB883D019_g, c_unitCountAll);
    for (;; autoB883D019_u -= 1) {
        autoB883D019_var = UnitGroupUnitFromEnd(autoB883D019_g, autoB883D019_u);
        if (autoB883D019_var == null) { break; }
        auto34728864_ae = gv_sensorcount;
        lv_loopint = 1;
        for ( ; ( (auto34728864_ai >= 0 && lv_loopint <= auto34728864_ae) || (auto34728864_ai < 0 && lv_loopint >= auto34728864_ae) ) ; lv_loopint += auto34728864_ai ) {
            if ((libNtve_gf_UnitInRegion(autoB883D019_var, gv_waterSites[lv_loopint]) == true) && (UnitHasBehavior(autoB883D019_var, "RepairingTower") == false) && (UnitGroupCount(UnitGroup(null, c_playerAny, gv_waterSites[lv_loopint], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && (gv_waterSiteActors[lv_loopint] != null) && (UnitGroupHasUnit(gv_waterGatherers, autoB883D019_var) == false)) {
                gf_RepairingTower(autoB883D019_var, gv_waterSites[lv_loopint], lv_loopint);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApproachTower_Init () {
    gt_ApproachTower = TriggerCreate("gt_ApproachTower_Func");
    TriggerEnable(gt_ApproachTower, false);
    TriggerAddEventTimePeriodic(gt_ApproachTower, 1.01, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick Up Sentry Guns
//--------------------------------------------------------------------------------------------------
bool gt_PickUpSentryGuns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    unit lv_unit;

    // Automatic Variable Declarations
    int auto9BC3BA93_ae;
    const int auto9BC3BA93_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitInventoryItem()) == "MK44SentryGun2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto9BC3BA93_ae = gv_sensorcount;
    lv_loopint = 1;
    for ( ; ( (auto9BC3BA93_ai >= 0 && lv_loopint <= auto9BC3BA93_ae) || (auto9BC3BA93_ai < 0 && lv_loopint >= auto9BC3BA93_ae) ) ; lv_loopint += auto9BC3BA93_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), gv_pingNumeral[lv_loopint], RegionGetCenter(gv_highlanders[lv_loopint]), ColorWithAlpha(84.31, 27.45, 0.00, 49.02), 0.0, 270.0);
        PingSetScale(PingLastCreated(), 0.8);
        PingSetTooltip(PingLastCreated(), (StringExternal("Param/Value/6DEE079A") + IntToText(lv_loopint)));
        gv_sensorpings[lv_loopint] = PingLastCreated();
    }
    libNtve_gf_KillModel(gv_sensorbeacon);
    PingDestroy(gv_sensorpings[0]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickUpSentryGuns_Init () {
    gt_PickUpSentryGuns = TriggerCreate("gt_PickUpSentryGuns_Func");
    TriggerEnable(gt_PickUpSentryGuns, false);
    TriggerAddEventUnitInventoryChange(gt_PickUpSentryGuns, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Gun Placement Area
//--------------------------------------------------------------------------------------------------
bool gt_SentryGunPlacementArea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    int autoE439CC27_ae;
    const int autoE439CC27_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }

        if (!((gf_CountItemType("MK44SentryGun2", EventUnit()) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE439CC27_ae = gv_sensorcount;
    lv_int = 1;
    for ( ; ( (autoE439CC27_ai >= 0 && lv_int <= autoE439CC27_ae) || (autoE439CC27_ai < 0 && lv_int >= autoE439CC27_ae) ) ; lv_int += autoE439CC27_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnit(), gv_highlanders[lv_int]) == true)) {
            ActorSend(gv_placementArea[lv_int], "SetVisibility 1");
            TextTagShow(gv_placementAreaText[lv_int], PlayerGroupAll(), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryGunPlacementArea_Init () {
    gt_SentryGunPlacementArea = TriggerCreate("gt_SentryGunPlacementArea_Func");
    TriggerEnable(gt_SentryGunPlacementArea, false);
    TriggerAddEventUnitRegion(gt_SentryGunPlacementArea, null, RegionFromId(142), true);
    TriggerAddEventUnitRegion(gt_SentryGunPlacementArea, null, RegionFromId(312), true);
    TriggerAddEventUnitRegion(gt_SentryGunPlacementArea, null, RegionFromId(313), true);
    TriggerAddEventUnitRegion(gt_SentryGunPlacementArea, null, RegionFromId(182), true);
    TriggerAddEventUnitRegion(gt_SentryGunPlacementArea, null, RegionFromId(183), true);
    TriggerAddEventUnitRegion(gt_SentryGunPlacementArea, null, RegionFromId(184), true);
    TriggerAddEventUnitRegion(gt_SentryGunPlacementArea, null, RegionFromId(185), true);
    TriggerAddEventUnitRegion(gt_SentryGunPlacementArea, null, RegionFromId(186), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Place Sentry Guns
//--------------------------------------------------------------------------------------------------
bool gt_PlaceSentryGuns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    bool lv_inaregion;
    bool lv_allsensorsset;

    // Automatic Variable Declarations
    int auto87C861F7_ae;
    const int auto87C861F7_ai = 1;
    int auto199FCF7F_ae;
    const int auto199FCF7F_ai = 1;
    int auto2C90A8AA_ae;
    const int auto2C90A8AA_ai = 1;

    // Variable Initialization
    lv_allsensorsset = true;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnitInventoryItem()) == "MK44SentryGun2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto87C861F7_ae = gv_sensorcount;
    lv_loopint = 1;
    for ( ; ( (auto87C861F7_ai >= 0 && lv_loopint <= auto87C861F7_ae) || (auto87C861F7_ai < 0 && lv_loopint >= auto87C861F7_ae) ) ; lv_loopint += auto87C861F7_ai ) {
        if ((libNtve_gf_UnitInRegion(UnitInventoryUnit(EventUnitInventoryItem()), gv_highlanders[lv_loopint]) == true) && (gv_sentrySet[lv_loopint] == false)) {
            gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
            UnitGroupRemove(gv_simpleMissionItems, EventUnitInventoryItem());
            libNtve_gf_KillModel(gv_placementArea[lv_loopint]);
            TextTagDestroy(gv_placementAreaText[lv_loopint]);
            UnitRemove(EventUnitInventoryItem());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGun", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())));
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById DecalUSFlag2");
            gv_sentrySet[lv_loopint] = true;
            lv_inaregion = true;
            PingDestroy(gv_sensorpings[lv_loopint]);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, ((StringExternal("Param/Value/390FEADC") + IntToText(lv_loopint)) + StringExternal("Param/Value/16F3A5C1")));
        }
    }
    if ((lv_inaregion == false)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaError, StringExternal("Param/Value/8465CE92"));
        auto199FCF7F_ae = gv_sensorcount;
        lv_loopint = 1;
        for ( ; ( (auto199FCF7F_ai >= 0 && lv_loopint <= auto199FCF7F_ae) || (auto199FCF7F_ai < 0 && lv_loopint >= auto199FCF7F_ae) ) ; lv_loopint += auto199FCF7F_ai ) {
            if ((gv_sentrySet[lv_loopint] == false)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), "PingAlert", RegionGetCenter(gv_highlanders[lv_loopint]), ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 2.0, 270.0);
            }
        }
    }
    auto2C90A8AA_ae = gv_sensorcount;
    lv_loopint = 1;
    for ( ; ( (auto2C90A8AA_ai >= 0 && lv_loopint <= auto2C90A8AA_ae) || (auto2C90A8AA_ai < 0 && lv_loopint >= auto2C90A8AA_ae) ) ; lv_loopint += auto2C90A8AA_ai ) {
        if ((gv_sentrySet[lv_loopint] == false)) {
            lv_allsensorsset = false;
        }
    }
    if ((lv_allsensorsset == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_SentryGunTimeEnd, false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_UpdateMissionCompletionTracker(true);
        gf_SucceedMission(45, StringExternal("Param/Value/C09A736B"), -1, false);
        TimerWindowShow(gv_missiontimerwindow2, PlayerGroupAll(), false);
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        gf_DefendBalaad();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlaceSentryGuns_Init () {
    gt_PlaceSentryGuns = TriggerCreate("gt_PlaceSentryGuns_Func");
    TriggerEnable(gt_PlaceSentryGuns, false);
    TriggerAddEventUnitInventoryChange(gt_PlaceSentryGuns, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Gun Time End
//--------------------------------------------------------------------------------------------------
bool gt_SentryGunTimeEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_placenumber;
    text lv_comment;
    int lv_loopint;
    unit lv_unit;

    // Automatic Variable Declarations
    int auto983DB47E_ae;
    const int auto983DB47E_ai = 1;
    int autoA506520F_ae;
    const int autoA506520F_ai = 1;
    unitgroup auto37BCA0DF_g;
    int auto37BCA0DF_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PlaceSentryGuns, false);
    TriggerEnable(gt_SentryGunPlacementArea, false);
    PingDestroy(gv_sensorpings[0]);
    auto983DB47E_ae = gv_sensorcount;
    lv_loopint = 1;
    for ( ; ( (auto983DB47E_ai >= 0 && lv_loopint <= auto983DB47E_ae) || (auto983DB47E_ai < 0 && lv_loopint >= auto983DB47E_ae) ) ; lv_loopint += auto983DB47E_ai ) {
        if ((gv_sentrySet[lv_loopint] == false)) {
            PingDestroy(gv_sensorpings[lv_loopint]);
        }
        else {
            lv_placenumber += 1;
        }
    }
    autoA506520F_ae = gv_sensorcount;
    lv_loopint = 1;
    for ( ; ( (autoA506520F_ai >= 0 && lv_loopint <= autoA506520F_ae) || (autoA506520F_ai < 0 && lv_loopint >= autoA506520F_ae) ) ; lv_loopint += autoA506520F_ai ) {
        libNtve_gf_KillModel(gv_placementArea[lv_loopint]);
        TextTagDestroy(gv_placementAreaText[lv_loopint]);
        PingDestroy(gv_highlanderpings[lv_loopint]);
        UnitRemove(gv_sentryGuns[lv_loopint]);
    }
    auto37BCA0DF_g = gv_simpleMissionItems;
    auto37BCA0DF_u = UnitGroupCount(auto37BCA0DF_g, c_unitCountAll);
    for (;; auto37BCA0DF_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto37BCA0DF_g, auto37BCA0DF_u);
        if (lv_unit == null) { break; }
        gf_MissionItemPingRemoveItem(lv_unit);
        UnitRemove(lv_unit);
    }
    libNtve_gf_KillModel(gv_sensorbeacon);
    gv_initBunkerAssault[2] = true;
    TimerWindowShow(gv_missiontimerwindow2, PlayerGroupAll(), false);
    gf_UpdateMissionCompletionTracker(false);
    if ((lv_placenumber == 0)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_FailMission(30, StringExternal("Param/Value/BF2F68EC"), 1);
    }
    else if ((lv_placenumber == 1)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(((45 * lv_placenumber) / (gv_sensorcount * 2)), (IntToText(lv_placenumber) + StringExternal("Param/Value/74206958")), 0, false);
    }
    else if ((lv_placenumber <= gv_sensorcount)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(((45 * lv_placenumber) / (gv_sensorcount * 2)), (IntToText(lv_placenumber) + StringExternal("Param/Value/E2CF6098")), 0, false);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    gf_SpawnUndead(2, "Hunter", 1);
    if ((gv_missionAutostart == true)) {
        gf_DefendBalaad();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryGunTimeEnd_Init () {
    gt_SentryGunTimeEnd = TriggerCreate("gt_SentryGunTimeEnd_Func");
    TriggerEnable(gt_SentryGunTimeEnd, false);
    TriggerAddEventTimer(gt_SentryGunTimeEnd, gv_missiontimer2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inspect Civilians
//--------------------------------------------------------------------------------------------------
bool gt_InspectCivilians_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    int lv_rand;
    region[12] lv_civregions;

    // Automatic Variable Declarations
    const int autoA0A31F11_ae = 3;
    const int autoA0A31F11_ai = 1;
    int auto591A8CE3_val;
    const int auto04919C4D_ae = 6;
    const int auto04919C4D_ai = 1;
    const int auto46684C63_ae = 9;
    const int auto46684C63_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_randomRegion))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_missiontimer, true);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    PingDestroy(gv_missionping);
    libNtve_gf_KillModel(gv_placerMarkers[1]);
    gf_MissionText(StringExternal("Param/Value/2B114E89"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/643F3F1B"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/4EB61C60"));
    TimerPause(gv_missiontimer, false);
    lv_civregions[1] = RegionFromId(166);
    lv_civregions[2] = RegionFromId(128);
    lv_civregions[3] = RegionFromId(206);
    lv_civregions[4] = RegionFromId(131);
    lv_civregions[5] = RegionFromId(271);
    lv_civregions[6] = RegionFromId(272);
    lv_civregions[7] = RegionFromId(193);
    lv_civregions[8] = RegionFromId(194);
    lv_civregions[9] = RegionFromId(183);
    lv_civregions[10] = RegionFromId(195);
    lv_civregions[11] = RegionFromId(250);
    gv_findsurvivorchat1[1] = StringExternal("Param/Value/1E63592B");
    gv_findsurvivorchat1[2] = StringExternal("Param/Value/EB2C0A25");
    gv_findsurvivorchat1[3] = StringExternal("Param/Value/13D12D11");
    gv_findsurvivorchat1[4] = StringExternal("Param/Value/858938E4");
    gv_findsurvivorchat2[1] = StringExternal("Param/Value/4D483D68");
    gv_findsurvivorchat2[2] = StringExternal("Param/Value/7152ED48");
    gv_findsurvivorchat2[3] = StringExternal("Param/Value/96C51E93");
    gv_findsurvivorchat2[4] = StringExternal("Param/Value/F7955593");
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/A5F16D1F"));
    lv_loopint = 1;
    for ( ; ( (autoA0A31F11_ai >= 0 && lv_loopint <= autoA0A31F11_ae) || (autoA0A31F11_ai < 0 && lv_loopint >= autoA0A31F11_ae) ) ; lv_loopint += autoA0A31F11_ai ) {
        lv_rand = RandomInt(9, 11);
        auto591A8CE3_val = lv_rand;
        if (auto591A8CE3_val == 9) {
            UnitCreate(1, gf_RandomCivilianType(), 0, 0, RegionGetCenter(lv_civregions[lv_rand]), libNtve_gf_RandomAngle());
        }
        else if (auto591A8CE3_val == 10) {
            UnitCreate(1, gf_RandomCivilianType(), 0, 0, RegionGetCenter(lv_civregions[lv_rand]), libNtve_gf_RandomAngle());
        }
        else if (auto591A8CE3_val == 11) {
            UnitCreate(1, gf_RandomCivilianType(), 0, 0, RegionGetCenter(lv_civregions[lv_rand]), libNtve_gf_RandomAngle());
        }
        else {
        }
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 2.0);
        UnitGroupAddUnitGroup(gv_infectedCivilians, UnitLastCreatedGroup());
        gf_CivilianPing(UnitLastCreated());
        libNtve_gf_AttachModelToUnit(UnitLastCreated(), "BriefingHighlight", "Ref_Center");
        gv_waterSiteActors[lv_loopint] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000 0.000000 s");
    }
    lv_loopint = 4;
    for ( ; ( (auto04919C4D_ai >= 0 && lv_loopint <= auto04919C4D_ae) || (auto04919C4D_ai < 0 && lv_loopint >= auto04919C4D_ae) ) ; lv_loopint += auto04919C4D_ai ) {
        UnitCreate(1, gf_RandomCivilianType(), 0, 0, RegionGetCenter(lv_civregions[RandomInt(1, 5)]), libNtve_gf_RandomAngle());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 2.0);
        UnitGroupAddUnitGroup(gv_infectedCivilians, UnitLastCreatedGroup());
        gf_CivilianPing(UnitLastCreated());
        libNtve_gf_AttachModelToUnit(UnitLastCreated(), "BriefingHighlight", "Ref_Center");
        gv_waterSiteActors[lv_loopint] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000 0.000000 s");
    }
    lv_loopint = 7;
    for ( ; ( (auto46684C63_ai >= 0 && lv_loopint <= auto46684C63_ae) || (auto46684C63_ai < 0 && lv_loopint >= auto46684C63_ae) ) ; lv_loopint += auto46684C63_ai ) {
        UnitCreate(1, gf_RandomCivilianType(), 0, 0, RegionGetCenter(lv_civregions[RandomInt(6, 10)]), libNtve_gf_RandomAngle());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 2.0);
        UnitGroupAddUnitGroup(gv_infectedCivilians, UnitLastCreatedGroup());
        gf_CivilianPing(UnitLastCreated());
        libNtve_gf_AttachModelToUnit(UnitLastCreated(), "BriefingHighlight", "Ref_Center");
        gv_waterSiteActors[lv_loopint] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000 0.000000 s");
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(179)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/66DBF562"));
    gv_missionping = PingLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(179)));
    gv_sensorbeacon = libNtve_gf_ActorLastCreated();
    TriggerEnable(gt_ContactInfectedCivilian, true);
    TriggerEnable(gt_InfectedCivilianDies, true);
    TriggerEnable(gt_InfectedCivilianEntersFacility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InspectCivilians_Init () {
    gt_InspectCivilians = TriggerCreate("gt_InspectCivilians_Func");
    TriggerEnable(gt_InspectCivilians, false);
    TriggerAddEventUnitRegion(gt_InspectCivilians, null, RegionFromId(249), true);
    TriggerAddEventUnitRegion(gt_InspectCivilians, null, RegionFromId(251), true);
    TriggerAddEventUnitRegion(gt_InspectCivilians, null, RegionFromId(250), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Contact Infected Civilian
//--------------------------------------------------------------------------------------------------
bool gt_ContactInfectedCivilian_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_playerHeroes[EventPlayer()]))) {
            return false;
        }

        if (!((UnitGetOwner(OrderGetTargetUnit(EventUnitOrder())) == 0))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_infectedCivilians, OrderGetTargetUnit(EventUnitOrder())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder()))) <= 4.0)) {
        UnitSetOwner(OrderGetTargetUnit(EventUnitOrder()), EventPlayer(), true);
        UnitSelect(OrderGetTargetUnit(EventUnitOrder()), EventPlayer(), true);
        UnitIssueOrder(OrderGetTargetUnit(EventUnitOrder()), OrderTargetingUnit(AbilityCommand("move", 0), EventUnit()), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(OrderGetTargetUnit(EventUnitOrder()), false);
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + gv_findsurvivorchat1[RandomInt(1, 5)]), 17, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
        TextTagSetTextShadow(TextTagLastCreated(), false);
        TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 1.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
        Wait(2.0, c_timeGame);
        TextTagCreate((StringExternal("Param/Value/4D1C0F42") + gv_findsurvivorchat2[RandomInt(1, 4)]), 17, UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 1.0, true, false, PlayerGroupAll());
        TextTagSetTextShadow(TextTagLastCreated(), false);
        TextTagAttachToUnit(TextTagLastCreated(), OrderGetTargetUnit(EventUnitOrder()), 1.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/DB09B100"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ContactInfectedCivilian_Init () {
    gt_ContactInfectedCivilian = TriggerCreate("gt_ContactInfectedCivilian_Func");
    TriggerEnable(gt_ContactInfectedCivilian, false);
    TriggerAddEventUnitOrder(gt_ContactInfectedCivilian, null, AbilityCommand("move", 0));
    TriggerAddEventUnitOrder(gt_ContactInfectedCivilian, null, AbilityCommand("move", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infected Civilian Dies
//--------------------------------------------------------------------------------------------------
bool gt_InfectedCivilianDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_infectedCivilians, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_LosePlayerXP(1, StringExternal("Param/Value/759BE18F"), 0);
    gf_MissionItemPingRemoveItem(EventUnit());
    UnitGroupRemove(gv_infectedCivilians, EventUnit());
    if ((UnitGroupCount(gv_infectedCivilians, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_InfectedCivilianTimeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfectedCivilianDies_Init () {
    gt_InfectedCivilianDies = TriggerCreate("gt_InfectedCivilianDies_Func");
    TriggerEnable(gt_InfectedCivilianDies, false);
    TriggerAddEventUnitDied(gt_InfectedCivilianDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infected Civilian Enters Facility
//--------------------------------------------------------------------------------------------------
bool gt_InfectedCivilianEntersFacility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_infectedCivilians, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_civiliansQuarantined += 1;
    gf_MissionItemPingRemoveItem(EventUnit());
    gf_DrMorrowText();
    UnitGroupRemove(gv_infectedCivilians, EventUnit());
    UnitSetOwner(EventUnit(), 0, true);
    UnitRemove(EventUnit());
    if ((UnitGroupCount(gv_infectedCivilians, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_InfectedCivilianTimeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfectedCivilianEntersFacility_Init () {
    gt_InfectedCivilianEntersFacility = TriggerCreate("gt_InfectedCivilianEntersFacility_Func");
    TriggerEnable(gt_InfectedCivilianEntersFacility, false);
    TriggerAddEventUnitRegion(gt_InfectedCivilianEntersFacility, null, RegionFromId(179), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infected Civilian Time End
//--------------------------------------------------------------------------------------------------
bool gt_InfectedCivilianTimeEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_loopint;
    region lv_randomCivGroup;
    int lv_i;
    unitgroup lv_undeadSpawn;

    // Automatic Variable Declarations
    const int auto3FB9946E_ae = 9;
    const int auto3FB9946E_ai = 1;
    unitgroup autoF14D016A_g;
    int autoF14D016A_u;
    unit autoF14D016A_var;
    unitgroup autoBE263006_g;
    int autoBE263006_u;
    unit autoBE263006_var;

    // Variable Initialization
    lv_undeadSpawn = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ContactInfectedCivilian, false);
    TriggerEnable(gt_InfectedCivilianDies, false);
    TriggerEnable(gt_InfectedCivilianEntersFacility, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    lv_i = 1;
    for ( ; ( (auto3FB9946E_ai >= 0 && lv_i <= auto3FB9946E_ae) || (auto3FB9946E_ai < 0 && lv_i >= auto3FB9946E_ae) ) ; lv_i += auto3FB9946E_ai ) {
        libNtve_gf_KillModel(gv_waterSiteActors[lv_i]);
    }
    PingDestroy(gv_missionping);
    libNtve_gf_KillModel(gv_sensorbeacon);
    libNtve_gf_KillModel(gv_placerMarkers[1]);
    if ((UnitGroupCount(gv_infectedCivilians, c_unitCountAlive) >= 1)) {
        gf_MissionText(StringExternal("Param/Value/DC82542E"));
        autoF14D016A_g = gv_infectedCivilians;
        autoF14D016A_u = UnitGroupCount(autoF14D016A_g, c_unitCountAll);
        for (;; autoF14D016A_u -= 1) {
            autoF14D016A_var = UnitGroupUnitFromEnd(autoF14D016A_g, autoF14D016A_u);
            if (autoF14D016A_var == null) { break; }
            gf_MissionItemPingRemoveItem(autoF14D016A_var);
            libNtve_gf_MakeUnitInvulnerable(autoF14D016A_var, true);
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(autoF14D016A_var));
            UnitIssueOrder(autoF14D016A_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            UnitSetOwner(autoF14D016A_var, 14, true);
            libNtve_gf_ReplaceUnit(autoF14D016A_var, "Boomer", libNtve_ge_ReplaceUnitOptions_NewUnitssMax);
            UnitGroupAdd(lv_undeadSpawn, autoF14D016A_var);
            UnitGroupAdd(gv_undeadGroup, autoF14D016A_var);
            libNtve_gf_MakeUnitInvulnerable(autoF14D016A_var, false);
        }
        autoBE263006_g = lv_undeadSpawn;
        autoBE263006_u = UnitGroupCount(autoBE263006_g, c_unitCountAll);
        for (;; autoBE263006_u -= 1) {
            autoBE263006_var = UnitGroupUnitFromEnd(autoBE263006_g, autoBE263006_u);
            if (autoBE263006_var == null) { break; }
            UnitIssueOrder(autoBE263006_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
    }

    PingDestroyAll();
    if ((gv_civiliansQuarantined == 9)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(70, StringExternal("Param/Value/D46EEF1A"), -1, false);
        gf_UpdateMissionCompletionTracker(true);
    }
    else if ((gv_civiliansQuarantined >= 1) && (gv_civiliansQuarantined < 9)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission((gv_civiliansQuarantined * 4), (StringExternal("Param/Value/F527C072") + (IntToText(gv_civiliansQuarantined) + StringExternal("Param/Value/DB73E4AE"))), -1, false);
        gf_UpdateMissionCompletionTracker(true);
    }
    else if ((gv_civiliansQuarantined == 0)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_UpdateMissionCompletionTracker(false);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(15.0, c_timeGame);
    if ((gv_missionAutostart == true)) {
        gf_DefendBalaad();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfectedCivilianTimeEnd_Init () {
    gt_InfectedCivilianTimeEnd = TriggerCreate("gt_InfectedCivilianTimeEnd_Func");
    TriggerEnable(gt_InfectedCivilianTimeEnd, false);
    TriggerAddEventTimer(gt_InfectedCivilianTimeEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defend Balaad Bunker Count
//--------------------------------------------------------------------------------------------------
bool gt_DefendBalaadBunkerCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_bunkerGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bunkersLost += 1;
    UnitGroupRemove(gv_bunkerGroup, EventUnit());
    gf_MissionItemPingRemoveItem(EventUnit());
    if ((RandomInt(1, 2) == 1)) {
        gf_MissionText(StringExternal("Param/Value/82C51DA9"));
    }
    else {
        gf_MissionText(StringExternal("Param/Value/1C9800A6"));
    }
    if ((UnitGroupCount(gv_bunkerGroup, c_unitCountAlive) == 0)) {
        gv_bunkersLost = 4;
        TriggerExecute(gt_DefendBalaadTimeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefendBalaadBunkerCount_Init () {
    gt_DefendBalaadBunkerCount = TriggerCreate("gt_DefendBalaadBunkerCount_Func");
    TriggerEnable(gt_DefendBalaadBunkerCount, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defend Balaad Time End
//--------------------------------------------------------------------------------------------------
bool gt_DefendBalaadTimeEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE7543B51_g;
    int autoE7543B51_u;
    unit autoE7543B51_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    TriggerEnable(gt_DefendBalaadBunkerCount, false);
    autoE7543B51_g = gv_bunkerGroup;
    autoE7543B51_u = UnitGroupCount(autoE7543B51_g, c_unitCountAll);
    for (;; autoE7543B51_u -= 1) {
        autoE7543B51_var = UnitGroupUnitFromEnd(autoE7543B51_g, autoE7543B51_u);
        if (autoE7543B51_var == null) { break; }
        gf_MissionItemPingRemoveItem(autoE7543B51_var);
    }
    if ((gv_prologueOutbreak == false)) {
        TriggerEnable(gt_UndeadSpawningPrologue, true);
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroyAll();
    if ((gv_bunkersLost == 0)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(100, StringExternal("Param/Value/E2808051"), -2, false);
    }
    else if ((gv_bunkersLost == 1)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(60, StringExternal("Param/Value/457EE464"), -1, false);
    }
    else if ((gv_bunkersLost == 2)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(40, StringExternal("Param/Value/8B954C08"), 0, false);
    }
    else if ((gv_bunkersLost == 3)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(30, StringExternal("Param/Value/FFEA1ACD"), 0, false);
    }
    else if ((gv_bunkersLost == 4)) {
        gf_UpdateMissionCompletionTracker(false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_FailMission(75, StringExternal("Param/Value/5B8B8A91"), 2);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(10.0, c_timeGame);
    if ((gv_missionAutostart == true)) {
        gf_Chapter1Defend();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefendBalaadTimeEnd_Init () {
    gt_DefendBalaadTimeEnd = TriggerCreate("gt_DefendBalaadTimeEnd_Func");
    TriggerEnable(gt_DefendBalaadTimeEnd, false);
    TriggerAddEventTimer(gt_DefendBalaadTimeEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Prologue 2
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningPrologue2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA13652C8_n = 8;
    int autoA13652C8_i;
    const int auto7E6CBB59_n = 4;
    int auto7E6CBB59_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    for (autoA13652C8_i = 1; autoA13652C8_i <= autoA13652C8_n; autoA13652C8_i += 1) {
        gf_SpawnUndead((gv_spawnCount / 2), "Zombie", 1);
    }
    for (auto7E6CBB59_i = 1; auto7E6CBB59_i <= auto7E6CBB59_n; auto7E6CBB59_i += 1) {
        gf_SpawnUndead((gv_spawnCount / 3), "Zombie", 1);
    }
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    if ((gv_gamemode >= 1)) {
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Unburied", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    }
    else {
        gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    }
    if (((gv_gamemode == 5) || (gv_gamemode == 11))) {
        gf_SpawnUndead((gv_spawnCount / 2), "Risen", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningPrologue2_Init () {
    gt_UndeadSpawningPrologue2 = TriggerCreate("gt_UndeadSpawningPrologue2_Func");
    TriggerEnable(gt_UndeadSpawningPrologue2, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Contact Civilian
//--------------------------------------------------------------------------------------------------
bool gt_ContactCivilian_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_playerHeroes[EventPlayer()]))) {
            return false;
        }

        if (!((UnitGetOwner(OrderGetTargetUnit(EventUnitOrder())) == 0))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_escortCivilians, OrderGetTargetUnit(EventUnitOrder())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder()))) <= 4.0)) {
        UnitSetOwner(OrderGetTargetUnit(EventUnitOrder()), EventPlayer(), true);
        UnitSelect(OrderGetTargetUnit(EventUnitOrder()), EventPlayer(), true);
        UnitIssueOrder(OrderGetTargetUnit(EventUnitOrder()), OrderTargetingUnit(AbilityCommand("move", 0), EventUnit()), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(OrderGetTargetUnit(EventUnitOrder()), false);
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + gv_findsurvivorchat1[RandomInt(1, 5)]), 17, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
        TextTagSetTextShadow(TextTagLastCreated(), false);
        TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 1.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
        Wait(2.0, c_timeGame);
        TextTagCreate((StringExternal("Param/Value/F1986D1F") + gv_findsurvivorchat2[RandomInt(1, 4)]), 17, UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 1.0, true, false, PlayerGroupAll());
        TextTagSetTextShadow(TextTagLastCreated(), false);
        TextTagAttachToUnit(TextTagLastCreated(), OrderGetTargetUnit(EventUnitOrder()), 1.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/F76BDEC5"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ContactCivilian_Init () {
    gt_ContactCivilian = TriggerCreate("gt_ContactCivilian_Func");
    TriggerEnable(gt_ContactCivilian, false);
    TriggerAddEventUnitOrder(gt_ContactCivilian, null, AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilian Enters Thalim
//--------------------------------------------------------------------------------------------------
bool gt_CivilianEntersThalim_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_escortCivilians, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_extractionCount += 1;
    gf_MissionItemPingRemoveItem(EventUnit());
    UnitGroupRemove(gv_escortCivilians, EventUnit());
    UnitGroupAdd(gv_civilians, EventUnit());
    UnitBehaviorRemove(EventUnit(), "CivilianEscort", c_unitBehaviorCountAll);
    UnitSetOwner(EventUnit(), 0, true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
    if ((UnitGroupCount(gv_escortCivilians, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_EscortCiviliansTimeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CivilianEntersThalim_Init () {
    gt_CivilianEntersThalim = TriggerCreate("gt_CivilianEntersThalim_Func");
    TriggerEnable(gt_CivilianEntersThalim, false);
    TriggerAddEventUnitRegion(gt_CivilianEntersThalim, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilian Dies
//--------------------------------------------------------------------------------------------------
bool gt_CivilianDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_escortCivilians, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionItemPingRemoveItem(EventUnit());
    UnitGroupRemove(gv_escortCivilians, EventUnit());
    if ((UnitGroupCount(gv_escortCivilians, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_EscortCiviliansTimeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CivilianDies_Init () {
    gt_CivilianDies = TriggerCreate("gt_CivilianDies_Func");
    TriggerEnable(gt_CivilianDies, false);
    TriggerAddEventUnitDied(gt_CivilianDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Civilians Time End
//--------------------------------------------------------------------------------------------------
bool gt_EscortCiviliansTimeEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_moveCivs;
    int lv_i;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto1E13D3ED_g;
    int auto1E13D3ED_u;
    unit auto1E13D3ED_var;
    unitgroup autoC839F835_g;
    int autoC839F835_u;
    unit autoC839F835_var;
    unitgroup auto6C63D870_g;
    int auto6C63D870_u;
    unitgroup autoD16B4F0E_g;
    int autoD16B4F0E_u;
    unit autoD16B4F0E_var;
    unitgroup auto5AAA29FD_g;
    int auto5AAA29FD_u;
    unit auto5AAA29FD_var;
    unitgroup auto1AAAE0D8_g;
    int auto1AAAE0D8_u;
    unit auto1AAAE0D8_var;
    unitgroup auto62E83B4B_g;
    int auto62E83B4B_u;
    unit auto62E83B4B_var;

    // Variable Initialization
    lv_moveCivs = true;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CivilianDies, false);
    TriggerEnable(gt_ContactCivilian, false);
    TriggerEnable(gt_CivilianEntersThalim, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroy(gv_missionping);
    auto1E13D3ED_g = gv_civilians;
    auto1E13D3ED_u = UnitGroupCount(auto1E13D3ED_g, c_unitCountAll);
    for (;; auto1E13D3ED_u -= 1) {
        auto1E13D3ED_var = UnitGroupUnitFromEnd(auto1E13D3ED_g, auto1E13D3ED_u);
        if (auto1E13D3ED_var == null) { break; }
        UnitBehaviorRemove(auto1E13D3ED_var, "CivilianEscort", c_unitBehaviorCountAll);
    }
    autoC839F835_g = gv_escortCivilians;
    autoC839F835_u = UnitGroupCount(autoC839F835_g, c_unitCountAll);
    for (;; autoC839F835_u -= 1) {
        autoC839F835_var = UnitGroupUnitFromEnd(autoC839F835_g, autoC839F835_u);
        if (autoC839F835_var == null) { break; }
        UnitBehaviorRemove(autoC839F835_var, "CivilianEscort", c_unitBehaviorCountAll);
    }
    auto6C63D870_g = gv_missionItemPingItems;
    auto6C63D870_u = UnitGroupCount(auto6C63D870_g, c_unitCountAll);
    for (;; auto6C63D870_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto6C63D870_g, auto6C63D870_u);
        if (lv_unit == null) { break; }
        gf_MissionItemPingRemoveItem(lv_unit);
    }
    PingDestroyAll();
    if ((gv_extractionCount >= 1)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission((gv_extractionCount * FixedToInt(4.55)), (StringExternal("Param/Value/76A89193") + IntToText(gv_extractionCount) + StringExternal("Param/Value/907397D9")), 1, false);
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        if ((gv_missionAutostart == true)) {
            gf_EscortLabAssistant();
        }
        if ((UnitGroupCount(gv_escortCivilians, c_unitCountAlive) > 0)) {
            autoD16B4F0E_g = gv_escortCivilians;
            autoD16B4F0E_u = UnitGroupCount(autoD16B4F0E_g, c_unitCountAll);
            for (;; autoD16B4F0E_u -= 1) {
                autoD16B4F0E_var = UnitGroupUnitFromEnd(autoD16B4F0E_g, autoD16B4F0E_u);
                if (autoD16B4F0E_var == null) { break; }
                UnitSetOwner(autoD16B4F0E_var, 0, true);
            }
            while ((lv_moveCivs == true)) {
                if ((UnitGroupCount(gv_escortCivilians, c_unitCountAlive) > 0)) {
                    auto5AAA29FD_g = gv_escortCivilians;
                    auto5AAA29FD_u = UnitGroupCount(auto5AAA29FD_g, c_unitCountAll);
                    for (;; auto5AAA29FD_u -= 1) {
                        auto5AAA29FD_var = UnitGroupUnitFromEnd(auto5AAA29FD_g, auto5AAA29FD_u);
                        if (auto5AAA29FD_var == null) { break; }
                        UnitIssueOrder(auto5AAA29FD_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueReplace);
                    }
                }
                else {
                    lv_moveCivs = false;
                    TriggerEnable(gt_CivilianEntersThalim, false);
                }
                Wait(8.0, c_timeGame);
            }
        }
    }
    else {
        if ((gv_extractionCount == 0)) {
            gf_UpdateMissionCompletionTracker(false);
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
            gf_FailMission(50, StringExternal("Param/Value/27B9C300"), 2);
            if ((gv_missionAutostart == true)) {
                gf_EscortLabAssistant();
            }
            if ((UnitGroupCount(gv_escortCivilians, c_unitCountAlive) > 0)) {
                auto1AAAE0D8_g = gv_escortCivilians;
                auto1AAAE0D8_u = UnitGroupCount(auto1AAAE0D8_g, c_unitCountAll);
                for (;; auto1AAAE0D8_u -= 1) {
                    auto1AAAE0D8_var = UnitGroupUnitFromEnd(auto1AAAE0D8_g, auto1AAAE0D8_u);
                    if (auto1AAAE0D8_var == null) { break; }
                    gf_MissionItemPingRemoveItem(auto1AAAE0D8_var);
                    UnitSetOwner(auto1AAAE0D8_var, 0, true);
                }
                while ((lv_moveCivs == true)) {
                    if ((UnitGroupCount(gv_escortCivilians, c_unitCountAlive) > 0)) {
                        auto62E83B4B_g = gv_escortCivilians;
                        auto62E83B4B_u = UnitGroupCount(auto62E83B4B_g, c_unitCountAll);
                        for (;; auto62E83B4B_u -= 1) {
                            auto62E83B4B_var = UnitGroupUnitFromEnd(auto62E83B4B_g, auto62E83B4B_u);
                            if (auto62E83B4B_var == null) { break; }
                            UnitIssueOrder(auto62E83B4B_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueReplace);
                        }
                    }
                    else {
                        lv_moveCivs = false;
                        TriggerEnable(gt_CivilianEntersThalim, false);
                    }
                    Wait(8.0, c_timeGame);
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortCiviliansTimeEnd_Init () {
    gt_EscortCiviliansTimeEnd = TriggerCreate("gt_EscortCiviliansTimeEnd_Func");
    TriggerEnable(gt_EscortCiviliansTimeEnd, false);
    TriggerAddEventTimer(gt_EscortCiviliansTimeEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soldier Located
//--------------------------------------------------------------------------------------------------
bool gt_SoldierLocated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    playergroup auto8F52B5DB_g;
    int auto8F52B5DB_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((EventUnit() == gv_playerHeroes[EventPlayer()]))) {
            return false;
        }

        if (!((OrderGetTargetUnit(EventUnitOrder()) == gv_rASpy))) {
            return false;
        }

        if (!((UnitGetOwner(OrderGetTargetUnit(EventUnitOrder())) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder()))) <= 4.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_soldierFound = true;
        libNtve_gf_PauseUnit(gv_rASpy, true);
        gf_MissionText(StringExternal("Param/Value/4D13E3FC"));
        UnitBehaviorRemove(gv_rASpy, "PermanentlyCloaked", 1);
        auto8F52B5DB_g = PlayerGroupAll();
        auto8F52B5DB_var = -1;
        while (true) {
            auto8F52B5DB_var = PlayerGroupNextPlayer(auto8F52B5DB_g, auto8F52B5DB_var);
            if (auto8F52B5DB_var < 0) { break; }
            libNtve_gf_ShareVisionofUnit(gv_rASpy, true, auto8F52B5DB_var);
        }
        Wait(3.5, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/E1175B61"));
        Wait(4.5, c_timeGame);
        UnitBehaviorAdd(gv_rASpy, "PermanentlyCloaked", gv_rASpy, 1);
        Wait(1.5, c_timeGame);
        UnitRemove(gv_rASpy);
        gf_MissionText(StringExternal("Param/Value/2A0BD499"));
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/D373B3CD"));
        Wait(3.5, c_timeGame);
        gf_SucceedMission(45, StringExternal("Param/Value/38986F52"), 0, false);
        ObjectiveSetState(gv_optionalObj, c_objectiveStateCompleted);
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/0A506A81"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoldierLocated_Init () {
    gt_SoldierLocated = TriggerCreate("gt_SoldierLocated_Func");
    TriggerEnable(gt_SoldierLocated, false);
    TriggerAddEventUnitOrder(gt_SoldierLocated, null, AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Meet Lab Assistant
//--------------------------------------------------------------------------------------------------
bool gt_MeetLabAssistant_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeetLabAssistant_Init () {
    gt_MeetLabAssistant = TriggerCreate("gt_MeetLabAssistant_Func");
    TriggerEnable(gt_MeetLabAssistant, false);
    TriggerAddEventUnitRegion(gt_MeetLabAssistant, null, RegionFromId(179), true);
    TriggerAddEventUnitRegion(gt_MeetLabAssistant, null, RegionFromId(179), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab Assistant Site Loop
//--------------------------------------------------------------------------------------------------
bool gt_LabAssistantSiteLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    int lv_ping;

    // Automatic Variable Declarations
    const int autoBB0AE8CA_ae = 50;
    const int autoBB0AE8CA_ai = 1;
    playergroup autoB697DC43_g;
    int autoB697DC43_var;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(gv_drMorrow, gv_silonext[gv_silonextint]) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_PauseUnit(gv_drMorrow, true);
        libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\btn-tips-sellzergbiosamples.dds", StringExternal("Param/Value/BAB5515E"), 50, PlayerGroupAll());
        lv_loopint = 1;
        for ( ; ( (autoBB0AE8CA_ai >= 0 && lv_loopint <= autoBB0AE8CA_ae) || (autoBB0AE8CA_ai < 0 && lv_loopint >= autoBB0AE8CA_ae) ) ; lv_loopint += autoBB0AE8CA_ai ) {
            if (((UnitIsAlive(gv_drMorrow) == false) || (gv_gameOver == true))) {
                break;
            }
            libNtve_gf_SetBossBarCurrentValue(1, lv_loopint, true);
            Wait(0.5, c_timeGame);
        }
        libNtve_gf_ShowHideBossBar(false, 1);
        if (((UnitIsAlive(gv_drMorrow) == false) || (gv_gameOver == true))) {
            TriggerEnable(TriggerGetCurrent(), false);
            PingDestroy(lv_ping);
        }
        else {
            gv_silonextint += 1;
            gv_silosCompleted += 1;
            if ((gv_silonextint == gv_silocount)) {
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_LabAssistantDies, false);
                UnitGroupRemove(gv_undeadTargetGroup, gv_drMorrow);
                libNtve_gf_MakeUnitInvulnerable(gv_drMorrow, true);
                libNtve_gf_PauseUnit(gv_drMorrow, false);
                gf_UpdateMissionCompletionTracker(true);
                gf_SucceedMission(30, (StringExternal("Param/Value/CDEE5B6B") + IntToText(gv_silosCompleted) + StringExternal("Param/Value/7F95D7F0") + IntToText((gv_silocount - 1)) + StringExternal("Param/Value/7A6F68F7")), 0, false);
                ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
                gf_MissionText(StringExternal("Param/Value/B1DACE9A"));
                UnitIssueOrder(gv_drMorrow, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(179))), c_orderQueueReplace);
                autoB697DC43_g = gv_players;
                autoB697DC43_var = -1;
                while (true) {
                    autoB697DC43_var = PlayerGroupNextPlayer(autoB697DC43_g, autoB697DC43_var);
                    if (autoB697DC43_var < 0) { break; }
                    libNtve_gf_ShareVisionofUnit(gv_drMorrow, false, autoB697DC43_var);
                }
                PingDestroy(gv_missionping);
                Wait(5.0, c_timeGame);
                ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
                if ((gv_missionAutostart == true) && (RandomInt(0, 1) == 1)) {
                    gf_EscortReinforcements();
                }
                else {
                    gf_ProtectAH25Hunters();
                }
                Wait(10.0, c_timeGame);
                UnitRemove(gv_drMorrow);
            }
            else {
                libNtve_gf_PauseUnit(gv_drMorrow, false);
                gf_SucceedMission(30, (StringExternal("Param/Value/0F8B4D93") + IntToText(gv_silosCompleted) + StringExternal("Param/Value/1B549AC8") + IntToText((gv_silocount - 1)) + StringExternal("Param/Value/A526A1D0")), 0, false);
                gf_MissionText(StringExternal("Param/Value/7EA99E90"));
                Wait(5.0, c_timeGame);
                TriggerEnable(TriggerGetCurrent(), true);
            }
        }
    }
    else {
        UnitIssueOrder(gv_drMorrow, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_silonext[gv_silonextint])), c_orderQueueReplace);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_silonext[gv_silonextint]), ColorWithAlpha(0.00, 100.00, 0.00, 49.02), 2.5, 270.0);
        lv_ping = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A31C07B3"));
        PingSetScale(PingLastCreated(), 0.75);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabAssistantSiteLoop_Init () {
    gt_LabAssistantSiteLoop = TriggerCreate("gt_LabAssistantSiteLoop_Func");
    TriggerEnable(gt_LabAssistantSiteLoop, false);
    TriggerAddEventTimePeriodic(gt_LabAssistantSiteLoop, 2.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lab Assistant Dies
//--------------------------------------------------------------------------------------------------
bool gt_LabAssistantDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_dr, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_LabAssistantSiteLoop, false);
    gv_drRosenKilled = true;
    PingDestroy(gv_missionping);
    libNtve_gf_ShowHideBossBar(false, 1);
    UnitGroupRemove(gv_undeadTargetGroup, gv_drMorrow);
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    gf_FailMission(60, StringExternal("Param/Value/3C3A8053"), 2);
    gf_UpdateMissionCompletionTracker(false);
    gf_MissionText(StringExternal("Param/Value/11EE667D"));
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    if ((gv_missionAutostart == true) && (RandomInt(0, 1) == 1)) {
        gf_EscortReinforcements();
    }
    else {
        gf_EscortReinforcements();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LabAssistantDies_Init () {
    gt_LabAssistantDies = TriggerCreate("gt_LabAssistantDies_Func");
    TriggerEnable(gt_LabAssistantDies, false);
    TriggerAddEventUnitDied(gt_LabAssistantDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Reinforcments Loop
//--------------------------------------------------------------------------------------------------
bool gt_EscortReinforcmentsLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    unit lv_tempunit;
    unit lv_nextunit;
    point lv_offset;
    unit lv_firstunit;

    // Automatic Variable Declarations
    int autoAC24F1F4_ae;
    const int autoAC24F1F4_ai = 1;
    int auto1956B5E4_ae;
    const int auto1956B5E4_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_firstunit = UnitGroupUnit(gv_convoy, 1);
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) > 1)) {
        PingSetUnit(gv_missionping, UnitGroupUnit(gv_convoy, 1));
    }
    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), gv_convoyroutes[gv_convoyset][gv_convoynext]) <= 2.0) && (gv_convoyfinal == false)) {
        if ((gv_convoynext == gv_convoymax)) {
            gv_convoyfinal = true;
        }
        else {
            gv_convoynext += 1;
        }
    }
    autoAC24F1F4_ae = UnitGroupCount(gv_convoy, c_unitCountAll);
    lv_loopint = 1;
    for ( ; ( (autoAC24F1F4_ai >= 0 && lv_loopint <= autoAC24F1F4_ae) || (autoAC24F1F4_ai < 0 && lv_loopint >= autoAC24F1F4_ae) ) ; lv_loopint += autoAC24F1F4_ai ) {
        lv_tempunit = UnitGroupUnit(gv_convoy, lv_loopint);
        if ((gv_convoyfinal == true)) {
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_convoystartend[gv_convoyset][2])), c_orderQueueReplace);
        }
        else {
            if ((lv_loopint == 1)) {
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
            }
            else {
                lv_nextunit = UnitGroupUnit(gv_convoy, (lv_loopint - 1));
                if ((DistanceBetweenPoints(UnitGetPosition(lv_tempunit), UnitGetPosition(lv_nextunit)) >= 15.0)) {
                    UnitBehaviorAdd(lv_tempunit, "CatchingUp", lv_tempunit, 1);
                }
                else {
                    UnitBehaviorRemove(lv_tempunit, "CatchingUp", 1);
                }
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_nextunit), 5.0, AngleBetweenPoints(UnitGetPosition(lv_nextunit), UnitGetPosition(lv_tempunit)))), c_orderQueueReplace);
            }
        }
    }
    lv_offset = PointWithOffsetPolar(UnitGetPosition(lv_firstunit), 2.0, AngleBetweenPoints(gv_convoyroutes[gv_convoyset][gv_convoynext], UnitGetPosition(lv_firstunit)));
    auto1956B5E4_ae = UnitGroupCount(gv_patrol, c_unitCountAll);
    lv_loopint = 1;
    for ( ; ( (auto1956B5E4_ai >= 0 && lv_loopint <= auto1956B5E4_ae) || (auto1956B5E4_ai < 0 && lv_loopint >= auto1956B5E4_ae) ) ; lv_loopint += auto1956B5E4_ai ) {
        if ((UnitGroupCount(gv_patrol, c_unitCountAlive) >= 1)) {
            lv_tempunit = UnitGroupUnit(gv_patrol, lv_loopint);
            lv_offset = PointWithOffsetPolar(UnitGetPosition(lv_firstunit), ((IntToFixed(lv_loopint) - 1.0) * 3.2), AngleBetweenPoints(gv_convoyroutes[gv_convoyset][gv_convoynext], UnitGetPosition(lv_firstunit)));
            if ((DistanceBetweenPoints(UnitGetPosition(lv_tempunit), lv_offset) >= 8.0)) {
                UnitIssueOrder(lv_tempunit, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), lv_offset), c_orderQueueReplace);
            }
            else {
                if ((gf_Parity(lv_loopint) == false)) {
                    lv_offset = PointWithOffsetPolar(lv_offset, 3.0, (AngleBetweenPoints(lv_offset, UnitGetPosition(lv_firstunit)) + 90.0));
                }
                else {
                    lv_offset = PointWithOffsetPolar(lv_offset, 3.0, (AngleBetweenPoints(lv_offset, UnitGetPosition(lv_firstunit)) - 90.0));
                }
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_offset), c_orderQueueReplace);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortReinforcmentsLoop_Init () {
    gt_EscortReinforcmentsLoop = TriggerCreate("gt_EscortReinforcmentsLoop_Func");
    TriggerEnable(gt_EscortReinforcmentsLoop, false);
    TriggerAddEventTimePeriodic(gt_EscortReinforcmentsLoop, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcements Leave
//--------------------------------------------------------------------------------------------------
bool gt_ReinforcementsLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    gf_SucceedMission(20, StringExternal("Param/Value/035D59E7"), 0, false);
    gv_convoyvehiclessafe += 1;
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        TriggerSendEvent("Reinforcements End");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReinforcementsLeave_Init () {
    gt_ReinforcementsLeave = TriggerCreate("gt_ReinforcementsLeave_Func");
    TriggerEnable(gt_ReinforcementsLeave, false);
    TriggerAddEventUnitRegion(gt_ReinforcementsLeave, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforcement Vehicle Dies
//--------------------------------------------------------------------------------------------------
bool gt_ReinforcementVehicleDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_convoy, EventUnit());
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        if ((gv_convoy_Set == true)) {
            TriggerSendEvent("Reinforcements End");
        }
        return true;
    }
    gf_MissionText(StringExternal("Param/Value/0519FC7B"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReinforcementVehicleDies_Init () {
    gt_ReinforcementVehicleDies = TriggerCreate("gt_ReinforcementVehicleDies_Func");
    TriggerEnable(gt_ReinforcementVehicleDies, false);
    TriggerAddEventUnitDied(gt_ReinforcementVehicleDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Reinforcements End
//--------------------------------------------------------------------------------------------------
bool gt_EscortReinforcementsEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA866384E_g;
    int autoA866384E_u;
    unit autoA866384E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SkipActionsIfGameOver();
    TriggerEnable(gt_EscortReinforcmentsLoop, false);
    TriggerEnable(gt_ReinforcementsLeave, false);
    TriggerEnable(gt_ReinforcementVehicleDies, false);
    PingDestroy(gv_missionping);
    autoA866384E_g = gv_patrol;
    autoA866384E_u = UnitGroupCount(autoA866384E_g, c_unitCountAll);
    for (;; autoA866384E_u -= 1) {
        autoA866384E_var = UnitGroupUnitFromEnd(autoA866384E_g, autoA866384E_u);
        if (autoA866384E_var == null) { break; }
        UnitRemove(autoA866384E_var);
    }
    if ((gv_convoyvehiclessafe == 4)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_MissionText(StringExternal("Param/Value/0440A25D"));
        gf_SucceedMission(40, StringExternal("Param/Value/5148659C"), 0, false);
    }
    else if ((gv_convoyvehiclessafe < 4) && (gv_convoyvehiclessafe >= 1)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_MissionText(StringExternal("Param/Value/7252230C"));
    }
    else if ((gv_convoyvehiclessafe == 0)) {
        gf_UpdateMissionCompletionTracker(false);
        gf_MissionText(StringExternal("Param/Value/751CB305"));
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_FailMission(30, StringExternal("Param/Value/4D28427E"), 2);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    if ((gv_soldierFound == false)) {
        UnitRemove(gv_rASpy);
        TriggerEnable(gt_SoldierLocated, false);
        ObjectiveSetState(gv_optionalObj, c_objectiveStateFailed);
        gf_MissionText(StringExternal("Param/Value/81BB708C"));
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
    }
    Wait(30.0, c_timeGame);
    if ((gv_missionAutostart == true)) {
        gf_Chapter2Courage();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortReinforcementsEnd_Init () {
    gt_EscortReinforcementsEnd = TriggerCreate("gt_EscortReinforcementsEnd_Func");
    TriggerEnable(gt_EscortReinforcementsEnd, false);
    TriggerAddEventGeneric(gt_EscortReinforcementsEnd, "Reinforcements End");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heli Undead Spawns
//--------------------------------------------------------------------------------------------------
bool gt_HeliUndeadSpawns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(20.0, 30.0), c_timeGame);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Boomer", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Cursed", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    Wait(RandomFixed(15.0, 20.0), c_timeGame);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    }
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(1, "Horror", 1);
        gf_SpawnUndead(2, "ZombieWraith", 1);
    }
    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        gf_SpawnUndead(3, "Leaper", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    }
    Wait(RandomFixed(15.0, 20.0), c_timeGame);
    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(1, "AcidVore", 1);
        gf_SpawnUndead(1, "AcidVore", 2);
        gf_SpawnUndead(1, "Metasis", 2);
        gf_SpawnUndead(gv_spawnCount, "Krill", 2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeliUndeadSpawns_Init () {
    gt_HeliUndeadSpawns = TriggerCreate("gt_HeliUndeadSpawns_Func");
    TriggerAddEventGeneric(gt_HeliUndeadSpawns, "H Spawns");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Helicopter Killed
//--------------------------------------------------------------------------------------------------
bool gt_HelicopterKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_z;

    // Automatic Variable Declarations
    const int auto5E762DE3_ae = 2;
    const int auto5E762DE3_ai = 1;
    const int autoC9CA1C16_ae = 6;
    const int autoC9CA1C16_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_uSHelis, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_uSHelis, EventUnit());
    gf_FailMission(40, StringExternal("Param/Value/D73DBCEE"), 0);
    gv_heliMax -= 1;
    lv_int = 1;
    for ( ; ( (auto5E762DE3_ai >= 0 && lv_int <= auto5E762DE3_ae) || (auto5E762DE3_ai < 0 && lv_int >= auto5E762DE3_ae) ) ; lv_int += auto5E762DE3_ai ) {
        if ((gv_uSHeliUnit[lv_int] == EventUnit())) {
            PingDestroy(gv_highlanderpings[lv_int]);
            lv_z = 1;
            for ( ; ( (autoC9CA1C16_ai >= 0 && lv_z <= autoC9CA1C16_ae) || (autoC9CA1C16_ai < 0 && lv_z >= autoC9CA1C16_ae) ) ; lv_z += autoC9CA1C16_ai ) {
                if ((libNtve_gf_UnitInRegion(EventUnit(), gv_aORegions[lv_z]) == true)) {
                    gv_aORegionsSearched[lv_z] = true;
                    break;
                }
            }
        }
    }
    if ((UnitGroupCount(gv_uSHelis, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_HelicopterEnd, true, false);
        return true;
    }
    gf_MissionText(StringExternal("Param/Value/54FFAFB5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HelicopterKilled_Init () {
    gt_HelicopterKilled = TriggerCreate("gt_HelicopterKilled_Func");
    TriggerEnable(gt_HelicopterKilled, false);
    TriggerAddEventUnitDied(gt_HelicopterKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick Up Fuel Containers
//--------------------------------------------------------------------------------------------------
bool gt_PickUpFuelContainers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "FuelContainer"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DeliverFuel, true);
    libNtve_gf_KillModel(gv_sensorbeacon);
    PingDestroy(gv_sensorpings[0]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickUpFuelContainers_Init () {
    gt_PickUpFuelContainers = TriggerCreate("gt_PickUpFuelContainers_Func");
    TriggerEnable(gt_PickUpFuelContainers, false);
    TriggerAddEventUnitInventoryChange(gt_PickUpFuelContainers, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deliver Fuel
//--------------------------------------------------------------------------------------------------
bool gt_DeliverFuel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    unit lv_unit;

    // Automatic Variable Declarations
    const int autoD0D8D6DE_ae = 6;
    const int autoD0D8D6DE_ai = 1;
    unitgroup auto502494D9_g;
    int auto502494D9_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_int = 1;
    for ( ; ( (autoD0D8D6DE_ai >= 0 && lv_int <= autoD0D8D6DE_ae) || (autoD0D8D6DE_ai < 0 && lv_int >= autoD0D8D6DE_ae) ) ; lv_int += autoD0D8D6DE_ai ) {
        if ((gv_aORegionsSearched[lv_int] == false) && (EventUnitRegion() == gv_aORegions[lv_int]) && (gf_CountItemType("FuelContainer", EventUnit()) >= 1)) {
            auto502494D9_g = UnitInventoryGroup(EventUnit());
            auto502494D9_u = UnitGroupCount(auto502494D9_g, c_unitCountAll);
            for (;; auto502494D9_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(auto502494D9_g, auto502494D9_u);
                if (lv_unit == null) { break; }
                if ((UnitGetType(lv_unit) == "FuelContainer") && (gv_fuelLimit[lv_int] < 3)) {
                    gv_fuelLimit[lv_int] += 1;
                    gf_DeliverFuel(lv_unit, lv_int);
                    if ((gv_fuelLimit[lv_int] == 3)) {
                        gv_convoyvehiclessafe += 1;
                    }
                }
            }
        }
    }
    if ((gv_convoyvehiclessafe == gv_heliMax)) {
        TriggerExecute(gt_HelicopterEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeliverFuel_Init () {
    gt_DeliverFuel = TriggerCreate("gt_DeliverFuel_Func");
    TriggerEnable(gt_DeliverFuel, false);
    TriggerAddEventUnitRegion(gt_DeliverFuel, null, RegionFromId(67), true);
    TriggerAddEventUnitRegion(gt_DeliverFuel, null, RegionFromId(68), true);
    TriggerAddEventUnitRegion(gt_DeliverFuel, null, RegionFromId(69), true);
    TriggerAddEventUnitRegion(gt_DeliverFuel, null, RegionFromId(70), true);
    TriggerAddEventUnitRegion(gt_DeliverFuel, null, RegionFromId(71), true);
    TriggerAddEventUnitRegion(gt_DeliverFuel, null, RegionFromId(72), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Helicopter End
//--------------------------------------------------------------------------------------------------
bool gt_HelicopterEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int autoAEAD7AF8_ae = 6;
    const int autoAEAD7AF8_ai = 1;
    unitgroup auto7E7EC5B2_g;
    int auto7E7EC5B2_u;
    unit auto7E7EC5B2_var;
    unitgroup autoAD8A29DB_g;
    int autoAD8A29DB_u;
    unit autoAD8A29DB_var;
    unitgroup auto509FAACE_g;
    int auto509FAACE_u;
    unit auto509FAACE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_HelicopterKilled, false);
    TriggerEnable(gt_DeliverFuel, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroy(gv_sensorpings[0]);
    lv_int = 1;
    for ( ; ( (autoAEAD7AF8_ai >= 0 && lv_int <= autoAEAD7AF8_ae) || (autoAEAD7AF8_ai < 0 && lv_int >= autoAEAD7AF8_ae) ) ; lv_int += autoAEAD7AF8_ai ) {
        UnitRemove(gv_sentryGuns[lv_int]);
    }
    auto7E7EC5B2_g = gv_missionItemPingItems;
    auto7E7EC5B2_u = UnitGroupCount(auto7E7EC5B2_g, c_unitCountAll);
    for (;; auto7E7EC5B2_u -= 1) {
        auto7E7EC5B2_var = UnitGroupUnitFromEnd(auto7E7EC5B2_g, auto7E7EC5B2_u);
        if (auto7E7EC5B2_var == null) { break; }
        gf_MissionItemPingRemoveItem(auto7E7EC5B2_var);
        UnitRemove(auto7E7EC5B2_var);
    }
    libNtve_gf_KillModel(gv_sensorbeacon);
    PingDestroy(gv_highlanderpings[1]);
    PingDestroy(gv_highlanderpings[2]);
    if ((gv_convoyvehiclessafe == 0)) {
        gf_UpdateMissionCompletionTracker(false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    }
    else if ((gv_convoyvehiclessafe == 1)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(55, StringExternal("Param/Value/3BAD77EE"), 0, false);
        autoAD8A29DB_g = gv_uSHelis;
        autoAD8A29DB_u = UnitGroupCount(autoAD8A29DB_g, c_unitCountAll);
        for (;; autoAD8A29DB_u -= 1) {
            autoAD8A29DB_var = UnitGroupUnitFromEnd(autoAD8A29DB_g, autoAD8A29DB_u);
            if (autoAD8A29DB_var == null) { break; }
            UnitRemove(autoAD8A29DB_var);
        }
    }
    else if ((gv_convoyvehiclessafe == 2)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(125, StringExternal("Param/Value/B9A8B640"), 0, false);
        auto509FAACE_g = gv_uSHelis;
        auto509FAACE_u = UnitGroupCount(auto509FAACE_g, c_unitCountAll);
        for (;; auto509FAACE_u -= 1) {
            auto509FAACE_var = UnitGroupUnitFromEnd(auto509FAACE_g, auto509FAACE_u);
            if (auto509FAACE_var == null) { break; }
            UnitRemove(auto509FAACE_var);
        }
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    if ((gv_soldierFound == false)) {
        UnitRemove(gv_rASpy);
        TriggerEnable(gt_SoldierLocated, false);
        ObjectiveSetState(gv_optionalObj, c_objectiveStateFailed);
        gf_MissionText(StringExternal("Param/Value/3C3B7276"));
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
    }
    Wait(30.0, c_timeGame);
    if ((gv_missionAutostart == true)) {
        gf_Chapter2Courage();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HelicopterEnd_Init () {
    gt_HelicopterEnd = TriggerCreate("gt_HelicopterEnd_Func");
    TriggerEnable(gt_HelicopterEnd, false);
    TriggerAddEventTimer(gt_HelicopterEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Titan Health Bar
//--------------------------------------------------------------------------------------------------
bool gt_TitanHealthBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_CurrentBossBar;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_BossBarRegistry >= 45)) {
        gv_BossBarRegistry = 10;
    }

    lv_CurrentBossBar = gv_BossBarRegistry;
    libNtve_gf_DisplayBossBar(lv_CurrentBossBar, "Assets\\Textures\\btn-unit-zerg-brakk.dds", StringExternal("Param/Value/5B8C06B1"), 100, PlayerGroupAll());
    libNtve_gf_SetBossBarBoss(lv_CurrentBossBar, gv_Titan, true);
    libNtve_gf_MoveBossBar(lv_CurrentBossBar, c_anchorTop, 0, 150);
    libNtve_gf_ShowHideBossBar(true, lv_CurrentBossBar);
    gv_BossBarRegistry += 1;
    while (!((UnitIsAlive(gv_Titan) == false))) {
        Wait(3.0, c_timeReal);
    }
    ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
    libNtve_gf_ShowHideBossBar(false, lv_CurrentBossBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TitanHealthBar_Init () {
    gt_TitanHealthBar = TriggerCreate("gt_TitanHealthBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thanatos Health Bar
//--------------------------------------------------------------------------------------------------
bool gt_ThanatosHealthBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_CurrentBossBar;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_BossBarRegistry >= 45)) {
        gv_BossBarRegistry = 10;
    }

    lv_CurrentBossBar = gv_BossBarRegistry;
    libNtve_gf_DisplayBossBar(lv_CurrentBossBar, "Assets\\Textures\\btn-upgrade-zerg-stukov-apocolisk_04.dds", StringExternal("Param/Value/980C1312"), 100, PlayerGroupAll());
    libNtve_gf_SetBossBarBoss(lv_CurrentBossBar, gv_Thanatos, true);
    libNtve_gf_MoveBossBar(lv_CurrentBossBar, c_anchorTop, 0, 50);
    libNtve_gf_ShowHideBossBar(true, lv_CurrentBossBar);
    gv_BossBarRegistry += 1;
    while (!((UnitIsAlive(gv_Thanatos) == false))) {
        Wait(3.0, c_timeReal);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    libNtve_gf_ShowHideBossBar(false, lv_CurrentBossBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThanatosHealthBar_Init () {
    gt_ThanatosHealthBar = TriggerCreate("gt_ThanatosHealthBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thanatos Move
//--------------------------------------------------------------------------------------------------
bool gt_ThanatosMove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    unitgroup auto7823F6B6_g;
    int auto7823F6B6_u;
    unit auto7823F6B6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitIsAlive(gv_Thanatos))) {
        auto7823F6B6_g = gv_heroesGroup;
        auto7823F6B6_u = UnitGroupCount(auto7823F6B6_g, c_unitCountAll);
        for (;; auto7823F6B6_u -= 1) {
            auto7823F6B6_var = UnitGroupUnitFromEnd(auto7823F6B6_g, auto7823F6B6_u);
            if (auto7823F6B6_var == null) { break; }
            if ((UnitIsAlive(auto7823F6B6_var)) && (DistanceBetweenPoints(UnitGetPosition(auto7823F6B6_var), UnitGetPosition(gv_Thanatos)) < 30.0)) {
                UnitIssueOrder(gv_Thanatos, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_Thanatos), RandomFixed(10.0, 12.0), AngleBetweenPoints(UnitGetPosition(auto7823F6B6_var), UnitGetPosition(gv_Thanatos)))), c_orderQueueReplace);
                break;
            }

        }
        Wait(1.0, c_timeGame);
        lv_int += 1;
        if ((lv_int >= gv_thanatosMoveWAILastTime)) {
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThanatosMove_Init () {
    gt_ThanatosMove = TriggerCreate("gt_ThanatosMove_Func");
    TriggerEnable(gt_ThanatosMove, false);
    TriggerAddEventPlayerEffectUsed(gt_ThanatosMove, 14, "ThanatosAI");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Approach Generator
//--------------------------------------------------------------------------------------------------
bool gt_ApproachGenerator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 4.0, 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApproachGenerator_Init () {
    gt_ApproachGenerator = TriggerCreate("gt_ApproachGenerator_Func");
    TriggerEnable(gt_ApproachGenerator, false);
    TriggerAddEventUnitRange(gt_ApproachGenerator, null, UnitFromId(2579), 5.0, true);
    TriggerAddEventUnitRange(gt_ApproachGenerator, null, UnitFromId(582), 5.0, true);
    TriggerAddEventUnitRange(gt_ApproachGenerator, null, UnitFromId(2575), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Generator Powered
//--------------------------------------------------------------------------------------------------
bool gt_GeneratorPowered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[4] lv_powered;
    int lv_int;

    // Automatic Variable Declarations
    const int auto504C7A63_ae = 3;
    const int auto504C7A63_ai = 1;
    unitgroup auto83FB2FB2_g;
    int auto83FB2FB2_u;
    unit auto83FB2FB2_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_int = 1;
        for ( ; ( (auto504C7A63_ai >= 0 && lv_int <= auto504C7A63_ae) || (auto504C7A63_ai < 0 && lv_int >= auto504C7A63_ae) ) ; lv_int += auto504C7A63_ai ) {
            if ((gv_generatorMissionFailed == false) && (UnitGetPropertyFixed(gv_generators[lv_int], c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0) && (lv_powered[lv_int] == false)) {
                lv_powered[lv_int] = true;
                SoundPlayOnUnit(SoundLink("Purifier_PowerUp", -1), PlayerGroupAll(), gv_generators[lv_int], 0.0, 100.0, 0.0);
                PingDestroy(gv_optionalObjPings[lv_int]);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/3DEC3F97"));
                UnitBehaviorRemove(gv_generators[lv_int], "GeneratorLeech", 1);
                auto83FB2FB2_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_generators[lv_int]), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto83FB2FB2_u = UnitGroupCount(auto83FB2FB2_g, c_unitCountAll);
                for (;; auto83FB2FB2_u -= 1) {
                    auto83FB2FB2_var = UnitGroupUnitFromEnd(auto83FB2FB2_g, auto83FB2FB2_u);
                    if (auto83FB2FB2_var == null) { break; }
                    UnitBehaviorRemove(auto83FB2FB2_var, "GeneratorPowering", 1);
                }
            }
        }
        if ((lv_powered[1] == true) && (lv_powered[2] == true) && (lv_powered[3] == true)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerEnable(gt_GeneratorTimeEnd, false);
            TriggerEnable(gt_ApproachGenerator, false);
            TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
            gf_SucceedMission(65, StringExternal("Param/Value/6629C95A"), 0, false);
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
            gf_UpdateMissionCompletionTracker(true);
            break;
        }
        Wait(2.0, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    if ((gv_missionAutostart == true)) {
        gf_ExtractVIPs();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GeneratorPowered_Init () {
    gt_GeneratorPowered = TriggerCreate("gt_GeneratorPowered_Func");
    TriggerEnable(gt_GeneratorPowered, false);
    TriggerAddEventGeneric(gt_GeneratorPowered, "Power Generator");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Generator Time End
//--------------------------------------------------------------------------------------------------
bool gt_GeneratorTimeEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    unit[4] lv_null;

    // Automatic Variable Declarations
    const int auto2A130028_ae = 3;
    const int auto2A130028_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ApproachGenerator, false);
    TriggerDestroy(gt_ApproachGenerator);
    TriggerDestroy(gt_GeneratorPowered);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    lv_int = 1;
    for ( ; ( (auto2A130028_ai >= 0 && lv_int <= auto2A130028_ae) || (auto2A130028_ai < 0 && lv_int >= auto2A130028_ae) ) ; lv_int += auto2A130028_ai ) {
        UnitBehaviorRemove(gv_generators[lv_int], "GeneratorLeech", 1);
    }
    gv_generators[1] = lv_null[1];
    gv_generators[2] = lv_null[2];
    gv_generators[3] = lv_null[3];
    PingDestroyAll();
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    gf_UpdateMissionCompletionTracker(false);
    gf_FailMission(20, StringExternal("Param/Value/05164E5E"), 1);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    gf_ExtractVIPs();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GeneratorTimeEnd_Init () {
    gt_GeneratorTimeEnd = TriggerCreate("gt_GeneratorTimeEnd_Func");
    TriggerEnable(gt_GeneratorTimeEnd, false);
    TriggerAddEventTimer(gt_GeneratorTimeEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acquire BDS
//--------------------------------------------------------------------------------------------------
bool gt_AcquireBDS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "EnergyBattery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_bDSPings[0]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcquireBDS_Init () {
    gt_AcquireBDS = TriggerCreate("gt_AcquireBDS_Func");
    TriggerEnable(gt_AcquireBDS, false);
    TriggerAddEventUnitInventoryChange(gt_AcquireBDS, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Approach BDS
//--------------------------------------------------------------------------------------------------
bool gt_ApproachBDS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    bool lv_allcharged;

    // Automatic Variable Declarations
    const int auto8CFDA5F3_ae = 3;
    const int auto8CFDA5F3_ai = 1;

    // Variable Initialization
    lv_allcharged = true;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "EnergyBattery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (auto8CFDA5F3_ai >= 0 && lv_loopint <= auto8CFDA5F3_ae) || (auto8CFDA5F3_ai < 0 && lv_loopint >= auto8CFDA5F3_ae) ) ; lv_loopint += auto8CFDA5F3_ai ) {
        if ((UnitGetPropertyFixed(gv_bDS[lv_loopint], c_unitPropEnergyPercent, c_unitPropCurrent) <= 0.0) && (libNtve_gf_UnitInRegion(UnitInventoryUnit(EventUnitInventoryItem()), gv_bDSRegion[lv_loopint]) == true)) {
            gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
            UnitRemove(EventUnitInventoryItem());
            UnitSetPropertyFixed(gv_bDS[lv_loopint], c_unitPropEnergyPercent, 100.0);
            PingDestroy(gv_bDSPings[lv_loopint]);
            SoundPlayOnUnit(SoundLink("Obliterate_Charge", -1), PlayerGroupAll(), gv_bDS[lv_loopint], 0.0, 100.0, 0.0);
            gf_MissionText((StringExternal("Param/Value/4A507C17") + IntToText(lv_loopint) + StringExternal("Param/Value/3714FE9E")));
        }
        if ((UnitGetPropertyFixed(gv_bDS[lv_loopint], c_unitPropEnergyPercent, c_unitPropCurrent) <= 0.0)) {
            lv_allcharged = false;
        }
    }
    if ((lv_allcharged == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        GameSetLighting("UACDay", 10.0);
        gf_SucceedMission(45, StringExternal("Param/Value/FFF4903D"), -1, false);
        gf_MissionText(StringExternal("Param/Value/A0C4F644"));
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_UpdateMissionCompletionTracker(true);
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        gv_fogevent = false;
        if ((gv_missionAutostart == true)) {
            gf_ExtractVIPs();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApproachBDS_Init () {
    gt_ApproachBDS = TriggerCreate("gt_ApproachBDS_Func");
    TriggerEnable(gt_ApproachBDS, false);
    TriggerAddEventUnitInventoryChange(gt_ApproachBDS, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VIP Killed
//--------------------------------------------------------------------------------------------------
bool gt_VIPKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_vIPs, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/E9D1BB5F"));
    UnitGroupRemove(gv_vIPs, EventUnit());
    gf_MissionItemPingRemoveItem(EventUnit());
    gf_FailMission(8, StringExternal("Param/Value/9CD25E1B"), 0);
    if ((UnitGetType(EventUnit()) == "Windsor")) {
        PingDestroy(gv_aORegionPings[1]);
        libNtve_gf_KillModel(gv_placerMarkers[1]);
        gf_SpawnUndeadMixed(1, "Minerva", "ZombieYeti", null, 1, 3, 0);
    }
    else if ((UnitGetType(EventUnit()) == "ChiefScarland")) {
        PingDestroy(gv_aORegionPings[2]);
        libNtve_gf_KillModel(gv_placerMarkers[2]);
        gf_SpawnUndeadMixed(1, "Ares", "Hunter", null, 1, 4, 0);
    }
    else if ((UnitGetType(EventUnit()) == "DrRosen")) {
        PingDestroy(gv_aORegionPings[3]);
        libNtve_gf_KillModel(gv_placerMarkers[3]);
        gf_SpawnUndead(1, "Livid", 1);
    }
    if ((UnitGroupCount(gv_vIPs, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_VIPTimeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VIPKilled_Init () {
    gt_VIPKilled = TriggerCreate("gt_VIPKilled_Func");
    TriggerEnable(gt_VIPKilled, false);
    TriggerAddEventUnitDied(gt_VIPKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VIP Site
//--------------------------------------------------------------------------------------------------
bool gt_VIPSite_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_zombieSpawns;

    // Automatic Variable Declarations
    const int auto0CA652CE_ae = 3;
    const int auto0CA652CE_ai = 1;
    region auto63E78FFE_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_int = 1;
    for ( ; ( (auto0CA652CE_ai >= 0 && lv_int <= auto0CA652CE_ae) || (auto0CA652CE_ai < 0 && lv_int >= auto0CA652CE_ae) ) ; lv_int += auto0CA652CE_ai ) {
        if ((EventUnitRegion() == gv_aORegions[lv_int]) && (gv_aORegionsSearched[lv_int] == false)) {
            gv_aORegionsSearched[lv_int] = true;
            PingDestroy(gv_aORegionPings[lv_int]);
            libNtve_gf_KillModel(gv_placerMarkers[lv_int]);
            gf_MissionText(StringExternal("Param/Value/094E9597"));
            auto63E78FFE_val = gv_aORegions[lv_int];
            if (auto63E78FFE_val == gv_aORegions[1]) {
                gf_MissionText(StringExternal("Param/Value/CFD09B86"));
                UnitIssueOrder(gv_colWindsor, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueReplace);
                libNtve_gf_MakeUnitInvulnerable(gv_colWindsor, false);
                gf_VIPBossSpawn();
            }
            else if (auto63E78FFE_val == gv_aORegions[2]) {
                gf_MissionText(StringExternal("Param/Value/51062487"));
                UnitIssueOrder(gv_policeChief, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueReplace);
                libNtve_gf_MakeUnitInvulnerable(gv_policeChief, false);
                gf_VIPBossSpawn();
            }
            else if (auto63E78FFE_val == gv_aORegions[3]) {
                gf_MissionText(StringExternal("Param/Value/218337CE"));
                UnitIssueOrder(gv_drMorrow, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueReplace);
                libNtve_gf_MakeUnitInvulnerable(gv_drMorrow, false);
                gf_VIPBossSpawn();
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VIPSite_Init () {
    gt_VIPSite = TriggerCreate("gt_VIPSite_Func");
    TriggerEnable(gt_VIPSite, false);
    TriggerAddEventUnitRegion(gt_VIPSite, null, RegionFromId(159), true);
    TriggerAddEventUnitRegion(gt_VIPSite, null, RegionFromId(179), true);
    TriggerAddEventUnitRegion(gt_VIPSite, null, RegionFromId(279), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VIP Movement Loop
//--------------------------------------------------------------------------------------------------
bool gt_VIPMovementLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int auto37179700_ae = 3;
    const int auto37179700_ai = 1;
    int auto0C689BD1_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_int = 1;
    for ( ; ( (auto37179700_ai >= 0 && lv_int <= auto37179700_ae) || (auto37179700_ai < 0 && lv_int >= auto37179700_ae) ) ; lv_int += auto37179700_ai ) {
        if ((gv_aORegionsSearched[lv_int] == true)) {
            auto0C689BD1_val = lv_int;
            if (auto0C689BD1_val == 1) {
                UnitIssueOrder(gv_colWindsor, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueReplace);
            }
            else if (auto0C689BD1_val == 2) {
                UnitIssueOrder(gv_policeChief, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueReplace);
            }
            else if (auto0C689BD1_val == 3) {
                UnitIssueOrder(gv_drMorrow, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueReplace);
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VIPMovementLoop_Init () {
    gt_VIPMovementLoop = TriggerCreate("gt_VIPMovementLoop_Func");
    TriggerEnable(gt_VIPMovementLoop, false);
    TriggerAddEventTimePeriodic(gt_VIPMovementLoop, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VIP Extracted
//--------------------------------------------------------------------------------------------------
bool gt_VIPExtracted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_vIPs, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_extractionCount += 1;
    UnitGroupRemove(gv_vIPs, EventUnit());
    gf_MissionItemPingRemoveItem(EventUnit());
    UnitRemove(EventUnit());
    gf_MissionText(StringExternal("Param/Value/842E01AB"));
    if ((UnitGroupCount(gv_vIPs, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_VIPTimeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VIPExtracted_Init () {
    gt_VIPExtracted = TriggerCreate("gt_VIPExtracted_Func");
    TriggerEnable(gt_VIPExtracted, false);
    TriggerAddEventUnitRegion(gt_VIPExtracted, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VIP Time End
//--------------------------------------------------------------------------------------------------
bool gt_VIPTimeEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int autoDCBC8876_ae = 3;
    const int autoDCBC8876_ai = 1;
    unitgroup auto382128F1_g;
    int auto382128F1_u;
    unit auto382128F1_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_VIPKilled, false);
    TriggerEnable(gt_VIPSite, false);
    TriggerEnable(gt_VIPMovementLoop, false);
    TriggerEnable(gt_VIPExtracted, false);
    PingDestroy(gv_supplyPing);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    lv_int = 1;
    for ( ; ( (autoDCBC8876_ai >= 0 && lv_int <= autoDCBC8876_ae) || (autoDCBC8876_ai < 0 && lv_int >= autoDCBC8876_ae) ) ; lv_int += autoDCBC8876_ai ) {
        PingDestroy(gv_aORegionPings[lv_int]);
        libNtve_gf_KillModel(gv_placerMarkers[lv_int]);
    }
    auto382128F1_g = gv_vIPs;
    auto382128F1_u = UnitGroupCount(auto382128F1_g, c_unitCountAll);
    for (;; auto382128F1_u -= 1) {
        auto382128F1_var = UnitGroupUnitFromEnd(auto382128F1_g, auto382128F1_u);
        if (auto382128F1_var == null) { break; }
        gf_MissionItemPingRemoveItem(auto382128F1_var);
        UnitGroupRemove(gv_vIPs, auto382128F1_var);
    }
    if ((gv_drRosenKilled == false)) {
        if ((gv_extractionCount == 3)) {
            gf_UpdateMissionCompletionTracker(true);
            gf_SucceedMission(40, StringExternal("Param/Value/59B9F990"), 0, false);
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        }
        else if ((gv_extractionCount < 3) && (gv_extractionCount >= 1)) {
            gf_UpdateMissionCompletionTracker(true);
            gf_SucceedMission(30, StringExternal("Param/Value/61E1761A"), 0, false);
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        }
        else if ((gv_extractionCount == 0)) {
            gf_UpdateMissionCompletionTracker(false);
            gf_FailMission(20, StringExternal("Param/Value/5A5ED5F4"), 2);
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        }
    }
    else {
        if ((gv_extractionCount == 2)) {
            gf_SucceedMission(30, StringExternal("Param/Value/8849BC7A"), 0, false);
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        }
        else if ((gv_extractionCount == 1)) {
            gf_SucceedMission(20, StringExternal("Param/Value/028E24B9"), 0, false);
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        }
        else if ((gv_extractionCount == 0)) {
            gf_FailMission(12, StringExternal("Param/Value/507C6DF1"), 2);
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        }
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    if ((gv_missionAutostart == true)) {
        gf_DasdanRetreats();
    }
    gf_TakeoffPhantom();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VIPTimeEnd_Init () {
    gt_VIPTimeEnd = TriggerCreate("gt_VIPTimeEnd_Func");
    TriggerEnable(gt_VIPTimeEnd, false);
    TriggerAddEventTimer(gt_VIPTimeEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reconnaissance Drone Found
//--------------------------------------------------------------------------------------------------
bool gt_ReconnaissanceDroneFound_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ping;
    bool lv_missionfailed;
    unit lv_target;
    bool lv_targetfound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_reconDroneFound = true;
    gf_MissionText(StringExternal("Param/Value/A067CD99"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(EventUnitRegion()), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_reconnaissanceDrone);
    lv_ping = PingLastCreated();
    PingSetTooltip(lv_ping, StringExternal("Param/Value/0CC8480B"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/30A3BA38"));
    if ((gv_reconDroneFound == true)) {
        UnitSetPropertyFixed(gv_reconnaissanceDrone, c_unitPropLifePercent, 10.0);
        TextExpressionSetToken("Param/Expression/AC833859", "A", TextWithColor(FixedToText(UnitGetPropertyFixed(gv_reconnaissanceDrone, c_unitPropLifePercent, c_unitPropCurrent), 1), Color(0.00, 100.00, 50.20)));
        ObjectiveSetName(gv_optionalObj, TextExpressionAssemble("Param/Expression/AC833859"));
        Wait(5.0, c_timeGame);
        UnitSetState(gv_reconnaissanceDrone, c_unitStateInvulnerable, false);
        UnitGroupAdd(gv_undeadTargetGroup, gv_reconnaissanceDrone);
        while ((gv_reconDroneRepaired == false)) {
            Wait(1.0, c_timeGame);
            if ((UnitIsAlive(gv_reconnaissanceDrone) == true)) {
                UnitSetPropertyFixed(gv_reconnaissanceDrone, c_unitPropLifePercent, (UnitGetPropertyFixed(gv_reconnaissanceDrone, c_unitPropLifePercent, c_unitPropCurrent) + 0.35));
                TextExpressionSetToken("Param/Expression/3706D459", "A", TextWithColor(FixedToText(UnitGetPropertyFixed(gv_reconnaissanceDrone, c_unitPropLifePercent, c_unitPropCurrent), 1), Color(0.00, 100.00, 50.20)));
                ObjectiveSetName(gv_optionalObj, TextExpressionAssemble("Param/Expression/3706D459"));
                if ((UnitGetPropertyFixed(gv_reconnaissanceDrone, c_unitPropLifePercent, c_unitPropCurrent) == 100.0)) {
                    gv_reconDroneRepaired = true;
                }
            }
            else {
                lv_missionfailed = true;
                break;
            }
        }
        PingDestroy(lv_ping);
        if ((lv_missionfailed == false)) {
            libNtve_gf_MakeUnitInvulnerable(gv_reconnaissanceDrone, true);
            UnitGroupRemove(gv_undeadTargetGroup, gv_reconnaissanceDrone);
            libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_reconnaissanceDrone), "Disabled");
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_reconnaissanceDrone), c_animNameDefault, "Attack", c_animFlagPlayForever, c_animTimeDefault);
            UnitSetHeight(gv_reconnaissanceDrone, 20.0, 12.0);
            ActorSend(libNtve_gf_MainActorofUnit(gv_reconnaissanceDrone), "SetOpacity 0.000000 12.000000 op");
            ObjectiveSetState(gv_optionalObj, c_objectiveStateCompleted);
            gf_SucceedMission(40, StringExternal("Param/Value/B1A14915"), 0, false);
            gf_MissionText(StringExternal("Param/Value/112C44D9"));
            Wait(5.0, c_timeGame);
            gf_MissionText(StringExternal("Param/Value/7091241C"));
            libNtve_gf_ShowHideUnit(gv_reconnaissanceDrone, false);
            libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_reconnaissanceDrone), c_animNameDefault);
            Wait(5.0, c_timeGame);
            ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
        }
        else {
            ObjectiveSetState(gv_optionalObj, c_objectiveStateFailed);
            Wait(5.0, c_timeGame);
            ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
            return true;
        }
        while ((gv_gameOver == false)) {
            Wait(120.0, c_timeReal);
            lv_target = null;
            lv_targetfound = false;
            if ((UnitGroupCount(gv_massiveGroup, c_unitCountAlive) >= 1)) {
                while ((lv_targetfound == false)) {
                    lv_target = UnitGroupRandomUnit(gv_massiveGroup, c_unitCountAlive);
                    if ((UnitIsAlive(lv_target) == true) && (UnitGroupHasUnit(gv_laserDesignatorTarget, lv_target) == false)) {
                        lv_targetfound = true;
                        gf_ReconDroneLaserDesignateUnit(lv_target);
                    }
                    Wait(1.0, c_timeReal);
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReconnaissanceDroneFound_Init () {
    gt_ReconnaissanceDroneFound = TriggerCreate("gt_ReconnaissanceDroneFound_Func");
    TriggerEnable(gt_ReconnaissanceDroneFound, false);
    TriggerAddEventUnitRegion(gt_ReconnaissanceDroneFound, null, RegionFromId(234), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Dies
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_refugeegroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionItemPingRemoveItem(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeDies_Init () {
    gt_RefugeeDies = TriggerCreate("gt_RefugeeDies_Func");
    TriggerEnable(gt_RefugeeDies, false);
    TriggerAddEventUnitDied(gt_RefugeeDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Convoy Loop
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeConvoyLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    unit lv_tempunit;
    unit lv_nextunit;
    point lv_temppoint;
    timer lv_timeouttimer;

    // Automatic Variable Declarations
    playergroup auto1B1B6AF8_g;
    int auto1B1B6AF8_var;
    unitgroup auto2F8392BA_g;
    int auto2F8392BA_u;
    unit auto2F8392BA_var;
    unitgroup auto8B3C9CC1_g;
    int auto8B3C9CC1_u;
    unit auto8B3C9CC1_var;
    unitgroup auto6F3B531C_g;
    int auto6F3B531C_u;
    unit auto6F3B531C_var;
    unitgroup auto2C5D32F3_g;
    int auto2C5D32F3_u;
    unit auto2C5D32F3_var;
    int auto9C16884F_ae;
    const int auto9C16884F_ai = 1;

    // Variable Initialization
    lv_timeouttimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    PingSetUnit(gv_missionping, UnitGroupUnit(gv_convoy, 1));
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) > 1)) {
        PingSetUnit(gv_missionping, UnitGroupUnit(gv_convoy, 1));
    }
    if ((UnitGroupCount(gv_civilians, c_unitCountAlive) == 0) && (gv_convoyfinal == false)) {
        gv_convoyfinal = true;
        gf_UpdateMissionCompletionTracker(false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_MissionText(StringExternal("Param/Value/5600E17B"));
        gv_patrolroute[1] = PointFromId(1785);
        gv_patrolroute[2] = RegionGetCenter(RegionFromId(41));
        gv_patrolmax = 2;
        gv_patrolnext = 1;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), gv_patrolroute[gv_patrolnext]) <= 2.0)) {
        if ((gv_patrolnext == gv_patrolmax) && (gv_patrolroute[gv_patrolnext] == PointFromId(2631))) {
            TriggerEnable(TriggerGetCurrent(), false);
            TimerStart(lv_timeouttimer, 60.0, false, c_timeGame);
            gv_convoyfinal = true;
            gf_MissionText(StringExternal("Param/Value/B863569B"));
            auto1B1B6AF8_g = gv_players;
            auto1B1B6AF8_var = -1;
            while (true) {
                auto1B1B6AF8_var = PlayerGroupNextPlayer(auto1B1B6AF8_g, auto1B1B6AF8_var);
                if (auto1B1B6AF8_var < 0) { break; }
                auto2F8392BA_g = gv_civilians;
                auto2F8392BA_u = UnitGroupCount(auto2F8392BA_g, c_unitCountAll);
                for (;; auto2F8392BA_u -= 1) {
                    auto2F8392BA_var = UnitGroupUnitFromEnd(auto2F8392BA_g, auto2F8392BA_u);
                    if (auto2F8392BA_var == null) { break; }
                    libNtve_gf_ShareVisionofUnit(auto2F8392BA_var, true, auto1B1B6AF8_var);
                }
            }
            lv_loopint = 1;
            auto8B3C9CC1_g = gv_civilians;
            auto8B3C9CC1_u = UnitGroupCount(auto8B3C9CC1_g, c_unitCountAll);
            for (;; auto8B3C9CC1_u -= 1) {
                auto8B3C9CC1_var = UnitGroupUnitFromEnd(auto8B3C9CC1_g, auto8B3C9CC1_u);
                if (auto8B3C9CC1_var == null) { break; }
                UnitSetCustomValue(auto8B3C9CC1_var, 0, IntToFixed(lv_loopint));
                lv_loopint = (lv_loopint + 1);
                if ((lv_loopint > UnitGroupCount(gv_convoy, c_unitCountAlive))) {
                    lv_loopint = 1;
                }

            }
            while (true) {
                if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
                    return true;
                }

                if ((UnitGroupCount(gv_civilians, c_unitCountAlive) == 0)) {
                    break;
                }
                else {
                    auto6F3B531C_g = gv_civilians;
                    auto6F3B531C_u = UnitGroupCount(auto6F3B531C_g, c_unitCountAll);
                    for (;; auto6F3B531C_u -= 1) {
                        auto6F3B531C_var = UnitGroupUnitFromEnd(auto6F3B531C_g, auto6F3B531C_u);
                        if (auto6F3B531C_var == null) { break; }
                        if ((UnitGroupCount(gv_convoy, c_unitCountAlive) < FixedToInt(UnitGetCustomValue(auto6F3B531C_var, 0)))) {
                            UnitSetCustomValue(auto6F3B531C_var, 0, 1.0);
                        }

                        lv_tempunit = UnitGroupUnit(gv_convoy, FixedToInt(UnitGetCustomValue(auto6F3B531C_var, 0)));
                        lv_temppoint = PointWithOffsetPolar(UnitGetPosition(lv_tempunit), 2.0, (UnitGetFacing(lv_tempunit) - 180.0));
                        if ((DistanceBetweenPoints(UnitGetPosition(auto6F3B531C_var), lv_temppoint) <= 3.0)) {
                            UnitSetCustomValue(lv_tempunit, 0, (UnitGetCustomValue(lv_tempunit, 0) + 1.0));
                            UnitRemove(auto6F3B531C_var);
                        }
                        else {
                            UnitIssueOrder(auto6F3B531C_var, OrderTargetingPoint(AbilityCommand("move", 0), lv_temppoint), c_orderQueueReplace);
                        }
                    }
                }
                if ((TimerGetRemaining(lv_timeouttimer) <= 1.0)) {
                    auto2C5D32F3_g = gv_civilians;
                    auto2C5D32F3_u = UnitGroupCount(auto2C5D32F3_g, c_unitCountAll);
                    for (;; auto2C5D32F3_u -= 1) {
                        auto2C5D32F3_var = UnitGroupUnitFromEnd(auto2C5D32F3_g, auto2C5D32F3_u);
                        if (auto2C5D32F3_var == null) { break; }
                        lv_tempunit = UnitGroupUnit(gv_convoy, FixedToInt(UnitGetCustomValue(auto2C5D32F3_var, 0)));
                        UnitSetCustomValue(lv_tempunit, 0, (UnitGetCustomValue(lv_tempunit, 0) + 1.0));
                        UnitRemove(auto2C5D32F3_var);
                    }
                    break;
                }

                Wait(2.0, c_timeGame);
            }
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
            gf_UpdateMissionCompletionTracker(true);
            gf_MissionText(StringExternal("Param/Value/671AB69E"));
            gv_patrolroute[1] = PointFromId(2321);
            gv_patrolroute[2] = PointFromId(1780);
            gv_patrolroute[3] = PointFromId(1777);
            gv_patrolroute[4] = PointFromId(1785);
            gv_patrolroute[5] = RegionGetCenter(RegionFromId(41));
            gv_patrolmax = 5;
            gv_patrolnext = 1;
            Wait(2.5, c_timeGame);
            ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
            TriggerEnable(TriggerGetCurrent(), true);
        }
        else {
            if ((gv_patrolnext < gv_patrolmax)) {
                gv_patrolnext += 1;
            }
        }
    }

    auto9C16884F_ae = UnitGroupCount(gv_convoy, c_unitCountAll);
    lv_loopint = 1;
    for ( ; ( (auto9C16884F_ai >= 0 && lv_loopint <= auto9C16884F_ae) || (auto9C16884F_ai < 0 && lv_loopint >= auto9C16884F_ae) ) ; lv_loopint += auto9C16884F_ai ) {
        lv_tempunit = UnitGroupUnit(gv_convoy, lv_loopint);
        if ((lv_loopint == 1)) {
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), gv_patrolroute[gv_patrolnext]), c_orderQueueReplace);
        }
        else {
            lv_nextunit = UnitGroupUnit(gv_convoy, (lv_loopint - 1));
            if ((DistanceBetweenPoints(UnitGetPosition(lv_tempunit), UnitGetPosition(lv_nextunit)) >= 15.0)) {
                UnitBehaviorAdd(lv_tempunit, "CatchingUp", lv_tempunit, 1);
            }
            else {
                UnitBehaviorRemove(lv_tempunit, "CatchingUp", 1);
            }
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_nextunit), 5.0, AngleBetweenPoints(UnitGetPosition(lv_nextunit), UnitGetPosition(lv_tempunit)))), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeConvoyLoop_Init () {
    gt_RefugeeConvoyLoop = TriggerCreate("gt_RefugeeConvoyLoop_Func");
    TriggerEnable(gt_RefugeeConvoyLoop, false);
    TriggerAddEventTimePeriodic(gt_RefugeeConvoyLoop, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Convoy Leave
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeConvoyLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    gf_SucceedMission(10, StringExternal("Param/Value/CBE5115E"), 0, false);
    if ((UnitGetCustomValue(EventUnit(), 0) >= 1)) {
        gf_SucceedMission((FixedToInt(UnitGetCustomValue(EventUnit(), 0)) * 7), (FixedToText(UnitGetCustomValue(EventUnit(), 0), c_fixedPrecisionAny) + StringExternal("Param/Value/525CB3F3")), 0, false);
    }
    if ((UnitGetCustomValue(EventUnit(), 0) >= 8.0)) {
        gv_infestationLevel -= 1;
    }
    gv_convoyvehiclessafe += 1;
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
        TriggerSendEvent("Convoy End");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeConvoyLeave_Init () {
    gt_RefugeeConvoyLeave = TriggerCreate("gt_RefugeeConvoyLeave_Func");
    TriggerEnable(gt_RefugeeConvoyLeave, false);
    TriggerAddEventUnitRegion(gt_RefugeeConvoyLeave, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Convoy Dies
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeConvoyDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_convoy, EventUnit());
    gv_convoysKilled += 1;
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        if ((gv_convoysKilled == 5)) {
            gf_UpdateMissionCompletionTracker(false);
            ObjectiveSetState(gv_secondObj, c_objectiveStateFailed);
            gf_FailMission(15, StringExternal("Param/Value/C380311D"), 5);
        }
        else {
            ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
            gf_MissionText(StringExternal("Param/Value/55FDDCEA"));
        }
        if ((gv_convoy_Set == true)) {
            TriggerSendEvent("Convoy End");
        }
    }
    else {
        gf_MissionText(StringExternal("Param/Value/F031C8B3"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeConvoyDies_Init () {
    gt_RefugeeConvoyDies = TriggerCreate("gt_RefugeeConvoyDies_Func");
    TriggerEnable(gt_RefugeeConvoyDies, false);
    TriggerAddEventUnitDied(gt_RefugeeConvoyDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Convoy End
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeConvoyEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__1;

    // Automatic Variable Declarations
    unitgroup autoEB9ADD2B_g;
    int autoEB9ADD2B_u;
    unit autoEB9ADD2B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RefugeeConvoyDies, false);
    TriggerEnable(gt_RefugeeConvoyLeave, false);
    TriggerEnable(gt_RefugeeConvoyLoop, false);
    TriggerEnable(gt_RefugeeDies, false);
    PingDestroy(gv_missionping);
    ObjectiveSetState(gv_secondObj, c_objectiveStateHidden);
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/6AC3FB12"));
    Wait(2.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/7F2A54FB"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/DB5661F1"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(41)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B9744C55"));
    gv_missionping = PingLastCreated();
    TriggerEnable(gt_PlayerLeaveAO, true);
    TimerStart(gv_missiontimer, 90.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    while (!(((TimerGetRemaining(gv_missiontimer) <= 1.0) || (TriggerIsEnabled(gt_PlayerLeaveAO) == false)))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(gv_missionping);
    if ((TriggerIsEnabled(gt_PlayerLeaveAO) == true)) {
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        TriggerEnable(gt_PlayerLeaveAO, false);
        autoEB9ADD2B_g = gv_heroesGroup;
        autoEB9ADD2B_u = UnitGroupCount(autoEB9ADD2B_g, c_unitCountAll);
        for (;; autoEB9ADD2B_u -= 1) {
            autoEB9ADD2B_var = UnitGroupUnitFromEnd(autoEB9ADD2B_g, autoEB9ADD2B_u);
            if (autoEB9ADD2B_var == null) { break; }
            if ((libNtve_gf_UnitIsHidden(autoEB9ADD2B_var) == true)) {
                lv__1 = 1;
                break;
            }
        }
        if ((lv__1 == 1)) {
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
            gf_UpdateMissionCompletionTracker(true);
        }
        else {
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
            gf_UpdateMissionCompletionTracker(false);
        }
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        if ((gv_missionAutostart == true)) {
            gf_Chapter3DarkSkies();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeConvoyEnd_Init () {
    gt_RefugeeConvoyEnd = TriggerCreate("gt_RefugeeConvoyEnd_Func");
    TriggerEnable(gt_RefugeeConvoyEnd, false);
    TriggerAddEventGeneric(gt_RefugeeConvoyEnd, "Convoy End");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leave AO
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaveAO_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allextracted;

    // Automatic Variable Declarations
    unitgroup auto28D2A370_g;
    int auto28D2A370_u;
    unit auto28D2A370_var;

    // Variable Initialization
    lv_allextracted = true;

    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "IonCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(EventUnit(), true);
    UnitSelect(EventUnit(), UnitGetOwner(EventUnit()), false);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    if ((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true)) {
        gf_SucceedMission(3, StringExternal("Param/Value/88498661"), 0, false);
    }
    else {
        UnitGroupAdd(gv_transitionalgroup, EventUnit());
    }
    auto28D2A370_g = gv_heroesGroup;
    auto28D2A370_u = UnitGroupCount(auto28D2A370_g, c_unitCountAll);
    for (;; auto28D2A370_u -= 1) {
        auto28D2A370_var = UnitGroupUnitFromEnd(auto28D2A370_g, auto28D2A370_u);
        if (auto28D2A370_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto28D2A370_var) == false) && (UnitIsAlive(auto28D2A370_var) == true)) {
            lv_allextracted = false;
        }
    }
    if ((lv_allextracted == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_UpdateMissionCompletionTracker(true);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        if ((gv_missionAutostart == true)) {
            gf_Chapter3DarkSkies();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaveAO_Init () {
    gt_PlayerLeaveAO = TriggerCreate("gt_PlayerLeaveAO_Func");
    TriggerEnable(gt_PlayerLeaveAO, false);
    TriggerAddEventUnitRegion(gt_PlayerLeaveAO, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS Dialog Button
//--------------------------------------------------------------------------------------------------
bool gt_DSDialogButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_dsdialog, EventPlayer()) == true))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_dsdialogbuttons[1]) || (EventDialogControl() == gv_dsdialogbuttons[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_dsdialog, PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_dsdialogbuttons[1])) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/9A3350BC")));
        gv_dsvotes[1] = (gv_dsvotes[1] + 1);
        gv_playermodevote[EventPlayer()] = 1;
    }
    else {
        if ((EventDialogControl() == gv_dsdialogbuttons[2])) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/C2502233")));
            gv_dsvotes[2] = (gv_dsvotes[2] + 1);
            gv_playermodevote[EventPlayer()] = 2;
        }
    }
    if (((gv_dsvotes[1] + gv_dsvotes[2]) == PlayerGroupCount(gv_players))) {
        TriggerExecute(gt_DSVoteEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DSDialogButton_Init () {
    gt_DSDialogButton = TriggerCreate("gt_DSDialogButton_Func");
    TriggerEnable(gt_DSDialogButton, false);
    TriggerAddEventDialogControl(gt_DSDialogButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS Vote End
//--------------------------------------------------------------------------------------------------
bool gt_DSVoteEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    playergroup auto9D63D9B4_g;
    int auto9D63D9B4_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DSDialogButton, false);
    DialogSetVisible(gv_dsdialog, PlayerGroupAll(), false);
    gv_dsvotes[1] = 0;
    gv_dsvotes[2] = 0;
    auto9D63D9B4_g = gv_players;
    auto9D63D9B4_var = -1;
    while (true) {
        auto9D63D9B4_var = PlayerGroupNextPlayer(auto9D63D9B4_g, auto9D63D9B4_var);
        if (auto9D63D9B4_var < 0) { break; }
        gv_dsvotes[gv_playermodevote[auto9D63D9B4_var]] = (gv_dsvotes[gv_playermodevote[auto9D63D9B4_var]] + 1);
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    if ((gv_missionAutostart == true) && (gv_dsvotes[1] > gv_dsvotes[2])) {
        gf_SearchThalimHomes();
    }
    else {
        if ((gv_missionAutostart == true) && (RandomInt(0, 1) == 1)) {
            gf_SeismicDisturbance();
        }
        else {
            gf_FungusCores();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DSVoteEnd_Init () {
    gt_DSVoteEnd = TriggerCreate("gt_DSVoteEnd_Func");
    TriggerEnable(gt_DSVoteEnd, false);
    TriggerAddEventTimer(gt_DSVoteEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Search Home
//--------------------------------------------------------------------------------------------------
bool gt_SearchHome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_z;
    int lv_loopint;
    int lv_remainingcount;
    bool lv_lastone;
    bool lv_complete;

    // Automatic Variable Declarations
    const int autoD451F656_ae = 8;
    const int autoD451F656_ai = 1;
    const int autoFE6C81E4_ae = 8;
    const int autoFE6C81E4_ai = 1;
    const int auto51EA44E0_ae = 8;
    const int auto51EA44E0_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (autoD451F656_ai >= 0 && lv_loopint <= autoD451F656_ae) || (autoD451F656_ai < 0 && lv_loopint >= autoD451F656_ae) ) ; lv_loopint += autoD451F656_ai ) {
        if ((gv_aORegionsSearched[lv_loopint] == false)) {
            lv_remainingcount += 1;
        }
    }
    if ((lv_remainingcount == 1)) {
        lv_lastone = true;
    }
    lv_loopint = 1;
    for ( ; ( (autoFE6C81E4_ai >= 0 && lv_loopint <= autoFE6C81E4_ae) || (autoFE6C81E4_ai < 0 && lv_loopint >= autoFE6C81E4_ae) ) ; lv_loopint += autoFE6C81E4_ai ) {
        if ((EventUnitRegion() == gv_highlanders[lv_loopint]) && (gv_aORegionsSearched[lv_loopint] == false)) {
            gv_aORegionsSearched[lv_loopint] = true;
            PingDestroy(gv_highlanderpings[lv_loopint]);
            libNtve_gf_KillModel(gv_waterSiteActors[lv_loopint]);
            if (((RandomInt(0, 6) == 4) || (lv_lastone == true))) {
                TriggerEnable(TriggerGetCurrent(), false);
                gf_MissionText(StringExternal("Param/Value/B90D3196"));
                ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
                lv_z = 1;
                for ( ; ( (auto51EA44E0_ai >= 0 && lv_z <= auto51EA44E0_ae) || (auto51EA44E0_ai < 0 && lv_z >= auto51EA44E0_ae) ) ; lv_z += auto51EA44E0_ai ) {
                    PingDestroy(gv_highlanderpings[lv_z]);
                    libNtve_gf_KillModel(gv_waterSiteActors[lv_z]);
                }
                Wait(2.5, c_timeGame);
                gf_SucceedMission(35, StringExternal("Param/Value/57CF2EF9"), -1, false);
                Wait(2.5, c_timeGame);
                ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
                gf_UpdateMissionCompletionTracker(true);
                lv_complete = true;
                break;
            }
            else {
                gf_MissionText(StringExternal("Param/Value/99AC93B2"));
            }
            break;
        }
    }
    if ((gv_missionAutostart == true) && (lv_complete == true)) {
        gf_FindKeyCard();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SearchHome_Init () {
    gt_SearchHome = TriggerCreate("gt_SearchHome_Func");
    TriggerEnable(gt_SearchHome, false);
    TriggerAddEventUnitRegion(gt_SearchHome, null, RegionFromId(283), true);
    TriggerAddEventUnitRegion(gt_SearchHome, null, RegionFromId(284), true);
    TriggerAddEventUnitRegion(gt_SearchHome, null, RegionFromId(285), true);
    TriggerAddEventUnitRegion(gt_SearchHome, null, RegionFromId(286), true);
    TriggerAddEventUnitRegion(gt_SearchHome, null, RegionFromId(287), true);
    TriggerAddEventUnitRegion(gt_SearchHome, null, RegionFromId(288), true);
    TriggerAddEventUnitRegion(gt_SearchHome, null, RegionFromId(289), true);
    TriggerAddEventUnitRegion(gt_SearchHome, null, RegionFromId(290), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Phantom Arrives 2
//--------------------------------------------------------------------------------------------------
bool gt_PhantomArrivesDS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    playergroup auto920ACA0E_g;
    int auto920ACA0E_var;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_medevacregion = gv_lZs[RandomInt(1, 5)];
    UnitCreate(1, "ColonistShipFlying", 0, 13, PointWithOffset(RegionGetCenter(gv_medevacregion), -15.0, 0.0), 0.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_mEDEVAC = UnitLastCreated();
    auto920ACA0E_g = gv_players;
    auto920ACA0E_var = -1;
    while (true) {
        auto920ACA0E_var = PlayerGroupNextPlayer(auto920ACA0E_g, auto920ACA0E_var);
        if (auto920ACA0E_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(gv_mEDEVAC, true, auto920ACA0E_var);
    }
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(gv_medevacregion)), c_orderQueueReplace);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("VikingAssaultPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", SoundLink("Dialogue_TransmissionStart", -1), StringExternal("Param/Value/67D99613"), StringExternal("Param/Value/1C4FD8DA"), 3.0, c_transmissionDurationAdd, false);
    Wait(11.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(gv_mEDEVAC, true);
    TriggerEnable(gt_EvacPlayerToPhantomDS, true);
    TriggerEnable(gt_EvacPlayerToPhantomTimeEndDS, true);
    TimerStart(gv_missiontimer, 180.0, false, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_medevacregion), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 20.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetTooltip(lv_ping, StringExternal("Param/Value/26868BB0"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhantomArrivesDS_Init () {
    gt_PhantomArrivesDS = TriggerCreate("gt_PhantomArrivesDS_Func");
    TriggerEnable(gt_PhantomArrivesDS, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evac Player To Phantom 2
//--------------------------------------------------------------------------------------------------
bool gt_EvacPlayerToPhantomDS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allextracted;

    // Automatic Variable Declarations
    unitgroup auto37BBCD57_g;
    int auto37BBCD57_u;
    unit auto37BBCD57_var;

    // Variable Initialization
    lv_allextracted = true;

    // Conditions
    if (testConds) {
        if (!((EventUnitRegion() == gv_medevacregion))) {
            return false;
        }

        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "IonCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(EventUnit(), true);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    if ((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true)) {
        gf_SucceedMission(3, StringExternal("Param/Value/A300F2DC"), 0, false);
    }
    else {
        UnitGroupAdd(gv_transitionalgroup, EventUnit());
    }
    auto37BBCD57_g = gv_heroesGroup;
    auto37BBCD57_u = UnitGroupCount(auto37BBCD57_g, c_unitCountAll);
    for (;; auto37BBCD57_u -= 1) {
        auto37BBCD57_var = UnitGroupUnitFromEnd(auto37BBCD57_g, auto37BBCD57_u);
        if (auto37BBCD57_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto37BBCD57_var) == false) && (UnitIsAlive(auto37BBCD57_var) == true)) {
            lv_allextracted = false;
        }
    }
    if ((lv_allextracted == true)) {
        TriggerExecute(gt_EvacPlayerToPhantomTimeEndDS, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvacPlayerToPhantomDS_Init () {
    gt_EvacPlayerToPhantomDS = TriggerCreate("gt_EvacPlayerToPhantomDS_Func");
    TriggerEnable(gt_EvacPlayerToPhantomDS, false);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantomDS, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantomDS, null, RegionFromId(13), false);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantomDS, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantomDS, null, RegionFromId(15), false);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantomDS, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantomDS, null, RegionFromId(14), false);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantomDS, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantomDS, null, RegionFromId(16), false);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantomDS, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantomDS, null, RegionFromId(6), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evac Player To Phantom Time End 2
//--------------------------------------------------------------------------------------------------
bool gt_EvacPlayerToPhantomTimeEndDS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF7822AB1_g;
    int autoF7822AB1_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_EvacPlayerToPhantomDS, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    UnitRemove(gv_mEDEVAC);
    Wait(5.0, c_timeGame);
    CameraSave(1);
    CameraSave(2);
    CameraSave(3);
    CameraSave(4);
    CameraSave(5);
    CameraSave(6);
    CameraSave(7);
    CameraSave(8);
    CameraSave(9);
    CameraSave(10);
    CameraSave(11);
    CameraSave(12);
    if ((gv_gamemode == 5) && (gf_NumberofPlayers() == 12) && (gv_teamDeathTotal == 0) && (GameIsOnline() == true)) {
        autoF7822AB1_g = gv_players;
        autoF7822AB1_var = -1;
        while (true) {
            autoF7822AB1_var = PlayerGroupNextPlayer(autoF7822AB1_g, autoF7822AB1_var);
            if (autoF7822AB1_var < 0) { break; }
            if ((gv_playercamounlocked[48][autoF7822AB1_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoF7822AB1_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoF7822AB1_var), c_messageAreaSubtitle, StringExternal("Param/Value/CBE4E192"));
                gv_playercamounlocked[48][autoF7822AB1_var] = true;
            }

        }
    }

    if ((gv_missionAutostart == true)) {
        TriggerExecute(gt_EpilogueDS, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvacPlayerToPhantomTimeEndDS_Init () {
    gt_EvacPlayerToPhantomTimeEndDS = TriggerCreate("gt_EvacPlayerToPhantomTimeEndDS_Func");
    TriggerEnable(gt_EvacPlayerToPhantomTimeEndDS, false);
    TriggerAddEventTimer(gt_EvacPlayerToPhantomTimeEndDS, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Satchel Spawn Ping
//--------------------------------------------------------------------------------------------------
bool gt_DestroySatchelSpawnPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_missionping);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroySatchelSpawnPing_Init () {
    gt_DestroySatchelSpawnPing = TriggerCreate("gt_DestroySatchelSpawnPing_Func");
    TriggerEnable(gt_DestroySatchelSpawnPing, false);
    TriggerAddEventUnitRegion(gt_DestroySatchelSpawnPing, null, RegionFromId(68), true);
    TriggerAddEventUnitRegion(gt_DestroySatchelSpawnPing, null, RegionFromId(68), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seismic Spawn Loop
//--------------------------------------------------------------------------------------------------
bool gt_SeismicSpawnLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_seismicDisturbanceKilled[1] == false)) {
        if ((gv_gamemode == 1)) {
            if ((RandomInt(1, 2) == 1)) {
                gf_SpawnUndeadInRegion("InfestedCivilian", gv_spawnCount, RegionFromId(175), 1);
                Wait(5.0, c_timeGame);
                gf_SpawnUndeadInRegion("Zombie", gv_spawnCount, RegionFromId(175), 1);
                Wait(5.0, c_timeGame);
                gf_SpawnUndeadInRegion("Charger", 3, RegionFromId(175), 1);
            }
            else {
                gf_SpawnUndeadInRegion("Zombie", gv_spawnCount, RegionFromId(175), 1);
            }
        }
        if ((gv_gamemode >= 2) && (gv_gamemode <= 3)) {
            if ((RandomInt(1, 2) == 1)) {
                gf_SpawnUndeadInRegion("InfestedCivilian", gv_spawnCount, RegionFromId(175), 1);
                Wait(5.0, c_timeGame);
                gf_SpawnUndeadInRegion("Zombie", gv_spawnCount, RegionFromId(175), 1);
                Wait(5.0, c_timeGame);
                gf_SpawnUndeadInRegion("Charger", 3, RegionFromId(175), 1);
            }
            else {
                gf_SpawnUndeadInRegion("Unburied", gv_spawnCount, RegionFromId(175), 1);
                Wait(5.0, c_timeGame);
                gf_SpawnUndeadInRegion("Glutton", RandomInt(1, 2), RegionFromId(175), 1);
            }
        }
        if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
            if ((RandomInt(1, 2) == 1)) {
                gf_SpawnUndeadInRegion("InfestedCivilian", gv_spawnCount, RegionFromId(175), 1);
                Wait(2.5, c_timeGame);
                gf_SpawnUndeadInRegion("Zombie", gv_spawnCount, RegionFromId(175), 1);
                Wait(2.5, c_timeGame);
                gf_SpawnUndeadInRegion("Unburied", gv_spawnCount, RegionFromId(175), 1);
            }
            else {
                gf_SpawnUndeadInRegion("Leaper", RandomInt(2, 3), RegionFromId(175), 1);
                Wait(2.5, c_timeGame);
                gf_SpawnUndeadInRegion("Boomer", RandomInt(4, 6), RegionFromId(175), 1);
            }
        }
    }
    if ((gv_seismicDisturbanceKilled[2] == false)) {
        if ((gv_gamemode == 1)) {
            if ((RandomInt(1, 2) == 1)) {
                gf_SpawnUndeadInRegion("InfestedCivilian", gv_spawnCount, RegionFromId(176), 2);
                Wait(5.0, c_timeGame);
                gf_SpawnUndeadInRegion("Zombie", gv_spawnCount, RegionFromId(176), 2);
            }
            else {
                gf_SpawnUndeadInRegion("Risen", gv_spawnCount, RegionFromId(176), 2);
            }
        }
        if ((gv_gamemode >= 2) && (gv_gamemode <= 3)) {
            if ((RandomInt(1, 2) == 1)) {
                gf_SpawnUndeadInRegion("Zombie", gv_spawnCount, RegionFromId(176), 2);
                Wait(5.0, c_timeGame);
                gf_SpawnUndeadInRegion("Unburied", gv_spawnCount, RegionFromId(176), 2);
            }
            else {
                gf_SpawnUndeadInRegion("Leaper", 2, RegionFromId(176), 2);
                Wait(5.0, c_timeGame);
                gf_SpawnUndeadInRegion("Pooch", RandomInt(2, 3), RegionFromId(176), 2);
            }
        }
        if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
            if ((RandomInt(1, 2) == 1)) {
                gf_SpawnUndeadInRegion("Zombie", gv_spawnCount, RegionFromId(176), 1);
                Wait(2.5, c_timeGame);
                gf_SpawnUndeadInRegion("Unburied", gv_spawnCount, RegionFromId(176), 1);
                Wait(2.5, c_timeGame);
                gf_SpawnUndeadInRegion("Glutton", RandomInt(2, 3), RegionFromId(176), 1);
            }
            else {
                gf_SpawnUndeadInRegion("Leaper", RandomInt(2, 3), RegionFromId(176), 1);
                Wait(2.5, c_timeGame);
                gf_SpawnUndeadInRegion("Pooch", RandomInt(2, 5), RegionFromId(176), 1);
                Wait(2.5, c_timeGame);
                gf_SpawnUndeadInRegion("Risen", RandomInt(2, 5), RegionFromId(176), 1);
            }
        }
    }
    if ((gv_seismicDisturbanceKilled[3] == false)) {
        if ((gv_gamemode == 1)) {
            if ((RandomInt(1, 2) == 1)) {
                gf_SpawnUndeadInRegion("Zombie", gv_spawnCount, RegionFromId(177), 3);
                Wait(5.0, c_timeGame);
                gf_SpawnUndeadInRegion("Risen", gv_spawnCount, RegionFromId(177), 3);
            }
            else {
                gf_SpawnUndeadInRegion("Bruchus", 1, RegionFromId(177), 3);
            }
        }
        if ((gv_gamemode >= 2) && (gv_gamemode <= 3)) {
            if ((RandomInt(1, 2) == 1)) {
                gf_SpawnUndeadInRegion("Zombie", gv_spawnCount, RegionFromId(177), 3);
                Wait(5.0, c_timeGame);
                gf_SpawnUndeadInRegion("Risen", gv_spawnCount, RegionFromId(177), 3);
            }
            else {
                gf_SpawnUndeadInRegion("Unburied", gv_spawnCount, RegionFromId(177), 3);
                Wait(5.0, c_timeGame);
                gf_SpawnUndeadInRegion("Bruchus", RandomInt(1, 2), RegionFromId(177), 3);
            }
        }
        if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
            if ((RandomInt(1, 2) == 1)) {
                gf_SpawnUndeadInRegion("Zombie", gv_spawnCount, RegionFromId(177), 1);
                Wait(2.5, c_timeGame);
                gf_SpawnUndeadInRegion("Risen", gv_spawnCount, RegionFromId(177), 1);
                Wait(2.5, c_timeGame);
                gf_SpawnUndeadInRegion("Unburied", gv_spawnCount, RegionFromId(177), 1);
            }
            else {
                gf_SpawnUndeadInRegion("Unburied", gv_spawnCount, RegionFromId(177), 1);
                Wait(2.5, c_timeGame);
                gf_SpawnUndeadInRegion("Bruchus", RandomInt(2, 3), RegionFromId(177), 1);
                Wait(2.5, c_timeGame);
                gf_SpawnUndeadInRegion("Spitter", 2, RegionFromId(177), 1);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SeismicSpawnLoop_Init () {
    gt_SeismicSpawnLoop = TriggerCreate("gt_SeismicSpawnLoop_Func");
    TriggerEnable(gt_SeismicSpawnLoop, false);
    TriggerAddEventTimeElapsed(gt_SeismicSpawnLoop, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_SeismicSpawnLoop, RandomInt(30, 45), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel
//--------------------------------------------------------------------------------------------------
bool gt_Satchel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_magnitude;
    fixed lv_dist;
    point lv_epicenter;
    unit lv_unit;
    int lv_loopint;
    bool lv_inaregion;
    bool lv_allsensorsset;
    int lv_planter;
    int lv_arrayint;

    // Automatic Variable Declarations
    const int autoBD9D527B_ae = 3;
    const int autoBD9D527B_ai = 1;
    const int auto024B7F96_ae = 3;
    const int auto024B7F96_ai = 1;
    unitgroup auto4964BF68_g;
    int auto4964BF68_u;
    unit auto4964BF68_var;

    // Variable Initialization
    lv_epicenter = UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem()));
    lv_allsensorsset = true;
    lv_planter = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "SatchelCharge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (autoBD9D527B_ai >= 0 && lv_loopint <= autoBD9D527B_ae) || (autoBD9D527B_ai < 0 && lv_loopint >= autoBD9D527B_ae) ) ; lv_loopint += autoBD9D527B_ai ) {
        if ((libNtve_gf_UnitInRegion(UnitInventoryUnit(EventUnitInventoryItem()), gv_seismicSpawns[lv_loopint]) == true) && (gv_seismicDisturbanceKilled[lv_loopint] == false)) {
            gf_PlayerTransmission(StringExternal("Param/Value/DFAEDB60"), 1, lv_planter);
            gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
            UnitGroupRemove(gv_simpleMissionItems, EventUnitInventoryItem());
            UnitRemove(EventUnitInventoryItem());
            gv_seismicDisturbanceKilled[lv_loopint] = true;
            lv_inaregion = true;
            lv_arrayint = lv_loopint;
            PingDestroy(gv_seismicPings[lv_loopint]);
            SoundPlay(SoundLink("TUISecret", -1), PlayerGroupAll(), 100.0, 0.0);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBaseAttack", RegionGetCenter(gv_seismicSpawns[lv_loopint]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 12.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/772ADEA2"));
        }

    }
    lv_loopint = 1;
    for ( ; ( (auto024B7F96_ai >= 0 && lv_loopint <= auto024B7F96_ae) || (auto024B7F96_ai < 0 && lv_loopint >= auto024B7F96_ae) ) ; lv_loopint += auto024B7F96_ai ) {
        if ((gv_seismicDisturbanceKilled[lv_loopint] == false)) {
            lv_allsensorsset = false;
        }

    }
    if ((gv_missionAutostart == true) && (lv_allsensorsset == true)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_UpdateMissionCompletionTracker(true);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_SeismicSpawnLoop, false);
        gv_missioncomplete[1] = true;
        gf_ThresherMaws();
    }

    if ((lv_inaregion == false)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/A226BD34"));
    }
    else {
        gv_satchelCount = (gv_satchelCount + 1);
        Wait(12.0, c_timeGame);
        PlayerCreateEffectPoint(lv_planter, "SatchelExplosionDamage", RegionGetCenter(gv_seismicSpawns[lv_arrayint]));
        libNtve_gf_CreateModelAtPoint("EnergyNovaShockwave", RegionGetCenter(gv_seismicSpawns[lv_arrayint]));
        gf_SucceedMission(20, StringExternal("Param/Value/C11D30E7"), -1, false);
        auto4964BF68_g = UnitGroup(null, 14, gv_seismicSpawns[lv_arrayint], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4964BF68_u = UnitGroupCount(auto4964BF68_g, c_unitCountAll);
        for (;; auto4964BF68_u -= 1) {
            auto4964BF68_var = UnitGroupUnitFromEnd(auto4964BF68_g, auto4964BF68_u);
            if (auto4964BF68_var == null) { break; }
            UnitKill(auto4964BF68_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Satchel_Init () {
    gt_Satchel = TriggerCreate("gt_Satchel_Func");
    TriggerEnable(gt_Satchel, false);
    TriggerAddEventUnitInventoryChange(gt_Satchel, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infernus Is Attacked
//--------------------------------------------------------------------------------------------------
bool gt_InfernusIsAttacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RedstoneLavaCritter"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_MissionText(StringExternal("Param/Value/CD2AD71C"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/9600DFC5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfernusIsAttacked_Init () {
    gt_InfernusIsAttacked = TriggerCreate("gt_InfernusIsAttacked_Func");
    TriggerEnable(gt_InfernusIsAttacked, false);
    TriggerAddEventUnitAttacked2(gt_InfernusIsAttacked, UnitRefFromUnit(UnitGroupUnit(gv_infernus, 1)), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fungus Core Spawns
//--------------------------------------------------------------------------------------------------
bool gt_FungusCoreSpawns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_gamemode == 2)) {
        gf_SpawnUndead(1, "Cursed", 2);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(1, "Bruchus", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        Wait(40.0, c_timeGame);
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
    }

    if ((gv_gamemode == 3)) {
        gf_SpawnUndead(1, "Cursed", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Bruchus", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(1, "Dilophosaur", 3);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        Wait(35.0, c_timeGame);
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
    }

    if ((gv_gamemode == 4)) {
        gf_SpawnUndead(2, "Cursed", 1);
        gf_SpawnUndead(1, "Horror", 2);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(2, "Bruchus", 1);
        gf_SpawnUndead(2, "Lacerti", 1);
        gf_SpawnUndead(1, "Dilophosaur", 2);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(30.0, c_timeGame);
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(3, "Cursed", 1);
        gf_SpawnUndead(1, "Horror", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(3, "Bruchus", 1);
        gf_SpawnUndead(2, "Lacerti", 1);
        gf_SpawnUndead(1, "Dilophosaur", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(25.0, c_timeGame);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(20.0, c_timeGame);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(1, "ZombieWraith", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FungusCoreSpawns_Init () {
    gt_FungusCoreSpawns = TriggerCreate("gt_FungusCoreSpawns_Func");
    TriggerEnable(gt_FungusCoreSpawns, false);
    TriggerAddEventGeneric(gt_FungusCoreSpawns, "Fungus Spawns");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter LZ
//--------------------------------------------------------------------------------------------------
bool gt_EnterLZ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    actor lv_mark;

    // Automatic Variable Declarations
    const int auto9602E4F6_ae = 8;
    const int auto9602E4F6_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 6;
    for ( ; ( (auto9602E4F6_ai >= 0 && lv_loopint <= auto9602E4F6_ae) || (auto9602E4F6_ai < 0 && lv_loopint >= auto9602E4F6_ae) ) ; lv_loopint += auto9602E4F6_ai ) {
        if ((EventUnitRegion() == gv_highlanders[lv_loopint]) && (gv_aORegionsSearched[lv_loopint] == false)) {
            gv_aORegionsSearched[lv_loopint] = true;
            PingDestroy(gv_highlanderpings[lv_loopint]);
            gf_MissionText(StringExternal("Param/Value/7D7189B3"));
            gf_SucceedMission(12, StringExternal("Param/Value/9BDCBC71"), -1, false);
            libNtve_gf_CreateModelAtPoint("GhostNukeTarget", RegionGetCenter(gv_highlanders[lv_loopint]));
            lv_mark = libNtve_gf_ActorLastCreated();
            if ((gv_aORegionsSearched[6] == true) && (gv_aORegionsSearched[7] == true) && (gv_aORegionsSearched[8] == true)) {
                TriggerEnable(TriggerGetCurrent(), false);
                ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
                gf_UpdateMissionCompletionTracker(true);
                gv_missioncomplete[2] = true;
            }
            Wait(12.0, c_timeGame);
            libNtve_gf_KillModel(lv_mark);
            gf_AirDropItemLoc("MK79SentryGunPacked", RegionRandomPoint(gv_highlanders[lv_loopint]), 1);
            gf_AirDropItemLoc("ExplosiveCharge", RegionRandomPoint(gv_highlanders[lv_loopint]), 1);
            gf_AirDropItemLoc("ExplosiveCharge", RegionRandomPoint(gv_highlanders[lv_loopint]), 2);
            gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(gv_highlanders[lv_loopint]), 1);
            gf_AirDropItemLoc("MRL", RegionRandomPoint(gv_highlanders[lv_loopint]), 1);
            gf_AirDropItemLoc("GroundFlare", RegionRandomPoint(gv_highlanders[lv_loopint]), 2);
            gf_AirDropItemLoc("SmokeGrenade", RegionRandomPoint(gv_highlanders[lv_loopint]), 2);
            gf_AirDropItemLoc("HK42", RegionRandomPoint(gv_highlanders[lv_loopint]), 2);
            gf_AirDropItemLoc("FlareGun", RegionRandomPoint(gv_highlanders[lv_loopint]), 2);
            gf_AirDropItemLoc("Magazines", RegionRandomPoint(gv_highlanders[lv_loopint]), 2);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterLZ_Init () {
    gt_EnterLZ = TriggerCreate("gt_EnterLZ_Func");
    TriggerEnable(gt_EnterLZ, false);
    TriggerAddEventUnitRegion(gt_EnterLZ, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_EnterLZ, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_EnterLZ, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_EnterLZ, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_EnterLZ, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: T1 Timer End
//--------------------------------------------------------------------------------------------------
bool gt_T1TimerEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    if ((UnitGroupCount(gv_finaltier1s, c_unitCountAlive) >= 1)) {
        gv_epilogueEarned = false;
        TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("HornerPortrait3D"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", SoundLink("Dialogue_TransmissionStart", -1), StringExternal("Param/Value/0AC90F7F"), StringExternal("Param/Value/C077B95E"), 6.0, c_transmissionDurationAdd, true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_UpdateMissionCompletionTracker(false);
        Wait(2.5, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/6B9DC88A"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_T1TimerEnd_Init () {
    gt_T1TimerEnd = TriggerCreate("gt_T1TimerEnd_Func");
    TriggerEnable(gt_T1TimerEnd, false);
    TriggerAddEventTimer(gt_T1TimerEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Phantom Arrives
//--------------------------------------------------------------------------------------------------
bool gt_PhantomArrives_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    playergroup autoE89117FC_g;
    int autoE89117FC_var;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_medevacregion = gv_lZs[RandomInt(1, 5)];
    UnitCreate(1, "ColonistShipFlying", 0, 13, PointWithOffset(RegionGetCenter(gv_medevacregion), -15.0, 0.0), 0.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_mEDEVAC = UnitLastCreated();
    autoE89117FC_g = gv_players;
    autoE89117FC_var = -1;
    while (true) {
        autoE89117FC_var = PlayerGroupNextPlayer(autoE89117FC_g, autoE89117FC_var);
        if (autoE89117FC_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(gv_mEDEVAC, true, autoE89117FC_var);
    }
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(gv_medevacregion)), c_orderQueueReplace);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("VikingAssaultPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", SoundLink("Dialogue_TransmissionStart", -1), StringExternal("Param/Value/8A900F46"), StringExternal("Param/Value/67E714AA"), 3.0, c_transmissionDurationAdd, false);
    Wait(11.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(gv_mEDEVAC, true);
    TriggerEnable(gt_EvacPlayerToPhantom, true);
    TriggerEnable(gt_EvacPlayerToPhantomTimeEnd, true);
    TimerStart(gv_missiontimer, 90.0, false, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_medevacregion), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 20.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetTooltip(lv_ping, StringExternal("Param/Value/A69CB633"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhantomArrives_Init () {
    gt_PhantomArrives = TriggerCreate("gt_PhantomArrives_Func");
    TriggerEnable(gt_PhantomArrives, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evac Player To Phantom
//--------------------------------------------------------------------------------------------------
bool gt_EvacPlayerToPhantom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allextracted;

    // Automatic Variable Declarations
    unitgroup autoE933FB08_g;
    int autoE933FB08_u;
    unit autoE933FB08_var;

    // Variable Initialization
    lv_allextracted = true;

    // Conditions
    if (testConds) {
        if (!((EventUnitRegion() == gv_medevacregion))) {
            return false;
        }

        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "IonCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(EventUnit(), true);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    if ((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true)) {
        gf_SucceedMission(3, StringExternal("Param/Value/AC526C13"), 0, false);
    }
    else {
        UnitGroupAdd(gv_transitionalgroup, EventUnit());
    }
    autoE933FB08_g = gv_heroesGroup;
    autoE933FB08_u = UnitGroupCount(autoE933FB08_g, c_unitCountAll);
    for (;; autoE933FB08_u -= 1) {
        autoE933FB08_var = UnitGroupUnitFromEnd(autoE933FB08_g, autoE933FB08_u);
        if (autoE933FB08_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(autoE933FB08_var) == false) && (UnitIsAlive(autoE933FB08_var) == true)) {
            lv_allextracted = false;
        }
    }
    if ((lv_allextracted == true)) {
        TriggerExecute(gt_EvacPlayerToPhantomTimeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvacPlayerToPhantom_Init () {
    gt_EvacPlayerToPhantom = TriggerCreate("gt_EvacPlayerToPhantom_Func");
    TriggerEnable(gt_EvacPlayerToPhantom, false);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantom, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantom, null, RegionFromId(13), false);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantom, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantom, null, RegionFromId(15), false);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantom, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantom, null, RegionFromId(14), false);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantom, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantom, null, RegionFromId(16), false);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantom, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_EvacPlayerToPhantom, null, RegionFromId(6), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evac Player To Phantom Time End
//--------------------------------------------------------------------------------------------------
bool gt_EvacPlayerToPhantomTimeEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2C914EED_g;
    int auto2C914EED_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_EvacPlayerToPhantom, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    UnitRemove(gv_mEDEVAC);
    Wait(5.0, c_timeGame);
    CameraSave(1);
    CameraSave(2);
    CameraSave(3);
    CameraSave(4);
    CameraSave(5);
    CameraSave(6);
    CameraSave(7);
    CameraSave(8);
    CameraSave(9);
    CameraSave(10);
    CameraSave(11);
    CameraSave(12);
    if ((gv_gamemode == 5) && (gf_NumberofPlayers() == 12) && (gv_teamDeathTotal == 0) && (GameIsOnline() == true)) {
        auto2C914EED_g = gv_players;
        auto2C914EED_var = -1;
        while (true) {
            auto2C914EED_var = PlayerGroupNextPlayer(auto2C914EED_g, auto2C914EED_var);
            if (auto2C914EED_var < 0) { break; }
            if ((gv_playercamounlocked[48][auto2C914EED_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto2C914EED_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto2C914EED_var), c_messageAreaSubtitle, StringExternal("Param/Value/04F75EBB"));
                gv_playercamounlocked[48][auto2C914EED_var] = true;
            }

        }
    }

    if ((gv_missionAutostart == true)) {
        TriggerExecute(gt_Epilogue, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvacPlayerToPhantomTimeEnd_Init () {
    gt_EvacPlayerToPhantomTimeEnd = TriggerCreate("gt_EvacPlayerToPhantomTimeEnd_Func");
    TriggerEnable(gt_EvacPlayerToPhantomTimeEnd, false);
    TriggerAddEventTimer(gt_EvacPlayerToPhantomTimeEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Epilogue 
//--------------------------------------------------------------------------------------------------
bool gt_Epilogue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_screen;
    unit lv_droppod;
    int lv_int;
    int lv_loopint;
    unit lv_hull;
    string lv_lldr;
    unit lv_untitledVariable001;

    // Automatic Variable Declarations
    unitgroup auto61EE8AA9_g;
    int auto61EE8AA9_u;
    unit auto61EE8AA9_var;
    unitgroup autoFA179439_g;
    int autoFA179439_u;
    unit autoFA179439_var;
    unitgroup auto5AD40EF0_g;
    int auto5AD40EF0_u;
    unit auto5AD40EF0_var;
    unitgroup autoDF325623_g;
    int autoDF325623_u;
    unit autoDF325623_var;
    unitgroup autoA3A8EE56_g;
    int autoA3A8EE56_u;
    unit autoA3A8EE56_var;
    unitgroup auto02597D68_g;
    int auto02597D68_u;
    unit auto02597D68_var;
    unitgroup auto8A199EE9_g;
    int auto8A199EE9_u;
    unit auto8A199EE9_var;
    playergroup auto1F89ED52_g;
    int auto1F89ED52_var;
    playergroup auto520912BA_g;
    int auto520912BA_var;
    playergroup autoED440ADD_g;
    int autoED440ADD_var;
    unitgroup auto15D0ED6D_g;
    int auto15D0ED6D_u;
    unit auto15D0ED6D_var;
    unitgroup autoCC9CCB90_g;
    int autoCC9CCB90_u;
    unit autoCC9CCB90_var;
    playergroup auto1222D14F_g;
    int auto1222D14F_var;

    // Variable Initialization
    lv_screen = c_invalidDialogId;
    lv_loopint = 1;
    lv_lldr = "LLDR";

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SwitchSolarToLoss();
    gf_SkipActionsIfGameOver();
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOn();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    PingDestroyAll();
    gv_tunnelSatchelCount = 3;
    auto61EE8AA9_g = gv_heroesGroup;
    auto61EE8AA9_u = UnitGroupCount(auto61EE8AA9_g, c_unitCountAll);
    for (;; auto61EE8AA9_u -= 1) {
        auto61EE8AA9_var = UnitGroupUnitFromEnd(auto61EE8AA9_g, auto61EE8AA9_u);
        if (auto61EE8AA9_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto61EE8AA9_var, false);
    }
    autoFA179439_g = gv_playerLNs;
    autoFA179439_u = UnitGroupCount(autoFA179439_g, c_unitCountAll);
    for (;; autoFA179439_u -= 1) {
        autoFA179439_var = UnitGroupUnitFromEnd(autoFA179439_g, autoFA179439_u);
        if (autoFA179439_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoFA179439_var, false);
        UnitGroupAdd(gv_transitionalgroup, autoFA179439_var);
    }
    auto5AD40EF0_g = gv_playerminis;
    auto5AD40EF0_u = UnitGroupCount(auto5AD40EF0_g, c_unitCountAll);
    for (;; auto5AD40EF0_u -= 1) {
        auto5AD40EF0_var = UnitGroupUnitFromEnd(auto5AD40EF0_g, auto5AD40EF0_u);
        if (auto5AD40EF0_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto5AD40EF0_var, false);
        UnitGroupAdd(gv_transitionalgroup, auto5AD40EF0_var);
    }
    TriggerEnable(gt_PlayerKills, false);
    autoDF325623_g = gv_lNavailable;
    autoDF325623_u = UnitGroupCount(autoDF325623_g, c_unitCountAll);
    for (;; autoDF325623_u -= 1) {
        autoDF325623_var = UnitGroupUnitFromEnd(autoDF325623_g, autoDF325623_u);
        if (autoDF325623_var == null) { break; }
        UnitBehaviorRemove(autoDF325623_var, "LNInvulnerability", 1);
        UnitKill(autoDF325623_var);
    }
    autoA3A8EE56_g = gv_undeadGroup;
    autoA3A8EE56_u = UnitGroupCount(autoA3A8EE56_g, c_unitCountAll);
    for (;; autoA3A8EE56_u -= 1) {
        autoA3A8EE56_var = UnitGroupUnitFromEnd(autoA3A8EE56_g, autoA3A8EE56_u);
        if (autoA3A8EE56_var == null) { break; }
        UnitKill(autoA3A8EE56_var);
    }
    auto02597D68_g = UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto02597D68_u = UnitGroupCount(auto02597D68_g, c_unitCountAll);
    for (;; auto02597D68_u -= 1) {
        auto02597D68_var = UnitGroupUnitFromEnd(auto02597D68_g, auto02597D68_u);
        if (auto02597D68_var == null) { break; }
        UnitKill(auto02597D68_var);
    }
    auto8A199EE9_g = UnitGroup(null, 13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto8A199EE9_u = UnitGroupCount(auto8A199EE9_g, c_unitCountAll);
    for (;; auto8A199EE9_u -= 1) {
        auto8A199EE9_var = UnitGroupUnitFromEnd(auto8A199EE9_g, auto8A199EE9_u);
        if (auto8A199EE9_var == null) { break; }
        UnitKill(auto8A199EE9_var);
    }
    TriggerEnable(gt_PlayerKills, true);
    auto1F89ED52_g = gv_players;
    auto1F89ED52_var = -1;
    while (true) {
        auto1F89ED52_var = PlayerGroupNextPlayer(auto1F89ED52_g, auto1F89ED52_var);
        if (auto1F89ED52_var < 0) { break; }
        CameraApplyInfo(auto1F89ED52_var, CameraInfoFromId(1398), 0.0, -1, 10, true);
        CameraLockInput(auto1F89ED52_var, true);
    }
    SoundPlay(SoundLink("UI_BnetError", -1), PlayerGroupAll(), 100.0, 0.0);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/D7440498"), StringExternal("Param/Value/A328B3F0"), 7.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    Wait(7.0, c_timeGame);
    UIShowTextCrawl(PlayerGroupAll(), StringToText(""), StringExternal("Param/Value/B01C6578"), 8.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    Wait(8.0, c_timeGame);
    UIShowTextCrawl(PlayerGroupAll(), StringToText(""), StringExternal("Param/Value/49CCC2E5"), 8.5, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    Wait(8.5, c_timeGame);
    auto520912BA_g = gv_players;
    auto520912BA_var = -1;
    while (true) {
        auto520912BA_var = PlayerGroupNextPlayer(auto520912BA_g, auto520912BA_var);
        if (auto520912BA_var < 0) { break; }
        CameraLockInput(auto520912BA_var, false);
        CameraRestore(auto520912BA_var, 0.0, -1, 10);
        CameraPan(auto520912BA_var, RegionGetCenter(RegionFromId(13)), 0.5, -1, 10, true);
        CameraLockInput(auto520912BA_var, true);
    }
    GameSetLighting("UACNight", 0.0);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitCreate(1, "ColonistShipFlying", 0, 13, RegionGetCenter(RegionFromId(65)), 270.0);
    gv_phantombeginning = UnitLastCreated();
    UnitIssueOrder(gv_phantombeginning, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(RegionFromId(13))), c_orderQueueReplace);
    gf_MissionText(StringExternal("Param/Value/8653490A"));
    Wait(6.0, c_timeGame);
    autoED440ADD_g = gv_players;
    autoED440ADD_var = -1;
    while (true) {
        autoED440ADD_var = PlayerGroupNextPlayer(autoED440ADD_g, autoED440ADD_var);
        if (autoED440ADD_var < 0) { break; }
        gv_playerNODson[autoED440ADD_var] = true;
        SoundPlay(SoundLink("NODOn", -1), PlayerGroupSingle(autoED440ADD_var), 100.0, 0.0);
        PlayerSetLighting(autoED440ADD_var, "NODSUpdated", 2.0);
    }
    Wait(8.5, c_timeGame);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOff();
    auto15D0ED6D_g = gv_heroesGroup;
    auto15D0ED6D_u = UnitGroupCount(auto15D0ED6D_g, c_unitCountAll);
    for (;; auto15D0ED6D_u -= 1) {
        auto15D0ED6D_var = UnitGroupUnitFromEnd(auto15D0ED6D_g, auto15D0ED6D_u);
        if (auto15D0ED6D_var == null) { break; }
        if ((UnitIsAlive(auto15D0ED6D_var) == false) && (gv_mod_1life == false)) {
            UnitCreateEffectUnit(auto15D0ED6D_var, "ReviveModifyUnit", auto15D0ED6D_var);
            Wait(0.1, c_timeGame);
        }
        if ((UnitIsAlive(auto15D0ED6D_var) == true)) {
            UnitSetPropertyFixed(auto15D0ED6D_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(auto15D0ED6D_var, c_unitPropEnergyPercent, 100.0);
            UnitSetPosition(auto15D0ED6D_var, RegionGetCenter(RegionFromId(13)), false);
            UnitIssueOrder(auto15D0ED6D_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionGetCenter(RegionFromId(82)), 4.0, (30.0 * IntToFixed(UnitGetOwner(auto15D0ED6D_var))))), c_orderQueueReplace);
        }
        libNtve_gf_PauseUnit(auto15D0ED6D_var, false);
        libNtve_gf_ShowHideUnit(auto15D0ED6D_var, true);
        libNtve_gf_MakeUnitInvulnerable(auto15D0ED6D_var, false);
    }
    autoCC9CCB90_g = gv_transitionalgroup;
    autoCC9CCB90_u = UnitGroupCount(autoCC9CCB90_g, c_unitCountAll);
    for (;; autoCC9CCB90_u -= 1) {
        autoCC9CCB90_var = UnitGroupUnitFromEnd(autoCC9CCB90_g, autoCC9CCB90_u);
        if (autoCC9CCB90_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoCC9CCB90_var, false);
        libNtve_gf_PauseUnit(autoCC9CCB90_var, false);
        libNtve_gf_ShowHideUnit(autoCC9CCB90_var, true);
        libNtve_gf_MakeUnitInvulnerable(autoCC9CCB90_var, false);
        UnitSetPosition(autoCC9CCB90_var, RegionGetCenter(RegionFromId(13)), false);
        UnitSetPropertyFixed(autoCC9CCB90_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(autoCC9CCB90_var, c_unitPropEnergyPercent, 100.0);
        UnitIssueOrder(autoCC9CCB90_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(82))), c_orderQueueReplace);
    }
    auto1222D14F_g = gv_players;
    auto1222D14F_var = -1;
    while (true) {
        auto1222D14F_var = PlayerGroupNextPlayer(auto1222D14F_g, auto1222D14F_var);
        if (auto1222D14F_var < 0) { break; }
        CameraLockInput(auto1222D14F_var, false);
    }
    UnitPauseAll(false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/FC5B2C2F") + IntToText(gv_tunnelSatchelCount) + StringExternal("Param/Value/E615F169")));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/2F4E77EB"));
    gf_MissionText(StringExternal("Param/Value/90AE5CF9"));
    Wait(RandomFixed(0.0, 1.5), c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, RegionGetCenter(RegionFromId(164)));
    lv_droppod = UnitLastCreated();
    UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
    Wait(2.0, c_timeGame);
    UnitRemove(lv_droppod);
    UnitKill(lv_droppod);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "M200SatchelChargePacked", 0, 0, RegionGetCenter(RegionFromId(164)));
    gv_satchelItem = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_satchelItem, true);
    gf_MissionItemPingAddItem(UnitLastCreated());
    UnitGroupAdd(gv_simpleMissionItems, UnitLastCreated());
    TimerStart(gv_missiontimer, 300.0, false, c_timeGame);
    TriggerEnable(gt_SatchelTimeout, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(164)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C178A657"));
    gv_missionping = PingLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(RegionFromId(164)));
    gv_sensorbeacon = libNtve_gf_ActorLastCreated();
    TriggerEnable(gt_Satchel1PickUp, true);
    TriggerEnable(gt_Tunnel1, true);
    TriggerEnable(gt_UndeadVisualContact, true);
    gv_currentSatchel[1] = true;
    UnitIssueOrder(gv_phantombeginning, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_phantombeginning, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(8.0, c_timeGame);
    UnitRemove(gv_phantombeginning);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Epilogue_Init () {
    gt_Epilogue = TriggerCreate("gt_Epilogue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove LLDR 
//--------------------------------------------------------------------------------------------------
bool gt_RemoveLLDR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_loopint;

    // Automatic Variable Declarations
    const int auto0BF4C6E4_ae = 6;
    const int auto0BF4C6E4_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gf_CountItemType("LLDR", EventUnit()) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (auto0BF4C6E4_ai >= 0 && lv_loopint <= auto0BF4C6E4_ae) || (auto0BF4C6E4_ai < 0 && lv_loopint >= auto0BF4C6E4_ae) ) ; lv_loopint += auto0BF4C6E4_ai ) {
        if ((UnitGetType(UnitInventoryItem(EventUnit(), lv_loopint)) == "LLDR")) {
            UnitRemove(UnitInventoryItem(EventUnit(), lv_loopint));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveLLDR_Init () {
    gt_RemoveLLDR = TriggerCreate("gt_RemoveLLDR_Func");
    TriggerEnable(gt_RemoveLLDR, false);
    TriggerAddEventUnitRegion(gt_RemoveLLDR, null, RegionFromId(82), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Visual Contact 
//--------------------------------------------------------------------------------------------------
bool gt_UndeadVisualContact_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 14))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_players, UnitGetOwner(EventUnitTarget())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    gf_PlayerTransmission(StringExternal("Param/Value/D327DEC0"), 1, UnitGetOwner(EventUnitTarget()));
    gf_MissionText(StringExternal("Param/Value/61303DEC"));
    Wait(4.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/7B10A09C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadVisualContact_Init () {
    gt_UndeadVisualContact = TriggerCreate("gt_UndeadVisualContact_Func");
    TriggerEnable(gt_UndeadVisualContact, false);
    TriggerAddEventUnitAttacked(gt_UndeadVisualContact, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel 1 Pick Up 
//--------------------------------------------------------------------------------------------------
bool gt_Satchel1PickUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "M200SatchelChargePacked"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_missionping);
    libNtve_gf_KillModel(gv_sensorbeacon);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(241)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FFEDBA46"));
    gv_missionping = PingLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", RegionGetCenter(RegionFromId(241)));
    gv_sensorbeacon = libNtve_gf_ActorLastCreated();
    if ((gv_satchelRetry[1] == false)) {
        gf_MissionText(StringExternal("Param/Value/79C89CA1"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Satchel1PickUp_Init () {
    gt_Satchel1PickUp = TriggerCreate("gt_Satchel1PickUp_Func");
    TriggerEnable(gt_Satchel1PickUp, false);
    TriggerAddEventUnitInventoryChange(gt_Satchel1PickUp, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel 2 Pick Up 
//--------------------------------------------------------------------------------------------------
bool gt_Satchel2PickUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "M200SatchelChargePacked"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_missionping);
    libNtve_gf_KillModel(gv_sensorbeacon);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(242)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/776350AF"));
    gv_missionping = PingLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", RegionGetCenter(RegionFromId(242)));
    gv_sensorbeacon = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Satchel2PickUp_Init () {
    gt_Satchel2PickUp = TriggerCreate("gt_Satchel2PickUp_Func");
    TriggerEnable(gt_Satchel2PickUp, false);
    TriggerAddEventUnitInventoryChange(gt_Satchel2PickUp, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel 3 Pick Up 
//--------------------------------------------------------------------------------------------------
bool gt_Satchel3PickUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "M200SatchelChargePacked"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_missionping);
    libNtve_gf_KillModel(gv_sensorbeacon);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(243)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D8326644"));
    gv_missionping = PingLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", RegionGetCenter(RegionFromId(243)));
    gv_sensorbeacon = libNtve_gf_ActorLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Satchel3PickUp_Init () {
    gt_Satchel3PickUp = TriggerCreate("gt_Satchel3PickUp_Func");
    TriggerEnable(gt_Satchel3PickUp, false);
    TriggerAddEventUnitInventoryChange(gt_Satchel3PickUp, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tunnel 1
//--------------------------------------------------------------------------------------------------
bool gt_Tunnel1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_magnitude;
    fixed lv_dist;
    point lv_epicenter;
    unit lv_unit;
    int lv_loopint;
    bool lv_inaregion;
    bool lv_allsensorsset;
    int lv_planter;
    int lv_arrayint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_epicenter = UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem()));
    lv_allsensorsset = true;
    lv_planter = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "M200SatchelChargePacked"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(UnitInventoryUnit(EventUnitInventoryItem()), RegionFromId(241)) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_currentSatchel[1] = false;
        TriggerEnable(gt_SatchelTimeout, false);
        TriggerEnable(gt_RemoveLLDR, false);
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_pauseSpawning = false;
        libNtve_gf_KillModel(gv_sensorbeacon);
        gf_MissionText(StringExternal("Param/Value/9272790C"));
        gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
        UnitGroupRemove(gv_simpleMissionItems, EventUnitInventoryItem());
        UnitRemove(EventUnitInventoryItem());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "M200SatchelCharge", 0, 0, EventUnitInventoryItemTargetPoint());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        gv_satchel[1] = UnitLastCreated();
        libNtve_gf_MakeUnitUncommandable(gv_satchel[1], true);
        UnitSetPropertyFixed(gv_satchel[1], c_unitPropHeight, 0.0);
        UnitSetScale(UnitLastCreated(), 150.0, 150.0, 150.0);
        UnitGroupAdd(gv_undeadTargetGroup, gv_satchel[1]);
        UnitGroupAdd(gv_m200Satchel, gv_satchel[1]);
        gv_satchelTimeMAX[1] = gv_satchelTimeRemaining[1];
        TextTagCreate(TextWithColor(IntToText(gv_satchelTimeRemaining[1]), gv_redTextTag), 32, UnitGetPosition(gv_satchel[1]), 5.0, true, false, PlayerGroupAll());
        gv_satchelTextTag = TextTagLastCreated();
        TriggerEnable(gt_SatchelTimerWarning1, true);
        TriggerEnable(gt_RedoTunnel, true);
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/D0EB27E2"));
        Wait(3.0, c_timeGame);
        TriggerEnable(gt_UndeadSpawningPrologue, true);
        gf_StartSpawnLoop(1, gv_loopType);
        gf_StartSpawnLoop(2, gv_loopType);
        gf_StartSpawnLoop(3, gv_loopType);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/D9B701C0"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tunnel1_Init () {
    gt_Tunnel1 = TriggerCreate("gt_Tunnel1_Func");
    TriggerEnable(gt_Tunnel1, false);
    TriggerAddEventUnitInventoryChange(gt_Tunnel1, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tunnel 2
//--------------------------------------------------------------------------------------------------
bool gt_Tunnel2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_magnitude;
    fixed lv_dist;
    point lv_epicenter;
    unit lv_unit;
    int lv_loopint;
    bool lv_inaregion;
    bool lv_allsensorsset;
    int lv_planter;
    int lv_arrayint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_epicenter = UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem()));
    lv_allsensorsset = true;
    lv_planter = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "M200SatchelChargePacked"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(UnitInventoryUnit(EventUnitInventoryItem()), RegionFromId(242)) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_currentSatchel[2] = false;
        TriggerEnable(gt_SatchelTimeout, false);
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_KillModel(gv_sensorbeacon);
        gf_MissionText(StringExternal("Param/Value/62200E8D"));
        gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
        UnitGroupRemove(gv_simpleMissionItems, EventUnitInventoryItem());
        UnitRemove(EventUnitInventoryItem());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "M200SatchelCharge", 0, 0, EventUnitInventoryItemTargetPoint());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        gv_satchel[2] = UnitLastCreated();
        libNtve_gf_MakeUnitUncommandable(gv_satchel[2], true);
        UnitSetScale(UnitLastCreated(), 150.0, 150.0, 150.0);
        UnitGroupAdd(gv_undeadTargetGroup, gv_satchel[2]);
        UnitGroupAdd(gv_m200Satchel, gv_satchel[2]);
        gv_satchelTimeMAX[2] = gv_satchelTimeRemaining[2];
        TextTagCreate(TextWithColor(IntToText(gv_satchelTimeRemaining[2]), gv_redTextTag), 32, UnitGetPosition(gv_satchel[2]), 5.0, true, false, PlayerGroupAll());
        gv_satchelTextTag = TextTagLastCreated();
        TriggerEnable(gt_SatchelTimerWarning2, true);
        TriggerEnable(gt_RedoTunnel, true);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/B3A465DC"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tunnel2_Init () {
    gt_Tunnel2 = TriggerCreate("gt_Tunnel2_Func");
    TriggerEnable(gt_Tunnel2, false);
    TriggerAddEventUnitInventoryChange(gt_Tunnel2, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tunnel 3
//--------------------------------------------------------------------------------------------------
bool gt_Tunnel3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_magnitude;
    fixed lv_dist;
    point lv_epicenter;
    unit lv_unit;
    int lv_loopint;
    bool lv_inaregion;
    bool lv_allsensorsset;
    int lv_planter;
    int lv_arrayint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_epicenter = UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem()));
    lv_allsensorsset = true;
    lv_planter = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "M200SatchelChargePacked"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(UnitInventoryUnit(EventUnitInventoryItem()), RegionFromId(243)) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_currentSatchel[3] = false;
        TriggerEnable(gt_SatchelTimeout, false);
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_KillModel(gv_sensorbeacon);
        gf_MissionText(StringExternal("Param/Value/ECB4B90A"));
        gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
        UnitGroupRemove(gv_simpleMissionItems, EventUnitInventoryItem());
        UnitRemove(EventUnitInventoryItem());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "M200SatchelCharge", 0, 0, EventUnitInventoryItemTargetPoint());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        gv_satchel[3] = UnitLastCreated();
        libNtve_gf_MakeUnitUncommandable(gv_satchel[3], true);
        UnitSetScale(UnitLastCreated(), 150.0, 150.0, 150.0);
        UnitGroupAdd(gv_undeadTargetGroup, gv_satchel[3]);
        UnitGroupAdd(gv_m200Satchel, gv_satchel[3]);
        gv_satchelTimeMAX[3] = gv_satchelTimeRemaining[3];
        TextTagCreate(TextWithColor(IntToText(gv_satchelTimeRemaining[3]), gv_redTextTag), 32, UnitGetPosition(gv_satchel[3]), 5.0, true, false, PlayerGroupAll());
        gv_satchelTextTag = TextTagLastCreated();
        TriggerEnable(gt_SatchelTimerWarning3, true);
        TriggerEnable(gt_RedoTunnel, true);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/297B0BB7"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tunnel3_Init () {
    gt_Tunnel3 = TriggerCreate("gt_Tunnel3_Func");
    TriggerEnable(gt_Tunnel3, false);
    TriggerAddEventUnitInventoryChange(gt_Tunnel3, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel Timer Warning 1
//--------------------------------------------------------------------------------------------------
bool gt_SatchelTimerWarning1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_droppod;
    int lv_int;
    int lv_loopint;
    fixed lv_fraction;
    int lv_ping;
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
    if ((gv_satchelDestroyed == false)) {
        gv_satchelTimeRemaining[1] -= 1;
        lv_fraction = (IntToFixed(gv_satchelTimeRemaining[1]) / IntToFixed(gv_satchelTimeRemaining[1]));
        TextTagSetText(gv_satchelTextTag, IntToText(gv_satchelTimeRemaining[1]));
        TextTagSetColor(gv_satchelTextTag, c_textTagColorText, Color((100.0 - (100.0 * lv_fraction)), (100.0 * lv_fraction), 0.0));
        if ((gv_satchelTimeRemaining[1] == 80)) {
            if ((gv_satchelRetry[1] == false)) {
                gv_satchelRetry[1] = true;
                gv_charonBurrowsUp[1] = true;
                TriggerEnable(gt_CharonSatchelSpawns, true);
                TriggerExecute(gt_CharonSatchelSpawns, true, false);
                Wait(RandomInt(20, 40), c_timeGame);
                gf_SpawnUndeadMixed(1, "Minerva", "ZombieYeti", "ZombieYeti", 1, 2, 2);
                gf_SpawnUndeadMixed(1, "Horror", "Cursed", "Cursed", 2, 3, 3);
                gf_SpawnUndeadMixed(1, "Gourmand", "Gourmand", "Gourmand", 1, 1, 1);
                gf_SpawnUndeadMixed(1, "Gourmand", "Gourmand", "Gourmand", 1, 1, 1);
            }

        }

        if ((gv_satchelTimeRemaining[1] == 30)) {
            PingDestroy(gv_missionping);
            ActorSend(libNtve_gf_MainActorofUnit(gv_satchel[1]), "AnimBracketStart Work Work,Start Work Work,End");
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_satchel[1]), Color((100.0 - (100.0 * lv_fraction)), (100.0 * lv_fraction), 0.0), 30.0, 270.0);
            gf_PlayerTransmission(StringExternal("Param/Value/60FFA66C"), 1, UnitGetOwner(lv_hero));
            SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        }

        if ((gv_satchelTimeRemaining[1] <= 1)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerEnable(gt_RedoTunnel, false);
            SoundPlay(SoundLink("TUISecret", -1), PlayerGroupAll(), 100.0, 0.0);
            TextTagShow(gv_satchelTextTag, PlayerGroupAll(), false);
            ActorSend(libNtve_gf_MainActorofUnit(gv_satchel[1]), "AnimBracketStop Work");
            Wait(0.5, c_timeGame);
            UnitCreateEffectPoint(gv_satchel[1], "InfestedSiloExplosionDamage", UnitGetPosition(gv_satchel[1]));
            PlayerCreateEffectPoint(0, "SatchelExplosionDamageCE", UnitGetPosition(gv_satchel[1]));
            PlayerCreateEffectUnit(0, "OdinNukeDamage", gv_satchel[1]);
            SoundPlayAtPoint(SoundLink("Odin_NukeExplode", -1), PlayerGroupAll(), UnitGetPosition(gv_satchel[1]), 0.0, 100.0, 0.0);
            UnitRemove(gv_satchel[1]);
            gv_tunnelSatchelCount = 2;
            ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/D463426E") + IntToText(gv_tunnelSatchelCount) + StringExternal("Param/Value/E81D8B34")));
            gf_SucceedMission(30, StringExternal("Param/Value/E0B4E673"), -1, false);
            gv_charonBurrowsUp[1] = false;
            TriggerExecute(gt_CharonSatchelSpawns, true, false);
            Wait(20.0, c_timeGame);
            TriggerEnable(gt_Satchel2PickUp, true);
            TriggerEnable(gt_Tunnel2, true);
            gf_MissionText(StringExternal("Param/Value/66155AB9"));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, RegionGetCenter(RegionFromId(140)));
            lv_droppod = UnitLastCreated();
            UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
            Wait(5.0, c_timeGame);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(140)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9DD111CC"));
            gv_missionping = PingLastCreated();
            libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(RegionFromId(140)));
            gv_sensorbeacon = libNtve_gf_ActorLastCreated();
            UnitRemove(lv_droppod);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "M200SatchelChargePacked", 0, 0, RegionGetCenter(RegionFromId(140)));
            gv_satchelItem = UnitLastCreated();
            libNtve_gf_MakeUnitInvulnerable(gv_satchelItem, true);
            gf_MissionItemPingAddItem(gv_satchelItem);
            UnitGroupAdd(gv_simpleMissionItems, gv_satchelItem);
            gv_currentSatchel[2] = true;
            TimerStart(gv_missiontimer, 300.0, false, c_timeGame);
            TriggerEnable(gt_SatchelTimeout, true);
            Wait(15.0, c_timeGame);
            gf_SpawnUndeadMixed(1, "Ares", "Hunter", "Hunter", 1, 3, 3);
        }

    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
        TextTagShow(gv_satchelTextTag, PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SatchelTimerWarning1_Init () {
    gt_SatchelTimerWarning1 = TriggerCreate("gt_SatchelTimerWarning1_Func");
    TriggerEnable(gt_SatchelTimerWarning1, false);
    TriggerAddEventTimePeriodic(gt_SatchelTimerWarning1, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel Timer Warning 2
//--------------------------------------------------------------------------------------------------
bool gt_SatchelTimerWarning2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_droppod;
    int lv_int;
    int lv_loopint;
    fixed lv_fraction;
    int lv_ping;
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
    if ((gv_satchelDestroyed == false)) {
        gv_satchelTimeRemaining[2] -= 1;
        lv_fraction = (IntToFixed(gv_satchelTimeRemaining[2]) / IntToFixed(gv_satchelTimeRemaining[2]));
        TextTagSetText(gv_satchelTextTag, IntToText(gv_satchelTimeRemaining[2]));
        TextTagSetColor(gv_satchelTextTag, c_textTagColorText, Color((100.0 - (100.0 * lv_fraction)), (100.0 * lv_fraction), 0.0));
        if ((gv_satchelTimeRemaining[2] == 80)) {
            if ((gv_satchelRetry[2] == false)) {
                gv_satchelRetry[2] = true;
                gv_charonBurrowsUp[1] = false;
                gv_charonBurrowsUp[2] = true;
                TriggerEnable(gt_CharonSatchelSpawns, true);
                TriggerExecute(gt_CharonSatchelSpawns, true, false);
                Wait(RandomInt(20, 40), c_timeGame);
                gf_SpawnUndeadMixed(1, "Arachnathid", "Lacerti", "Lacerti", 2, 1, 1);
                gf_SpawnUndeadMixed(1, "Immussilus", "Gargoyle", "Shredder", 2, 6, 6);
                gf_SpawnUndeadMixed(1, "Gargantuan", "Krill", "StalkerZombie", 1, 6, 2);
                gf_SpawnUndeadMixed(1, "Gourmand", "Gourmand", "Gourmand", 1, 1, 1);
            }

        }

        if ((gv_satchelTimeRemaining[2] == 30)) {
            PingDestroy(gv_missionping);
            ActorSend(libNtve_gf_MainActorofUnit(gv_satchel[2]), "AnimBracketStart Work Work,Start Work Work,End");
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_satchel[2]), Color((100.0 - (100.0 * lv_fraction)), (100.0 * lv_fraction), 0.0), 30.0, 270.0);
            gf_PlayerTransmission(StringExternal("Param/Value/1F1BB6C8"), 1, UnitGetOwner(lv_hero));
            SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        }

        if ((gv_satchelTimeRemaining[2] <= 1)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerEnable(gt_RedoTunnel, false);
            SoundPlay(SoundLink("TUISecret", -1), PlayerGroupAll(), 100.0, 0.0);
            TextTagShow(gv_satchelTextTag, PlayerGroupAll(), false);
            ActorSend(libNtve_gf_MainActorofUnit(gv_satchel[2]), "AnimBracketStop Work");
            Wait(0.5, c_timeGame);
            UnitCreateEffectPoint(gv_satchel[2], "InfestedSiloExplosionDamage", UnitGetPosition(gv_satchel[2]));
            PlayerCreateEffectPoint(0, "SatchelExplosionDamageCE", UnitGetPosition(gv_satchel[2]));
            PlayerCreateEffectUnit(0, "OdinNukeDamage", gv_satchel[2]);
            SoundPlayAtPoint(SoundLink("Odin_NukeExplode", -1), PlayerGroupAll(), UnitGetPosition(gv_satchel[2]), 0.0, 100.0, 0.0);
            UnitRemove(gv_satchel[2]);
            gv_tunnelSatchelCount = 1;
            ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/99BD676F") + IntToText(gv_tunnelSatchelCount) + StringExternal("Param/Value/47FC06DD")));
            gf_SucceedMission(30, StringExternal("Param/Value/08EEA320"), -1, false);
            gv_charonBurrowsUp[2] = false;
            TriggerExecute(gt_CharonSatchelSpawns, true, false);
            Wait(20.0, c_timeGame);
            TriggerEnable(gt_Satchel3PickUp, true);
            TriggerEnable(gt_Tunnel3, true);
            gf_MissionText(StringExternal("Param/Value/AEC4CE95"));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, RegionGetCenter(RegionFromId(164)));
            lv_droppod = UnitLastCreated();
            UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
            Wait(5.0, c_timeGame);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(164)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/F3B8D1AF"));
            gv_missionping = PingLastCreated();
            libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(RegionFromId(164)));
            gv_sensorbeacon = libNtve_gf_ActorLastCreated();
            UnitRemove(lv_droppod);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "M200SatchelChargePacked", 0, 0, RegionGetCenter(RegionFromId(164)));
            gv_satchelItem = UnitLastCreated();
            libNtve_gf_MakeUnitInvulnerable(gv_satchelItem, true);
            gf_MissionItemPingAddItem(gv_satchelItem);
            UnitGroupAdd(gv_simpleMissionItems, gv_satchelItem);
            gv_currentSatchel[3] = true;
            TimerStart(gv_missiontimer, 300.0, false, c_timeGame);
            TriggerEnable(gt_SatchelTimeout, true);
            Wait(15.0, c_timeGame);
            gf_SpawnUndeadMixed(1, "Livid", "Hopper", "Hopper", 1, 8, 8);
        }

    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
        TextTagShow(gv_satchelTextTag, PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SatchelTimerWarning2_Init () {
    gt_SatchelTimerWarning2 = TriggerCreate("gt_SatchelTimerWarning2_Func");
    TriggerEnable(gt_SatchelTimerWarning2, false);
    TriggerAddEventTimePeriodic(gt_SatchelTimerWarning2, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel Timer Warning 3
//--------------------------------------------------------------------------------------------------
bool gt_SatchelTimerWarning3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_satchelSuccess;
    unit lv_droppod;
    int lv_int;
    int lv_loopint;
    fixed lv_fraction;
    int lv_ping;
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
    if ((gv_satchelDestroyed == false)) {
        gv_satchelTimeRemaining[3] -= 1;
        lv_fraction = (IntToFixed(gv_satchelTimeRemaining[3]) / IntToFixed(gv_satchelTimeRemaining[3]));
        TextTagSetText(gv_satchelTextTag, IntToText(gv_satchelTimeRemaining[3]));
        TextTagSetColor(gv_satchelTextTag, c_textTagColorText, Color((100.0 - (100.0 * lv_fraction)), (100.0 * lv_fraction), 0.0));
        if ((gv_satchelTimeRemaining[3] == 60)) {
            if ((gv_satchelRetry[3] == false)) {
                gv_satchelRetry[3] = true;
                gv_charonBurrowsUp[2] = false;
                TriggerEnable(gt_CharonSatchelSpawns, true);
                TriggerExecute(gt_CharonSatchelSpawns, true, false);
                Wait(RandomInt(20, 40), c_timeGame);
                gf_SpawnUndeadMixed(1, "ThresherMaw", "ThresherMaw", "AcidVore", 1, 1, 3);
                gf_SpawnUndeadMixed(1, "Metasis", "Morbus", "Morbus", 1, 1, 1);
                gf_SpawnUndead(1, "Grotesque", 1);
                gf_SpawnUndeadMixed(1, "Gargantuan", "Krill", "Gourmand", 2, 6, 2);
            }

        }

        if ((gv_satchelTimeRemaining[3] == 30)) {
            PingDestroy(gv_missionping);
            ActorSend(libNtve_gf_MainActorofUnit(gv_satchel[3]), "AnimBracketStart Work Work,Start Work Work,End");
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_satchel[3]), Color((100.0 - (100.0 * lv_fraction)), (100.0 * lv_fraction), 0.0), 30.0, 270.0);
            gf_PlayerTransmission(StringExternal("Param/Value/03396FBF"), 1, UnitGetOwner(lv_hero));
            SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        }

        if ((gv_satchelTimeRemaining[3] <= 1)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerEnable(gt_RedoTunnel, false);
            TextTagShow(gv_satchelTextTag, PlayerGroupAll(), false);
            ActorSend(libNtve_gf_MainActorofUnit(gv_satchel[3]), "AnimBracketStop Work");
            Wait(0.5, c_timeGame);
            UnitCreateEffectPoint(gv_satchel[3], "InfestedSiloExplosionDamage", UnitGetPosition(gv_satchel[3]));
            PlayerCreateEffectPoint(0, "SatchelExplosionDamageCE", UnitGetPosition(gv_satchel[3]));
            PlayerCreateEffectUnit(0, "OdinNukeDamage", gv_satchel[3]);
            SoundPlayAtPoint(SoundLink("Odin_NukeExplode", -1), PlayerGroupAll(), UnitGetPosition(gv_satchel[3]), 0.0, 100.0, 0.0);
            UnitRemove(gv_satchel[3]);
            gf_SucceedMission(30, StringExternal("Param/Value/C8BE5089"), -1, false);
            lv_satchelSuccess = true;
        }

    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
        TextTagShow(gv_satchelTextTag, PlayerGroupAll(), false);
    }
    if ((lv_satchelSuccess == true)) {
        gv_tunnelSatchelCount = 0;
        SoundPlay(SoundLink("TUISecret", -1), PlayerGroupAll(), 100.0, 0.0);
        ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/67E08F49") + IntToText(gv_tunnelSatchelCount) + StringExternal("Param/Value/0ACBC877")));
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        Wait(15.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/CA26D9DD"));
        TriggerEnable(gt_CharonSpawnsFinal, true);
        Wait(1.5, c_timeGame);
        TriggerExecute(gt_CharonSpawnsFinal, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SatchelTimerWarning3_Init () {
    gt_SatchelTimerWarning3 = TriggerCreate("gt_SatchelTimerWarning3_Func");
    TriggerEnable(gt_SatchelTimerWarning3, false);
    TriggerAddEventTimePeriodic(gt_SatchelTimerWarning3, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel Timeout
//--------------------------------------------------------------------------------------------------
bool gt_SatchelTimeout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_currentSatchel[1] == true) && (TriggerIsEnabled(gt_SatchelTimerWarning1) == false)) {
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Krill", 4);
        gf_SpawnUndead((gv_spawnCount / 2), "Shredder", 5);
        Wait(RandomFixed(0.5, 1.5), c_timeGame);
        gf_SpawnUndead(3, "Hunter", 8);
        gf_SpawnUndead(2, "ZombieYeti", 8);
        gf_SpawnUndead(1, "Gourmand", 20);
        gf_SpawnUndead(1, "Gargantuan", 18);
        Wait(RandomFixed(0.5, 1.5), c_timeGame);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 8);
        gf_SpawnUndead(RandomInt(1, 6), "Leaper", 3);
        gf_SpawnUndead(RandomInt(1, 2), "ZombieWraith", 4);
        gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 3);
        Wait(RandomFixed(0.5, 1.5), c_timeGame);
        gf_SpawnUndead(1, "Morbus", 7);
        gf_SpawnUndead(1, "ZombieCarrier", 5);
        gf_SpawnUndead(1, "Horror", 8);
        gf_SpawnUndead(1, "Dilophosaur", 12);
        Wait(RandomFixed(0.5, 1.5), c_timeGame);
        gf_SpawnUndead(RandomInt(1, 3), "Spitter", 6);
        gf_SpawnUndead(1, "ArchVile", 9);
        if ((gv_averageXP >= 25000)) {
            gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
            gf_SpawnUndead(1, "Horror", 8);
        }

        if ((gv_averageXP >= 60000)) {
            gf_SpawnUndead(1, "Immussilus", 25);
            gf_SpawnUndead(1, "Gourmand", 20);
            gf_SpawnUndead(1, "ZombieWraith", 3);
            gf_SpawnUndead(1, "Dilophosaur", 7);
            gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
            Wait(RandomFixed(0.5, 1.5), c_timeGame);
        }

        if ((gv_averageXP >= 95000)) {
            gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
            gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 3);
            gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
            gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
            gf_SpawnUndead(1, "ArchVile", 20);
            Wait(RandomFixed(0.5, 1.5), c_timeGame);
        }

        if ((gv_gamemode >= 2)) {
            gf_SpawnUndead((gv_spawnCount / 2), "Cursed", 3);
            gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 5);
            gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
            gf_SpawnUndead((gv_spawnCount / 2), "Drake", 3);
            gf_SpawnUndead(1, "ZombieCarrier", 8);
            gf_SpawnUndead(RandomInt(1, 3), "Licker", 3);
            Wait(RandomFixed(0.5, 1.5), c_timeGame);
        }

        if ((gv_infestationLevel < 40)) {
            gf_SpawnUndead((gv_spawnCount / 2), "Krill", 4);
            gf_SpawnUndead((gv_spawnCount / 3), "Shredder", 5);
            gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 5);
            gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
            gf_SpawnUndead((gv_spawnCount / 3), "Unburied", 1);
            Wait(RandomFixed(0.5, 1.5), c_timeGame);
        }

        if ((gv_gamemode >= 4)) {
            gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 3);
            gf_SpawnUndead(3, "Hunter", 4);
            gf_SpawnUndead(2, "ZombieYeti", 4);
            gf_SpawnUndead(gv_spawnCount, "Turned", 1);
            gf_SpawnUndead((gv_spawnCount / 3), "Unburied", 1);
            gf_SpawnUndead(1, "Morbus", 5);
            gf_SpawnUndead((gv_spawnCount * 3), "Hopper", 5);
            Wait(RandomFixed(0.5, 1.5), c_timeGame);
        }

        if ((gv_gamemode >= 5)) {
            gf_SpawnUndead(1, "Gourmand", 20);
            gf_SpawnUndead((gv_spawnCount / 2), "Krill", 4);
            gf_SpawnUndead((gv_spawnCount / 3), "Unburied", 1);
            gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 3);
            gf_SpawnUndead(1, "Dilophosaur", 4);
        }

        return true;
    }
    else if ((gv_currentSatchel[2] == true) && (TriggerIsEnabled(gt_SatchelTimerWarning2) == false)) {
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(3, "ZombieCarrier", 1);
        gf_SpawnUndead(3, "ZombieCarrier", 1);
        gf_SpawnUndead(3, "ZombieCarrier", 1);
        gf_SpawnUndead(3, "ZombieCarrier", 1);
        gf_SpawnUndead(3, "ZombieCarrier", 1);
        gf_SpawnUndead(2, "AcidVore", 1);
        gf_SpawnUndead(2, "AcidVore", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        return true;
    }
    else if ((gv_currentSatchel[3] == true) && (TriggerIsEnabled(gt_SatchelTimerWarning3) == false)) {
        gf_SpawnUndeadImmediate(gv_spawnCount, "InfestedCivilian", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "InfestedCivilian", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Risen", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(1, "Gourmand", 3);
        gf_SpawnUndead(1, "Raisuli", 3);
        gf_SpawnUndead(2, "StalkerZombie", 2);
        gf_SpawnUndead(3, "Charger", 2);
        gf_SpawnUndead(gv_spawnCount, "Risen", 2);
        gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 2);
        Wait(8.0, c_timeGame);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
        gf_SpawnUndead(2, "Cursed", 4);
        gf_SpawnUndead(1, "Lacerti", 4);
        gf_SpawnUndead(1, "Raisuli", 2);
        gf_SpawnUndead(3, "Hunter", 3);
        gf_SpawnUndead(2, "ZombieYeti", 5);
        gf_SpawnUndead(RandomInt(2, 5), "Bruchus", 2);
        gf_SpawnUndead(1, "Minerva", 12);
        gf_SpawnUndead(1, "Ares", 12);
        gf_SpawnUndead(1, "Dilophosaur", 7);
        gf_SpawnUndead(1, "Dilophosaur", 10);
        gf_SpawnUndead(1, "Livid", 16);
        if ((gv_gamemode >= 2)) {
            gf_SpawnUndead(1, "Raisuli", 5);
            gf_SpawnUndead(1, "Lacerti", 5);
            gf_SpawnUndead(3, "Hunter", 2);
            gf_SpawnUndead(2, "Cursed", 4);
        }

        if ((gv_gamemode >= 3)) {
            gf_SpawnUndead(1, "Gourmand", 4);
            gf_SpawnUndead(1, "Raisuli", 3);
            gf_SpawnUndead(2, "ZombieYeti", 2);
            gf_SpawnUndead(1, "Gargantuan", 5);
            gf_SpawnUndead(1, "Immussilus", 8);
            gf_SpawnUndead(2, "Cursed", 5);
        }

        if ((gv_gamemode >= 4)) {
            gf_SpawnUndead(1, "Darreus", 12);
            gf_SpawnUndead(1, "Gargantuan", 7);
            gf_SpawnUndead(1, "Raisuli", 3);
        }

        if ((gv_gamemode >= 5)) {
            gf_SpawnUndead(1, "Raisuli", 4);
            gf_SpawnUndead(1, "Darreus", 16);
            gf_SpawnUndead(1, "Metasis", 8);
            gf_SpawnUndead(1, "ThresherMaw", 30);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SatchelTimeout_Init () {
    gt_SatchelTimeout = TriggerCreate("gt_SatchelTimeout_Func");
    TriggerEnable(gt_SatchelTimeout, false);
    TriggerAddEventTimer(gt_SatchelTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Redo Tunnel 
//--------------------------------------------------------------------------------------------------
bool gt_RedoTunnel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    unit lv_droppod;

    // Automatic Variable Declarations
    unit auto7B712AA3_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_m200Satchel, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_satchelDestroyedCount += 1;
    if ((gv_satchelDestroyedCount > 1)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        PingDestroyAll();
        TextTagShow(gv_satchelTextTag, PlayerGroupAll(), false);
        TriggerEnable(gt_SatchelTimerWarning1, false);
        TriggerEnable(gt_SatchelTimerWarning2, false);
        TriggerEnable(gt_SatchelTimerWarning3, false);
        TriggerExecute(gt_GameOver, false, false);
    }
    else {
        auto7B712AA3_val = EventUnit();
        if (auto7B712AA3_val == gv_satchel[1]) {
            gv_satchelRetry[1] = true;
            TriggerEnable(gt_SatchelTimerWarning1, false);
            PingDestroyAll();
            TextTagShow(gv_satchelTextTag, PlayerGroupAll(), false);
            gf_FailMission(30, StringExternal("Param/Value/43EC27FD"), 2);
            gf_MissionText(StringExternal("Param/Value/429F5F0C"));
            Wait(6.0, c_timeGame);
            gf_MissionText(StringExternal("Param/Value/7147F934"));
            TriggerEnable(gt_Satchel1PickUp, true);
            TriggerEnable(gt_Tunnel1, true);
            Wait(30.0, c_timeGame);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(140)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5B3FE694"));
            gv_missionping = PingLastCreated();
            libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(RegionFromId(140)));
            gv_sensorbeacon = libNtve_gf_ActorLastCreated();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, RegionGetCenter(RegionFromId(140)));
            lv_droppod = UnitLastCreated();
            UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
            Wait(5.0, c_timeGame);
            UnitRemove(lv_droppod);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "M200SatchelChargePacked", 0, 0, RegionGetCenter(RegionFromId(140)));
            gv_satchelItem = UnitLastCreated();
            libNtve_gf_MakeUnitInvulnerable(gv_satchelItem, true);
            gf_MissionItemPingAddItem(gv_satchelItem);
            UnitGroupAdd(gv_simpleMissionItems, gv_satchelItem);
            gv_satchelTimeMAX[1] = 180;
            gv_satchelTimeRemaining[1] = 180;
            Wait(60.0, c_timeGame);
            gf_SpawnUndeadMixed(1, "Minerva", "ZombieYeti", "ZombieYeti", 1, 2, 2);
            gf_SpawnUndeadMixed(1, "Horror", "Cursed", "Cursed", 2, 3, 3);
            gf_SpawnUndeadMixed(1, "Gourmand", "Gourmand", "Gourmand", 1, 1, 1);
            gf_SpawnUndeadMixed(1, "Gourmand", "Gourmand", "Gourmand", 1, 1, 1);
        }
        else if (auto7B712AA3_val == gv_satchel[2]) {
            TriggerEnable(gt_SatchelTimerWarning2, false);
            PingDestroyAll();
            TextTagShow(gv_satchelTextTag, PlayerGroupAll(), false);
            gf_FailMission(30, StringExternal("Param/Value/CF4089E3"), 2);
            gf_MissionText(StringExternal("Param/Value/960B84B2"));
            Wait(6.0, c_timeGame);
            gf_MissionText(StringExternal("Param/Value/87D9E6AA"));
            TriggerEnable(gt_Satchel2PickUp, true);
            TriggerEnable(gt_Tunnel2, true);
            Wait(30.0, c_timeGame);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(164)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B0DBCE0E"));
            gv_missionping = PingLastCreated();
            libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(RegionFromId(164)));
            gv_sensorbeacon = libNtve_gf_ActorLastCreated();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, RegionGetCenter(RegionFromId(164)));
            lv_droppod = UnitLastCreated();
            UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
            Wait(5.0, c_timeGame);
            UnitRemove(lv_droppod);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "M200SatchelChargePacked", 0, 0, RegionGetCenter(RegionFromId(164)));
            gv_satchelItem = UnitLastCreated();
            libNtve_gf_MakeUnitInvulnerable(gv_satchelItem, true);
            gf_MissionItemPingAddItem(gv_satchelItem);
            UnitGroupAdd(gv_simpleMissionItems, gv_satchelItem);
            gv_satchelTimeMAX[2] = 180;
            gv_satchelTimeRemaining[2] = 180;
            Wait(60.0, c_timeGame);
            gf_SpawnUndeadMixed(2, "Arachnathid", "Lacerti", "Lacerti", 1, 1, 1);
            gf_SpawnUndeadMixed(1, "Immussilus", "Gargoyle", "Shredder", 2, 6, 6);
            gf_SpawnUndeadMixed(1, "Gargantuan", "Krill", "StalkerZombie", 1, 6, 2);
            gf_SpawnUndeadMixed(1, "Gourmand", "Gourmand", "Gourmand", 1, 1, 1);
        }
        else if (auto7B712AA3_val == gv_satchel[3]) {
            TriggerEnable(gt_SatchelTimerWarning3, false);
            PingDestroyAll();
            TextTagShow(gv_satchelTextTag, PlayerGroupAll(), false);
            gf_FailMission(30, StringExternal("Param/Value/F391477A"), 2);
            gf_MissionText(StringExternal("Param/Value/FA14B01D"));
            Wait(6.0, c_timeGame);
            gf_MissionText(StringExternal("Param/Value/BF70E538"));
            TriggerEnable(gt_Satchel3PickUp, true);
            TriggerEnable(gt_Tunnel3, true);
            Wait(30.0, c_timeGame);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(164)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5A760B5B"));
            gv_missionping = PingLastCreated();
            libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(RegionFromId(164)));
            gv_sensorbeacon = libNtve_gf_ActorLastCreated();
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, RegionGetCenter(RegionFromId(164)));
            lv_droppod = UnitLastCreated();
            UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
            Wait(5.0, c_timeGame);
            UnitRemove(lv_droppod);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "M200SatchelChargePacked", 0, 0, RegionGetCenter(RegionFromId(164)));
            gv_satchelItem = UnitLastCreated();
            libNtve_gf_MakeUnitInvulnerable(gv_satchelItem, true);
            gf_MissionItemPingAddItem(gv_satchelItem);
            UnitGroupAdd(gv_simpleMissionItems, gv_satchelItem);
            gv_satchelTimeMAX[3] = 180;
            gv_satchelTimeRemaining[3] = 180;
            Wait(60.0, c_timeGame);
            gf_SpawnUndeadMixed(1, "ThresherMaw", "ThresherMaw", "AcidVore", 1, 1, 3);
            gf_SpawnUndeadMixed(1, "Metasis", "Morbus", "Morbus", 1, 1, 1);
            gf_SpawnUndead(1, "Grotesque", 1);
            gf_SpawnUndeadMixed(1, "Gargantuan", "Krill", "Gourmand", 2, 6, 2);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RedoTunnel_Init () {
    gt_RedoTunnel = TriggerCreate("gt_RedoTunnel_Func");
    TriggerEnable(gt_RedoTunnel, false);
    TriggerAddEventUnitDied(gt_RedoTunnel, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charon Satchel Spawns 
//--------------------------------------------------------------------------------------------------
bool gt_CharonSatchelSpawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_burrowgroup;
    point lv_point;
    region lv_movementregion;
    unit lv_hero;

    // Automatic Variable Declarations
    unitgroup auto2D585A38_g;
    int auto2D585A38_u;
    unit auto2D585A38_var;
    unitgroup autoD6D7AA91_g;
    int autoD6D7AA91_u;
    unit autoD6D7AA91_var;

    // Variable Initialization
    lv_burrowgroup = UnitGroupEmpty();
    lv_movementregion = RegionEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomInt(20, 60), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    lv_hero = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
    auto2D585A38_g = gv_undeadTargetGroup;
    auto2D585A38_u = UnitGroupCount(auto2D585A38_g, c_unitCountAll);
    for (;; auto2D585A38_u -= 1) {
        auto2D585A38_var = UnitGroupUnitFromEnd(auto2D585A38_g, auto2D585A38_u);
        if (auto2D585A38_var == null) { break; }
        RegionAddCircle(lv_movementregion, true, UnitGetPosition(auto2D585A38_var), 8.0);
        RegionAddCircle(lv_movementregion, false, UnitGetPosition(auto2D585A38_var), 5.0);
    }
    lv_point = RegionRandomPoint(lv_movementregion);
    if ((gv_charonBurrowsUp[1] == true)) {
        gf_MissionText(StringExternal("Param/Value/38EE23B3"));
    }

    libNtve_gf_CreateActorAtPoint("LargeBurrowUpEffects", lv_point);
    SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), lv_point, 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateActorAtPoint("LargeBurrowUpEffects", lv_point);
    SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), lv_point, 0.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateActorAtPoint("PrimalUltraliskBurrowedSplat", lv_point);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Charon", 0, 14, lv_point);
    gv_charon = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(gv_charon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitGroupAdd(gv_bossGroup, gv_charon);
    UnitBehaviorAdd(gv_charon, "DifficultyModifierBoss", gv_charon, gv_gamemode);
    UnitGroupAdd(gv_undeadGroup, gv_charon);
    UnitIssueOrder(gv_charon, OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    gv_infestationLevel += 2;
    TriggerEnable(gt_CharonTimer, true);
    TimerStart(gv_bossTimer, 15.0, false, c_timeGame);
    TimerWindowShow(gv_bossTimerWindow, PlayerGroupAll(), false);
    if ((RandomInt(1, 1) == 1)) {
        UnitCreate(1, "Unburied", 0, 14, PointWithOffsetPolar(UnitGetPosition(gv_charon), 1.2, 45.0), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_burrowgroup, UnitLastCreated());
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", UnitGroupCenterOfGroup(UnitLastCreatedGroup()));
        SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGroupCenterOfGroup(UnitLastCreatedGroup()), 0.0, 100.0, 0.0);
        UnitCreate(1, "Bruchus", 0, 14, PointWithOffsetPolar(UnitGetPosition(gv_charon), 1.2, 90.0), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_burrowgroup, UnitLastCreated());
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", UnitGroupCenterOfGroup(UnitLastCreatedGroup()));
        SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGroupCenterOfGroup(UnitLastCreatedGroup()), 0.0, 100.0, 0.0);
        UnitCreate(1, "Unburied", 0, 14, PointWithOffsetPolar(UnitGetPosition(gv_charon), 1.2, 135.0), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_burrowgroup, UnitLastCreated());
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", UnitGroupCenterOfGroup(UnitLastCreatedGroup()));
        SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGroupCenterOfGroup(UnitLastCreatedGroup()), 0.0, 100.0, 0.0);
        UnitCreate(1, "Bruchus", 0, 14, PointWithOffsetPolar(UnitGetPosition(gv_charon), 1.2, 180.0), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_burrowgroup, UnitLastCreated());
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", UnitGroupCenterOfGroup(UnitLastCreatedGroup()));
        SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGroupCenterOfGroup(UnitLastCreatedGroup()), 0.0, 100.0, 0.0);
        UnitCreate(1, "Unburied", 0, 14, PointWithOffsetPolar(UnitGetPosition(gv_charon), 1.2, 225.0), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_burrowgroup, UnitLastCreated());
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", UnitGroupCenterOfGroup(UnitLastCreatedGroup()));
        SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGroupCenterOfGroup(UnitLastCreatedGroup()), 0.0, 100.0, 0.0);
        UnitCreate(1, "Bruchus", 0, 14, PointWithOffsetPolar(UnitGetPosition(gv_charon), 1.2, 270.0), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_burrowgroup, UnitLastCreated());
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", UnitGroupCenterOfGroup(UnitLastCreatedGroup()));
        SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGroupCenterOfGroup(UnitLastCreatedGroup()), 0.0, 100.0, 0.0);
        UnitCreate(1, "Unburied", 0, 14, PointWithOffsetPolar(UnitGetPosition(gv_charon), 1.2, 315.0), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_burrowgroup, UnitLastCreated());
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", UnitGroupCenterOfGroup(UnitLastCreatedGroup()));
        SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGroupCenterOfGroup(UnitLastCreatedGroup()), 0.0, 100.0, 0.0);
        UnitCreate(1, "Bruchus", 0, 14, PointWithOffsetPolar(UnitGetPosition(gv_charon), 1.2, 360.0), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_burrowgroup, UnitLastCreated());
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", UnitGroupCenterOfGroup(UnitLastCreatedGroup()));
        SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGroupCenterOfGroup(UnitLastCreatedGroup()), 0.0, 100.0, 0.0);
        autoD6D7AA91_g = lv_burrowgroup;
        autoD6D7AA91_u = UnitGroupCount(autoD6D7AA91_g, c_unitCountAll);
        for (;; autoD6D7AA91_u -= 1) {
            autoD6D7AA91_var = UnitGroupUnitFromEnd(autoD6D7AA91_g, autoD6D7AA91_u);
            if (autoD6D7AA91_var == null) { break; }
            UnitIssueOrder(autoD6D7AA91_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)), c_orderQueueReplace);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharonSatchelSpawns_Init () {
    gt_CharonSatchelSpawns = TriggerCreate("gt_CharonSatchelSpawns_Func");
    TriggerEnable(gt_CharonSatchelSpawns, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charon Timer 
//--------------------------------------------------------------------------------------------------
bool gt_CharonTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_position = UnitGetPosition(gv_charon);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lv_position != null)) {
        libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", lv_position);
        SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), lv_position, 0.0, 100.0, 0.0);
    }

    Wait(0.5, c_timeGame);
    if ((lv_position != null)) {
        libNtve_gf_CreateActorAtPoint("PrimalUltraliskBurrowedSplat", lv_position);
        SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGroupCenterOfGroup(gv_bossGroup), 0.0, 100.0, 0.0);
    }

    UnitRemove(gv_charon);
    gv_infestationLevel -= 2;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharonTimer_Init () {
    gt_CharonTimer = TriggerCreate("gt_CharonTimer_Func");
    TriggerEnable(gt_CharonTimer, false);
    TriggerAddEventTimer(gt_CharonTimer, gv_bossTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charon Spawns Final 
//--------------------------------------------------------------------------------------------------
bool gt_CharonSpawnsFinal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CharonSatchelSpawns, false);
    TriggerEnable(gt_CharonMendLoop, true);
    TriggerEnable(gt_CharonBurrows, true);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova07_BossFight", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gf_SpawnUndead(12, "Parasite", 1);
    gf_SpawnUndead(6, "Krill", 1);
    gf_SpawnUndead(3, "ZombieWraith", 1);
    gf_SpawnUndead(3, "AcidVore", 1);
    gf_SpawnUndead(1, "Horror", 1);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(1, "Morbus", 1);
    gf_SpawnUndead(1, "Morbus", 1);
    gf_SpawnUndead(1, "Morbus", 1);
    Wait(5.0, c_timeGame);
    gf_SpawnUndead(1, "Licker", 1);
    gf_SpawnUndead(1, "Licker", 1);
    gf_SpawnUndead(3, "Leaper", 1);
    gf_SpawnUndead(3, "Leaper", 1);
    gf_SpawnUndead(3, "Leaper", 1);
    gf_SpawnUndead(3, "Bruchus", 1);
    gf_SpawnUndead(3, "Bruchus", 1);
    gf_SpawnUndead(3, "Bruchus", 1);
    Wait(5.0, c_timeGame);
    gf_SpawnUndead(3, "Gargoyle", 1);
    gf_SpawnUndead(3, "Gargoyle", 1);
    gf_SpawnUndead(3, "Gargoyle", 1);
    gf_SpawnUndead(3, "Gargoyle", 1);
    gf_SpawnUndead(6, "Shredder", 1);
    gf_SpawnUndead(2, "Dilophosaur", 1);
    gf_SpawnUndead(1, "Horror", 1);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(5.0, c_timeGame);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(3, "Glutton", 1);
    gf_SpawnUndead(3, "Glutton", 1);
    gf_SpawnUndead(3, "Glutton", 1);
    gf_SpawnUndead(3, "Glutton", 1);
    gf_SpawnUndead(15, "Hopper", 1);
    gf_SpawnUndead(6, "Krill", 1);
    Wait(5.0, c_timeGame);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "Cursed", 1);
    gf_SpawnUndead(2, "Cursed", 1);
    gf_SpawnUndead(2, "Cursed", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "ArchVile", 1);
    gv_charonFinalSpawn = true;
    gf_SpawnUndeadImmediate(RandomInt(2, 3), "Bruchus", 1);
    gf_SpawnUndeadImmediate(RandomInt(2, 3), "Bruchus", 1);
    gf_SpawnUndeadImmediate(RandomInt(2, 3), "Bruchus", 1);
    gf_SpawnUndeadImmediate(RandomInt(1, 2), "Dilophosaur", 1);
    TriggerEnable(gt_CharonDies, true);
    gf_SpawnUndead(1, "Charon", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharonSpawnsFinal_Init () {
    gt_CharonSpawnsFinal = TriggerCreate("gt_CharonSpawnsFinal_Func");
    TriggerEnable(gt_CharonSpawnsFinal, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charon Mend Loop
//--------------------------------------------------------------------------------------------------
bool gt_CharonMendLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_undeadUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_undeadUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_undeadUnit) == "Charon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(lv_undeadUnit, c_unitPropLife, c_unitPropCurrent) < 50000.0) && (gv_charonAbilityAllowed[1] == false)) {
        gv_charonAbilityAllowed[1] = true;
        UnitBehaviorAdd(lv_undeadUnit, "DehakaHealBig", lv_undeadUnit, 1);
        UnitBehaviorAdd(lv_undeadUnit, "DehakaHealBig", lv_undeadUnit, 1);
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(90.0, c_timeGame);
        if ((UnitGetPropertyFixed(lv_undeadUnit, c_unitPropLife, c_unitPropCurrent) > 25000.0)) {
            gv_charonAbilityAllowed[1] = false;
            TriggerEnable(TriggerGetCurrent(), true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharonMendLoop_Init () {
    gt_CharonMendLoop = TriggerCreate("gt_CharonMendLoop_Func");
    TriggerEnable(gt_CharonMendLoop, false);
    TriggerAddEventUnitDamaged(gt_CharonMendLoop, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charon Burrows
//--------------------------------------------------------------------------------------------------
bool gt_CharonBurrows_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_undeadUnit;
    point lv_point;
    region[4] lv_lZ_R;
    int lv_lZ;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_undeadUnit = EventUnit();
    lv_point = UnitGetPosition(lv_undeadUnit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_undeadUnit) == "Charon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_charonAbilityAllowed[0] == false) && (UnitGetPropertyFixed(lv_undeadUnit, c_unitPropLife, c_unitPropCurrent) < 40000.0)) {
        gv_charonAbilityAllowed[0] = true;
        if ((lv_point != null)) {
            libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", UnitGetPosition(lv_undeadUnit));
        }
        if ((lv_point != null)) {
            SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGetPosition(lv_undeadUnit), 0.0, 100.0, 0.0);
        }
        Wait(0.1, c_timeGame);
        if ((lv_point != null)) {
            libNtve_gf_CreateActorAtPoint("PrimalUltraliskBurrowedSplat", UnitGetPosition(lv_undeadUnit));
        }
        if ((lv_point != null)) {
            SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGetPosition(lv_undeadUnit), 0.0, 100.0, 0.0);
        }
        lv_lZ_R[0] = RegionFromId(13);
        lv_lZ_R[1] = RegionFromId(275);
        lv_lZ_R[2] = RegionFromId(16);
        lv_lZ_R[3] = RegionFromId(6);
        lv_lZ = RandomInt(0, 3);
        Wait(0.1, c_timeGame);
        UnitSetPosition(lv_undeadUnit, RegionRandomPoint(lv_lZ_R[lv_lZ]), false);
        gf_SpawnUndeadImmediate(RandomInt(2, 3), "Bruchus", 1);
        gf_SpawnUndeadImmediate(RandomInt(1, 2), "Dilophosaur", 1);
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(120.0, c_timeGame);
        if ((UnitGetPropertyFixed(lv_undeadUnit, c_unitPropLife, c_unitPropCurrent) > 40000.0)) {
            gv_charonAbilityAllowed[0] = false;
            TriggerEnable(TriggerGetCurrent(), true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharonBurrows_Init () {
    gt_CharonBurrows = TriggerCreate("gt_CharonBurrows_Func");
    TriggerEnable(gt_CharonBurrows, false);
    TriggerAddEventUnitDamaged(gt_CharonBurrows, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charon Dies 
//--------------------------------------------------------------------------------------------------
bool gt_CharonDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_undeadUnit;

    // Automatic Variable Declarations
    unitgroup auto37671BDA_g;
    int auto37671BDA_u;
    unit auto37671BDA_var;
    unitgroup auto30E98B79_g;
    int auto30E98B79_u;
    unit auto30E98B79_var;
    playergroup auto179535BA_g;
    int auto179535BA_var;
    playergroup auto5D9341ED_g;
    int auto5D9341ED_var;

    // Variable Initialization
    lv_undeadUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_undeadUnit) == "Charon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_CharonBurrows, false);
    TriggerEnable(gt_CharonMendLoop, false);
    Wait(15.0, c_timeGame);
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    gf_StopSpawnLoop(1, gv_loopType);
    gf_StopSpawnLoop(2, gv_loopType);
    gf_StopSpawnLoop(3, gv_loopType);
    gv_pauseSpawning = true;
    while (true) {
        auto37671BDA_g = gv_undeadGroup;
        auto37671BDA_u = UnitGroupCount(auto37671BDA_g, c_unitCountAll);
        for (;; auto37671BDA_u -= 1) {
            auto37671BDA_var = UnitGroupUnitFromEnd(auto37671BDA_g, auto37671BDA_u);
            if (auto37671BDA_var == null) { break; }
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(auto37671BDA_var), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 4.0, 270.0);
        }
        if ((UnitGroupCount(gv_undeadGroup, c_unitCountAlive) == 0)) {
            break;
        }

        Wait(12.0, c_timeGame);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_SucceedMission(50, StringExternal("Param/Value/4E1CFC33"), -1, false);
    gf_SucceedMission(100, StringExternal("Param/Value/BBF2112B"), -1, false);
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/2FACB19B"), 0, true);
    auto30E98B79_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto30E98B79_u = UnitGroupCount(auto30E98B79_g, c_unitCountAll);
    for (;; auto30E98B79_u -= 1) {
        auto30E98B79_var = UnitGroupUnitFromEnd(auto30E98B79_g, auto30E98B79_u);
        if (auto30E98B79_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto30E98B79_var, true);
    }
    Wait(5.0, c_timeGame);
    if ((gv_gamemode == 5) && (gf_NumberofPlayers() == 12) && (gv_mod_rifle == true) && (GameIsOnline() == true)) {
        auto179535BA_g = gv_players;
        auto179535BA_var = -1;
        while (true) {
            auto179535BA_var = PlayerGroupNextPlayer(auto179535BA_g, auto179535BA_var);
            if (auto179535BA_var < 0) { break; }
            if ((gv_playercamounlocked[5][auto179535BA_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto179535BA_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto179535BA_var), c_messageAreaSubtitle, StringExternal("Param/Value/4C9B19EA"));
                gv_playercamounlocked[5][auto179535BA_var] = true;
            }

        }
    }

    auto5D9341ED_g = gv_players;
    auto5D9341ED_var = -1;
    while (true) {
        auto5D9341ED_var = PlayerGroupNextPlayer(auto5D9341ED_g, auto5D9341ED_var);
        if (auto5D9341ED_var < 0) { break; }
        if ((gv_sIunlocked[26][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/BC10473C"));
            gv_sIunlocked[26][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "Rifleman") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "Rifleman2")) && (gv_sIunlocked[31][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/3B04FDF2"));
            gv_sIunlocked[31][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "CombatMedic") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "CombatMedic2")) && (gv_sIunlocked[33][auto5D9341ED_var] == false) && (gv_playercamounlocked[13][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/315AB7E2"));
            gv_sIunlocked[33][auto5D9341ED_var] = true;
            gv_playercamounlocked[13][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "AutomaticRifleman") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "AutomaticRifleman2")) && (gv_sIunlocked[35][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/990FABFF"));
            gv_sIunlocked[35][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "Flamethrower") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "Flamethrower2")) && (gv_sIunlocked[37][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/0C6E7136"));
            gv_sIunlocked[37][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "Enforcer") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "Enforcer2")) && (gv_sIunlocked[39][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/04C27684"));
            gv_sIunlocked[39][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "CavalryScout") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "CavalryScout2")) && (gv_playerdecalunlocked[3][auto5D9341ED_var] == false) && (gv_sIunlocked[41][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/18DF8988"));
            gv_sIunlocked[41][auto5D9341ED_var] = true;
            gv_playerdecalunlocked[3][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "SquadDesignatedMarksman") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "SquadDesignatedMarksman2")) && (gv_sIunlocked[43][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/B4912C07"));
            gv_sIunlocked[43][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "JavelinGunner") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "JavelinGunnerRework")) && (gv_sIunlocked[45][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/60A8909D"));
            gv_sIunlocked[45][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "PlatoonLeader") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "PlatoonLeader2")) && (gv_sIunlocked[47][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/8E6CF9C2"));
            gv_sIunlocked[47][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "CombatEngineer") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "CombatEngineer2")) && (gv_sIunlocked[49][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/75E9CD72"));
            gv_sIunlocked[49][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "Cyborg") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "Cyborg2")) && (gv_sIunlocked[51][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/57D5CB02"));
            gv_sIunlocked[51][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "GhostHero") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "GhostHero2")) && (gv_sIunlocked[53][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/CA3B8B65"));
            gv_sIunlocked[53][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "FireSupportSpecialist") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "FireSupportSpecialist2")) && (gv_sIunlocked[55][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/D8BF8A52"));
            gv_sIunlocked[55][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "CommandoHero") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "CommandoHero2")) && (gv_sIunlocked[57][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/698B9B39"));
            gv_sIunlocked[57][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "LaserEnforcer") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "LaserEnforcer2")) && (gv_sIunlocked[59][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/4A5F7864"));
            gv_sIunlocked[59][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "Specter")) && (gv_sIunlocked[61][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/1947B739"));
            gv_sIunlocked[61][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "OrbitalSupportSpecialist") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "OrbitalSupportSpecialist2")) && (gv_sIunlocked[63][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/19D5F5DC"));
            gv_sIunlocked[63][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "HeavyGunner") || (UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "HeavyGunner2")) && (gv_sIunlocked[65][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/2494FD82"));
            gv_sIunlocked[65][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "MechOperator")) && (gv_sIunlocked[67][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/45ACF537"));
            gv_sIunlocked[67][auto5D9341ED_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto5D9341ED_var]) == "Cyborg20")) && (gv_sIunlocked[71][auto5D9341ED_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5D9341ED_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5D9341ED_var), c_messageAreaSubtitle, StringExternal("Param/Value/54C13AFC"));
            gv_sIunlocked[71][auto5D9341ED_var] = true;
        }

    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_UACGameEnd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharonDies_Init () {
    gt_CharonDies = TriggerCreate("gt_CharonDies_Func");
    TriggerEnable(gt_CharonDies, false);
    TriggerAddEventUnitDied(gt_CharonDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Epilogue  2
//--------------------------------------------------------------------------------------------------
bool gt_EpilogueDS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_screen;
    unit lv_droppod;
    int lv_int;
    int lv_loopint;
    unit lv_hull;
    string lv_lldr;
    unit lv_untitledVariable001;

    // Automatic Variable Declarations
    unitgroup auto46379B35_g;
    int auto46379B35_u;
    unit auto46379B35_var;
    unitgroup autoDC0DC18D_g;
    int autoDC0DC18D_u;
    unit autoDC0DC18D_var;
    unitgroup autoDD9C57AB_g;
    int autoDD9C57AB_u;
    unit autoDD9C57AB_var;
    unitgroup auto996A1C65_g;
    int auto996A1C65_u;
    unit auto996A1C65_var;
    unitgroup autoC446B446_g;
    int autoC446B446_u;
    unit autoC446B446_var;
    unitgroup auto27BB39D4_g;
    int auto27BB39D4_u;
    unit auto27BB39D4_var;
    unitgroup auto0E09225B_g;
    int auto0E09225B_u;
    unit auto0E09225B_var;
    unitgroup autoDB92CAB1_g;
    int autoDB92CAB1_u;
    unit autoDB92CAB1_var;
    unitgroup autoE51AA2FA_g;
    int autoE51AA2FA_u;
    unit autoE51AA2FA_var;
    unitgroup autoFE7476C2_g;
    int autoFE7476C2_u;
    unit autoFE7476C2_var;
    unitgroup autoFAF91711_g;
    int autoFAF91711_u;
    unit autoFAF91711_var;
    playergroup autoC2406896_g;
    int autoC2406896_var;
    playergroup autoCD881EFD_g;
    int autoCD881EFD_var;
    playergroup auto23C1168E_g;
    int auto23C1168E_var;
    unitgroup auto537EDACA_g;
    int auto537EDACA_u;
    unit auto537EDACA_var;
    unitgroup autoB7CA61D4_g;
    int autoB7CA61D4_u;
    unit autoB7CA61D4_var;
    playergroup auto03729BF5_g;
    int auto03729BF5_var;
    const int auto3D8E1BEA_ae = 8;
    const int auto3D8E1BEA_ai = 1;

    // Variable Initialization
    lv_screen = c_invalidDialogId;
    lv_loopint = 1;
    lv_lldr = "LLDR";

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_infestationLevel = 0;
    gf_StopSpawnLoop(1, gv_loopType);
    gf_StopSpawnLoop(2, gv_loopType);
    gf_StopSpawnLoop(3, gv_loopType);
    TriggerEnable(TriggerGetCurrent(), false);
    gf_SkipActionsIfGameOver();
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOn();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    PingDestroyAll();
    gv_tunnelSatchelCount = 3;
    auto46379B35_g = gv_heroesGroup;
    auto46379B35_u = UnitGroupCount(auto46379B35_g, c_unitCountAll);
    for (;; auto46379B35_u -= 1) {
        auto46379B35_var = UnitGroupUnitFromEnd(auto46379B35_g, auto46379B35_u);
        if (auto46379B35_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto46379B35_var, false);
    }
    autoDC0DC18D_g = gv_playerLNs;
    autoDC0DC18D_u = UnitGroupCount(autoDC0DC18D_g, c_unitCountAll);
    for (;; autoDC0DC18D_u -= 1) {
        autoDC0DC18D_var = UnitGroupUnitFromEnd(autoDC0DC18D_g, autoDC0DC18D_u);
        if (autoDC0DC18D_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoDC0DC18D_var, false);
        UnitGroupAdd(gv_transitionalgroup, autoDC0DC18D_var);
    }
    autoDD9C57AB_g = gv_playerminis;
    autoDD9C57AB_u = UnitGroupCount(autoDD9C57AB_g, c_unitCountAll);
    for (;; autoDD9C57AB_u -= 1) {
        autoDD9C57AB_var = UnitGroupUnitFromEnd(autoDD9C57AB_g, autoDD9C57AB_u);
        if (autoDD9C57AB_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoDD9C57AB_var, false);
        UnitGroupAdd(gv_transitionalgroup, autoDD9C57AB_var);
    }
    TriggerEnable(gt_PlayerKills, false);
    auto996A1C65_g = gv_lNavailable;
    auto996A1C65_u = UnitGroupCount(auto996A1C65_g, c_unitCountAll);
    for (;; auto996A1C65_u -= 1) {
        auto996A1C65_var = UnitGroupUnitFromEnd(auto996A1C65_g, auto996A1C65_u);
        if (auto996A1C65_var == null) { break; }
        UnitBehaviorRemove(auto996A1C65_var, "LNInvulnerability", 1);
        UnitKill(auto996A1C65_var);
    }
    autoC446B446_g = gv_undeadGroup;
    autoC446B446_u = UnitGroupCount(autoC446B446_g, c_unitCountAll);
    for (;; autoC446B446_u -= 1) {
        autoC446B446_var = UnitGroupUnitFromEnd(autoC446B446_g, autoC446B446_u);
        if (autoC446B446_var == null) { break; }
        UnitKill(autoC446B446_var);
    }
    auto27BB39D4_g = UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto27BB39D4_u = UnitGroupCount(auto27BB39D4_g, c_unitCountAll);
    for (;; auto27BB39D4_u -= 1) {
        auto27BB39D4_var = UnitGroupUnitFromEnd(auto27BB39D4_g, auto27BB39D4_u);
        if (auto27BB39D4_var == null) { break; }
        UnitKill(auto27BB39D4_var);
    }
    auto0E09225B_g = UnitGroup(null, 13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0E09225B_u = UnitGroupCount(auto0E09225B_g, c_unitCountAll);
    for (;; auto0E09225B_u -= 1) {
        auto0E09225B_var = UnitGroupUnitFromEnd(auto0E09225B_g, auto0E09225B_u);
        if (auto0E09225B_var == null) { break; }
        UnitKill(auto0E09225B_var);
    }
    autoDB92CAB1_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDB92CAB1_u = UnitGroupCount(autoDB92CAB1_g, c_unitCountAll);
    for (;; autoDB92CAB1_u -= 1) {
        autoDB92CAB1_var = UnitGroupUnitFromEnd(autoDB92CAB1_g, autoDB92CAB1_u);
        if (autoDB92CAB1_var == null) { break; }
        UnitKill(autoDB92CAB1_var);
    }
    Wait(0.125, c_timeGame);
    autoE51AA2FA_g = UnitGroup("InfantryRifleman", 0, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    autoE51AA2FA_u = UnitGroupCount(autoE51AA2FA_g, c_unitCountAll);
    for (;; autoE51AA2FA_u -= 1) {
        autoE51AA2FA_var = UnitGroupUnitFromEnd(autoE51AA2FA_g, autoE51AA2FA_u);
        if (autoE51AA2FA_var == null) { break; }
        UnitKill(autoE51AA2FA_var);
    }
    autoFE7476C2_g = UnitGroup("PoliceOfficer", 0, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    autoFE7476C2_u = UnitGroupCount(autoFE7476C2_g, c_unitCountAll);
    for (;; autoFE7476C2_u -= 1) {
        autoFE7476C2_var = UnitGroupUnitFromEnd(autoFE7476C2_g, autoFE7476C2_u);
        if (autoFE7476C2_var == null) { break; }
        UnitKill(autoFE7476C2_var);
    }
    autoFAF91711_g = UnitGroup("PoliceOfficerShotgun", 0, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    autoFAF91711_u = UnitGroupCount(autoFAF91711_g, c_unitCountAll);
    for (;; autoFAF91711_u -= 1) {
        autoFAF91711_var = UnitGroupUnitFromEnd(autoFAF91711_g, autoFAF91711_u);
        if (autoFAF91711_var == null) { break; }
        UnitKill(autoFAF91711_var);
    }
    TriggerEnable(gt_PlayerKills, true);
    autoC2406896_g = gv_players;
    autoC2406896_var = -1;
    while (true) {
        autoC2406896_var = PlayerGroupNextPlayer(autoC2406896_g, autoC2406896_var);
        if (autoC2406896_var < 0) { break; }
        CameraApplyInfo(autoC2406896_var, CameraInfoFromId(1398), 0.0, -1, 10, true);
        CameraLockInput(autoC2406896_var, true);
    }
    SoundPlay(SoundLink("UI_BnetError", -1), PlayerGroupAll(), 100.0, 0.0);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/F6544151"), StringExternal("Param/Value/7D2137DF"), 7.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    Wait(7.0, c_timeGame);
    UIShowTextCrawl(PlayerGroupAll(), StringToText(""), StringExternal("Param/Value/C755D5D0"), 8.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    Wait(8.0, c_timeGame);
    UIShowTextCrawl(PlayerGroupAll(), StringToText(""), StringExternal("Param/Value/C8AE1D65"), 8.5, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    Wait(8.5, c_timeGame);
    autoCD881EFD_g = gv_players;
    autoCD881EFD_var = -1;
    while (true) {
        autoCD881EFD_var = PlayerGroupNextPlayer(autoCD881EFD_g, autoCD881EFD_var);
        if (autoCD881EFD_var < 0) { break; }
        CameraLockInput(autoCD881EFD_var, false);
        CameraRestore(autoCD881EFD_var, 0.0, -1, 10);
        CameraPan(autoCD881EFD_var, RegionGetCenter(RegionFromId(14)), 0.5, -1, 10, true);
        CameraLockInput(autoCD881EFD_var, true);
    }
    GameSetLighting("UACNight", 0.0);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitCreate(1, "ColonistShipFlying", 0, 13, RegionGetCenter(RegionFromId(29)), 270.0);
    gv_phantombeginning = UnitLastCreated();
    UnitIssueOrder(gv_phantombeginning, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
    gf_MissionText(StringExternal("Param/Value/76ED791E"));
    Wait(6.0, c_timeGame);
    auto23C1168E_g = gv_players;
    auto23C1168E_var = -1;
    while (true) {
        auto23C1168E_var = PlayerGroupNextPlayer(auto23C1168E_g, auto23C1168E_var);
        if (auto23C1168E_var < 0) { break; }
        PlayerSetLighting(auto23C1168E_var, "UACEarlyDawn", 20.0);
    }
    Wait(8.5, c_timeGame);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOff();
    auto537EDACA_g = gv_heroesGroup;
    auto537EDACA_u = UnitGroupCount(auto537EDACA_g, c_unitCountAll);
    for (;; auto537EDACA_u -= 1) {
        auto537EDACA_var = UnitGroupUnitFromEnd(auto537EDACA_g, auto537EDACA_u);
        if (auto537EDACA_var == null) { break; }
        if ((UnitIsAlive(auto537EDACA_var) == false) && (gv_mod_1life == false)) {
            UnitCreateEffectUnit(auto537EDACA_var, "ReviveModifyUnit", auto537EDACA_var);
            Wait(0.1, c_timeGame);
        }
        if ((UnitIsAlive(auto537EDACA_var) == true)) {
            UnitSetPropertyFixed(auto537EDACA_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(auto537EDACA_var, c_unitPropEnergyPercent, 100.0);
            UnitSetPosition(auto537EDACA_var, RegionGetCenter(RegionFromId(14)), false);
            UnitIssueOrder(auto537EDACA_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionGetCenter(RegionFromId(82)), 4.0, (30.0 * IntToFixed(UnitGetOwner(auto537EDACA_var))))), c_orderQueueReplace);
        }
        libNtve_gf_PauseUnit(auto537EDACA_var, false);
        libNtve_gf_ShowHideUnit(auto537EDACA_var, true);
        libNtve_gf_MakeUnitInvulnerable(auto537EDACA_var, false);
    }
    autoB7CA61D4_g = gv_transitionalgroup;
    autoB7CA61D4_u = UnitGroupCount(autoB7CA61D4_g, c_unitCountAll);
    for (;; autoB7CA61D4_u -= 1) {
        autoB7CA61D4_var = UnitGroupUnitFromEnd(autoB7CA61D4_g, autoB7CA61D4_u);
        if (autoB7CA61D4_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoB7CA61D4_var, false);
        libNtve_gf_PauseUnit(autoB7CA61D4_var, false);
        libNtve_gf_ShowHideUnit(autoB7CA61D4_var, true);
        libNtve_gf_MakeUnitInvulnerable(autoB7CA61D4_var, false);
        UnitSetPosition(autoB7CA61D4_var, RegionGetCenter(RegionFromId(14)), false);
        UnitSetPropertyFixed(autoB7CA61D4_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(autoB7CA61D4_var, c_unitPropEnergyPercent, 100.0);
        UnitIssueOrder(autoB7CA61D4_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(82))), c_orderQueueReplace);
    }
    auto03729BF5_g = gv_players;
    auto03729BF5_var = -1;
    while (true) {
        auto03729BF5_var = PlayerGroupNextPlayer(auto03729BF5_g, auto03729BF5_var);
        if (auto03729BF5_var < 0) { break; }
        CameraLockInput(auto03729BF5_var, false);
    }
    UnitPauseAll(false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/B2FE79AF") + IntToText(gv_RAcomputercount) + StringExternal("Param/Value/E910B216")));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/3CFA5425"));
    gf_MissionText(StringExternal("Param/Value/D41F2B53"));
    Wait(RandomFixed(0.0, 1.5), c_timeGame);
    gv_pauseSpawning = false;
    libHots_gf_PlaySoundLinkasMusic(SoundLink("EpiMusic", -1), true, true);
    TimerStart(gv_bossTimer, 180.0, false, c_timeGame);
    TimerWindowSetTitle(gv_bossTimerWindow, StringExternal("Param/Value/317A787D"));
    TimerWindowShow(gv_bossTimerWindow, PlayerGroupAll(), true);
    gf_StartSpawnLoop(1, gv_loopType);
    gf_StartSpawnLoop(2, gv_loopType);
    gf_StartSpawnLoop(3, gv_loopType);
    gf_Computers1Bal();
    TriggerEnable(gt_InfestedSmithyFlee, true);
    UnitIssueOrder(gv_phantombeginning, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    gv_highlanders[1] = RegionFromId(48);
    gv_highlanders[2] = RegionFromId(49);
    gv_highlanders[3] = RegionFromId(50);
    gv_highlanders[4] = RegionFromId(51);
    gv_highlanders[5] = RegionFromId(52);
    gv_highlanders[6] = RegionFromId(55);
    gv_highlanders[7] = RegionFromId(56);
    gv_highlanders[8] = RegionFromId(80);
    gv_aORegionsSearched[1] = false;
    gv_aORegionsSearched[2] = false;
    gv_aORegionsSearched[3] = false;
    gv_aORegionsSearched[4] = false;
    gv_aORegionsSearched[5] = false;
    gv_aORegionsSearched[6] = false;
    gv_aORegionsSearched[7] = false;
    gv_aORegionsSearched[8] = false;
    UnitIssueOrder(gv_phantombeginning, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    UnitRemove(gv_phantombeginning);
    gf_MissionText(StringExternal("Param/Value/1070BD03"));
    Wait(5.0, c_timeGame);
    lv_loopint = 1;
    for ( ; ( (auto3D8E1BEA_ai >= 0 && lv_loopint <= auto3D8E1BEA_ae) || (auto3D8E1BEA_ai < 0 && lv_loopint >= auto3D8E1BEA_ae) ) ; lv_loopint += auto3D8E1BEA_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSmall", RegionGetCenter(gv_highlanders[lv_loopint]), ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/3600347C"));
        PingSetScale(PingLastCreated(), 0.5);
        gv_highlanderpings[lv_loopint] = PingLastCreated();
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_highlanders[lv_loopint]));
        gv_waterSiteActors[lv_loopint] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000 0.000000 s");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {0,255,200 5.000000}");
    }
    ObjectiveSetState(gv_optionalObj, c_objectiveStateActive);
    ObjectiveSetName(gv_optionalObj, StringExternal("Param/Value/13A54AF5"));
    ObjectiveSetDescription(gv_optionalObj, StringExternal("Param/Value/69A4242D"));
    UnitCreate(1, "CasterDummy", 0, 14, PointFromId(368466839), 270.0);
    gv_offMapArtilleryDummies[1] = UnitLastCreated();
    UnitCreate(1, "CasterDummy", 0, 14, PointFromId(799294116), 270.0);
    gv_offMapArtilleryDummies[2] = UnitLastCreated();
    UnitCreate(1, "CasterDummy", 0, 14, PointFromId(1311339467), 270.0);
    gv_offMapArtilleryDummies[3] = UnitLastCreated();
    UnitCreate(1, "CasterDummy", 0, 14, PointFromId(856762087), 270.0);
    gv_offMapArtilleryDummies[4] = UnitLastCreated();
    TriggerEnable(gt_SearchTargeter, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EpilogueDS_Init () {
    gt_EpilogueDS = TriggerCreate("gt_EpilogueDS_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Search Home 2
//--------------------------------------------------------------------------------------------------
bool gt_SearchTargeter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_z;
    int lv_loopint;
    int lv_remainingcount;
    bool lv_lastone;
    bool lv_complete;

    // Automatic Variable Declarations
    const int auto10F05446_ae = 8;
    const int auto10F05446_ai = 1;
    const int auto4D8FB015_ae = 8;
    const int auto4D8FB015_ai = 1;
    const int auto17677C58_ae = 8;
    const int auto17677C58_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (auto10F05446_ai >= 0 && lv_loopint <= auto10F05446_ae) || (auto10F05446_ai < 0 && lv_loopint >= auto10F05446_ae) ) ; lv_loopint += auto10F05446_ai ) {
        if ((gv_aORegionsSearched[lv_loopint] == false)) {
            lv_remainingcount += 1;
        }
    }
    if ((lv_remainingcount == 1)) {
        lv_lastone = true;
    }
    lv_loopint = 1;
    for ( ; ( (auto4D8FB015_ai >= 0 && lv_loopint <= auto4D8FB015_ae) || (auto4D8FB015_ai < 0 && lv_loopint >= auto4D8FB015_ae) ) ; lv_loopint += auto4D8FB015_ai ) {
        if ((EventUnitRegion() == gv_highlanders[lv_loopint]) && (gv_aORegionsSearched[lv_loopint] == false)) {
            gv_aORegionsSearched[lv_loopint] = true;
            PingDestroy(gv_highlanderpings[lv_loopint]);
            libNtve_gf_KillModel(gv_waterSiteActors[lv_loopint]);
            if (((RandomInt(0, 5) == 4) || (lv_lastone == true))) {
                TriggerEnable(TriggerGetCurrent(), false);
                gf_MissionText(StringExternal("Param/Value/95DE82EA"));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "OrbitalSatelliteTargeter", 0, 0, RegionGetCenter(gv_highlanders[lv_loopint]));
                lv_z = 1;
                for ( ; ( (auto17677C58_ai >= 0 && lv_z <= auto17677C58_ae) || (auto17677C58_ai < 0 && lv_z >= auto17677C58_ae) ) ; lv_z += auto17677C58_ai ) {
                    PingDestroy(gv_highlanderpings[lv_z]);
                    libNtve_gf_KillModel(gv_waterSiteActors[lv_z]);
                }
                gf_SucceedMission(35, StringExternal("Param/Value/B532FE45"), -1, false);
                ObjectiveSetState(gv_optionalObj, c_objectiveStateCompleted);
                Wait(4.0, c_timeGame);
                ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
                Wait(1.0, c_timeGame);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ThresherMaw", 0, 14, RegionRandomPoint(gv_highlanders[lv_loopint]));
                UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
                lv_complete = true;
                break;
            }
            else {
                gf_MissionText(StringExternal("Param/Value/CA072C7A"));
            }
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SearchTargeter_Init () {
    gt_SearchTargeter = TriggerCreate("gt_SearchTargeter_Func");
    TriggerEnable(gt_SearchTargeter, false);
    TriggerAddEventUnitRegion(gt_SearchTargeter, null, RegionFromId(48), true);
    TriggerAddEventUnitRegion(gt_SearchTargeter, null, RegionFromId(49), true);
    TriggerAddEventUnitRegion(gt_SearchTargeter, null, RegionFromId(50), true);
    TriggerAddEventUnitRegion(gt_SearchTargeter, null, RegionFromId(51), true);
    TriggerAddEventUnitRegion(gt_SearchTargeter, null, RegionFromId(52), true);
    TriggerAddEventUnitRegion(gt_SearchTargeter, null, RegionFromId(55), true);
    TriggerAddEventUnitRegion(gt_SearchTargeter, null, RegionFromId(56), true);
    TriggerAddEventUnitRegion(gt_SearchTargeter, null, RegionFromId(80), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charon Burrows 2
//--------------------------------------------------------------------------------------------------
bool gt_InfestedSmithyFlee_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_undeadUnit;
    point lv_point;
    region[4] lv_lZ_R;
    int lv_lZ;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_undeadUnit = gv_infestedSmithy;
    lv_point = UnitGetPosition(lv_undeadUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopTimer(gv_SmithyFleeTimer);
    UnitBehaviorAdd(lv_undeadUnit, "SmithyFlee", lv_undeadUnit, 1);
    libNtve_gf_MakeUnitInvulnerable(lv_undeadUnit, true);
    if ((gv_smithyStage == 1)) {
        UnitIssueOrder(lv_undeadUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1906569901)), c_orderQueueReplace);
    }
    if ((gv_smithyStage == 2)) {
        UnitIssueOrder(lv_undeadUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1696334789)), c_orderQueueReplace);
    }
    if ((gv_smithyStage == 3)) {
        UnitIssueOrder(lv_undeadUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(941013679)), c_orderQueueReplace);
    }
    Wait(1.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/71D3E803"));
    Wait(5.0, c_timeGame);
    UnitRemove(lv_undeadUnit);
    PingDestroy(gv_smithyPing);
    gv_smithySpawned = false;
    gv_infestedSmithy = null;
    if ((gv_smithyStage < 4)) {
        Wait(3.0, c_timeGame);
        TimerStart(gv_bossTimer, 90.0, false, c_timeGame);
        TimerWindowSetTitle(gv_bossTimerWindow, StringExternal("Param/Value/7C1C8845"));
        TimerWindowShow(gv_bossTimerWindow, PlayerGroupAll(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedSmithyFlee_Init () {
    gt_InfestedSmithyFlee = TriggerCreate("gt_InfestedSmithyFlee_Func");
    TriggerEnable(gt_InfestedSmithyFlee, false);
    TriggerAddEventGeneric(gt_InfestedSmithyFlee, "SmithyFlee");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charon Burrows 3
//--------------------------------------------------------------------------------------------------
bool gt_InfestedSmithyFleeDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_undeadUnit;
    point lv_point;
    region[4] lv_lZ_R;
    int lv_lZ;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_undeadUnit = EventUnit();
    lv_point = UnitGetPosition(lv_undeadUnit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_undeadUnit) == "InfestedSmithy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(lv_undeadUnit, "SmithyFlee") == false) && (gv_smithyStage >= 1) && (gv_smithyStage <= 3) && (UnitGetPropertyFixed(lv_undeadUnit, c_unitPropLife, c_unitPropCurrent) < 45000.0)) {
        TriggerSendEvent("SmithyFlee");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedSmithyFleeDamage_Init () {
    gt_InfestedSmithyFleeDamage = TriggerCreate("gt_InfestedSmithyFleeDamage_Func");
    TriggerEnable(gt_InfestedSmithyFleeDamage, false);
    TriggerAddEventUnitDamaged(gt_InfestedSmithyFleeDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 002
//--------------------------------------------------------------------------------------------------
bool gt_SmithyTimerExpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnSmithy();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SmithyTimerExpire_Init () {
    gt_SmithyTimerExpire = TriggerCreate("gt_SmithyTimerExpire_Func");
    TriggerAddEventTimer(gt_SmithyTimerExpire, gv_bossTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 003
//--------------------------------------------------------------------------------------------------
bool gt_SmithyFleeTimerExpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_smithySpawned == true) && (UnitHasBehavior(gv_infestedSmithy, "SmithyFlee") == false)) {
        TriggerSendEvent("SmithyFlee");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SmithyFleeTimerExpire_Init () {
    gt_SmithyFleeTimerExpire = TriggerCreate("gt_SmithyFleeTimerExpire_Func");
    TriggerAddEventTimer(gt_SmithyFleeTimerExpire, gv_SmithyFleeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mech Calldown 2
//--------------------------------------------------------------------------------------------------
bool gt_SmithyZombieSpawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    unit lv_caster;
    unit lv_unit;
    int lv_owner;
    unit lv_droppod;
    unitgroup lv_spawnsUnitGroup;

    // Automatic Variable Declarations
    const int auto96E5E9CF_n = 3;
    int auto96E5E9CF_i;
    const int auto3E7C53CB_n = 10;
    int auto3E7C53CB_i;
    const int autoB13ADA0A_n = 6;
    int autoB13ADA0A_i;
    const int auto6C2DBA59_n = 5;
    int auto6C2DBA59_i;
    const int autoE2189DD4_n = 3;
    int autoE2189DD4_i;
    const int auto422715DE_n = 10;
    int auto422715DE_i;
    const int auto63791F1E_n = 5;
    int auto63791F1E_i;
    const int autoD30C1150_n = 5;
    int autoD30C1150_i;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(EventUnit());
    lv_spawnsUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_mod_tier3)) {
        for (auto96E5E9CF_i = 1; auto96E5E9CF_i <= auto96E5E9CF_n; auto96E5E9CF_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZombieWraith", 0, lv_owner, UnitGetPosition(EventUnit()));
            UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
        for (auto3E7C53CB_i = 1; auto3E7C53CB_i <= auto3E7C53CB_n; auto3E7C53CB_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Unburied", 0, lv_owner, UnitGetPosition(EventUnit()));
            UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
        for (autoB13ADA0A_i = 1; autoB13ADA0A_i <= autoB13ADA0A_n; autoB13ADA0A_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pooch", 0, lv_owner, UnitGetPosition(EventUnit()));
            UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
        for (auto6C2DBA59_i = 1; auto6C2DBA59_i <= auto6C2DBA59_n; auto6C2DBA59_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Parasite", 0, lv_owner, UnitGetPosition(EventUnit()));
            UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
    }
    else if ((gv_mod_tier2)) {
        for (autoE2189DD4_i = 1; autoE2189DD4_i <= autoE2189DD4_n; autoE2189DD4_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZombieImpaler", 0, lv_owner, UnitGetPosition(EventUnit()));
            UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
        for (auto422715DE_i = 1; auto422715DE_i <= auto422715DE_n; auto422715DE_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Charger", 0, lv_owner, UnitGetPosition(EventUnit()));
            UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
        for (auto63791F1E_i = 1; auto63791F1E_i <= auto63791F1E_n; auto63791F1E_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Deceiver", 0, lv_owner, UnitGetPosition(EventUnit()));
            UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
        for (autoD30C1150_i = 1; autoD30C1150_i <= autoD30C1150_n; autoD30C1150_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drake", 0, lv_owner, UnitGetPosition(EventUnit()));
            UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
    }
    else if ((gv_mod_tier1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Cursed", 0, lv_owner, UnitGetPosition(EventUnit()));
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Cursed", 0, lv_owner, UnitGetPosition(EventUnit()));
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
    else if ((gv_mod_genesis)) {
        if ((RandomInt(0, 3) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Livid", 0, lv_owner, UnitGetPosition(EventUnit()));
            UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scorpio", 0, lv_owner, UnitGetPosition(EventUnit()));
            UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Scorpio", 0, lv_owner, UnitGetPosition(EventUnit()));
            UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SmithyZombieSpawns_Init () {
    gt_SmithyZombieSpawns = TriggerCreate("gt_SmithyZombieSpawns_Func");
    TriggerAddEventUnitAbility(gt_SmithyZombieSpawns, null, AbilityCommand("SpawnMutantT1s", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 002
//--------------------------------------------------------------------------------------------------
bool gt_OffmapArtillery_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_tmpregion;
    unit lv_tmpunit;
    unit lv_currentArtilleryPoint;
    int lv_loopint;

    // Automatic Variable Declarations
    const int auto33391D33_ae = 20;
    const int auto33391D33_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_smithyStage < 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_smithySpawned == false) && (gv_epiSAMOnline == false)) {
        if ((gv_smithyStage == 1)) {
            lv_currentArtilleryPoint = gv_offMapArtilleryDummies[1];
        }
        else if ((gv_smithyStage == 2)) {
            lv_currentArtilleryPoint = gv_offMapArtilleryDummies[2];
        }
        else if ((gv_smithyStage == 3)) {
            lv_currentArtilleryPoint = gv_offMapArtilleryDummies[3];
        }
        lv_tmpunit = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
        lv_tmpregion = RegionCircle(UnitGetPosition(lv_tmpunit), 10.0);
        lv_loopint = 1;
        for ( ; ( (auto33391D33_ai >= 0 && lv_loopint <= auto33391D33_ae) || (auto33391D33_ai < 0 && lv_loopint >= auto33391D33_ae) ) ; lv_loopint += auto33391D33_ai ) {
            UnitCreateEffectPoint(lv_currentArtilleryPoint, "TitanMechMissileShot", RegionRandomPoint(lv_tmpregion));
            Wait(0.1, c_timeGame);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OffmapArtillery_Init () {
    gt_OffmapArtillery = TriggerCreate("gt_OffmapArtillery_Func");
    TriggerAddEventTimer(gt_OffmapArtillery, gv_artilleryTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Search Home 3
//--------------------------------------------------------------------------------------------------
bool gt_ActivateSAM_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_z;
    int lv_loopint;
    int lv_remainingcount;
    bool lv_lastone;
    bool lv_complete;

    // Automatic Variable Declarations
    const int autoDA7023B6_ae = 3;
    const int autoDA7023B6_ai = 1;
    const int autoBB52EAD5_ae = 8;
    const int autoBB52EAD5_ai = 1;
    const int autoA94E3A18_ae = 3;
    const int autoA94E3A18_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (autoDA7023B6_ai >= 0 && lv_loopint <= autoDA7023B6_ae) || (autoDA7023B6_ai < 0 && lv_loopint >= autoDA7023B6_ae) ) ; lv_loopint += autoDA7023B6_ai ) {
        if ((gv_epiSAMSearched[lv_loopint] == false)) {
            lv_remainingcount += 1;
        }
    }
    if ((lv_remainingcount == 1)) {
        lv_lastone = true;
    }
    lv_loopint = 1;
    for ( ; ( (autoBB52EAD5_ai >= 0 && lv_loopint <= autoBB52EAD5_ae) || (autoBB52EAD5_ai < 0 && lv_loopint >= autoBB52EAD5_ae) ) ; lv_loopint += autoBB52EAD5_ai ) {
        if ((EventUnitRegion() == gv_epiSAMSites[lv_loopint]) && (gv_epiSAMSearched[lv_loopint] == false)) {
            gv_epiSAMSearched[lv_loopint] = true;
            PingDestroy(gv_epiSAMPings[lv_loopint]);
            libNtve_gf_KillModel(gv_epiSAMSearch[lv_loopint]);
            if (((lv_lastone == true))) {
                TriggerEnable(TriggerGetCurrent(), false);
                gv_epiSAMOnline = true;
                gf_MissionText(StringExternal("Param/Value/D7499A28"));
                lv_z = 1;
                for ( ; ( (autoA94E3A18_ai >= 0 && lv_z <= autoA94E3A18_ae) || (autoA94E3A18_ai < 0 && lv_z >= autoA94E3A18_ae) ) ; lv_z += autoA94E3A18_ai ) {
                    PingDestroy(gv_epiSAMPings[lv_z]);
                    libNtve_gf_KillModel(gv_epiSAMSearch[lv_z]);
                }
                gf_SucceedMission(50, StringExternal("Param/Value/B7B557B1"), -1, false);
                ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
                Wait(4.0, c_timeGame);
                ObjectiveSetState(gv_secondObj, c_objectiveStateHidden);
                Wait(1.0, c_timeGame);
                lv_complete = true;
                break;
            }
            else {
                gf_MissionText(StringExternal("Param/Value/B86934BE"));
            }
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateSAM_Init () {
    gt_ActivateSAM = TriggerCreate("gt_ActivateSAM_Func");
    TriggerEnable(gt_ActivateSAM, false);
    TriggerAddEventUnitRegion(gt_ActivateSAM, null, RegionFromId(83), true);
    TriggerAddEventUnitRegion(gt_ActivateSAM, null, RegionFromId(85), true);
    TriggerAddEventUnitRegion(gt_ActivateSAM, null, RegionFromId(86), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Approach Tower 2
//--------------------------------------------------------------------------------------------------
bool gt_ApproachComputer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    bool lv_alldone;
    fixed lv_placenumber;

    // Automatic Variable Declarations
    int autoF151A1CB_ae;
    const int autoF151A1CB_ai = 1;
    int auto4A563856_ae;
    const int auto4A563856_ai = 1;
    unitgroup auto2173162D_g;
    int auto2173162D_u;
    unit auto2173162D_var;
    int auto7FA0EF09_ae;
    const int auto7FA0EF09_ai = 1;

    // Variable Initialization
    lv_alldone = true;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF151A1CB_ae = gv_sensorcount;
    lv_loopint = 1;
    for ( ; ( (autoF151A1CB_ai >= 0 && lv_loopint <= autoF151A1CB_ae) || (autoF151A1CB_ai < 0 && lv_loopint >= autoF151A1CB_ae) ) ; lv_loopint += autoF151A1CB_ai ) {
        if ((gv_epiCompActors[lv_loopint] != null)) {
            lv_alldone = false;
        }

    }
    if ((gv_epiCompProgress[1] >= 3) && (gv_epiCompProgress[2] >= 3)) {
        lv_alldone = true;
    }

    if ((gv_completedComputers >= 2)) {
        lv_alldone = true;
    }

    if ((lv_alldone == true)) {
        auto4A563856_ae = gv_sensorcount;
        lv_loopint = 1;
        for ( ; ( (auto4A563856_ai >= 0 && lv_loopint <= auto4A563856_ae) || (auto4A563856_ai < 0 && lv_loopint >= auto4A563856_ae) ) ; lv_loopint += auto4A563856_ai ) {
            if ((gv_epiCompActors[lv_loopint] != null)) {
                ActorSend(gv_epiCompActors[lv_loopint], "Destroy");
                Wait(0.25, c_timeGame);
                gv_epiCompActors[lv_loopint] = null;
                lv_alldone = false;
            }

        }
        UnitGroupClear(gv_waterGatherers);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ApproachComputer, false);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        if ((gv_smithyStage == 1)) {
            gf_SucceedMission(100, StringExternal("Param/Value/2F0912B3"), 0, false);
            gf_MissionText(StringExternal("Param/Value/CAD3CDF4"));
            Wait(5.0, c_timeGame);
            gf_MissionText(StringExternal("Param/Value/BE918BCC"));
            gf_Computers2Air();
        }
        else if ((gv_smithyStage == 2)) {
            gf_SucceedMission(100, StringExternal("Param/Value/A127EFC7"), 0, false);
            gf_MissionText(StringExternal("Param/Value/7621F242"));
            Wait(5.0, c_timeGame);
            gf_Computers3RA();
        }
        else if ((gv_smithyStage == 3)) {
            gf_SucceedMission(100, StringExternal("Param/Value/23ECEBE7"), 0, false);
            gf_MissionText(StringExternal("Param/Value/ED180548"));
            gf_SmithyAdvance();
        }
        Wait(5.0, c_timeGame);
        if ((gv_smithySpawned == true) && (UnitHasBehavior(gv_infestedSmithy, "SmithyFlee") == false)) {
            TriggerSendEvent("SmithyFlee");
        }

        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        return true;
    }

    auto2173162D_g = gv_heroesGroup;
    auto2173162D_u = UnitGroupCount(auto2173162D_g, c_unitCountAll);
    for (;; auto2173162D_u -= 1) {
        auto2173162D_var = UnitGroupUnitFromEnd(auto2173162D_g, auto2173162D_u);
        if (auto2173162D_var == null) { break; }
        auto7FA0EF09_ae = gv_sensorcount;
        lv_loopint = 1;
        for ( ; ( (auto7FA0EF09_ai >= 0 && lv_loopint <= auto7FA0EF09_ae) || (auto7FA0EF09_ai < 0 && lv_loopint >= auto7FA0EF09_ae) ) ; lv_loopint += auto7FA0EF09_ai ) {
            if ((libNtve_gf_UnitInRegion(auto2173162D_var, gv_epiCompSites[lv_loopint]) == true) && (UnitHasBehavior(auto2173162D_var, "ActivatingComputer") == false) && (UnitGroupCount(UnitGroup(null, c_playerAny, gv_epiCompSites[lv_loopint], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && (gv_epiCompActors[lv_loopint] != null) && (UnitGroupHasUnit(gv_waterGatherers, auto2173162D_var) == false)) {
                gf_AccessingComputers(auto2173162D_var, gv_epiCompSites[lv_loopint], lv_loopint);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApproachComputer_Init () {
    gt_ApproachComputer = TriggerCreate("gt_ApproachComputer_Func");
    TriggerEnable(gt_ApproachComputer, false);
    TriggerAddEventTimePeriodic(gt_ApproachComputer, 1.01, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charon Dies  2
//--------------------------------------------------------------------------------------------------
bool gt_SmithyDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_undeadUnit;

    // Automatic Variable Declarations
    unitgroup autoC3A794CC_g;
    int autoC3A794CC_u;
    unit autoC3A794CC_var;
    unitgroup auto2297BD85_g;
    int auto2297BD85_u;
    unit auto2297BD85_var;
    playergroup auto9696D394_g;
    int auto9696D394_var;
    playergroup auto3D0E56E0_g;
    int auto3D0E56E0_var;

    // Variable Initialization
    lv_undeadUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_undeadUnit) == "InfestedSmithy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_smithyPing);
    Wait(15.0, c_timeGame);
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    gf_StopSpawnLoop(1, gv_loopType);
    gf_StopSpawnLoop(2, gv_loopType);
    gf_StopSpawnLoop(3, gv_loopType);
    gv_pauseSpawning = true;
    while (true) {
        autoC3A794CC_g = gv_undeadGroup;
        autoC3A794CC_u = UnitGroupCount(autoC3A794CC_g, c_unitCountAll);
        for (;; autoC3A794CC_u -= 1) {
            autoC3A794CC_var = UnitGroupUnitFromEnd(autoC3A794CC_g, autoC3A794CC_u);
            if (autoC3A794CC_var == null) { break; }
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(autoC3A794CC_var), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 4.0, 270.0);
        }
        if ((UnitGroupCount(gv_undeadGroup, c_unitCountAlive) == 0)) {
            break;
        }

        Wait(12.0, c_timeGame);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_SucceedMission(200, StringExternal("Param/Value/DC8E09E2"), -1, false);
    gf_SucceedMission(100, StringExternal("Param/Value/24939A1D"), -1, false);
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/71220E22"), 0, true);
    auto2297BD85_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2297BD85_u = UnitGroupCount(auto2297BD85_g, c_unitCountAll);
    for (;; auto2297BD85_u -= 1) {
        auto2297BD85_var = UnitGroupUnitFromEnd(auto2297BD85_g, auto2297BD85_u);
        if (auto2297BD85_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto2297BD85_var, true);
    }
    Wait(5.0, c_timeGame);
    if ((gv_gamemode == 5) && (gf_NumberofPlayers() == 12) && (gv_mod_rifle == true) && (GameIsOnline() == true)) {
        auto9696D394_g = gv_players;
        auto9696D394_var = -1;
        while (true) {
            auto9696D394_var = PlayerGroupNextPlayer(auto9696D394_g, auto9696D394_var);
            if (auto9696D394_var < 0) { break; }
            if ((gv_playercamounlocked[5][auto9696D394_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto9696D394_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto9696D394_var), c_messageAreaSubtitle, StringExternal("Param/Value/E500BED3"));
                gv_playercamounlocked[5][auto9696D394_var] = true;
            }

        }
    }

    auto3D0E56E0_g = gv_players;
    auto3D0E56E0_var = -1;
    while (true) {
        auto3D0E56E0_var = PlayerGroupNextPlayer(auto3D0E56E0_g, auto3D0E56E0_var);
        if (auto3D0E56E0_var < 0) { break; }
        if ((gv_sIunlocked[26][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/E920B532"));
            gv_sIunlocked[26][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "Rifleman") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "Rifleman2")) && (gv_sIunlocked[31][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/F62D21B5"));
            gv_sIunlocked[31][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "CombatMedic") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "CombatMedic2")) && (gv_sIunlocked[33][auto3D0E56E0_var] == false) && (gv_playercamounlocked[13][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/1D34C5D7"));
            gv_sIunlocked[33][auto3D0E56E0_var] = true;
            gv_playercamounlocked[13][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "AutomaticRifleman") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "AutomaticRifleman2")) && (gv_sIunlocked[35][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/203E26EE"));
            gv_sIunlocked[35][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "Flamethrower") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "Flamethrower2")) && (gv_sIunlocked[37][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/2C24EF41"));
            gv_sIunlocked[37][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "Enforcer") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "Enforcer2")) && (gv_sIunlocked[39][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/5197E026"));
            gv_sIunlocked[39][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "CavalryScout") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "CavalryScout2")) && (gv_playerdecalunlocked[3][auto3D0E56E0_var] == false) && (gv_sIunlocked[41][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/A4DE34E6"));
            gv_sIunlocked[41][auto3D0E56E0_var] = true;
            gv_playerdecalunlocked[3][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "SquadDesignatedMarksman") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "SquadDesignatedMarksman2")) && (gv_sIunlocked[43][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/B2259B32"));
            gv_sIunlocked[43][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "JavelinGunner") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "JavelinGunnerRework")) && (gv_sIunlocked[45][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/122CBBE5"));
            gv_sIunlocked[45][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "PlatoonLeader") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "PlatoonLeader2")) && (gv_sIunlocked[47][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/0A35E71A"));
            gv_sIunlocked[47][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "CombatEngineer") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "CombatEngineer2")) && (gv_sIunlocked[49][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/506A56BF"));
            gv_sIunlocked[49][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "Cyborg") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "Cyborg2")) && (gv_sIunlocked[51][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/53A64089"));
            gv_sIunlocked[51][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "GhostHero") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "GhostHero2")) && (gv_sIunlocked[53][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/C27A4C4F"));
            gv_sIunlocked[53][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "FireSupportSpecialist") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "FireSupportSpecialist2")) && (gv_sIunlocked[55][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/BCE7B99F"));
            gv_sIunlocked[55][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "CommandoHero") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "CommandoHero2")) && (gv_sIunlocked[57][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/865FFCC9"));
            gv_sIunlocked[57][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "LaserEnforcer") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "LaserEnforcer2")) && (gv_sIunlocked[59][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/C2AB2D3C"));
            gv_sIunlocked[59][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "Specter")) && (gv_sIunlocked[61][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/A8D78280"));
            gv_sIunlocked[61][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "OrbitalSupportSpecialist") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "OrbitalSupportSpecialist2")) && (gv_sIunlocked[63][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/E51941F2"));
            gv_sIunlocked[63][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "HeavyGunner") || (UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "HeavyGunner2")) && (gv_sIunlocked[65][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/BC1CD2B9"));
            gv_sIunlocked[65][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "MechOperator")) && (gv_sIunlocked[67][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/684EE576"));
            gv_sIunlocked[67][auto3D0E56E0_var] = true;
        }

        if (((UnitGetType(gv_playerHeroes[auto3D0E56E0_var]) == "Cyborg20")) && (gv_sIunlocked[71][auto3D0E56E0_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3D0E56E0_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto3D0E56E0_var), c_messageAreaSubtitle, StringExternal("Param/Value/D7218274"));
            gv_sIunlocked[71][auto3D0E56E0_var] = true;
        }

    }
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_UACGameEnd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SmithyDies_Init () {
    gt_SmithyDies = TriggerCreate("gt_SmithyDies_Func");
    TriggerEnable(gt_SmithyDies, false);
    TriggerAddEventUnitDied(gt_SmithyDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UAC Game End
//--------------------------------------------------------------------------------------------------
bool gt_UACGameEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4C78C495_g;
    int auto4C78C495_u;
    unit auto4C78C495_var;
    unitgroup autoED35F8E2_g;
    int autoED35F8E2_u;
    unit autoED35F8E2_var;
    playergroup auto432BA689_g;
    int auto432BA689_var;
    playergroup autoB6F9DB58_g;
    int autoB6F9DB58_var;
    playergroup autoC29DFA0B_g;
    int autoC29DFA0B_var;
    playergroup auto898F0E3C_g;
    int auto898F0E3C_var;
    playergroup auto2BA4E2CB_g;
    int auto2BA4E2CB_var;
    playergroup autoA7775A42_g;
    int autoA7775A42_var;
    playergroup autoEB38D930_g;
    int autoEB38D930_var;
    playergroup auto62EE2DD6_g;
    int auto62EE2DD6_var;
    playergroup auto338FFF77_g;
    int auto338FFF77_var;
    playergroup autoCAA0FD79_g;
    int autoCAA0FD79_var;
    playergroup auto3B7CEDF1_g;
    int auto3B7CEDF1_var;
    playergroup autoB0EF5166_g;
    int autoB0EF5166_var;
    playergroup auto8B90AC58_g;
    int auto8B90AC58_var;
    playergroup autoC681D1E1_g;
    int autoC681D1E1_var;
    playergroup auto91BF4A70_g;
    int auto91BF4A70_var;
    playergroup autoE5A612E3_g;
    int autoE5A612E3_var;
    playergroup autoB77D7E91_g;
    int autoB77D7E91_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_victory = true;
    gv_pauseSpawning = true;
    UnitPauseAll(true);
    SoundPlay(SoundLink("Jukebox_Music05", 0), PlayerGroupAll(), 100.0, 0.0);
    auto4C78C495_g = gv_undeadGroup;
    auto4C78C495_u = UnitGroupCount(auto4C78C495_g, c_unitCountAll);
    for (;; auto4C78C495_u -= 1) {
        auto4C78C495_var = UnitGroupUnitFromEnd(auto4C78C495_g, auto4C78C495_u);
        if (auto4C78C495_var == null) { break; }
        UnitRemove(auto4C78C495_var);
    }
    autoED35F8E2_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoED35F8E2_u = UnitGroupCount(autoED35F8E2_g, c_unitCountAll);
    for (;; autoED35F8E2_u -= 1) {
        autoED35F8E2_var = UnitGroupUnitFromEnd(autoED35F8E2_g, autoED35F8E2_u);
        if (autoED35F8E2_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoED35F8E2_var, true);
    }
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00081", 0), PlayerGroupAll(), 100.0, 0.0);
    auto432BA689_g = gv_players;
    auto432BA689_var = -1;
    while (true) {
        auto432BA689_var = PlayerGroupNextPlayer(auto432BA689_g, auto432BA689_var);
        if (auto432BA689_var < 0) { break; }
        gv_gamesWon[gv_gamemode][auto432BA689_var] = (gv_gamesWon[gv_gamemode][auto432BA689_var] + 1);
    }
    gf_DisplayScoreScreen();
    if ((gv_gamemode >= 1) && (gv_gamemode <= 5) && (GameIsOnline() == true)) {
        autoB6F9DB58_g = gv_players;
        autoB6F9DB58_var = -1;
        while (true) {
            autoB6F9DB58_var = PlayerGroupNextPlayer(autoB6F9DB58_g, autoB6F9DB58_var);
            if (autoB6F9DB58_var < 0) { break; }
            if ((UnitGetType(gv_playerHeroes[autoB6F9DB58_var]) == "CombatMedic") && (gv_sIunlocked[28][autoB6F9DB58_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoB6F9DB58_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoB6F9DB58_var), c_messageAreaSubtitle, StringExternal("Param/Value/64F13030"));
                gv_sIunlocked[28][autoB6F9DB58_var] = true;
            }

        }
    }
    if ((gv_gamemode == 1) && (GameIsOnline() == true)) {
        autoC29DFA0B_g = gv_players;
        autoC29DFA0B_var = -1;
        while (true) {
            autoC29DFA0B_var = PlayerGroupNextPlayer(autoC29DFA0B_g, autoC29DFA0B_var);
            if (autoC29DFA0B_var < 0) { break; }
            if ((gv_gameModeUnlocks[0][1] == true) && (gv_playerdecalunlocked[20][autoC29DFA0B_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoC29DFA0B_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoC29DFA0B_var), c_messageAreaSubtitle, StringExternal("Param/Value/84EA3EFB"));
                gv_playerdecalunlocked[20][autoC29DFA0B_var] = true;
            }

        }
    }
    if ((gv_gamemode == 2) && (GameIsOnline() == true)) {
        auto898F0E3C_g = gv_players;
        auto898F0E3C_var = -1;
        while (true) {
            auto898F0E3C_var = PlayerGroupNextPlayer(auto898F0E3C_g, auto898F0E3C_var);
            if (auto898F0E3C_var < 0) { break; }
            if ((gv_gameModeUnlocks[1][1] == true) && (gv_playercamounlocked[9][auto898F0E3C_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto898F0E3C_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto898F0E3C_var), c_messageAreaSubtitle, StringExternal("Param/Value/777AF454"));
                gv_playercamounlocked[9][auto898F0E3C_var] = true;
            }

        }
    }

    if ((gv_gamemode == 3) && (GameIsOnline() == true)) {
        auto2BA4E2CB_g = gv_players;
        auto2BA4E2CB_var = -1;
        while (true) {
            auto2BA4E2CB_var = PlayerGroupNextPlayer(auto2BA4E2CB_g, auto2BA4E2CB_var);
            if (auto2BA4E2CB_var < 0) { break; }
            if ((gv_gameModeUnlocks[2][1] == true) && (gv_playerdecalunlocked[29][auto2BA4E2CB_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto2BA4E2CB_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto2BA4E2CB_var), c_messageAreaSubtitle, StringExternal("Param/Value/EC17F799"));
                gv_playerdecalunlocked[29][auto2BA4E2CB_var] = true;
            }

        }
    }

    if ((gv_gamemode == 4) && (GameIsOnline() == true)) {
        autoA7775A42_g = gv_players;
        autoA7775A42_var = -1;
        while (true) {
            autoA7775A42_var = PlayerGroupNextPlayer(autoA7775A42_g, autoA7775A42_var);
            if (autoA7775A42_var < 0) { break; }
            if ((gv_gameModeUnlocks[3][1] == true) && (gv_playercamounlocked[10][autoA7775A42_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoA7775A42_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoA7775A42_var), c_messageAreaSubtitle, StringExternal("Param/Value/3F8E863D"));
                gv_playercamounlocked[10][autoA7775A42_var] = true;
            }

        }
    }

    if ((gv_gamemode == 4) && (GameIsOnline() == true)) {
        autoEB38D930_g = gv_players;
        autoEB38D930_var = -1;
        while (true) {
            autoEB38D930_var = PlayerGroupNextPlayer(autoEB38D930_g, autoEB38D930_var);
            if (autoEB38D930_var < 0) { break; }
            if ((gv_mod_tier3 == true) && (gv_mod_rifle == true) && (gv_gameModeUnlocks[3][1] == true) && (gv_playercamounlocked[12][autoEB38D930_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoEB38D930_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoEB38D930_var), c_messageAreaSubtitle, StringExternal("Param/Value/F1DE9D8A"));
                gv_playercamounlocked[12][autoEB38D930_var] = true;
            }

        }
    }

    if ((gv_gamemode == 4) && (GameIsOnline() == true)) {
        auto62EE2DD6_g = gv_players;
        auto62EE2DD6_var = -1;
        while (true) {
            auto62EE2DD6_var = PlayerGroupNextPlayer(auto62EE2DD6_g, auto62EE2DD6_var);
            if (auto62EE2DD6_var < 0) { break; }
            if ((gv_helpDS == true) && (gv_gameModeUnlocks[3][1] == true) && (gv_playerdecalunlocked[42][auto62EE2DD6_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto62EE2DD6_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto62EE2DD6_var), c_messageAreaSubtitle, StringExternal("Param/Value/C1D518A7"));
                gv_playerdecalunlocked[42][auto62EE2DD6_var] = true;
            }

        }
    }

    if ((gv_gamemode == 5) && (GameIsOnline() == true)) {
        auto338FFF77_g = gv_players;
        auto338FFF77_var = -1;
        while (true) {
            auto338FFF77_var = PlayerGroupNextPlayer(auto338FFF77_g, auto338FFF77_var);
            if (auto338FFF77_var < 0) { break; }
            if ((gv_gameModeUnlocks[4][1] == true) && (gv_playercamounlocked[7][auto338FFF77_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto338FFF77_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto338FFF77_var), c_messageAreaSubtitle, StringExternal("Param/Value/DF4030D9"));
                gv_playercamounlocked[7][auto338FFF77_var] = true;
            }

        }
    }

    if ((gv_gamemode == 5) && (GameIsOnline() == true)) {
        autoCAA0FD79_g = gv_players;
        autoCAA0FD79_var = -1;
        while (true) {
            autoCAA0FD79_var = PlayerGroupNextPlayer(autoCAA0FD79_g, autoCAA0FD79_var);
            if (autoCAA0FD79_var < 0) { break; }
            if ((gv_mod_1life == true) && (gv_gameModeUnlocks[4][1] == true) && (gv_playercamounlocked[11][autoCAA0FD79_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoCAA0FD79_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoCAA0FD79_var), c_messageAreaSubtitle, StringExternal("Param/Value/6EB06C63"));
                gv_playercamounlocked[11][autoCAA0FD79_var] = true;
            }

        }
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5) && (GameIsOnline() == true)) {
        auto3B7CEDF1_g = gv_players;
        auto3B7CEDF1_var = -1;
        while (true) {
            auto3B7CEDF1_var = PlayerGroupNextPlayer(auto3B7CEDF1_g, auto3B7CEDF1_var);
            if (auto3B7CEDF1_var < 0) { break; }
            if ((gv_perfectionCompletion == true) && (gv_playercamounlocked[15][auto3B7CEDF1_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto3B7CEDF1_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto3B7CEDF1_var), c_messageAreaSubtitle, StringExternal("Param/Value/476D56A6"));
                gv_playercamounlocked[15][auto3B7CEDF1_var] = true;
            }

        }
    }

    if ((gv_gamemode == 5) && (gf_NumberofPlayers() == 12) && (gv_teamDeathTotal == 0) && (GameIsOnline() == true)) {
        autoB0EF5166_g = gv_players;
        autoB0EF5166_var = -1;
        while (true) {
            autoB0EF5166_var = PlayerGroupNextPlayer(autoB0EF5166_g, autoB0EF5166_var);
            if (autoB0EF5166_var < 0) { break; }
            if ((gv_playercamounlocked[48][autoB0EF5166_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoB0EF5166_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoB0EF5166_var), c_messageAreaSubtitle, StringExternal("Param/Value/DA56A541"));
                gv_playercamounlocked[48][autoB0EF5166_var] = true;
            }

        }
    }

    if ((gv_gamemode == 5) && (GameIsOnline() == true) && (gv_mod_rifle == true)) {
        auto8B90AC58_g = gv_players;
        auto8B90AC58_var = -1;
        while (true) {
            auto8B90AC58_var = PlayerGroupNextPlayer(auto8B90AC58_g, auto8B90AC58_var);
            if (auto8B90AC58_var < 0) { break; }
            if ((gv_gameModeUnlocks[4][1] == true) && (gv_playercamounlocked[5][auto8B90AC58_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto8B90AC58_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto8B90AC58_var), c_messageAreaSubtitle, StringExternal("Param/Value/9EAA8A41"));
                gv_playercamounlocked[5][auto8B90AC58_var] = true;
            }

        }
    }

    if ((gv_gamemode == 11) && (GameIsOnline() == true)) {
        autoC681D1E1_g = gv_players;
        autoC681D1E1_var = -1;
        while (true) {
            autoC681D1E1_var = PlayerGroupNextPlayer(autoC681D1E1_g, autoC681D1E1_var);
            if (autoC681D1E1_var < 0) { break; }
            if (((UnitGetType(gv_playerHeroes[autoC681D1E1_var]) == "GhostHero") || (UnitGetType(gv_playerHeroes[autoC681D1E1_var]) == "GhostHero2")) && (gv_playercamounlocked[51][autoC681D1E1_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoC681D1E1_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoC681D1E1_var), c_messageAreaSubtitle, StringExternal("Param/Value/4967DE9E"));
                gv_playercamounlocked[51][autoC681D1E1_var] = true;
            }

            if (((UnitGetType(gv_playerHeroes[autoC681D1E1_var]) == "Specter") || (UnitGetType(gv_playerHeroes[autoC681D1E1_var]) == "Specter2")) && (gv_playercamounlocked[26][autoC681D1E1_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoC681D1E1_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoC681D1E1_var), c_messageAreaSubtitle, StringExternal("Param/Value/3D210DB3"));
                gv_playercamounlocked[26][autoC681D1E1_var] = true;
            }

            if (((UnitGetType(gv_playerHeroes[autoC681D1E1_var]) == "CombatMedic") || (UnitGetType(gv_playerHeroes[autoC681D1E1_var]) == "CombatMedic2")) && (gv_playerdecalunlocked[23][autoC681D1E1_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoC681D1E1_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoC681D1E1_var), c_messageAreaSubtitle, StringExternal("Param/Value/B959E839"));
                gv_playerdecalunlocked[23][autoC681D1E1_var] = true;
            }

            if ((gv_playercamounlocked[23][autoC681D1E1_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoC681D1E1_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoC681D1E1_var), c_messageAreaSubtitle, StringExternal("Param/Value/786C04A0"));
                gv_playercamounlocked[23][autoC681D1E1_var] = true;
            }

        }
    }
    gv_gameWon = true;
    if ((GameIsOnline() == true)) {
        auto91BF4A70_g = gv_players;
        auto91BF4A70_var = -1;
        while (true) {
            auto91BF4A70_var = PlayerGroupNextPlayer(auto91BF4A70_g, auto91BF4A70_var);
            if (auto91BF4A70_var < 0) { break; }
            gf_UnlockAchievement(auto91BF4A70_var);
        }
    }

    autoE5A612E3_g = gv_players;
    autoE5A612E3_var = -1;
    while (true) {
        autoE5A612E3_var = PlayerGroupNextPlayer(autoE5A612E3_g, autoE5A612E3_var);
        if (autoE5A612E3_var < 0) { break; }
        UIDisplayMessage(PlayerGroupSingle(autoE5A612E3_var), c_messageAreaError, StringExternal("Param/Value/4EBDF968"));
        gf_SavePlayerProgress(autoE5A612E3_var);
    }
    gv_gameOver = true;
    Wait(180.0, c_timeGame);
    autoB77D7E91_g = gv_players;
    autoB77D7E91_var = -1;
    while (true) {
        autoB77D7E91_var = PlayerGroupNextPlayer(autoB77D7E91_g, autoB77D7E91_var);
        if (autoB77D7E91_var < 0) { break; }
        GameOver(autoB77D7E91_var, c_gameOverVictory, false, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UACGameEnd_Init () {
    gt_UACGameEnd = TriggerCreate("gt_UACGameEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Mode
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBD483CC4_g;
    int autoBD483CC4_u;
    unit autoBD483CC4_var;
    playergroup autoA24ED699_g;
    int autoA24ED699_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RandomFog, true);
    autoBD483CC4_g = UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBD483CC4_u = UnitGroupCount(autoBD483CC4_g, c_unitCountAll);
    for (;; autoBD483CC4_u -= 1) {
        autoBD483CC4_var = UnitGroupUnitFromEnd(autoBD483CC4_g, autoBD483CC4_u);
        if (autoBD483CC4_var == null) { break; }
        gf_FillBunker(autoBD483CC4_var);
    }
    autoA24ED699_g = gv_players;
    autoA24ED699_var = -1;
    while (true) {
        autoA24ED699_var = PlayerGroupNextPlayer(autoA24ED699_g, autoA24ED699_var);
        if (autoA24ED699_var < 0) { break; }
        libNtve_gf_SetAlliance(autoA24ED699_var, 15, libNtve_ge_AllianceSetting_Enemy);
    }
    TimerWindowCreate(gv_missiontimer, StringExternal("Param/Value/3AA938CE"), false, false);
    gv_missiontimerwindow = TimerWindowLastCreated();
    UnitIssueOrder(UnitFromId(1238), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1239), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1240), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1241), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1928584749), Order(AbilityCommand("MetalGateStraightVerticalLFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(511), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(425), Order(AbilityCommand("SpacePrisonDoorsThinLeftLowered", 0)), c_orderQueueReplace);
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    gf_StartSpawnLoop(1, gv_loopType);
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/5C694F2C"));
    Wait(4.5, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/8CB49B51"), StringExternal("Param/Value/BE5EF25F"), c_objectiveStateActive, true);
    gv_mainObj = ObjectiveLastCreated();
    TriggerEnable(gt_SurvivalIncreasedT2Spawning, true);
    TriggerEnable(gt_SurvivalModeTimeout, true);
    TriggerEnable(gt_Survival5Min, true);
    TriggerEnable(gt_Survival10Min, true);
    TriggerEnable(gt_Survival15Min, true);
    TriggerEnable(gt_Survival20Min, true);
    TriggerEnable(gt_Survival25Min, true);
    TriggerEnable(gt_Survival30Min, true);
    TriggerEnable(gt_Survival35Min, true);
    TriggerEnable(gt_Survival40Min, true);
    TriggerEnable(gt_AirDrop40Min, true);
    TriggerEnable(gt_Survival45Min, true);
    Wait(120.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalMode_Init () {
    gt_SurvivalMode = TriggerCreate("gt_SurvivalMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Periodic XP
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalPeriodicXP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(15, StringExternal("Param/Value/39EFF301"), -2, false);
    gf_SpawnUndead((gv_spawnCount * 2), "Zombie", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Pooch", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalPeriodicXP_Init () {
    gt_SurvivalPeriodicXP = TriggerCreate("gt_SurvivalPeriodicXP_Func");
    TriggerEnable(gt_SurvivalPeriodicXP, false);
    TriggerAddEventTimePeriodic(gt_SurvivalPeriodicXP, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Periodic XP Enhanced
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalPeriodicXPEnhanced_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(90, StringExternal("Param/Value/BA7D9279"), 0, false);
    gf_SpawnUndead((gv_spawnCount * 2), "Zombie", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Pooch", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalPeriodicXPEnhanced_Init () {
    gt_SurvivalPeriodicXPEnhanced = TriggerCreate("gt_SurvivalPeriodicXPEnhanced_Func");
    TriggerEnable(gt_SurvivalPeriodicXPEnhanced, false);
    TriggerAddEventTimePeriodic(gt_SurvivalPeriodicXPEnhanced, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 5 Min
//--------------------------------------------------------------------------------------------------
bool gt_Survival5Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SurvivalPeriodicXP, true);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Deceiver", 1);
    Wait(45.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Deceiver", 1);
    if ((gv_averageXP >= 21000)) {
        gf_SpawnUndead(1, "Gourmand", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival5Min_Init () {
    gt_Survival5Min = TriggerCreate("gt_Survival5Min_Func");
    TriggerEnable(gt_Survival5Min, false);
    TriggerAddEventTimeElapsed(gt_Survival5Min, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 10 Min
//--------------------------------------------------------------------------------------------------
bool gt_Survival10Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("Event_Exp1_SnowBeastRoar", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(1, "Ares", 1);
    gf_SpawnUndead(2, "Hunter", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival10Min_Init () {
    gt_Survival10Min = TriggerCreate("gt_Survival10Min_Func");
    TriggerEnable(gt_Survival10Min, false);
    TriggerAddEventTimeElapsed(gt_Survival10Min, 600.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 15 Min
//--------------------------------------------------------------------------------------------------
bool gt_Survival15Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(20, StringExternal("Param/Value/B25B383F"), -1, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gf_StartSpawnLoop(2, gv_loopType);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(1, "Minerva", 1);
    if ((gv_averageXP >= 12000)) {
        gf_SpawnUndead(1, "Gourmand", 1);
    }
    if ((gv_averageXP >= 33000)) {
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(2, "ZombieYeti", 9);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival15Min_Init () {
    gt_Survival15Min = TriggerCreate("gt_Survival15Min_Func");
    TriggerEnable(gt_Survival15Min, false);
    TriggerAddEventTimeElapsed(gt_Survival15Min, 900.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 20 Min
//--------------------------------------------------------------------------------------------------
bool gt_Survival20Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(30, StringExternal("Param/Value/C961C71F"), -1, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gf_Reinforcements();
    SoundPlay(SoundLink("TTosh03BMusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(4, "Bruchus", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(3, "Raisuli", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(1, "Gargantuan", 1);
    }
    if ((gv_averageXP >= 70000)) {
        gf_SpawnUndead(1, "Dilophosaur", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival20Min_Init () {
    gt_Survival20Min = TriggerCreate("gt_Survival20Min_Func");
    TriggerEnable(gt_Survival20Min, false);
    TriggerAddEventTimeElapsed(gt_Survival20Min, 1200.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 25 Min
//--------------------------------------------------------------------------------------------------
bool gt_Survival25Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(40, StringExternal("Param/Value/B53FFB59"), -1, false);
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/35DB90C3"), 0, true);
    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ArchVile", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(6, "Glutton", 1);
    gf_SpawnUndead(6, "Glutton", 1);
    gf_SpawnUndead(6, "Glutton", 1);
    gf_SpawnUndead(2, "Apiary", 1);
    if ((gv_averageXP >= 25000)) {
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
    }
    if ((gv_averageXP >= 30000) && (RandomInt(0, 1) == 1)) {
        gf_SpawnUndead(1, "Minerva", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
    }
    else {
        gf_SpawnUndead(1, "Ares", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival25Min_Init () {
    gt_Survival25Min = TriggerCreate("gt_Survival25Min_Func");
    TriggerEnable(gt_Survival25Min, false);
    TriggerAddEventTimeElapsed(gt_Survival25Min, 1500.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 30 Min
//--------------------------------------------------------------------------------------------------
bool gt_Survival30Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(50, StringExternal("Param/Value/DE96452D"), -1, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gf_Reinforcements();
    TriggerEnable(gt_WeaponsItems2, true);
    TriggerEnable(gt_SurvivalPeriodicXP, false);
    TriggerEnable(gt_SurvivalPeriodicXPEnhanced, true);
    SoundPlay(SoundLink("THorner04MusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Arachnathid", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(3, "Gourmand", 1);
    gf_SpawnUndead(3, "Weaver", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndead(1, "ThresherMaw", 1);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }
    if ((gv_averageXP >= 50000) && (RandomInt(0, 1) == 1)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(3, "Raisuli", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
    }
    else {
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival30Min_Init () {
    gt_Survival30Min = TriggerCreate("gt_Survival30Min_Func");
    TriggerEnable(gt_Survival30Min, false);
    TriggerAddEventTimeElapsed(gt_Survival30Min, 1800.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 35 Min
//--------------------------------------------------------------------------------------------------
bool gt_Survival35Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(60, StringExternal("Param/Value/235D5A31"), -1, false);
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/71F646A6"), 0, true);
    TriggerEnable(TriggerGetCurrent(), false);
    gf_StartSpawnLoop(3, gv_loopType);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Horror", 1);
    gf_SpawnUndead(1, "AcidVore", 1);
    gf_SpawnUndead(1, "AcidVore", 1);
    gf_SpawnUndead(1, "AcidVore", 1);
    gf_SpawnUndead(6, "Glutton", 1);
    gf_SpawnUndead(6, "Glutton", 1);
    gf_SpawnUndead(6, "Glutton", 1);
    gf_SpawnUndead(6, "Glutton", 1);
    gf_SpawnUndead(2, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(3, "Weaver", 1);
    gf_SpawnUndead(3, "Weaver", 1);
    if ((gv_averageXP >= 50000) && (RandomInt(0, 1) == 1)) {
        gf_SpawnUndead(1, "Darreus", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
    }
    else {
        gf_SpawnUndead(1, "Metasis", 1);
        gf_SpawnUndead(1, "Grotesque", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival35Min_Init () {
    gt_Survival35Min = TriggerCreate("gt_Survival35Min_Func");
    TriggerEnable(gt_Survival35Min, false);
    TriggerAddEventTimeElapsed(gt_Survival35Min, 2100.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 40 Min
//--------------------------------------------------------------------------------------------------
bool gt_Survival40Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(70, StringExternal("Param/Value/E56B5D85"), -1, false);
    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("THanson02MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Dilophosaur", 2);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(1, "Dilophosaur", 2);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(6, "Cursed", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(1, "Dilophosaur", 2);
    gf_SpawnUndead(3, "Weaver", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }
    if ((gv_averageXP >= 65000) && (RandomInt(0, 1) == 1)) {
        gf_SpawnUndead(1, "Arachnathid", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(3, "Baron", 1);
    }
    else {
        gf_SpawnUndead(3, "Lacerti", 1);
        gf_SpawnUndead(1, "Ares", 1);
        gf_SpawnUndead(1, "Apiary", 1);
    }
    Wait(60.0, c_timeGame);
    gf_SpawnUndead(1, "Cacumen", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival40Min_Init () {
    gt_Survival40Min = TriggerCreate("gt_Survival40Min_Func");
    TriggerEnable(gt_Survival40Min, false);
    TriggerAddEventTimeElapsed(gt_Survival40Min, 2400.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Drop 40 Min
//--------------------------------------------------------------------------------------------------
bool gt_AirDrop40Min_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_airDrop40Min;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_sensorLZ = gv_lZs[RandomInt(1, 5)];
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("HornerPortrait3D"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", SoundLink("TValerian01Horner00015", -1), StringExternal("Param/Value/50F3E179"), StringExternal("Param/Value/DACAD24D"), 4.0, c_transmissionDurationAdd, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_sensorLZ), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E055D465"));
    TriggerEnable(gt_AirDropPing2, true);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AimAssistant", 0, 0, RegionRandomPoint(gv_sensorLZ));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmmoCase", 0, 0, RegionRandomPoint(gv_sensorLZ));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmmoCase", 0, 0, RegionRandomPoint(gv_sensorLZ));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KineticIntegrator", 0, 0, RegionRandomPoint(gv_sensorLZ));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FirstAidKit", 0, 0, RegionRandomPoint(gv_sensorLZ));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "QuikClot", 0, 0, RegionRandomPoint(gv_sensorLZ));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "OPA", 0, 0, RegionRandomPoint(gv_sensorLZ));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StrafeDesignator", 0, 0, RegionRandomPoint(gv_sensorLZ));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MRL", 0, 0, RegionRandomPoint(gv_sensorLZ));
    if (((gv_rifleman == true) || (gv_platoonLeader == true) || (gv_calvaryScout == true) || (gv_fireSupportSpecialist == true) || (gv_javelinGunner == true) || (gv_combatMedic == true))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HK42", 0, 0, RegionRandomPoint(gv_sensorLZ));
    }

    if (((gv_cyborgMos == true) || (gv_automaticRifleman == true))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "M41SAW", 0, 0, RegionRandomPoint(gv_sensorLZ));
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ExplosiveCharge", 0, 0, RegionRandomPoint(gv_sensorLZ));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ExplosiveCharge", 0, 0, RegionRandomPoint(gv_sensorLZ));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FlareGun", 0, 0, RegionRandomPoint(gv_sensorLZ));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirDrop40Min_Init () {
    gt_AirDrop40Min = TriggerCreate("gt_AirDrop40Min_Func");
    TriggerEnable(gt_AirDrop40Min, false);
    TriggerAddEventTimeElapsed(gt_AirDrop40Min, 2400.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Drop Ping 2
//--------------------------------------------------------------------------------------------------
bool gt_AirDropPing2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroyAll();
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AirDropPing2_Init () {
    gt_AirDropPing2 = TriggerCreate("gt_AirDropPing2_Func");
    TriggerEnable(gt_AirDropPing2, false);
    TriggerAddEventUnitRegion(gt_AirDropPing2, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_AirDropPing2, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_AirDropPing2, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_AirDropPing2, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_AirDropPing2, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 45 Min 
//--------------------------------------------------------------------------------------------------
bool gt_Survival45Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(80, StringExternal("Param/Value/2A6C3427"), -1, false);
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/6E41F8B4"), 0, true);
    TriggerEnable(TriggerGetCurrent(), false);
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "LostViking_MusicBossFightLoop", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerEnable(gt_SurvivalHellSpawning, true);
    gf_SpawnUndead(3, "ZombieWraith", 1);
    gf_SpawnUndead(3, "ZombieWraith", 1);
    gf_SpawnUndead(2, "ZombieWraith", 1);
    gf_SpawnUndead(2, "ZombieWraith", 1);
    gf_SpawnUndead(2, "ZombieWraith", 1);
    if ((gv_averageXP >= 50000) && (RandomInt(0, 1) == 1)) {
        gf_SpawnUndead(1, "ThresherMaw", 1);
        gf_SpawnUndead(1, "Livid", 1);
        gf_SpawnUndead(1, "Slivan", 1);
    }
    else {
        gf_SpawnUndead(1, "Darreus", 1);
        gf_SpawnUndead(1, "Darreus", 1);
        gf_SpawnUndead(1, "Slivan", 1);
    }
    Wait(60.0, c_timeGame);
    gf_SpawnUndead(1, "KingDarreus", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival45Min_Init () {
    gt_Survival45Min = TriggerCreate("gt_Survival45Min_Func");
    TriggerEnable(gt_Survival45Min, false);
    TriggerAddEventTimeElapsed(gt_Survival45Min, 2700.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Hell Spawning
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalHellSpawning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_infestationLevel >= 20)) {
        gf_SpawnUndead(1, "Gargantuan", 11);
        gf_SpawnUndead(1, "Gourmand", 5);
        gf_SpawnUndead(1, "Raisuli", 6);
        gf_SpawnUndead(3, "Hunter", 10);
        gf_SpawnUndead(2, "ZombieYeti", 12);
    }
    if ((gv_infestationLevel >= 35)) {
        gf_SpawnUndead(1, "Minerva", 20);
        gf_SpawnUndead(1, "Ares", 20);
        gf_SpawnUndead(1, "Metasis", 16);
        gf_SpawnUndead(1, "Lacerti", 7);
        gf_SpawnUndead(1, "Immussilus", 8);
    }
    if ((gv_infestationLevel >= 50)) {
        gf_SpawnUndead(1, "ThresherMaw", 50);
        gf_SpawnUndead(1, "Livid", 21);
        gf_SpawnUndead(1, "Dilophosaur", 13);
        gf_SpawnUndead(1, "Grotesque", 17);
        gf_SpawnUndead(1, "Darreus", 25);
        gf_SpawnUndead(1, "Arachnathid", 40);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalHellSpawning_Init () {
    gt_SurvivalHellSpawning = TriggerCreate("gt_SurvivalHellSpawning_Func");
    TriggerEnable(gt_SurvivalHellSpawning, false);
    TriggerAddEventTimePeriodic(gt_SurvivalHellSpawning, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Mode Timeout
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalModeTimeout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE7B4C0BB_g;
    int autoE7B4C0BB_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_medevacregion = gv_lZs[RandomInt(1, 5)];
    UnitCreate(1, "ColonistShip", 0, 13, PointWithOffset(RegionGetCenter(gv_medevacregion), 0.0, 0.0), libNtve_gf_RandomAngle());
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_mEDEVAC = UnitLastCreated();
    autoE7B4C0BB_g = gv_players;
    autoE7B4C0BB_var = -1;
    while (true) {
        autoE7B4C0BB_var = PlayerGroupNextPlayer(autoE7B4C0BB_g, autoE7B4C0BB_var);
        if (autoE7B4C0BB_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(gv_mEDEVAC, true, autoE7B4C0BB_var);
    }
    libNtve_gf_MakeUnitInvulnerable(gv_mEDEVAC, true);
    SoundPlay(SoundLink("TRaynor01MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(gv_missiontimer, 120.0, false, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_medevacregion), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 120.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/ADE0C6FC"));
    TriggerEnable(gt_SurvivalEnd, true);
    TriggerEnable(gt_SurvivalEvacPlayerEnter, true);
    gf_MissionText(StringExternal("Param/Value/A4EA5619"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/EEADA986"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalModeTimeout_Init () {
    gt_SurvivalModeTimeout = TriggerCreate("gt_SurvivalModeTimeout_Func");
    TriggerEnable(gt_SurvivalModeTimeout, false);
    TriggerAddEventTimeElapsed(gt_SurvivalModeTimeout, 3000.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Evac Player Enter
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalEvacPlayerEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allextracted;

    // Automatic Variable Declarations
    unitgroup auto75D26580_g;
    int auto75D26580_u;
    unit auto75D26580_var;

    // Variable Initialization
    lv_allextracted = true;

    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_medevacregion))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_survivalCompleted = true;
    gv_extractionCount += 1;
    libNtve_gf_PauseUnit(EventUnit(), true);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    auto75D26580_g = gv_heroesGroup;
    auto75D26580_u = UnitGroupCount(auto75D26580_g, c_unitCountAll);
    for (;; auto75D26580_u -= 1) {
        auto75D26580_var = UnitGroupUnitFromEnd(auto75D26580_g, auto75D26580_u);
        if (auto75D26580_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto75D26580_var) == false) && (UnitIsAlive(auto75D26580_var) == true)) {
            lv_allextracted = false;
        }
    }
    if ((lv_allextracted == true)) {
        if ((gv_extractionCount == 12)) {
            gv__12ManExtraction = true;
        }
        TriggerExecute(gt_SurvivalEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalEvacPlayerEnter_Init () {
    gt_SurvivalEvacPlayerEnter = TriggerCreate("gt_SurvivalEvacPlayerEnter_Func");
    TriggerEnable(gt_SurvivalEvacPlayerEnter, false);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(13), false);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(15), false);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(14), false);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(16), false);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(6), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival End
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB476C8EC_g;
    int autoB476C8EC_var;
    unitgroup autoF1B36DC8_g;
    int autoF1B36DC8_u;
    unit autoF1B36DC8_var;
    playergroup auto6071F27B_g;
    int auto6071F27B_var;
    playergroup autoA8519FA1_g;
    int autoA8519FA1_var;
    playergroup autoD064E5B8_g;
    int autoD064E5B8_var;
    playergroup auto7E6EBCF5_g;
    int auto7E6EBCF5_var;
    playergroup auto30B954E4_g;
    int auto30B954E4_var;
    playergroup auto95690635_g;
    int auto95690635_var;
    unitgroup autoA3130189_g;
    int autoA3130189_u;
    unit autoA3130189_var;
    playergroup auto8B14C393_g;
    int auto8B14C393_var;
    playergroup auto8E59F3CB_g;
    int auto8E59F3CB_var;
    playergroup autoA49464A2_g;
    int autoA49464A2_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_victory = true;
    TriggerEnable(gt_SurvivalEvacPlayerEnter, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroyAll();
    SoundPlay(SoundLink("TRaynor01MusicOutro", -1), PlayerGroupAll(), 100.0, 0.0);
    if (gv_HyperPulseT1Acc)
    {
        gf_SucceedMission(600, StringToText("HyperPulse T1 PASS"), 0, true);
        SoundPlay(SoundLink("TESTPASS", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (gv_HyperPulseAcc)
    {
        gf_SucceedMission(200, StringToText("HyperPulse T2|T3 PASS"), 0, true);
        SoundPlay(SoundLink("TESTPASS", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    if ((gv_startingplayers == 1)) {
        autoF1B36DC8_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF1B36DC8_u = UnitGroupCount(autoF1B36DC8_g, c_unitCountAll);
        for (;; autoF1B36DC8_u -= 1) {
            autoF1B36DC8_var = UnitGroupUnitFromEnd(autoF1B36DC8_g, autoF1B36DC8_u);
            if (autoF1B36DC8_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(autoF1B36DC8_var, true);
        }
        UnitRemove(gv_mEDEVAC);
    }
    else {
        autoB476C8EC_g = gv_players;
        autoB476C8EC_var = -1;
        while (true) {
            autoB476C8EC_var = PlayerGroupNextPlayer(autoB476C8EC_g, autoB476C8EC_var);
            if (autoB476C8EC_var < 0) { break; }
            libNtve_gf_MakeUnitInvulnerable(gv_playerHeroes[autoB476C8EC_var], true);
            UnitSetState(gv_playerHeroes[autoB476C8EC_var], c_unitStateTargetable, false);
            CameraPan(autoB476C8EC_var, UnitGetPosition(gv_mEDEVAC), 0.0, -1, 10, false);
            CameraLookAtUnit(autoB476C8EC_var, gv_mEDEVAC);
            CameraLockInput(autoB476C8EC_var, true);
        }
        UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(7.0, c_timeGame);
        UnitRemove(gv_mEDEVAC);
    }
    UnitPauseAll(true);
    gv_pauseSpawning = true;
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00081", 0), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(1.0, c_timeGame);
    auto6071F27B_g = gv_players;
    auto6071F27B_var = -1;
    while (true) {
        auto6071F27B_var = PlayerGroupNextPlayer(auto6071F27B_g, auto6071F27B_var);
        if (auto6071F27B_var < 0) { break; }
        gv_gamesWon[gv_gamemode][auto6071F27B_var] = (gv_gamesWon[gv_gamemode][auto6071F27B_var] + 1);
    }
    gf_DisplayScoreScreen();
    if ((gv_mod_rifle == true) && (GameIsOnline() == true)) {
        autoA8519FA1_g = gv_players;
        autoA8519FA1_var = -1;
        while (true) {
            autoA8519FA1_var = PlayerGroupNextPlayer(autoA8519FA1_g, autoA8519FA1_var);
            if (autoA8519FA1_var < 0) { break; }
            if ((gv_playercamounlocked[8][autoA8519FA1_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoA8519FA1_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoA8519FA1_var), c_messageAreaSubtitle, StringExternal("Param/Value/3E557141"));
                gv_playercamounlocked[8][autoA8519FA1_var] = true;
            }

        }
    }

    autoD064E5B8_g = gv_players;
    autoD064E5B8_var = -1;
    while (true) {
        autoD064E5B8_var = PlayerGroupNextPlayer(autoD064E5B8_g, autoD064E5B8_var);
        if (autoD064E5B8_var < 0) { break; }
        if ((gv_playerdecalunlocked[2][autoD064E5B8_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoD064E5B8_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(autoD064E5B8_var), c_messageAreaSubtitle, StringExternal("Param/Value/1AA27847"));
            gv_playerdecalunlocked[2][autoD064E5B8_var] = true;
        }

    }
    if ((gv_startingplayers <= 4) && (gv_startingplayers >= 2) && (gv_mod_tier3 == false) && (GameIsOnline() == true)) {
        auto7E6EBCF5_g = gv_players;
        auto7E6EBCF5_var = -1;
        while (true) {
            auto7E6EBCF5_var = PlayerGroupNextPlayer(auto7E6EBCF5_g, auto7E6EBCF5_var);
            if (auto7E6EBCF5_var < 0) { break; }
            if ((gv_playercamounlocked[14][auto7E6EBCF5_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto7E6EBCF5_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto7E6EBCF5_var), c_messageAreaSubtitle, StringExternal("Param/Value/8FDE4D38"));
                gv_playercamounlocked[14][auto7E6EBCF5_var] = true;
            }

        }
    }

    if ((gv_startingplayers == 12) && (gv_mod_tier1 == true) && (gv_mod_1life == true) && (GameIsOnline() == true)) {
        auto30B954E4_g = gv_players;
        auto30B954E4_var = -1;
        while (true) {
            auto30B954E4_var = PlayerGroupNextPlayer(auto30B954E4_g, auto30B954E4_var);
            if (auto30B954E4_var < 0) { break; }
            if ((gv_playercamounlocked[17][auto30B954E4_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto30B954E4_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto30B954E4_var), c_messageAreaSubtitle, StringExternal("Param/Value/939F61F4"));
                gv_playercamounlocked[17][auto30B954E4_var] = true;
            }

        }
    }

    if ((gv_startingplayers == 1) && (gv_mod_tier1 == true) && (GameIsOnline() == true)) {
        auto95690635_g = gv_players;
        auto95690635_var = -1;
        while (true) {
            auto95690635_var = PlayerGroupNextPlayer(auto95690635_g, auto95690635_var);
            if (auto95690635_var < 0) { break; }
            if ((gv_playerdecalunlocked[4][auto95690635_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto95690635_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto95690635_var), c_messageAreaSubtitle, StringExternal("Param/Value/4371E5E8"));
                gv_playerdecalunlocked[4][auto95690635_var] = true;
            }

        }
    }

    if ((gv_survivalCompleted == true)) {
        gf_SucceedMission(600, StringExternal("Param/Value/2099FFD8"), 0, false);
    }
    else {
        gf_SucceedMission(250, StringExternal("Param/Value/1E927CFE"), 0, false);
    }
    if ((gv_infestationLevel <= 5)) {
        gf_SucceedMission(300, StringExternal("Param/Value/92F12D5A"), 0, false);
    }
    else if ((gv_infestationLevel <= 15)) {
        gf_SucceedMission(200, StringExternal("Param/Value/2B3863BF"), 0, false);
    }
    else if ((gv_infestationLevel <= 25)) {
        gf_SucceedMission(100, StringExternal("Param/Value/890716BD"), 0, false);
    }
    else if ((gv_infestationLevel >= 40) && (gv_infestationLevel <= 59)) {
        gf_SucceedMission(-50, StringExternal("Param/Value/BC4B6CDB"), 0, false);
    }
    else if ((gv_infestationLevel >= 60) && (gv_infestationLevel <= 99)) {
        gf_SucceedMission(-100, StringExternal("Param/Value/33894633"), 0, false);
    }
    else if ((gv_infestationLevel >= 100)) {
        gf_SucceedMission(-200, StringExternal("Param/Value/FF5CABFC"), 0, false);
    }
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/43E95154"), 0, true);
    gv_gameWon = true;
    autoA3130189_g = gv_undeadGroup;
    autoA3130189_u = UnitGroupCount(autoA3130189_g, c_unitCountAll);
    for (;; autoA3130189_u -= 1) {
        autoA3130189_var = UnitGroupUnitFromEnd(autoA3130189_g, autoA3130189_u);
        if (autoA3130189_var == null) { break; }
        UnitRemove(autoA3130189_var);
    }
    if ((GameIsOnline() == true)) {
        auto8B14C393_g = gv_players;
        auto8B14C393_var = -1;
        while (true) {
            auto8B14C393_var = PlayerGroupNextPlayer(auto8B14C393_g, auto8B14C393_var);
            if (auto8B14C393_var < 0) { break; }
            gf_UnlockAchievement(auto8B14C393_var);
        }
    }

    auto8E59F3CB_g = gv_players;
    auto8E59F3CB_var = -1;
    while (true) {
        auto8E59F3CB_var = PlayerGroupNextPlayer(auto8E59F3CB_g, auto8E59F3CB_var);
        if (auto8E59F3CB_var < 0) { break; }
        UIDisplayMessage(PlayerGroupSingle(auto8E59F3CB_var), c_messageAreaError, StringExternal("Param/Value/0EAE457C"));
        gf_SavePlayerProgress(auto8E59F3CB_var);
    }
    gv_gameOver = true;
    Wait(180.0, c_timeGame);
    autoA49464A2_g = gv_players;
    autoA49464A2_var = -1;
    while (true) {
        autoA49464A2_var = PlayerGroupNextPlayer(autoA49464A2_g, autoA49464A2_var);
        if (autoA49464A2_var < 0) { break; }
        GameOver(autoA49464A2_var, c_gameOverVictory, true, true);
        libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
        SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "Music_EndCreditsA1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalEnd_Init () {
    gt_SurvivalEnd = TriggerCreate("gt_SurvivalEnd_Func");
    TriggerEnable(gt_SurvivalEnd, false);
    TriggerAddEventTimer(gt_SurvivalEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Increased T2 Spawning
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalIncreasedT2Spawning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_pauseSpawning == false))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_startingplayers <= 4)) {
        gf_SpawnUndead(3, "Charger", 2);
        gf_SpawnUndead(5, "Charger", 2);
        gf_SpawnUndead(4, "Glutton", 1);
        gf_SpawnUndead(2, "Bruchus", 2);
        gf_SpawnUndead(2, "ZombieCarrier", 2);
        gf_SpawnUndead(3, "ZombieCarrier", 3);
    }

    if ((gv_startingplayers > 4) && (gv_startingplayers <= 8)) {
        gf_SpawnUndead(4, "Charger", 2);
        gf_SpawnUndead(6, "Charger", 2);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(4, "Glutton", 2);
        gf_SpawnUndead(3, "Bruchus", 2);
        gf_SpawnUndead(1, "ZombieCarrier", 1);
        gf_SpawnUndead(2, "ZombieCarrier", 2);
        gf_SpawnUndead(3, "ZombieCarrier", 3);
    }

    if ((gv_startingplayers > 8)) {
        gf_SpawnUndead(4, "Charger", 1);
        gf_SpawnUndead(7, "Charger", 2);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 2);
        gf_SpawnUndead(3, "Bruchus", 2);
        gf_SpawnUndead(4, "Bruchus", 5);
        gf_SpawnUndead(2, "ZombieCarrier", 1);
        gf_SpawnUndead(3, "ZombieCarrier", 2);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalIncreasedT2Spawning_Init () {
    gt_SurvivalIncreasedT2Spawning = TriggerCreate("gt_SurvivalIncreasedT2Spawning_Func");
    TriggerEnable(gt_SurvivalIncreasedT2Spawning, false);
    TriggerAddEventTimeElapsed(gt_SurvivalIncreasedT2Spawning, 90.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_SurvivalIncreasedT2Spawning, 150.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 10-20 Random Timer
//--------------------------------------------------------------------------------------------------
bool gt__1020RandomTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((RandomInt(1, 2) == 1)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__1020RandomTimer_Init () {
    gt__1020RandomTimer = TriggerCreate("gt__1020RandomTimer_Func");
    TriggerEnable(gt__1020RandomTimer, false);
    TriggerAddEventTimeElapsed(gt__1020RandomTimer, RandomInt(600, 1200), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cockblock
//--------------------------------------------------------------------------------------------------
bool gt_Cockblock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(305)), false);
    UnitKill(EventUnit());
    CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(305)), 0.0, -1, 10.0, false);
    if ((gv_allowmission == true)) {
        gv_allowmission = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cockblock_Init () {
    gt_Cockblock = TriggerCreate("gt_Cockblock_Func");
    TriggerEnable(gt_Cockblock, false);
    TriggerAddEventUnitRegion(gt_Cockblock, null, RegionFromId(110), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival Mode
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvivalMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    unitgroup auto5C07B3E2_g;
    int auto5C07B3E2_u;
    unit auto5C07B3E2_var;
    playergroup auto7AFB30CA_g;
    int auto7AFB30CA_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RandomFog, true);
    TriggerEnable(gt_Cockblock, true);
    gv_allowISR = true;
    gv_silos[1] = RegionFromId(220);
    gv_silos[2] = RegionFromId(221);
    gv_silos[3] = RegionFromId(222);
    gv_silos[4] = RegionFromId(223);
    gv_silos[5] = RegionFromId(224);
    gv_f15eastRegions[1] = RegionFromId(87);
    gv_f15eastRegions[2] = RegionFromId(88);
    gv_f15eastRegions[3] = RegionFromId(91);
    gv_f15eastRegions[4] = RegionFromId(93);
    gv_f15eastRegions[5] = RegionFromId(94);
    gv_f15eastRegions[6] = RegionFromId(111);
    gv_f15eastRegions[7] = RegionFromId(113);
    gv_f15eastRegions[8] = RegionFromId(122);
    gv_f15eastRegions[9] = RegionFromId(127);
    gv_f15eastRegions[10] = RegionFromId(129);
    gv_f15westRegions[1] = RegionFromId(95);
    gv_f15westRegions[2] = RegionFromId(96);
    gv_f15westRegions[3] = RegionFromId(97);
    gv_f15westRegions[4] = RegionFromId(98);
    gv_f15westRegions[5] = RegionFromId(101);
    gv_f15westRegions[6] = RegionFromId(102);
    gv_f15westRegions[7] = RegionFromId(103);
    gv_f15westRegions[8] = RegionFromId(108);
    gv_f15westRegions[9] = RegionFromId(109);
    auto5C07B3E2_g = UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5C07B3E2_u = UnitGroupCount(auto5C07B3E2_g, c_unitCountAll);
    for (;; auto5C07B3E2_u -= 1) {
        auto5C07B3E2_var = UnitGroupUnitFromEnd(auto5C07B3E2_g, auto5C07B3E2_u);
        if (auto5C07B3E2_var == null) { break; }
        UnitCargoCreate(auto5C07B3E2_var, "InfantryRifleman", 1);
        UnitBehaviorAdd(UnitCargoLastCreated(), "AntiGravity", UnitCargoLastCreated(), 1);
        UnitCargoCreate(auto5C07B3E2_var, "InfantryRifleman", 1);
        UnitBehaviorAdd(UnitCargoLastCreated(), "AntiGravity", UnitCargoLastCreated(), 1);
        UnitCargoCreate(auto5C07B3E2_var, "InfantryRifleman", 1);
        UnitBehaviorAdd(UnitCargoLastCreated(), "AntiGravity", UnitCargoLastCreated(), 1);
        UnitCargoCreate(auto5C07B3E2_var, "InfantryRifleman", 1);
        UnitBehaviorAdd(UnitCargoLastCreated(), "AntiGravity", UnitCargoLastCreated(), 1);
    }
    TriggerEnable(gt_SquadContact, true);
    TriggerEnable(gt_SquadLoop, true);
    TriggerEnable(gt_PMCAlertExpire, true);
    TriggerEnable(gt_RemovePMCItem, true);
    TriggerEnable(gt_PMCIdle, true);
    TriggerEnable(gt_ISRTowerLoop, true);
    libNtve_gf_SetAlliance(13, 15, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    auto7AFB30CA_g = gv_players;
    auto7AFB30CA_var = -1;
    while (true) {
        auto7AFB30CA_var = PlayerGroupNextPlayer(auto7AFB30CA_g, auto7AFB30CA_var);
        if (auto7AFB30CA_var < 0) { break; }
        libNtve_gf_SetAlliance(auto7AFB30CA_var, 15, libNtve_ge_AllianceSetting_Enemy);
    }
    TimerWindowCreate(gv_missiontimer, StringExternal("Param/Value/AA6E6641"), false, false);
    gv_missiontimerwindow = TimerWindowLastCreated();
    UnitIssueOrder(UnitFromId(511), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(425), Order(AbilityCommand("SpacePrisonDoorsThinLeftLowered", 0)), c_orderQueueReplace);
    gf_StartSpawnLoop(1, gv_loopType);
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/9FDCF078"));
    Wait(8.0, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/7DE8CB20"), StringExternal("Param/Value/793839E2"), c_objectiveStateActive, true);
    gv_mainObj = ObjectiveLastCreated();
    TriggerEnable(gt_PMCSurvivalModeTimeout, true);
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    TriggerEnable(gt_PMCPeriodicXP, true);
    TriggerEnable(gt_PMCSurvival5Min, true);
    TriggerEnable(gt_CacheSystem, true);
    TriggerEnable(gt_PMCSurvival10Min, true);
    TriggerEnable(gt_PMCSurvival15Min, true);
    TriggerEnable(gt_PMCSurvival20Min, true);
    TriggerEnable(gt_PMCSurvival25Min, true);
    TriggerEnable(gt_PMCSurvival30Min, true);
    TriggerEnable(gt_PMCSurvival35Min, true);
    TriggerEnable(gt_PMCSurvival40Min, true);
    TriggerEnable(gt_PMCSurvival45Min, true);
    Wait(120.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvivalMode_Init () {
    gt_PMCSurvivalMode = TriggerCreate("gt_PMCSurvivalMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Periodic XP 
//--------------------------------------------------------------------------------------------------
bool gt_PMCPeriodicXP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(30, StringExternal("Param/Value/5E5AF307"), -1, false);
    gf_SpawnUndead((gv_spawnCount * 2), "Zombie", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Pooch", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCPeriodicXP_Init () {
    gt_PMCPeriodicXP = TriggerCreate("gt_PMCPeriodicXP_Func");
    TriggerEnable(gt_PMCPeriodicXP, false);
    TriggerAddEventTimePeriodic(gt_PMCPeriodicXP, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Periodic XP Enhanced 
//--------------------------------------------------------------------------------------------------
bool gt_PMCPeriodicXPEnhanced_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(30, StringExternal("Param/Value/5EADA99E"), 0, false);
    gf_SpawnUndead((gv_spawnCount * 2), "Zombie", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Pooch", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCPeriodicXPEnhanced_Init () {
    gt_PMCPeriodicXPEnhanced = TriggerCreate("gt_PMCPeriodicXPEnhanced_Func");
    TriggerEnable(gt_PMCPeriodicXPEnhanced, false);
    TriggerAddEventTimePeriodic(gt_PMCPeriodicXPEnhanced, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cache System
//--------------------------------------------------------------------------------------------------
bool gt_CacheSystem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_cacheDrop1;
    region lv_cacheDrop2;
    region lv_cacheDrop3;
    region lv_cacheDrop4;
    region lv_cacheDrop5;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cacheDrop1 = RegionFromId(14);
    lv_cacheDrop2 = RegionFromId(13);
    lv_cacheDrop3 = RegionFromId(15);
    lv_cacheDrop4 = RegionFromId(16);
    lv_cacheDrop5 = RegionFromId(73);
    gf_MissionText(StringExternal("Param/Value/6C3E9ACE"));
    Wait(2.0, c_timeGame);
    PingCreate(PlayerGroupAll(), "BeaconRallyPing", RegionGetCenter(RegionFromId(14)), ColorWithAlpha(92.55, 96.86, 41.57, 0.00), 10.0);
    gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(lv_cacheDrop1), 1);
    gf_AirDropItemLoc("QuikClot", RegionRandomPoint(lv_cacheDrop1), 1);
    gf_AirDropItemLoc("GroundFlare", RegionRandomPoint(lv_cacheDrop1), 1);
    gf_WeaponCacheSpawnItem("Magazines", RandomInt(2, 4), lv_cacheDrop1);
    gf_WeaponCacheSpawnItem("AmmoCase", RandomInt(1, 2), lv_cacheDrop1);
    gf_WeaponCacheSpawnItem("EnergyCell", RandomInt(0, 2), lv_cacheDrop1);
    gf_WeaponCacheSpawnItem("FlareGun", RandomInt(0, 1), lv_cacheDrop1);
    gf_WeaponCacheSpawnItem("FirstAidKit", RandomInt(0, 1), lv_cacheDrop1);
    gf_WeaponCacheSpawnItem("GroundFlare", RandomInt(0, 1), lv_cacheDrop1);
    gf_WeaponCacheSpawnItem("ExplosiveCharge", RandomInt(0, 2), lv_cacheDrop1);
    gf_WeaponCacheSpawnItem("FragGrenade", RandomInt(0, 2), lv_cacheDrop1);
    if ((gv_startingplayers == 1)) {
        gf_WeaponCacheSpawnItem("SPCS", 1, lv_cacheDrop1);
    }
    else {
        gf_WeaponCacheSpawnItem("SPCS", RandomInt(0, 1), lv_cacheDrop1);
    }
    if (((gv_rifleman == true) || (gv_platoonLeader == true) || (gv_calvaryScout == true) || (gv_fireSupportSpecialist == true) || (gv_javelinGunner == true) || (gv_combatMedic == true))) {
        gf_AirDropItemLoc("USMCR", RegionRandomPoint(lv_cacheDrop1), 1);
    }

    Wait(300.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/11C5A16D"));
    Wait(2.0, c_timeGame);
    PingCreate(PlayerGroupAll(), "BeaconRallyPing", RegionGetCenter(RegionFromId(13)), ColorWithAlpha(92.55, 96.86, 41.57, 0.00), 10.0);
    if (((gv_sDM == true))) {
        gf_AirDropItemLoc("IDMR2", RegionRandomPoint(lv_cacheDrop2), 1);
    }

    if (((gv_flamethrower == true))) {
        gf_AirDropItemLoc("M79Flamethrower", RegionRandomPoint(lv_cacheDrop2), 1);
    }

    if (((gv_enforcer == true) || (gv_combatEngineer == true) || (gv_commando == true))) {
        gf_AirDropItemLoc("ISS7", RegionRandomPoint(lv_cacheDrop2), 1);
    }

    if (((gv_rifleman == true) || (gv_platoonLeader == true) || (gv_calvaryScout == true) || (gv_fireSupportSpecialist == true) || (gv_commando == true) || (gv_javelinGunner == true) || (gv_combatMedic == true))) {
        gf_WeaponCacheSpawnItem("StynerSPR", 1, lv_cacheDrop2);
        gf_AirDropItemLoc("M5MAR", RegionRandomPoint(lv_cacheDrop2), 1);
    }

    gf_AirDropItemLoc("MuscleRelaxant", RegionRandomPoint(lv_cacheDrop2), 1);
    gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(lv_cacheDrop2), 1);
    gf_AirDropItemLoc("KineticIntegrator", RegionRandomPoint(lv_cacheDrop2), 1);
    gf_WeaponCacheSpawnItem("QuikClot", RandomInt(0, 1), lv_cacheDrop2);
    gf_WeaponCacheSpawnItem("ExplosiveCharge", RandomInt(0, 2), lv_cacheDrop2);
    gf_WeaponCacheSpawnItem("Magazines", RandomInt(2, 4), lv_cacheDrop2);
    gf_WeaponCacheSpawnItem("EnergyCell", RandomInt(0, 2), lv_cacheDrop2);
    Wait(600.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/17695682"));
    Wait(2.0, c_timeGame);
    PingCreate(PlayerGroupAll(), "BeaconRallyPing", RegionGetCenter(RegionFromId(15)), ColorWithAlpha(92.55, 96.86, 41.57, 0.00), 10.0);
    if (((gv_rifleman == true) || (gv_platoonLeader == true) || (gv_calvaryScout == true) || (gv_fireSupportSpecialist == true) || (gv_commando == true) || (gv_javelinGunner == true) || (gv_combatMedic == true))) {
        gf_AirDropItemLoc("HK42", RegionRandomPoint(lv_cacheDrop3), 1);
    }

    gf_AirDropItemLoc("MRL", RegionRandomPoint(lv_cacheDrop3), 1);
    gf_AirDropItemLoc("KineticIntegrator", RegionRandomPoint(lv_cacheDrop3), 1);
    gf_AirDropItemLoc("MK44SentryGunPacked", RegionRandomPoint(lv_cacheDrop3), 1);
    gf_AirDropItemLoc("APRounds", RegionRandomPoint(lv_cacheDrop3), 1);
    gf_AirDropItemLoc("KevlarBodyArmor", RegionRandomPoint(lv_cacheDrop3), 1);
    gf_AirDropItemLoc("AimAssistant", RegionRandomPoint(lv_cacheDrop3), 1);
    gf_AirDropItemLoc("GroundFlare", RegionRandomPoint(lv_cacheDrop3), 1);
    gf_WeaponCacheSpawnItem("EnergyCell", RandomInt(0, 2), lv_cacheDrop3);
    gf_WeaponCacheSpawnItem("FirstAidKit", RandomInt(0, 1), lv_cacheDrop3);
    gf_WeaponCacheSpawnItem("Magazines", RandomInt(2, 4), lv_cacheDrop3);
    gf_WeaponCacheSpawnItem("ExplosiveCharge", RandomInt(0, 2), lv_cacheDrop3);
    if (((gv_cyborgMos == true) || (gv_automaticRifleman == true))) {
        if ((RandomInt(0, 1) == 1)) {
            gf_WeaponCacheSpawnItem("M41SAW", 1, lv_cacheDrop3);
        }
        else {
            gf_WeaponCacheSpawnItem("M241MMG", 1, lv_cacheDrop3);
        }
    }

    Wait(600.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/1583BE75"));
    Wait(2.0, c_timeGame);
    PingCreate(PlayerGroupAll(), "BeaconRallyPing", RegionGetCenter(RegionFromId(16)), ColorWithAlpha(92.55, 96.86, 41.57, 0.00), 10.0);
    gf_AirDropItemLoc("KineticIntegrator", RegionRandomPoint(lv_cacheDrop4), 1);
    gf_AirDropItemLoc("FragGrenade", RegionRandomPoint(lv_cacheDrop4), 1);
    gf_AirDropItemLoc("FragGrenade", RegionRandomPoint(lv_cacheDrop4), 1);
    gf_WeaponCacheSpawnItem("FirstAidKit", RandomInt(0, 1), lv_cacheDrop4);
    gf_WeaponCacheSpawnItem("FlareGun", RandomInt(0, 1), lv_cacheDrop4);
    gf_WeaponCacheSpawnItem("FlareGun", RandomInt(0, 1), lv_cacheDrop4);
    gf_WeaponCacheSpawnItem("ExplosiveCharge", RandomInt(0, 2), lv_cacheDrop4);
    gf_WeaponCacheSpawnItem("MGL", RandomInt(0, 2), lv_cacheDrop4);
    gf_WeaponCacheSpawnItem("QuikClot", RandomInt(0, 1), lv_cacheDrop4);
    gf_WeaponCacheSpawnItem("QuikClot", RandomInt(0, 1), lv_cacheDrop4);
    Wait(900.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/36DA741A"));
    Wait(2.0, c_timeGame);
    PingCreate(PlayerGroupAll(), "BeaconRallyPing", RegionGetCenter(RegionFromId(73)), ColorWithAlpha(92.55, 96.86, 41.57, 0.00), 10.0);
    gf_AirDropItemLoc("OPA", RegionRandomPoint(lv_cacheDrop5), 1);
    gf_AirDropItemLoc("AimAssistant", RegionRandomPoint(lv_cacheDrop5), 1);
    gf_AirDropItemLoc("MRL", RegionRandomPoint(lv_cacheDrop5), 1);
    gf_WeaponCacheSpawnItem("QuikClot", RandomInt(0, 1), lv_cacheDrop5);
    gf_WeaponCacheSpawnItem("Magazines", RandomInt(2, 4), lv_cacheDrop5);
    gf_WeaponCacheSpawnItem("Magazines", RandomInt(2, 4), lv_cacheDrop5);
    gf_AirDropItemLoc("GroundFlare", RegionRandomPoint(lv_cacheDrop5), 1);
    gf_AirDropItemLoc("QuikClot", RegionRandomPoint(lv_cacheDrop5), 1);
    gf_AirDropItemLoc("40mmGrenade", RegionRandomPoint(lv_cacheDrop5), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CacheSystem_Init () {
    gt_CacheSystem = TriggerCreate("gt_CacheSystem_Func");
    TriggerEnable(gt_CacheSystem, false);
    TriggerAddEventTimeElapsed(gt_CacheSystem, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival 5 Min 
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvival5Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PMCPeriodicSpawn, true);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Baneling", 1);
    gf_SpawnPMCBoss(5, "RAZulu");
    if ((gv_averageXP >= 21000)) {
        gf_SpawnUndead(1, "Gourmand", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvival5Min_Init () {
    gt_PMCSurvival5Min = TriggerCreate("gt_PMCSurvival5Min_Func");
    TriggerEnable(gt_PMCSurvival5Min, false);
    TriggerAddEventTimeElapsed(gt_PMCSurvival5Min, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival 10 Min  
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvival10Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Reinforcements();
    SoundPlay(SoundLink("Event_Hanson02ZombieHowl", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Raisuli", 1);
    SoundPlay(SoundLink("THanson03AMusicEventC", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnPMCSquad(1, 0);
    Wait(RandomFixed(5.0, 15.0), c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnUndead(1, "Raisuli", 1);
    if ((gv_mod_elitepmc)) {
        Wait(RandomFixed(5.0, 15.0), c_timeGame);
        gf_ElitePMCFlyover();
    }
    else {
        Wait(10.0, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 2);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Kraith", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 3);
    gf_SucceedMission(30, StringExternal("Param/Value/A7B9607F"), -1, false);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnPMCSquad(1, 0);
        gf_SpawnPMCSquad(1, 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvival10Min_Init () {
    gt_PMCSurvival10Min = TriggerCreate("gt_PMCSurvival10Min_Func");
    TriggerEnable(gt_PMCSurvival10Min, false);
    TriggerAddEventTimeElapsed(gt_PMCSurvival10Min, 600.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival 15 Min 
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvival15Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_StartSpawnLoop(2, gv_loopType);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCBoss(1, "RAEviscerator");
    gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SucceedMission(40, StringExternal("Param/Value/4C54A1FC"), -1, false);
    if ((gv_averageXP >= 12000)) {
        gf_SpawnUndead(1, "Gourmand", 1);
    }

    if ((gv_averageXP >= 33000)) {
        gf_SpawnUndead(2, "Raisuli", 1);
    }

    if ((gv_hyperpmcEnabled)) {
        gf_SpawnPMCSquad(29, 0);
        gf_SpawnPMCSquad(5, 0);
        gf_SpawnPMCSquad(2, 0);
        if ((gv_mod_elitepmc)) {
            Wait(RandomFixed(5.0, 15.0), c_timeGame);
            gf_ElitePMCFlyover();
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvival15Min_Init () {
    gt_PMCSurvival15Min = TriggerCreate("gt_PMCSurvival15Min_Func");
    TriggerEnable(gt_PMCSurvival15Min, false);
    TriggerAddEventTimeElapsed(gt_PMCSurvival15Min, 900.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival 20 Min
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvival20Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Reinforcements();
    SoundPlay(SoundLink("TTosh03BMusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnPMCSquad(16, 0);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnPMCBoss(1, "Umbra");
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(11, 0);
    gf_SpawnPMCSquad(27, 0);
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(1, 0);
    if ((gv_mod_elitepmc)) {
        Wait(RandomFixed(5.0, 15.0), c_timeGame);
        gf_ElitePMCFlyover();
    }
    else {
        Wait(10.0, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SucceedMission(50, StringExternal("Param/Value/D586E2C5"), -1, false);
    gf_SpawnPMCSquad(29, 0);
    if ((gv_hyperpmcEnabled)) {
        gf_SpawnPMCSquad(28, 0);
        gf_SpawnPMCSquad(2, 0);
    }

    if ((gv_averageXP >= 40000)) {
        gf_SpawnPMCSquad(1, 0);
        gf_SpawnPMCSquad(1, 0);
    }

    if ((gv_averageXP >= 70000)) {
        gf_SpawnPMCSquad(1, 0);
        gf_SpawnPMCSquad(4, 0);
        gf_SpawnPMCSquad(27, 0);
        gf_SpawnPMCSquad(1, 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvival20Min_Init () {
    gt_PMCSurvival20Min = TriggerCreate("gt_PMCSurvival20Min_Func");
    TriggerEnable(gt_PMCSurvival20Min, false);
    TriggerAddEventTimeElapsed(gt_PMCSurvival20Min, 1200.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival 25 Min 
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvival25Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/2EE8FFE7"), 0, true);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnPMCSquad(1, 0);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(12, "Glutton", 1);
    gf_SpawnUndead(6, "Glutton", 1);
    gf_SpawnUndead(12, "Leaper", 1);
    gf_SpawnUndead(12, "Baneling", 1);
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(19, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SucceedMission(60, StringExternal("Param/Value/D4E248B1"), -1, false);
    gf_SpawnPMCSquad(29, 0);
    gf_SpawnPMCSquad(28, 0);
    if ((gv_hyperpmcEnabled)) {
        gf_SpawnPMCSquad(28, 0);
        gf_SpawnPMCSquad(5, 0);
        if ((gv_mod_elitepmc)) {
            Wait(RandomFixed(5.0, 15.0), c_timeGame);
            gf_ElitePMCFlyover();
        }

    }

    if ((gv_averageXP >= 25000)) {
        gf_SpawnPMCSquad(3, 0);
        gf_SpawnPMCSquad(9, 0);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvival25Min_Init () {
    gt_PMCSurvival25Min = TriggerCreate("gt_PMCSurvival25Min_Func");
    TriggerEnable(gt_PMCSurvival25Min, false);
    TriggerAddEventTimeElapsed(gt_PMCSurvival25Min, 1500.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival 30 Min
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvival30Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Reinforcements();
    TriggerEnable(gt_WeaponsItems2, true);
    TriggerEnable(gt_PMCPeriodicXP, false);
    TriggerEnable(gt_PMCPeriodicXPEnhanced, true);
    SoundPlay(SoundLink("THorner04MusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(1, "RedstoneLavaCritter", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Arachnathid", 1);
    Wait(20.0, c_timeGame);
    SoundPlay(SoundLink("THanson03AMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnPMCSquad(2, 0);
    Wait(3.0, c_timeGame);
    gf_SpawnPMCBoss(1, "Aspectus");
    gf_SpawnPMCSquad(2, 0);
    Wait(3.0, c_timeGame);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(10, 0);
    gf_SpawnPMCSquad(15, 0);
    gf_SpawnPMCSquad(15, 0);
    Wait(3.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(29, 0);
    gf_SpawnPMCSquad(29, 0);
    gf_SpawnPMCSquad(30, 0);
    if ((gv_hyperpmcEnabled)) {
        gf_SpawnPMCSquad(28, 0);
        gf_SpawnPMCSquad(28, 0);
        gf_SpawnPMCSquad(5, 0);
    }

    if ((gv_mod_elitepmc)) {
        Wait(RandomFixed(5.0, 15.0), c_timeGame);
        gf_ElitePMCFlyover();
    }

    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(3, "Gourmand", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    gf_SucceedMission(60, StringExternal("Param/Value/E6CE208E"), -1, false);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnPMCSquad(1, 0);
        gf_SpawnPMCSquad(9, 0);
        gf_SpawnPMCSquad(3, 0);
        gf_SpawnPMCSquad(4, 0);
        gf_SpawnPMCSquad(1, 0);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvival30Min_Init () {
    gt_PMCSurvival30Min = TriggerCreate("gt_PMCSurvival30Min_Func");
    TriggerEnable(gt_PMCSurvival30Min, false);
    TriggerAddEventTimeElapsed(gt_PMCSurvival30Min, 1800.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival 35 Min 
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvival35Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/E600F1C7"), 0, true);
    gf_StartSpawnLoop(3, gv_loopType);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(1, "Dilophosaur", 1);
    gf_SpawnUndead(2, "ZombieWraith", 1);
    gf_SpawnUndead(2, "ZombieWraith", 1);
    gf_SpawnUndead(12, "Baneling", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(12, "Baneling", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Metasis", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnPMCSquad(19, 0);
    gf_SpawnPMCSquad(19, 0);
    gf_SpawnPMCSquad(19, 0);
    gf_SpawnPMCSquad(19, 0);
    Wait(20.0, c_timeGame);
    gf_SpawnPMCSquad(19, 0);
    gf_SpawnPMCSquad(19, 0);
    gf_SpawnPMCSquad(19, 0);
    gf_SpawnPMCSquad(19, 0);
    gf_SpawnPMCSquad(29, 0);
    gf_SpawnPMCSquad(30, 0);
    gf_SpawnPMCSquad(28, 0);
    gf_SpawnPMCSquad(30, 0);
    if ((gv_hyperpmcEnabled)) {
        gf_SpawnPMCSquad(6, 0);
        gf_SpawnPMCSquad(6, 0);
        gf_SpawnPMCSquad(5, 0);
        if ((gv_mod_elitepmc)) {
            Wait(RandomFixed(5.0, 15.0), c_timeGame);
            gf_ElitePMCFlyover();
            Wait(RandomFixed(5.0, 15.0), c_timeGame);
            gf_ElitePMCFlyover();
        }

    }

    gf_SucceedMission(70, StringExternal("Param/Value/3E063FB5"), -1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvival35Min_Init () {
    gt_PMCSurvival35Min = TriggerCreate("gt_PMCSurvival35Min_Func");
    TriggerEnable(gt_PMCSurvival35Min, false);
    TriggerAddEventTimeElapsed(gt_PMCSurvival35Min, 2100.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival 40 Min  
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvival40Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SmithyDeath, true);
    SoundPlay(SoundLink("THanson02MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnPMCSquad(17, 0);
    gf_SpawnPMCSquad(17, 0);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Ares", 1);
    if ((gv_startingplayers > 4) && (gv_allowmission == true)) {
        gf_PMCSurvivalStartBonusMission();
    }
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(1, "Minerva", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(2, "Cursed", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnPMCSquad(29, 0);
    gf_SpawnPMCSquad(30, 0);
    gf_SpawnPMCSquad(28, 0);
    if ((gv_hyperpmcEnabled)) {
        gf_SpawnPMCSquad(6, 0);
        gf_SpawnPMCSquad(28, 0);
        gf_SpawnPMCSquad(28, 0);
        gf_SpawnPMCSquad(5, 0);
    }

    if ((gv_mod_elitepmc)) {
        Wait(RandomFixed(5.0, 15.0), c_timeGame);
        gf_ElitePMCFlyover();
    }
    else {
        Wait(10.0, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(8, 0);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnPMCSquad(1, 0);
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
    }

    Wait(60.0, c_timeGame);
    gf_SpawnPMCSquad(18, 0);
    gf_SucceedMission(80, StringExternal("Param/Value/3D57CDB4"), -1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvival40Min_Init () {
    gt_PMCSurvival40Min = TriggerCreate("gt_PMCSurvival40Min_Func");
    TriggerEnable(gt_PMCSurvival40Min, false);
    TriggerAddEventTimeElapsed(gt_PMCSurvival40Min, 2400.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival 45 Min  
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvival45Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/C3957538"), 0, true);
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "FinalDOOMHorizonSoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_SpawnUndead(3, "ZombieWraith", 1);
    gf_SpawnPMCSquad(20, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(20, 0);
    gf_SpawnPMCSquad(8, 0);
    gf_SpawnUndead(3, "ZombieWraith", 1);
    gf_SpawnUndead(2, "ZombieWraith", 1);
    gf_SpawnUndead(2, "ZombieWraith", 1);
    gf_SpawnPMCSquad(20, 0);
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(6, 0);
    gf_SpawnPMCSquad(6, 0);
    gf_SpawnPMCSquad(30, 0);
    gf_SpawnPMCSquad(28, 0);
    if ((gv_hyperpmcEnabled)) {
        gf_SpawnPMCSquad(6, 0);
        gf_SpawnPMCSquad(6, 0);
        gf_SpawnPMCSquad(28, 0);
        gf_SpawnPMCSquad(30, 0);
        gf_SpawnPMCSquad(30, 0);
        gf_SpawnPMCSquad(5, 0);
        if ((gv_mod_elitepmc)) {
            Wait(RandomFixed(5.0, 15.0), c_timeGame);
            gf_ElitePMCFlyover();
            Wait(RandomFixed(5.0, 15.0), c_timeGame);
            gf_ElitePMCFlyover();
        }

    }

    gf_SucceedMission(90, StringExternal("Param/Value/2530D806"), -1, false);
    if ((gv_pMCBonusMissionEnabled == true)) {
        gf_SpawnPMCSquad(21, 0);
        gf_SpawnPMCSquad(7, 0);
        gf_SpawnPMCSquad(22, 0);
        gf_SpawnPMCSquad(23, 0);
        gf_SpawnPMCSquad(24, 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvival45Min_Init () {
    gt_PMCSurvival45Min = TriggerCreate("gt_PMCSurvival45Min_Func");
    TriggerEnable(gt_PMCSurvival45Min, false);
    TriggerAddEventTimeElapsed(gt_PMCSurvival45Min, 2700.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival Mode Timeout 
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvivalModeTimeout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7AA8CF52_g;
    int auto7AA8CF52_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_medevacregion = gv_lZs[RandomInt(1, 5)];
    UnitCreate(1, "ColonistShip", 0, 13, PointWithOffset(RegionGetCenter(gv_medevacregion), 0.0, 0.0), libNtve_gf_RandomAngle());
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_mEDEVAC = UnitLastCreated();
    auto7AA8CF52_g = gv_players;
    auto7AA8CF52_var = -1;
    while (true) {
        auto7AA8CF52_var = PlayerGroupNextPlayer(auto7AA8CF52_g, auto7AA8CF52_var);
        if (auto7AA8CF52_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(gv_mEDEVAC, true, auto7AA8CF52_var);
    }
    libNtve_gf_MakeUnitInvulnerable(gv_mEDEVAC, true);
    SoundPlay(SoundLink("TRaynor01MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(gv_missiontimer, 120.0, false, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_medevacregion), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 120.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/AD752CBA"));
    TriggerEnable(gt_PMCSurvivalEnd, true);
    TriggerEnable(gt_PMCSurvivalEvacPlayerEnter, true);
    gf_MissionText(StringExternal("Param/Value/3A2E1A57"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/1C28133A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvivalModeTimeout_Init () {
    gt_PMCSurvivalModeTimeout = TriggerCreate("gt_PMCSurvivalModeTimeout_Func");
    TriggerEnable(gt_PMCSurvivalModeTimeout, false);
    TriggerAddEventTimeElapsed(gt_PMCSurvivalModeTimeout, 3000.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival Evac Player Enter
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvivalEvacPlayerEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allextracted;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto9BD62A29_g;
    int auto9BD62A29_u;
    unitgroup autoBF134553_g;
    int autoBF134553_u;
    unit autoBF134553_var;

    // Variable Initialization
    lv_allextracted = true;

    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_medevacregion))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pMCSurvivalCompleted = true;
    gv_extractionCount += 1;
    libNtve_gf_PauseUnit(EventUnit(), true);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    if ((gv_pMCBonusMissionEnabled == true)) {
        if ((gf_CountItemType("ResearchData", EventUnit()) >= 1)) {
            auto9BD62A29_g = UnitInventoryGroup(EventUnit());
            auto9BD62A29_u = UnitGroupCount(auto9BD62A29_g, c_unitCountAll);
            for (;; auto9BD62A29_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(auto9BD62A29_g, auto9BD62A29_u);
                if (lv_unit == null) { break; }
                if ((UnitGetType(lv_unit) == "ResearchData")) {
                    gf_PMCSurvivalResearchHandover(lv_unit);
                }
            }
        }
    }
    autoBF134553_g = gv_heroesGroup;
    autoBF134553_u = UnitGroupCount(autoBF134553_g, c_unitCountAll);
    for (;; autoBF134553_u -= 1) {
        autoBF134553_var = UnitGroupUnitFromEnd(autoBF134553_g, autoBF134553_u);
        if (autoBF134553_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(autoBF134553_var) == false) && (UnitIsAlive(autoBF134553_var) == true)) {
            lv_allextracted = false;
        }
    }
    if ((lv_allextracted == true)) {
        if ((gv_extractionCount == 12)) {
            gv__12ManExtraction = true;
        }
        TriggerExecute(gt_PMCSurvivalEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvivalEvacPlayerEnter_Init () {
    gt_PMCSurvivalEvacPlayerEnter = TriggerCreate("gt_PMCSurvivalEvacPlayerEnter_Func");
    TriggerEnable(gt_PMCSurvivalEvacPlayerEnter, false);
    TriggerAddEventUnitRegion(gt_PMCSurvivalEvacPlayerEnter, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_PMCSurvivalEvacPlayerEnter, null, RegionFromId(13), false);
    TriggerAddEventUnitRegion(gt_PMCSurvivalEvacPlayerEnter, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_PMCSurvivalEvacPlayerEnter, null, RegionFromId(15), false);
    TriggerAddEventUnitRegion(gt_PMCSurvivalEvacPlayerEnter, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_PMCSurvivalEvacPlayerEnter, null, RegionFromId(14), false);
    TriggerAddEventUnitRegion(gt_PMCSurvivalEvacPlayerEnter, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_PMCSurvivalEvacPlayerEnter, null, RegionFromId(16), false);
    TriggerAddEventUnitRegion(gt_PMCSurvivalEvacPlayerEnter, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_PMCSurvivalEvacPlayerEnter, null, RegionFromId(6), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Smithy Death
//--------------------------------------------------------------------------------------------------
bool gt_SmithyDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pMC;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pMC = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_pMC) == "Smithy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_smithyKilled = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SmithyDeath_Init () {
    gt_SmithyDeath = TriggerCreate("gt_SmithyDeath_Func");
    TriggerEnable(gt_SmithyDeath, false);
    TriggerAddEventUnitDied(gt_SmithyDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival End
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvivalEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5F173D3B_g;
    int auto5F173D3B_var;
    unitgroup autoA397A67D_g;
    int autoA397A67D_u;
    unit autoA397A67D_var;
    unitgroup auto9741768B_g;
    int auto9741768B_u;
    unit auto9741768B_var;
    playergroup auto0D122F79_g;
    int auto0D122F79_var;
    playergroup autoCCC9BCAD_g;
    int autoCCC9BCAD_var;
    playergroup autoA0123E6B_g;
    int autoA0123E6B_var;
    playergroup autoA9B79B51_g;
    int autoA9B79B51_var;
    playergroup autoC5B7ED9E_g;
    int autoC5B7ED9E_var;
    playergroup auto6253024F_g;
    int auto6253024F_var;
    playergroup auto7894DF0C_g;
    int auto7894DF0C_var;
    playergroup auto8BAAB852_g;
    int auto8BAAB852_var;
    playergroup autoCED5E0B6_g;
    int autoCED5E0B6_var;
    playergroup autoC65E5175_g;
    int autoC65E5175_var;
    playergroup autoF663D63E_g;
    int autoF663D63E_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_victory = true;
    TriggerEnable(gt_PMCSurvivalEvacPlayerEnter, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroyAll();
    SoundPlay(SoundLink("TRaynor01MusicOutro", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_startingplayers == 1)) {
        autoA397A67D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA397A67D_u = UnitGroupCount(autoA397A67D_g, c_unitCountAll);
        for (;; autoA397A67D_u -= 1) {
            autoA397A67D_var = UnitGroupUnitFromEnd(autoA397A67D_g, autoA397A67D_u);
            if (autoA397A67D_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(autoA397A67D_var, true);
        }
        UnitRemove(gv_mEDEVAC);
    }
    else {
        auto5F173D3B_g = gv_players;
        auto5F173D3B_var = -1;
        while (true) {
            auto5F173D3B_var = PlayerGroupNextPlayer(auto5F173D3B_g, auto5F173D3B_var);
            if (auto5F173D3B_var < 0) { break; }
            libNtve_gf_MakeUnitInvulnerable(gv_playerHeroes[auto5F173D3B_var], true);
            UnitSetState(gv_playerHeroes[auto5F173D3B_var], c_unitStateTargetable, false);
            CameraPan(auto5F173D3B_var, UnitGetPosition(gv_mEDEVAC), 0.0, -1, 10, false);
            CameraLookAtUnit(auto5F173D3B_var, gv_mEDEVAC);
            CameraLockInput(auto5F173D3B_var, true);
        }
        UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(7.0, c_timeGame);
        UnitRemove(gv_mEDEVAC);
    }
    UnitPauseAll(true);
    auto9741768B_g = gv_undeadGroup;
    auto9741768B_u = UnitGroupCount(auto9741768B_g, c_unitCountAll);
    for (;; auto9741768B_u -= 1) {
        auto9741768B_var = UnitGroupUnitFromEnd(auto9741768B_g, auto9741768B_u);
        if (auto9741768B_var == null) { break; }
        UnitRemove(auto9741768B_var);
    }
    gv_pauseSpawning = true;
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00081", 0), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(1.0, c_timeGame);
    auto0D122F79_g = gv_players;
    auto0D122F79_var = -1;
    while (true) {
        auto0D122F79_var = PlayerGroupNextPlayer(auto0D122F79_g, auto0D122F79_var);
        if (auto0D122F79_var < 0) { break; }
        gv_gamesWon[gv_gamemode][auto0D122F79_var] = (gv_gamesWon[gv_gamemode][auto0D122F79_var] + 1);
    }
    gf_DisplayScoreScreen();
    autoCCC9BCAD_g = gv_players;
    autoCCC9BCAD_var = -1;
    while (true) {
        autoCCC9BCAD_var = PlayerGroupNextPlayer(autoCCC9BCAD_g, autoCCC9BCAD_var);
        if (autoCCC9BCAD_var < 0) { break; }
        if ((gv_playerdecalunlocked[5][autoCCC9BCAD_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoCCC9BCAD_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(autoCCC9BCAD_var), c_messageAreaSubtitle, StringExternal("Param/Value/A8CDE510"));
            gv_playerdecalunlocked[5][autoCCC9BCAD_var] = true;
        }

    }
    if ((gv_startingplayers <= 4) && (gv_startingplayers >= 2) && (gv_mod_tier1 == true) && (GameIsOnline() == true)) {
        autoA0123E6B_g = gv_players;
        autoA0123E6B_var = -1;
        while (true) {
            autoA0123E6B_var = PlayerGroupNextPlayer(autoA0123E6B_g, autoA0123E6B_var);
            if (autoA0123E6B_var < 0) { break; }
            if ((gv_playercamounlocked[25][autoA0123E6B_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoA0123E6B_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoA0123E6B_var), c_messageAreaSubtitle, StringExternal("Param/Value/4B85D9B2"));
                gv_playercamounlocked[25][autoA0123E6B_var] = true;
            }

        }
    }

    if ((gv_startingplayers == 1) && (GameIsOnline() == true)) {
        autoA9B79B51_g = gv_players;
        autoA9B79B51_var = -1;
        while (true) {
            autoA9B79B51_var = PlayerGroupNextPlayer(autoA9B79B51_g, autoA9B79B51_var);
            if (autoA9B79B51_var < 0) { break; }
            if (((UnitGetType(gv_playerHeroes[autoA9B79B51_var]) == "GhostHero") || (UnitGetType(gv_playerHeroes[autoA9B79B51_var]) == "GhostHero2")) && (gv_playerdecalunlocked[28][autoA9B79B51_var] == false) && (gv_playercamounlocked[30][autoA9B79B51_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoA9B79B51_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoA9B79B51_var), c_messageAreaSubtitle, StringExternal("Param/Value/133E38D0"));
                gv_playerdecalunlocked[28][autoA9B79B51_var] = true;
                gv_playercamounlocked[30][autoA9B79B51_var] = true;
            }

        }
    }

    if ((gv_startingplayers <= 4) && (gv_startingplayers >= 2) && (gv_mod_tier3 == false) && (GameIsOnline() == true)) {
        autoC5B7ED9E_g = gv_players;
        autoC5B7ED9E_var = -1;
        while (true) {
            autoC5B7ED9E_var = PlayerGroupNextPlayer(autoC5B7ED9E_g, autoC5B7ED9E_var);
            if (autoC5B7ED9E_var < 0) { break; }
            if ((gv_playercamounlocked[18][autoC5B7ED9E_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoC5B7ED9E_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoC5B7ED9E_var), c_messageAreaSubtitle, StringExternal("Param/Value/FE10EC76"));
                gv_playercamounlocked[18][autoC5B7ED9E_var] = true;
            }

        }
    }

    if ((gv_startingplayers == 12) && (gv_mod_rifle == true) && (gv_mod_tier3 == false) && (gv_mod_tier1 == false) && (GameIsOnline() == true)) {
        auto6253024F_g = gv_players;
        auto6253024F_var = -1;
        while (true) {
            auto6253024F_var = PlayerGroupNextPlayer(auto6253024F_g, auto6253024F_var);
            if (auto6253024F_var < 0) { break; }
            if ((gv_playercamounlocked[27][auto6253024F_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto6253024F_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto6253024F_var), c_messageAreaSubtitle, StringExternal("Param/Value/3BBD02DF"));
                gv_playercamounlocked[27][auto6253024F_var] = true;
            }

        }
    }

    if ((gv_pMCBonusMissionEnabled == true) && (gv_waterSamplesCompleted == true) && (GameIsOnline() == true)) {
        auto7894DF0C_g = gv_players;
        auto7894DF0C_var = -1;
        while (true) {
            auto7894DF0C_var = PlayerGroupNextPlayer(auto7894DF0C_g, auto7894DF0C_var);
            if (auto7894DF0C_var < 0) { break; }
            if ((gv_playercamounlocked[21][auto7894DF0C_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto7894DF0C_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto7894DF0C_var), c_messageAreaSubtitle, StringExternal("Param/Value/E1723851"));
                gv_playercamounlocked[21][auto7894DF0C_var] = true;
            }

        }
    }

    if ((gv_pMCSurvivalCompleted == true)) {
        gf_SucceedMission(700, StringExternal("Param/Value/422B1DD6"), 0, false);
    }
    else {
        gf_SucceedMission(500, StringExternal("Param/Value/E97F4888"), 0, false);
    }
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/7AA22A6A"), 0, true);
    gv_gameWon = true;
    auto8BAAB852_g = gv_players;
    auto8BAAB852_var = -1;
    while (true) {
        auto8BAAB852_var = PlayerGroupNextPlayer(auto8BAAB852_g, auto8BAAB852_var);
        if (auto8BAAB852_var < 0) { break; }
        if ((gv_gamemode == 8) && (gv_startingplayers == 1) && (gv_achievementUnlocked[32][auto8BAAB852_var] == false) && (gv_gameWon == true) && (UnitGetType(gv_playerHeroes[auto8BAAB852_var]) == "Cyborg")) {
            gf_AwardAchievementBadgeUnlocked(32, auto8BAAB852_var, gv_achievementName[32][auto8BAAB852_var], gv_achievementDescription[32][auto8BAAB852_var], gv_achievementImage[32][auto8BAAB852_var], gv_achievementPoint[32]);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto8BAAB852_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto8BAAB852_var), c_messageAreaDebug, StringExternal("Param/Value/0D6FF4A4"));
        }

    }
    if ((GameIsOnline() == true)) {
        autoCED5E0B6_g = gv_players;
        autoCED5E0B6_var = -1;
        while (true) {
            autoCED5E0B6_var = PlayerGroupNextPlayer(autoCED5E0B6_g, autoCED5E0B6_var);
            if (autoCED5E0B6_var < 0) { break; }
            gf_UnlockAchievement(autoCED5E0B6_var);
        }
    }

    autoC65E5175_g = gv_players;
    autoC65E5175_var = -1;
    while (true) {
        autoC65E5175_var = PlayerGroupNextPlayer(autoC65E5175_g, autoC65E5175_var);
        if (autoC65E5175_var < 0) { break; }
        UIDisplayMessage(PlayerGroupSingle(autoC65E5175_var), c_messageAreaError, StringExternal("Param/Value/6BAC125D"));
        gf_SavePlayerProgress(autoC65E5175_var);
    }
    gv_gameOver = true;
    Wait(180.0, c_timeGame);
    autoF663D63E_g = gv_players;
    autoF663D63E_var = -1;
    while (true) {
        autoF663D63E_var = PlayerGroupNextPlayer(autoF663D63E_g, autoF663D63E_var);
        if (autoF663D63E_var < 0) { break; }
        GameOver(autoF663D63E_var, c_gameOverVictory, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvivalEnd_Init () {
    gt_PMCSurvivalEnd = TriggerCreate("gt_PMCSurvivalEnd_Func");
    TriggerEnable(gt_PMCSurvivalEnd, false);
    TriggerAddEventTimer(gt_PMCSurvivalEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival Open RA Facility Gates
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvivalOpenRAFacilityGates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto3778FC8F_ae = 5;
    const int auto3778FC8F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Cockblock, false);
    PingDestroy(gv_pingsecondary);
    gv_pMCBonusMissionEnabled = true;
    UnitIssueOrder(UnitFromId(1238), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1239), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1240), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1241), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1928584749), Order(AbilityCommand("MetalGateStraightVerticalLFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(511), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    gv_sensorcount = 5;
    gv_silos[1] = RegionFromId(220);
    gv_silos[2] = RegionFromId(221);
    gv_silos[3] = RegionFromId(222);
    gv_silos[4] = RegionFromId(223);
    gv_silos[5] = RegionFromId(224);
    SoundPlayForPlayer(SoundLink("Event_Nova01_Facility_Alarm_Klaxon", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Nova01_Facility_Alarm_Klaxon", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringExternal("Param/Value/CF47922C"));
    Wait(3.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/47B39343"));
    lv_i = 1;
    for ( ; ( (auto3778FC8F_ai >= 0 && lv_i <= auto3778FC8F_ae) || (auto3778FC8F_ai < 0 && lv_i >= auto3778FC8F_ae) ) ; lv_i += auto3778FC8F_ai ) {
        PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_silos[lv_i]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
        gv_highlanderpings[lv_i] = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/BF1DF2E1"));
        PingSetScale(PingLastCreated(), 0.75);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", RegionGetCenter(gv_silos[lv_i]));
        gv_waterSiteActors[lv_i] = libNtve_gf_ActorLastCreated();
        ActorSend(gv_waterSiteActors[lv_i], "SetScale 0.750000 0.000000 s");
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LabBotXRT", 0, 15, RegionGetCenter(gv_highlanders[lv_i]));
    }
    TriggerEnable(gt_PMCSurvivalDownloadResearch, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvivalOpenRAFacilityGates_Init () {
    gt_PMCSurvivalOpenRAFacilityGates = TriggerCreate("gt_PMCSurvivalOpenRAFacilityGates_Func");
    TriggerEnable(gt_PMCSurvivalOpenRAFacilityGates, false);
    TriggerAddEventUnitRegion(gt_PMCSurvivalOpenRAFacilityGates, null, RegionFromId(151), true);
    TriggerAddEventUnitRegion(gt_PMCSurvivalOpenRAFacilityGates, null, RegionFromId(151), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Survival Download Research
//--------------------------------------------------------------------------------------------------
bool gt_PMCSurvivalDownloadResearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    int lv_silo;
    bool lv_leftregion;

    // Automatic Variable Declarations
    const int autoD9391FEE_ae = 5;
    const int autoD9391FEE_ai = 1;
    const int auto95C23371_ae = 10;
    const int auto95C23371_ai = 1;
    int auto1CCF7518_val;
    const int autoBBCF5B1F_ae = 5;
    const int autoBBCF5B1F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (autoD9391FEE_ai >= 0 && lv_loopint <= autoD9391FEE_ae) || (autoD9391FEE_ai < 0 && lv_loopint >= autoD9391FEE_ae) ) ; lv_loopint += autoD9391FEE_ai ) {
        if ((EventUnitRegion() == gv_silos[lv_loopint])) {
            lv_silo = lv_loopint;
        }

    }
    if ((gv_silodisabled[lv_silo] == false)) {
    }
    else {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/C0EA4C72"));
    lv_loopint = 1;
    for ( ; ( (auto95C23371_ai >= 0 && lv_loopint <= auto95C23371_ae) || (auto95C23371_ai < 0 && lv_loopint >= auto95C23371_ae) ) ; lv_loopint += auto95C23371_ai ) {
        auto1CCF7518_val = lv_loopint;
        if (auto1CCF7518_val == 2) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/F090F404"));
        }
        else if (auto1CCF7518_val == 5) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/6491DD45"));
        }
        else if (auto1CCF7518_val == 6) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/3AA88EA3"));
            SoundPlayOnUnit(SoundLink("WidowMine_ArmedBeep", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
        }
        else if (auto1CCF7518_val == 7) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/28F55A3F"));
            SoundPlayOnUnit(SoundLink("WidowMine_ArmedBeep", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
        }
        else if (auto1CCF7518_val == 8) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/234FF9A8"));
            SoundPlayOnUnit(SoundLink("WidowMine_ArmedBeep", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
        }
        else if (auto1CCF7518_val == 9) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/B9B88725"));
            SoundPlayOnUnit(SoundLink("WidowMine_ArmedBeep", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
        }
        else if (auto1CCF7518_val == 10) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/5D07BA07"));
        }
        else {
        }
        if ((libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true) && (UnitIsAlive(EventUnit()) == true) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        }
        else {
            SoundPlayOnUnit(SoundLink("TUIWarning", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/68789C83"));
            lv_leftregion = true;
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((lv_leftregion == false)) {
        gv_silodisabled[lv_silo] = true;
        SoundPlayOnUnit(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/5C4D383B"));
        libNtve_gf_KillModel(gv_waterSiteActors[lv_silo]);
        PingDestroy(gv_highlanderpings[lv_silo]);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ResearchData", 0, 0, RegionGetCenter(gv_silos[lv_silo]));
        gf_MissionItemPingAddItem(UnitLastCreated());
        lv_loopint = 1;
        for ( ; ( (autoBBCF5B1F_ai >= 0 && lv_loopint <= autoBBCF5B1F_ae) || (autoBBCF5B1F_ai < 0 && lv_loopint >= autoBBCF5B1F_ae) ) ; lv_loopint += autoBBCF5B1F_ai ) {
            if ((gv_silodisabled[lv_loopint] == false)) {
                lv_leftregion = true;
            }

        }
        if ((lv_leftregion == false)) {
            gf_MissionText(StringExternal("Param/Value/914A34EF"));
            Wait(20.0, c_timeGame);
            gf_SpawnPMCSquad(26, 0);
            gf_SpawnPMCSquad(21, 0);
            TriggerEnable(gt_JuggernaughtDeath, true);
            while ((gv_gameOver == false)) {
                gf_SpawnPMCBoss(RandomInt(4, 7), "RAZulu");
                Wait(45.0, c_timeGame);
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCSurvivalDownloadResearch_Init () {
    gt_PMCSurvivalDownloadResearch = TriggerCreate("gt_PMCSurvivalDownloadResearch_Func");
    TriggerEnable(gt_PMCSurvivalDownloadResearch, false);
    TriggerAddEventUnitRegion(gt_PMCSurvivalDownloadResearch, null, RegionFromId(220), true);
    TriggerAddEventUnitRegion(gt_PMCSurvivalDownloadResearch, null, RegionFromId(221), true);
    TriggerAddEventUnitRegion(gt_PMCSurvivalDownloadResearch, null, RegionFromId(222), true);
    TriggerAddEventUnitRegion(gt_PMCSurvivalDownloadResearch, null, RegionFromId(223), true);
    TriggerAddEventUnitRegion(gt_PMCSurvivalDownloadResearch, null, RegionFromId(224), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Juggernaught Death
//--------------------------------------------------------------------------------------------------
bool gt_JuggernaughtDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pMC;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pMC = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_pMC) == "Juggernaught"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_juggernaughtKilled = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JuggernaughtDeath_Init () {
    gt_JuggernaughtDeath = TriggerCreate("gt_JuggernaughtDeath_Func");
    TriggerEnable(gt_JuggernaughtDeath, false);
    TriggerAddEventUnitDied(gt_JuggernaughtDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode-Load Sequences
//--------------------------------------------------------------------------------------------------
bool gt_NewBossModeLoadSequences_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB0A98E3C_g;
    int autoB0A98E3C_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/EE2D7BE3"), StringExternal("Param/Value/6822808E"), c_objectiveStateActive, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_mainObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/58704733"), StringExternal("Param/Value/DECB0D4C"), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_secondObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/355014BB"), StringExternal("Param/Value/2CAAF659"), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_thirdObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/1EF6CF37"), StringExternal("Param/Value/0AEFDE75"), c_objectiveStateActive, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_fourthObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/463E3936"), StringExternal("Param/Value/3659D49E"), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_fifthObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/617728B7"), StringExternal("Param/Value/A86BF254"), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_sixthObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/0A18F423"), StringExternal("Param/Value/6228CD5A"), c_objectiveStateActive, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_seventhObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/9A3F846B"), StringExternal("Param/Value/C3AFFF1D"), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_eigthObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/A8630B00"), StringExternal("Param/Value/278761AA"), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_ninthObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/4F758314"), StringExternal("Param/Value/D3DA2B9B"), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_tenthObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/FD2902C8"), StringExternal("Param/Value/F249C3EA"), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_eleventhObj = ObjectiveLastCreated();
    gv_newBossMissionCompleted[1] = false;
    gv_newBossMissionCompleted[2] = false;
    gv_newBossMissionCompleted[3] = false;
    gv_newBossMissionCompleted[4] = false;
    gv_newBossMissionCompleted[5] = false;
    gv_newBossMissionCompleted[6] = false;
    gv_newBossMissionCompleted[7] = false;
    gv_newBossMissionCompleted[8] = false;
    gv_newBossMissionCompleted[9] = false;
    gv_newBossMissionCompleted[10] = false;
    autoB0A98E3C_g = gv_players;
    autoB0A98E3C_var = -1;
    while (true) {
        autoB0A98E3C_var = PlayerGroupNextPlayer(autoB0A98E3C_g, autoB0A98E3C_var);
        if (autoB0A98E3C_var < 0) { break; }
        libNtve_gf_SetAlliance(autoB0A98E3C_var, 15, libNtve_ge_AllianceSetting_Enemy);
    }
    TriggerExecute(gt_NewBossModeInitialize, true, false);
    TriggerEnable(gt_NewBossModeKillCheck, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossModeLoadSequences_Init () {
    gt_NewBossModeLoadSequences = TriggerCreate("gt_NewBossModeLoadSequences_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode Initialize
//--------------------------------------------------------------------------------------------------
bool gt_NewBossModeInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowCreate(gv_missiontimer, StringExternal("Param/Value/40D8A4ED"), false, false);
    gv_missiontimerwindow = TimerWindowLastCreated();
    gf_StartSpawnLoop(1, gv_loopType);
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/05FE87EB"));
    Wait(4.5, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/E3F219DA"));
    Wait(4.5, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/9A2A7328"));
    Wait(4.5, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/F521A383"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/E0595720"));
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    TriggerEnable(gt_NewBossMode5Min, true);
    TriggerEnable(gt_NewBossMode10Min, true);
    TriggerEnable(gt_NewBossMode15Min, true);
    TriggerEnable(gt_NewBossMode20Min, true);
    TriggerEnable(gt_NewBossMode25Min, true);
    TriggerEnable(gt_NewBossMode30Min, true);
    TriggerEnable(gt_NewBossMode35Min, true);
    TriggerEnable(gt_NewBossMode40Min, true);
    TriggerEnable(gt_NewBossMode45Min, true);
    TriggerEnable(gt_NewBossMode50Min, true);
    Wait(4.5, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/507C9679"));
    Wait(30.0, c_timeGame);
    gf_NewBossModeInitialSupplyDrop();
    Wait(25.5, c_timeGame);
    gf_SpawnUndead((gv_spawnCount * 2), "Zombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    Wait(60.0, c_timeGame);
    gf_SpawnUndead((gv_spawnCount * 2), "Zombie", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "InfestedCivilian", 1);
    gf_SpawnUndead(4, "Pooch", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossModeInitialize_Init () {
    gt_NewBossModeInitialize = TriggerCreate("gt_NewBossModeInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode 5 Min
//--------------------------------------------------------------------------------------------------
bool gt_NewBossMode5Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/C804FD6E"));
    Wait(4.5, c_timeGame);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(1, "Metasis", 1);
    SoundPlay(SoundLink("TTosh03BMusicEventAAAA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    ObjectiveSetState(gv_secondObj, c_objectiveStateActive);
    ObjectiveSetName(gv_secondObj, StringExternal("Param/Value/7FC38FE1"));
    ObjectiveSetDescription(gv_secondObj, StringExternal("Param/Value/A82024E8"));
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Gargoyle", 1);
    Wait(30.0, c_timeGame);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Shredder", 1);
    Wait(30.0, c_timeGame);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Shredder", 1);
    while (!((UnitGroupCount(UnitGroup("Metasis", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
    gv_newBossMissionCompleted[1] = true;
    Wait(2.0, c_timeGame);
    gf_SucceedMission(75, StringExternal("Param/Value/2F6BB372"), -1, false);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_secondObj, c_objectiveStateHidden);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossMode5Min_Init () {
    gt_NewBossMode5Min = TriggerCreate("gt_NewBossMode5Min_Func");
    TriggerEnable(gt_NewBossMode5Min, false);
    TriggerAddEventTimeElapsed(gt_NewBossMode5Min, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode 10 Min
//--------------------------------------------------------------------------------------------------
bool gt_NewBossMode10Min_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Reinforcements();
    GameSetLighting("AgriaSunset", 15.0);
    gf_MissionText(StringExternal("Param/Value/1BB9E989"));
    Wait(4.5, c_timeGame);
    gf_SpawnUndead(1, "Arachnathid", 1);
    gf_SpawnUndead(1, "Arachnathid", 1);
    SoundPlay(SoundLink("TTosh03BMusicEventAAAA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    ObjectiveSetState(gv_thirdObj, c_objectiveStateActive);
    ObjectiveSetName(gv_thirdObj, StringExternal("Param/Value/7630385B"));
    ObjectiveSetDescription(gv_thirdObj, StringExternal("Param/Value/AF9D2ED6"));
    gf_SpawnUndead(1, "Scorpio", 1);
    gf_SpawnUndead(1, "Scorpio", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndeadIgnoreSupply(1, "Horror", 1);
    gf_SpawnUndeadIgnoreSupply(2, "Spitter", 1);
    gf_SpawnUndeadIgnoreSupply(2, "Spitter", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ZombieWraith", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ZombieWraith", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ZombieWraith", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ZombieWraith", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Weaver", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(1, "Scorpio", 1);
    gf_SpawnUndead(1, "Scorpio", 1);
    while (!((UnitGroupCount(UnitGroup("Arachnathid", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_thirdObj, c_objectiveStateCompleted);
    gv_newBossMissionCompleted[2] = true;
    gf_SucceedMission(125, StringExternal("Param/Value/134ECCB6"), -1, false);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_thirdObj, c_objectiveStateHidden);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossMode10Min_Init () {
    gt_NewBossMode10Min = TriggerCreate("gt_NewBossMode10Min_Func");
    TriggerEnable(gt_NewBossMode10Min, false);
    TriggerAddEventTimeElapsed(gt_NewBossMode10Min, 600.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode 15 Min
//--------------------------------------------------------------------------------------------------
bool gt_NewBossMode15Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/C7AD95F3"), 0, true);
    TriggerEnable(gt_ThanatosLoop, true);
    gf_StartSpawnLoop(2, gv_loopType);
    gf_BlendFog(0.0, 0.0, 0.0, 60.0, 1.0, 11.0, 18.75);
    SoundPlay(SoundLink("DarknessFalls", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringExternal("Param/Value/6E0474EC"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/DFB8D4D2"));
    SoundPlay(SoundLink("THorner04MusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    SoundPlay(SoundLink("HybridF_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnThanatos();
    Wait(2.0, c_timeGame);
    ObjectiveSetState(gv_fourthObj, c_objectiveStateActive);
    ObjectiveSetName(gv_fourthObj, StringExternal("Param/Value/B8C1701A"));
    ObjectiveSetDescription(gv_fourthObj, StringExternal("Param/Value/C187E057"));
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Dilophosaur", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(2, "Cursed", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndeadIgnoreSupply(1, "AcidVore", 1);
    gf_SpawnUndeadIgnoreSupply(1, "AcidVore", 1);
    gf_SpawnUndeadIgnoreSupply(1, "AcidVore", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndeadIgnoreSupply(4, "Bruchus", 1);
    gf_SpawnUndeadIgnoreSupply(4, "Bruchus", 1);
    gf_SpawnUndead(1, "Dilophosaur", 1);
    gf_SpawnUndead(1, "Dilophosaur", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(4, "Cursed", 1);
    while (!((UnitGroupCount(UnitGroup("Thanatos", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_BlendFog(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 18.75);
    ObjectiveSetState(gv_fourthObj, c_objectiveStateCompleted);
    gv_newBossMissionCompleted[3] = true;
    Wait(2.0, c_timeGame);
    gf_SucceedMission(175, StringExternal("Param/Value/1F88C844"), -1, false);
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_RandomFog, true);
    ObjectiveSetState(gv_fourthObj, c_objectiveStateHidden);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossMode15Min_Init () {
    gt_NewBossMode15Min = TriggerCreate("gt_NewBossMode15Min_Func");
    TriggerEnable(gt_NewBossMode15Min, false);
    TriggerAddEventTimeElapsed(gt_NewBossMode15Min, 900.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode 20 Min
//--------------------------------------------------------------------------------------------------
bool gt_NewBossMode20Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoAC90775C_g;
    int autoAC90775C_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/D67F9F45"));
    autoAC90775C_g = gv_players;
    autoAC90775C_var = -1;
    while (true) {
        autoAC90775C_var = PlayerGroupNextPlayer(autoAC90775C_g, autoAC90775C_var);
        if (autoAC90775C_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoAC90775C_var, "CASOnStation", 1);
    }
    gf_Reinforcements();
    gf_MissionText(StringExternal("Param/Value/73BFD10B"));
    Wait(4.5, c_timeGame);
    gf_SpawnUndead(1, "Minerva", 1);
    gf_SpawnUndead(1, "Minerva", 1);
    SoundPlay(SoundLink("TTosh03BMusicEventAAAA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    ObjectiveSetState(gv_fifthObj, c_objectiveStateActive);
    ObjectiveSetName(gv_fifthObj, StringExternal("Param/Value/AFE2547B"));
    ObjectiveSetDescription(gv_fifthObj, StringExternal("Param/Value/D4834DD0"));
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    Wait(9.0, c_timeGame);
    SoundPlay(SoundLink("TTosh03BMusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(1, "Scorpio", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndeadIgnoreSupply(1, "Horror", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndeadIgnoreSupply(1, "ZombieImpaler", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ZombieImpaler", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Livid", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ZombieImpaler", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ZombieImpaler", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndeadIgnoreSupply(1, "StalkerZombie", 1);
    gf_SpawnUndeadIgnoreSupply(1, "StalkerZombie", 1);
    gf_SpawnUndeadIgnoreSupply(1, "StalkerZombie", 1);
    gf_SpawnUndeadIgnoreSupply(1, "StalkerZombie", 1);
    gf_SpawnUndeadIgnoreSupply(2, "ZombieCarrier", 1);
    gf_SpawnUndeadIgnoreSupply(2, "ZombieCarrier", 1);
    gf_SpawnUndeadIgnoreSupply(2, "ZombieCarrier", 1);
    gf_SpawnUndeadIgnoreSupply(2, "ZombieCarrier", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    while (!((UnitGroupCount(UnitGroup("Minerva", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_fifthObj, c_objectiveStateCompleted);
    gv_newBossMissionCompleted[4] = true;
    SoundPlay(SoundLink("AresDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    gf_SucceedMission(225, StringExternal("Param/Value/BE7652B5"), -1, false);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_fifthObj, c_objectiveStateHidden);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossMode20Min_Init () {
    gt_NewBossMode20Min = TriggerCreate("gt_NewBossMode20Min_Func");
    TriggerEnable(gt_NewBossMode20Min, false);
    TriggerAddEventTimeElapsed(gt_NewBossMode20Min, 1200.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode 25 Min
//--------------------------------------------------------------------------------------------------
bool gt_NewBossMode25Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("AgriaNight", 15.0);
    TriggerEnable(gt_WeaponsItems2, true);
    gf_MissionText(StringExternal("Param/Value/2C19642C"));
    Wait(4.5, c_timeGame);
    gf_SpawnUndead(1, "ThresherMaw", 1);
    gf_SpawnUndead(1, "ThresherMaw", 1);
    gf_SpawnUndead(1, "ElectricMaw", 1);
    gf_SpawnUndead(1, "ElectricMaw", 1);
    SoundPlay(SoundLink("TTosh03BMusicEventAAAA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    ObjectiveSetState(gv_sixthObj, c_objectiveStateActive);
    ObjectiveSetName(gv_sixthObj, StringExternal("Param/Value/553BCD31"));
    ObjectiveSetDescription(gv_sixthObj, StringExternal("Param/Value/CCDC7D2A"));
    gf_SpawnUndead(1, "Dilophosaur", 1);
    gf_SpawnUndead(1, "Dilophosaur", 1);
    gf_SpawnUndead(1, "Dilophosaur", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    Wait(9.0, c_timeGame);
    SoundPlay(SoundLink("TTosh03BMusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndeadIgnoreSupply(2, "Morbus", 1);
    gf_SpawnUndeadIgnoreSupply(2, "Morbus", 1);
    gf_SpawnUndeadIgnoreSupply(2, "AcidVore", 1);
    gf_SpawnUndead(1, "Dilophosaur", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Dilophosaur", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ArchVile", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Dilophosaur", 1);
    gf_SpawnUndead(1, "Dilophosaur", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    while (!((UnitGroupCount(UnitGroup("ThresherMaw", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("ElectricMaw", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_sixthObj, c_objectiveStateCompleted);
    gv_newBossMissionCompleted[5] = true;
    SoundPlay(SoundLink("NydusWorm_Death", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    gf_SucceedMission(275, StringExternal("Param/Value/C8F4F0C7"), -1, false);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_sixthObj, c_objectiveStateHidden);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossMode25Min_Init () {
    gt_NewBossMode25Min = TriggerCreate("gt_NewBossMode25Min_Func");
    TriggerEnable(gt_NewBossMode25Min, false);
    TriggerAddEventTimeElapsed(gt_NewBossMode25Min, 1500.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode 30 Min
//--------------------------------------------------------------------------------------------------
bool gt_NewBossMode30Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/6C3EFDE9"), 0, true);
    gf_Reinforcements();
    gf_MissionText(StringExternal("Param/Value/C364A194"));
    Wait(4.5, c_timeGame);
    gf_SpawnUndead(1, "Ares", 1);
    gf_SpawnUndead(1, "Ares", 1);
    SoundPlay(SoundLink("TTosh03BMusicEventAAAA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    ObjectiveSetState(gv_seventhObj, c_objectiveStateActive);
    ObjectiveSetName(gv_seventhObj, StringExternal("Param/Value/C59F20E5"));
    ObjectiveSetDescription(gv_seventhObj, StringExternal("Param/Value/7E802B5E"));
    gf_SpawnUndeadMixed(1, "Hunter", "Baron", null, 2, 1, 0);
    gf_SpawnUndeadMixed(1, "Hunter", "Baron", null, 2, 1, 0);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(9.0, c_timeGame);
    SoundPlay(SoundLink("TTosh03BMusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Raisuli", 1);
    gf_SpawnUndead(3, "Weaver", 1);
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("THorner04MusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(20.0, c_timeGame);
    gf_SpawnUndeadMixed(1, "Hunter", "Baron", null, 2, 1, 0);
    gf_SpawnUndeadMixed(1, "Hunter", "Baron", null, 2, 1, 0);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndeadIgnoreSupply(1, "ArchVile", 1);
    gf_SpawnUndeadMixed(1, "Hunter", "Baron", null, 2, 1, 0);
    gf_SpawnUndeadMixed(1, "Hunter", "Baron", null, 2, 1, 0);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    while (!((UnitGroupCount(UnitGroup("Ares", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_seventhObj, c_objectiveStateCompleted);
    gv_newBossMissionCompleted[6] = true;
    Wait(2.0, c_timeGame);
    gf_SucceedMission(325, StringExternal("Param/Value/B15A5F0A"), -1, false);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_seventhObj, c_objectiveStateHidden);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossMode30Min_Init () {
    gt_NewBossMode30Min = TriggerCreate("gt_NewBossMode30Min_Func");
    TriggerEnable(gt_NewBossMode30Min, false);
    TriggerAddEventTimeElapsed(gt_NewBossMode30Min, 1800.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode 35 Min
//--------------------------------------------------------------------------------------------------
bool gt_NewBossMode35Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_StartSpawnLoop(3, gv_loopType);
    gf_MissionText(StringExternal("Param/Value/0DD081F7"));
    Wait(4.5, c_timeGame);
    gf_SpawnUndead(1, "Kraith", 1);
    gf_SpawnUndead(1, "Slivan", 1);
    SoundPlay(SoundLink("TTosh03BMusicEventAAAA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    ObjectiveSetState(gv_eigthObj, c_objectiveStateActive);
    ObjectiveSetName(gv_eigthObj, StringExternal("Param/Value/92C5519B"));
    ObjectiveSetDescription(gv_eigthObj, StringExternal("Param/Value/CAD3D56A"));
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Scorpio", 1);
    gf_SpawnUndead(1, "Baron", 1);
    gf_SpawnUndead(4, "Cursed", 1);
    Wait(9.0, c_timeGame);
    SoundPlay(SoundLink("TTosh03BMusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Scorpio", 1);
    gf_SpawnUndead(1, "Scorpio", 1);
    gf_SpawnUndead(1, "Baron", 1);
    gf_SpawnUndead(1, "Baron", 1);
    gf_SpawnUndead(1, "Livid", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndead(2, "Scorpio", 1);
    gf_SpawnUndead(4, "Cursed", 1);
    gf_SpawnUndead(4, "Cursed", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(4, "Cursed", 1);
    gf_SpawnUndead(4, "Cursed", 1);
    gf_SpawnUndead(1, "Livid", 1);
    while (!((UnitGroupCount(UnitGroup("Kraith", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Slivan", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_eigthObj, c_objectiveStateCompleted);
    gv_newBossMissionCompleted[7] = true;
    Wait(2.0, c_timeGame);
    gf_SucceedMission(375, StringExternal("Param/Value/1162A81C"), -1, false);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_eigthObj, c_objectiveStateHidden);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossMode35Min_Init () {
    gt_NewBossMode35Min = TriggerCreate("gt_NewBossMode35Min_Func");
    TriggerEnable(gt_NewBossMode35Min, false);
    TriggerAddEventTimeElapsed(gt_NewBossMode35Min, 2100.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode 40 Min
//--------------------------------------------------------------------------------------------------
bool gt_NewBossMode40Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("THanson02MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringExternal("Param/Value/26282B69"));
    Wait(4.5, c_timeGame);
    gf_SpawnUndead(1, "WraithLord", 1);
    gf_SpawnUndead(1, "RedstoneLavaCritter", 1);
    SoundPlay(SoundLink("TTosh03BMusicEventAAAA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    ObjectiveSetState(gv_ninthObj, c_objectiveStateActive);
    ObjectiveSetName(gv_ninthObj, StringExternal("Param/Value/A2A3144B"));
    ObjectiveSetDescription(gv_ninthObj, StringExternal("Param/Value/01973106"));
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(1, "Grotesque", 1);
    gf_SpawnUndeadIgnoreSupply(2, "ZombieWraith", 1);
    gf_SpawnUndeadIgnoreSupply(2, "ZombieWraith", 1);
    gf_SpawnUndeadIgnoreSupply(3, "StalkerZombie", 1);
    gf_SpawnUndeadIgnoreSupply(3, "StalkerZombie", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Krill", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Krill", 1);
    Wait(9.0, c_timeGame);
    gf_SpawnUndeadIgnoreSupply(2, "ZombieWraith", 1);
    gf_SpawnUndeadIgnoreSupply(2, "ZombieWraith", 1);
    gf_SpawnUndeadIgnoreSupply(2, "ZombieWraith", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Krill", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Krill", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndeadIgnoreSupply(2, "ZombieWraith", 1);
    gf_SpawnUndeadIgnoreSupply(2, "ZombieWraith", 1);
    gf_SpawnUndeadIgnoreSupply(2, "ZombieWraith", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndeadIgnoreSupply(3, "StalkerZombie", 1);
    gf_SpawnUndeadIgnoreSupply(3, "StalkerZombie", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndeadIgnoreSupply(4, "ZombieWraith", 1);
    gf_SpawnUndeadIgnoreSupply(4, "ZombieWraith", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndeadIgnoreSupply(3, "StalkerZombie", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Krill", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Krill", 1);
    gf_SpawnUndeadIgnoreSupply(gv_spawnCount, "Krill", 1);
    while (!((UnitGroupCount(UnitGroup("WraithLord", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("RedstoneLavaCritter", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_ninthObj, c_objectiveStateCompleted);
    gv_newBossMissionCompleted[8] = true;
    Wait(2.0, c_timeGame);
    gf_SucceedMission(425, StringExternal("Param/Value/F96CC0AF"), -1, false);
    SoundPlay(SoundLink("TTosh03BMusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_ninthObj, c_objectiveStateHidden);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossMode40Min_Init () {
    gt_NewBossMode40Min = TriggerCreate("gt_NewBossMode40Min_Func");
    TriggerEnable(gt_NewBossMode40Min, false);
    TriggerAddEventTimeElapsed(gt_NewBossMode40Min, 2400.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode 45 Min
//--------------------------------------------------------------------------------------------------
bool gt_NewBossMode45Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/74D2EDEB"), 0, true);
    gf_MissionText(StringExternal("Param/Value/58DCB0BE"));
    Wait(4.5, c_timeGame);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Cacumen", 1);
    SoundPlay(SoundLink("TTosh03BMusicEventAAAA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    ObjectiveSetState(gv_tenthObj, c_objectiveStateActive);
    ObjectiveSetName(gv_tenthObj, StringExternal("Param/Value/C8179C3D"));
    ObjectiveSetDescription(gv_tenthObj, StringExternal("Param/Value/BDA915BB"));
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "Scorpio", 1);
    gf_SpawnUndead(2, "Cursed", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ArchVile", 1);
    Wait(9.0, c_timeGame);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(3, "Weaver", 1);
    gf_SpawnUndead(1, "Livid", 1);
    gf_SpawnUndead(4, "Cursed", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ArchVile", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndeadMixed(1, "Hunter", "Baron", null, 2, 1, 0);
    gf_SpawnUndeadMixed(1, "Hunter", "Baron", null, 2, 1, 0);
    gf_SpawnUndead(2, "Scorpio", 1);
    gf_SpawnUndead(2, "Scorpio", 1);
    gf_SpawnUndead(6, "Cursed", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ArchVile", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndead(2, "Baron", 1);
    while (!((UnitGroupCount(UnitGroup("Darreus", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Cacumen", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_tenthObj, c_objectiveStateCompleted);
    gv_newBossMissionCompleted[9] = true;
    Wait(2.0, c_timeGame);
    gf_SucceedMission(475, StringExternal("Param/Value/5F25A323"), -1, false);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_tenthObj, c_objectiveStateHidden);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossMode45Min_Init () {
    gt_NewBossMode45Min = TriggerCreate("gt_NewBossMode45Min_Func");
    TriggerEnable(gt_NewBossMode45Min, false);
    TriggerAddEventTimeElapsed(gt_NewBossMode45Min, 2700.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode 50 Min
//--------------------------------------------------------------------------------------------------
bool gt_NewBossMode50Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9B756211_n = 5;
    int auto9B756211_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/7D3FCE94"));
    Wait(4.5, c_timeGame);
    gf_SpawnUndead(1, "Dehaka", 1);
    SoundPlay(SoundLink("TTosh03BMusicEventAAAA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    ObjectiveSetState(gv_eleventhObj, c_objectiveStateActive);
    ObjectiveSetName(gv_eleventhObj, StringExternal("Param/Value/E5D50E54"));
    ObjectiveSetDescription(gv_eleventhObj, StringExternal("Param/Value/1CD7E650"));
    if ((gv_mod_UT1 == true)) {
        ObjectiveSetState(gv_twelfthObj, c_objectiveStateActive);
        ObjectiveSetName(gv_twelfthObj, StringExternal("Param/Value/A28F550D"));
        ObjectiveSetDescription(gv_twelfthObj, StringExternal("Param/Value/CE9BE7F4"));
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "Genesis", 1);
        for (auto9B756211_i = 1; auto9B756211_i <= auto9B756211_n; auto9B756211_i += 1) {
            gf_SpawnUndead(2, "Metasis", 1);
        }
    }
    gf_SpawnUndead(2, "Scorpio", 1);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndead(2, "Scorpio", 1);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ArchVile", 1);
    Wait(9.0, c_timeGame);
    libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
    SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "FinalDOOMDOOM2Soundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    gf_SpawnUndead(2, "Scorpio", 1);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndead(2, "Scorpio", 1);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ArchVile", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(2, "Scorpio", 1);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndead(2, "Scorpio", 1);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ArchVile", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(2, "Scorpio", 1);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndead(2, "Scorpio", 1);
    gf_SpawnUndead(2, "Baron", 1);
    gf_SpawnUndeadIgnoreSupply(1, "ArchVile", 1);
    while (!((UnitGroupCount(UnitGroup("Dehaka", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_eleventhObj, c_objectiveStateCompleted);
    if ((gv_mod_UT1 == true)) {
        while (!((UnitGroupCount(UnitGroup("Genesis", 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (gv_gameOver == false))) {
            Wait(1.0, c_timeGame);
        }
        ObjectiveSetState(gv_twelfthObj, c_objectiveStateCompleted);
    }
    gv_newBossMissionCompleted[10] = true;
    Wait(2.0, c_timeGame);
    gf_SucceedMission(525, StringExternal("Param/Value/9AC90695"), -1, false);
    if ((gv_mod_UT1 == true)) {
        gf_SucceedMission(5000, StringExternal("Param/Value/80428882"), -1, false);
    }
    Wait(5.0, c_timeGame);
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/0492D61D"), 0, true);
    ObjectiveSetState(gv_eleventhObj, c_objectiveStateHidden);
    if ((gv_mod_UT1 == true)) {
        ObjectiveSetState(gv_twelfthObj, c_objectiveStateHidden);
    }
    TriggerExecute(gt_NewBossModeKillCheck, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossMode50Min_Init () {
    gt_NewBossMode50Min = TriggerCreate("gt_NewBossMode50Min_Func");
    TriggerEnable(gt_NewBossMode50Min, false);
    TriggerAddEventTimeElapsed(gt_NewBossMode50Min, 3000.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode Kill Check
//--------------------------------------------------------------------------------------------------
bool gt_NewBossModeKillCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_modeCompleted;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_newBossMissionCompleted[1] == true) && (gv_newBossMissionCompleted[2] == true) && (gv_newBossMissionCompleted[3] == true) && (gv_newBossMissionCompleted[4] == true) && (gv_newBossMissionCompleted[5] == true) && (gv_newBossMissionCompleted[6] == true) && (gv_newBossMissionCompleted[7] == true) && (gv_newBossMissionCompleted[8] == true) && (gv_newBossMissionCompleted[9] == true) && (gv_newBossMissionCompleted[10] == true)) {
            lv_modeCompleted = true;
            break;
        }
        Wait(5.0, c_timeGame);
    }
    if ((lv_modeCompleted == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        TriggerExecute(gt_NewBossModeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossModeKillCheck_Init () {
    gt_NewBossModeKillCheck = TriggerCreate("gt_NewBossModeKillCheck_Func");
    TriggerEnable(gt_NewBossModeKillCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Boss Mode End
//--------------------------------------------------------------------------------------------------
bool gt_NewBossModeEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5E52862D_g;
    int auto5E52862D_u;
    unit auto5E52862D_var;
    unitgroup autoB6161A6D_g;
    int autoB6161A6D_u;
    unit autoB6161A6D_var;
    playergroup auto6683AA89_g;
    int auto6683AA89_var;
    playergroup auto08CED4FB_g;
    int auto08CED4FB_var;
    playergroup autoD95FBC51_g;
    int autoD95FBC51_var;
    playergroup auto4F286D69_g;
    int auto4F286D69_var;
    playergroup auto9327A1D3_g;
    int auto9327A1D3_var;
    playergroup auto84B48224_g;
    int auto84B48224_var;
    playergroup autoD0CB6B84_g;
    int autoD0CB6B84_var;
    playergroup auto1D39159F_g;
    int auto1D39159F_var;
    playergroup auto52BEEA93_g;
    int auto52BEEA93_var;
    playergroup auto459304C3_g;
    int auto459304C3_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_victory = true;
    gf_MissionText(StringExternal("Param/Value/04107375"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    SoundPlay(SoundLink("TRaynor01MusicOutro", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitPauseAll(true);
    auto5E52862D_g = gv_undeadGroup;
    auto5E52862D_u = UnitGroupCount(auto5E52862D_g, c_unitCountAll);
    for (;; auto5E52862D_u -= 1) {
        auto5E52862D_var = UnitGroupUnitFromEnd(auto5E52862D_g, auto5E52862D_u);
        if (auto5E52862D_var == null) { break; }
        UnitRemove(auto5E52862D_var);
    }
    autoB6161A6D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB6161A6D_u = UnitGroupCount(autoB6161A6D_g, c_unitCountAll);
    for (;; autoB6161A6D_u -= 1) {
        autoB6161A6D_var = UnitGroupUnitFromEnd(autoB6161A6D_g, autoB6161A6D_u);
        if (autoB6161A6D_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoB6161A6D_var, true);
    }
    gv_pauseSpawning = true;
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00081", 0), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(1.0, c_timeGame);
    auto6683AA89_g = gv_players;
    auto6683AA89_var = -1;
    while (true) {
        auto6683AA89_var = PlayerGroupNextPlayer(auto6683AA89_g, auto6683AA89_var);
        if (auto6683AA89_var < 0) { break; }
        gv_gamesWon[gv_gamemode][auto6683AA89_var] = (gv_gamesWon[gv_gamemode][auto6683AA89_var] + 1);
    }
    gf_DisplayScoreScreen();
    auto08CED4FB_g = gv_players;
    auto08CED4FB_var = -1;
    while (true) {
        auto08CED4FB_var = PlayerGroupNextPlayer(auto08CED4FB_g, auto08CED4FB_var);
        if (auto08CED4FB_var < 0) { break; }
        if ((gv_gamesWon[gv_gamemode][auto08CED4FB_var] >= 10) && (GameIsOnline() == true) && (gv_sIunlocked[27][auto08CED4FB_var] == false)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto08CED4FB_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto08CED4FB_var), c_messageAreaSubtitle, StringExternal("Param/Value/8F2BDFD4"));
            gv_sIunlocked[27][auto08CED4FB_var] = true;
        }

    }
    autoD95FBC51_g = gv_players;
    autoD95FBC51_var = -1;
    while (true) {
        autoD95FBC51_var = PlayerGroupNextPlayer(autoD95FBC51_g, autoD95FBC51_var);
        if (autoD95FBC51_var < 0) { break; }
        if ((gv_playercamounlocked[37][autoD95FBC51_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoD95FBC51_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(autoD95FBC51_var), c_messageAreaSubtitle, StringExternal("Param/Value/DA94D71F"));
            gv_playercamounlocked[37][autoD95FBC51_var] = true;
        }

    }
    auto4F286D69_g = gv_players;
    auto4F286D69_var = -1;
    while (true) {
        auto4F286D69_var = PlayerGroupNextPlayer(auto4F286D69_g, auto4F286D69_var);
        if (auto4F286D69_var < 0) { break; }
        if (((UnitGetType(gv_playerHeroes[auto4F286D69_var]) == "CombatEngineer") || (UnitGetType(gv_playerHeroes[auto4F286D69_var]) == "CombatEngineer2")) && (gv_sIunlocked[50][auto4F286D69_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto4F286D69_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto4F286D69_var), c_messageAreaSubtitle, StringExternal("Param/Value/128C6757"));
            gv_sIunlocked[50][auto4F286D69_var] = true;
        }

    }
    auto9327A1D3_g = gv_players;
    auto9327A1D3_var = -1;
    while (true) {
        auto9327A1D3_var = PlayerGroupNextPlayer(auto9327A1D3_g, auto9327A1D3_var);
        if (auto9327A1D3_var < 0) { break; }
        if ((((gv_startingplayers == 8) && (UnitGetType(gv_playerHeroes[auto9327A1D3_var]) == "Rifleman")) || (gv_mod_rifle == true)) && (gv_sIunlocked[32][auto9327A1D3_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto9327A1D3_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto9327A1D3_var), c_messageAreaSubtitle, StringExternal("Param/Value/240E0E7A"));
            gv_sIunlocked[32][auto9327A1D3_var] = true;
        }

    }
    auto84B48224_g = gv_players;
    auto84B48224_var = -1;
    while (true) {
        auto84B48224_var = PlayerGroupNextPlayer(auto84B48224_g, auto84B48224_var);
        if (auto84B48224_var < 0) { break; }
        if ((gv_playerdecalunlocked[26][auto84B48224_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto84B48224_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto84B48224_var), c_messageAreaSubtitle, StringExternal("Param/Value/A17A83EA"));
            gv_playerdecalunlocked[26][auto84B48224_var] = true;
        }

    }
    if ((gv_startingplayers <= 4) && (gv_startingplayers >= 2) && (GameIsOnline() == true)) {
        autoD0CB6B84_g = gv_players;
        autoD0CB6B84_var = -1;
        while (true) {
            autoD0CB6B84_var = PlayerGroupNextPlayer(autoD0CB6B84_g, autoD0CB6B84_var);
            if (autoD0CB6B84_var < 0) { break; }
            if ((gv_playercamounlocked[39][autoD0CB6B84_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoD0CB6B84_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoD0CB6B84_var), c_messageAreaSubtitle, StringExternal("Param/Value/850A0007"));
                gv_playercamounlocked[39][autoD0CB6B84_var] = true;
            }

        }
    }

    gv_gameWon = true;
    if ((GameIsOnline() == true)) {
        auto1D39159F_g = gv_players;
        auto1D39159F_var = -1;
        while (true) {
            auto1D39159F_var = PlayerGroupNextPlayer(auto1D39159F_g, auto1D39159F_var);
            if (auto1D39159F_var < 0) { break; }
            gf_UnlockAchievement(auto1D39159F_var);
        }
    }

    auto52BEEA93_g = gv_players;
    auto52BEEA93_var = -1;
    while (true) {
        auto52BEEA93_var = PlayerGroupNextPlayer(auto52BEEA93_g, auto52BEEA93_var);
        if (auto52BEEA93_var < 0) { break; }
        UIDisplayMessage(PlayerGroupSingle(auto52BEEA93_var), c_messageAreaError, StringExternal("Param/Value/7A82EB2C"));
        gf_SavePlayerProgress(auto52BEEA93_var);
    }
    gv_gameOver = true;
    Wait(180.0, c_timeGame);
    auto459304C3_g = gv_players;
    auto459304C3_var = -1;
    while (true) {
        auto459304C3_var = PlayerGroupNextPlayer(auto459304C3_g, auto459304C3_var);
        if (auto459304C3_var < 0) { break; }
        GameOver(auto459304C3_var, c_gameOverVictory, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NewBossModeEnd_Init () {
    gt_NewBossModeEnd = TriggerCreate("gt_NewBossModeEnd_Func");
    TriggerEnable(gt_NewBossModeEnd, false);
    TriggerAddEventTimer(gt_NewBossModeEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ion Cannon Umbra
//--------------------------------------------------------------------------------------------------
bool gt_IonCannonUmbra_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_RandomPercent() <= 35.0)) {
        UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IonCannonUmbra_Init () {
    gt_IonCannonUmbra = TriggerCreate("gt_IonCannonUmbra_Func");
    TriggerAddEventUnitCreated(gt_IonCannonUmbra, null, "IonCannonGhost", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call For Fire Aspectus
//--------------------------------------------------------------------------------------------------
bool gt_CallForFireAspectus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_shells;
    fixed lv_radius;
    actor lv_warning;
    fixed lv_distribution;
    fixed lv_interval;
    int lv_int;

    // Automatic Variable Declarations
    playergroup auto6EE39ADB_g;
    int auto6EE39ADB_var;
    playergroup auto66BBD4E3_g;
    int auto66BBD4E3_var;
    playergroup autoC6021215_g;
    int autoC6021215_var;
    int auto0CF33FF5_ae;
    const int auto0CF33FF5_ai = 1;
    int auto55E4B2CF_n;
    int auto55E4B2CF_i;

    // Variable Initialization
    lv_shells = 5;
    lv_radius = 6.0;
    lv_distribution = -1.0;
    lv_interval = RandomFixed(0.1, 1.0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(0, 1) == 1)) {
        lv_distribution = libNtve_gf_RandomAngle();
        lv_radius = RandomFixed(2.0, 5.0);
    }

    libNtve_gf_CreateActorAtPoint("CallForFireWarning", EventUnitTargetPoint());
    lv_warning = libNtve_gf_ActorLastCreated();
    auto6EE39ADB_g = gv_players;
    auto6EE39ADB_var = -1;
    while (true) {
        auto6EE39ADB_var = PlayerGroupNextPlayer(auto6EE39ADB_g, auto6EE39ADB_var);
        if (auto6EE39ADB_var < 0) { break; }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(auto6EE39ADB_var), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0, 270.0);
    }
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EBD02DAA"));
    Wait(RandomFixed(3.0, 6.0), c_timeGame);
    auto66BBD4E3_g = PlayerGroupAll();
    auto66BBD4E3_var = -1;
    while (true) {
        auto66BBD4E3_var = PlayerGroupNextPlayer(auto66BBD4E3_g, auto66BBD4E3_var);
        if (auto66BBD4E3_var < 0) { break; }
        VisRevealArea(auto66BBD4E3_var, RegionCircle(EventUnitTargetPoint(), 5.0), 8.0, false);
    }
    SoundPlayAtPoint(SoundLink("IDFIncoming", -1), PlayerGroupAll(), EventUnitTargetPoint(), 0.0, 100.0, 0.0);
    Wait(1.0, c_timeGame);
    ActorSend(lv_warning, "Destroy");
    autoC6021215_g = PlayerGroupAll();
    autoC6021215_var = -1;
    while (true) {
        autoC6021215_var = PlayerGroupNextPlayer(autoC6021215_g, autoC6021215_var);
        if (autoC6021215_var < 0) { break; }
        VisRevealArea(autoC6021215_var, RegionCircle(EventUnitTargetPoint(), 5.0), 8.0, false);
    }
    if ((lv_distribution == -1.0)) {
        auto55E4B2CF_n = lv_shells;
        for (auto55E4B2CF_i = 1; auto55E4B2CF_i <= auto55E4B2CF_n; auto55E4B2CF_i += 1) {
            Wait(lv_interval, c_timeGame);
            gf_DropShellatTargetPMC(PointWithOffsetPolar(EventUnitTargetPoint(), RandomFixed(0.0, lv_radius), libNtve_gf_RandomAngle()), "CallForFirePLLaunch", EventPlayer());
        }
    }
    else {
        auto0CF33FF5_ae = lv_shells;
        lv_int = 1;
        for ( ; ( (auto0CF33FF5_ai >= 0 && lv_int <= auto0CF33FF5_ae) || (auto0CF33FF5_ai < 0 && lv_int >= auto0CF33FF5_ae) ) ; lv_int += auto0CF33FF5_ai ) {
            Wait(lv_interval, c_timeGame);
            gf_DropShellatTargetPMC(PointWithOffsetPolar(EventUnitTargetPoint(), ((lv_int - 1) * lv_radius), lv_distribution), "CallForFirePLLaunch", EventPlayer());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CallForFireAspectus_Init () {
    gt_CallForFireAspectus = TriggerCreate("gt_CallForFireAspectus_Func");
    TriggerAddEventUnitAbility(gt_CallForFireAspectus, null, AbilityCommand("CallForFireAspectus", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Party Hat
//--------------------------------------------------------------------------------------------------
bool gt_PartyHat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AttachModelToUnit(EventUnit(), "AnniversaryHatTerran", "Ref_Head");
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.430000 0.000000 s");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartyHat_Init () {
    gt_PartyHat = TriggerCreate("gt_PartyHat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frag Out Warning PMC
//--------------------------------------------------------------------------------------------------
bool gt_FragOutWarningPMC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pmc;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pmc = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((lv_pmc == 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AIScatterFromPoint(EventUnitTargetPoint(), 4.0);
    if ((RandomInt(0, 10) == 1)) {
        TextTagCreate((TextWithColor(PlayerName(lv_pmc), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pmc, false))) + StringExternal("Param/Value/B1F954CD")), 18, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
    }
    else {
        TextTagCreate((TextWithColor(PlayerName(lv_pmc), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pmc, false))) + StringExternal("Param/Value/66BD15C8")), 18, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
    }
    TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 1.0);
    TextTagSetTextShadow(TextTagLastCreated(), false);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 3.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FragOutWarningPMC_Init () {
    gt_FragOutWarningPMC = TriggerCreate("gt_FragOutWarningPMC_Func");
    TriggerAddEventUnitAbility(gt_FragOutWarningPMC, null, AbilityCommand("FragGrenadePMC", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Squad Loop
//--------------------------------------------------------------------------------------------------
bool gt_SquadLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_squadIndex;

    // Automatic Variable Declarations
    int auto6F74CF0C_ae;
    const int auto6F74CF0C_ai = 1;
    unitgroup auto5535AF77_g;
    int auto5535AF77_u;
    unit auto5535AF77_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_pMCSquadCount > 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F74CF0C_ae = gv_pMCSquadCount;
    lv_squadIndex = 1;
    for ( ; ( (auto6F74CF0C_ai >= 0 && lv_squadIndex <= auto6F74CF0C_ae) || (auto6F74CF0C_ai < 0 && lv_squadIndex >= auto6F74CF0C_ae) ) ; lv_squadIndex += auto6F74CF0C_ai ) {
        if ((gv_phantomDownLZ == 0)) {
            if ((gv_pMCSquads[lv_squadIndex].lv_extracting == true) && (libNtve_gf_UnitGroupIsDead(gv_phantomCrew) == false)) {
                auto5535AF77_g = gv_pMCSquads[lv_squadIndex].lv_group;
                auto5535AF77_u = UnitGroupCount(auto5535AF77_g, c_unitCountAll);
                for (;; auto5535AF77_u -= 1) {
                    auto5535AF77_var = UnitGroupUnitFromEnd(auto5535AF77_g, auto5535AF77_u);
                    if (auto5535AF77_var == null) { break; }
                    UnitIssueOrder(auto5535AF77_var, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGroupCenterOfGroup(gv_phantomCrew), RandomFixed(1.0, 5.0), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }
            }
            else {
                if ((libNtve_gf_UnitGroupIsDead(gv_phantomCrew) == false)) {
                    if ((UnitGetOwner(UnitGroupRandomUnit(gv_phantomCrew, c_unitCountAlive)) == 15)) {
                        UnitGroupIssueOrder(gv_pMCSquads[lv_squadIndex].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGroupCenterOfGroup(gv_phantomCrew), RandomFixed(8.0, 25.0), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    }
                    else {
                        gf_SquadAttackPosition(lv_squadIndex, UnitGetPosition(UnitGroupRandomUnit(gv_phantomCrew, c_unitCountAlive)));
                    }
                }
                else {
                    if ((gv_pMCAlert == true) && (RandomInt(0, 2) != 0)) {
                        gf_SquadAttackPosition(lv_squadIndex, UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)));
                    }
                    else {
                        UnitGroupIssueOrder(gv_pMCSquads[lv_squadIndex].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
                    }
                }
            }
        }
        else {
            if ((gv_pMCAlert == true) && (RandomInt(0, 2) != 0)) {
                gf_SquadAttackPosition(lv_squadIndex, UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)));
            }
            else {
                UnitGroupIssueOrder(gv_pMCSquads[lv_squadIndex].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_lZs[gv_phantomDownLZ])), c_orderQueueReplace);
            }
        }
        Wait(0.25, c_timeGame);
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_phantomCrew) == false) && (gv_phantomDownLZ == 0)) {
        UnitGroupIssueOrder(gv_phantomCrew, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_tCPSpawns[gv_phantomCrewExtraction])), c_orderQueueReplace);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGroupCenterOfGroup(gv_phantomCrew), ColorWithAlpha(100.00, 0.00, 0.00, 49.41), 4.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CDF35FA6"));
        PingSetUnit(PingLastCreated(), UnitGroupRandomUnit(gv_phantomCrew, c_unitCountAlive));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SquadLoop_Init () {
    gt_SquadLoop = TriggerCreate("gt_SquadLoop_Func");
    TriggerEnable(gt_SquadLoop, false);
    TriggerAddEventTimePeriodic(gt_SquadLoop, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Squad Contact
//--------------------------------------------------------------------------------------------------
bool gt_SquadContact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pMC;
    unit lv_player;
    int lv_squad;
    text[2] lv_text;
    int lv_randomTxt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser) || (PlayerType(UnitGetOwner(EventUnitTarget())) == c_playerTypeUser) || (EventPlayer() == 13) || (UnitGetOwner(EventUnitTarget()) == 13)))) {
            return false;
        }

        if (!(((EventPlayer() == 15) || (UnitGetOwner(EventUnitTarget()) == 15)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_randomTxt = RandomInt(1, 3);
    if ((EventPlayer() == 15)) {
        lv_pMC = EventUnit();
        lv_player = EventUnitTarget();
    }
    else {
        lv_pMC = EventUnitTarget();
        lv_player = EventUnit();
    }
    gv_pMCAlert = true;
    TimerStart(gv_pMCAlertTimer, 60.0, false, c_timeGame);
    lv_squad = FixedToInt(UnitGetCustomValue(lv_pMC, 4));
    if ((lv_squad != 0)) {
        gf_SquadAttackPosition(lv_squad, UnitGetPosition(lv_player));
        if ((UnitIsAlive(gv_pMCSquads[lv_squad].lv_squadLeader) == true) && (gv_pMCSquadText[lv_squad].lv_enabled == false)) {
            gf_PMCTextSwitch(lv_randomTxt, lv_squad);
        }

    }

    TriggerExecute(gt_SquadLoop, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(8.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SquadContact_Init () {
    gt_SquadContact = TriggerCreate("gt_SquadContact_Func");
    TriggerEnable(gt_SquadContact, false);
    TriggerAddEventUnitAttacked2(gt_SquadContact, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Alert Expire
//--------------------------------------------------------------------------------------------------
bool gt_PMCAlertExpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_pMCAlert = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCAlertExpire_Init () {
    gt_PMCAlertExpire = TriggerCreate("gt_PMCAlertExpire_Func");
    TriggerEnable(gt_PMCAlertExpire, false);
    TriggerAddEventTimer(gt_PMCAlertExpire, gv_pMCAlertTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Periodic Spawn
//--------------------------------------------------------------------------------------------------
bool gt_PMCPeriodicSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(0, 2) == 1)) {
        if ((RandomInt(0, 10) == 1)) {
            gf_SpawnPMCSquad(27, 0);
        }
        if ((RandomInt(0, 3) == 1)) {
            gf_SpawnPMCSquad(15, 0);
        }
        else {
            gf_SpawnPMCSquad(RandomInt(1, 5), 0);
        }
    }
    else {
        gf_SpawnPMCSquad(1, 0);
    }
    if ((gv_hyperpmcEnabled)) {
        if ((RandomInt(0, 2) == 1)) {
            if ((RandomInt(0, 10) == 1)) {
                gf_SpawnPMCSquad(27, 0);
            }
            if ((RandomInt(0, 3) == 1)) {
                gf_SpawnPMCSquad(15, 0);
            }
            else {
                gf_SpawnPMCSquad(RandomInt(1, 5), 0);
            }
        }
        else {
            gf_SpawnPMCSquad(1, 0);
        }
        if ((RandomInt(0, 2) == 1)) {
            if ((RandomInt(0, 4) == 1) && (GameGetMissionTime() >= 900.0)) {
                gf_SpawnPMCSquad(29, 0);
            }
            else {
                if ((RandomInt(0, 4) == 1) && (GameGetMissionTime() >= 1200.0)) {
                    gf_SpawnPMCSquad(28, 0);
                }
                else {
                    if ((RandomInt(0, 4) == 1) && (GameGetMissionTime() >= 1800.0)) {
                        gf_SpawnPMCSquad(30, 0);
                    }
                    else {
                        if ((RandomInt(0, 4) == 1) && (GameGetMissionTime() >= 2400.0)) {
                            gf_SpawnPMCSquad(6, 0);
                        }

                    }
                }
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCPeriodicSpawn_Init () {
    gt_PMCPeriodicSpawn = TriggerCreate("gt_PMCPeriodicSpawn_Func");
    TriggerEnable(gt_PMCPeriodicSpawn, false);
    TriggerAddEventTimePeriodic(gt_PMCPeriodicSpawn, 190.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Idle
//--------------------------------------------------------------------------------------------------
bool gt_PMCIdle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_squadIndex;
    point lv_point;

    // Automatic Variable Declarations
    int autoD8275305_ae;
    const int autoD8275305_ai = 1;

    // Variable Initialization
    lv_point = RegionRandomPoint(RegionPlayableMap());

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD8275305_ae = gv_pMCSquadCount;
    lv_squadIndex = 1;
    for ( ; ( (autoD8275305_ai >= 0 && lv_squadIndex <= autoD8275305_ae) || (autoD8275305_ai < 0 && lv_squadIndex >= autoD8275305_ae) ) ; lv_squadIndex += autoD8275305_ai ) {
        if ((UnitGroupHasUnit(gv_pMCSquads[lv_squadIndex].lv_group, EventUnit()) == true)) {
            if ((RandomInt(0, 2) != 0)) {
                UnitGroupIssueOrder(gv_pMCSquads[lv_squadIndex].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
            }
            else {
                UnitGroupIssueOrder(gv_pMCSquads[lv_squadIndex].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive))), c_orderQueueReplace);
            }
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCIdle_Init () {
    gt_PMCIdle = TriggerCreate("gt_PMCIdle_Func");
    TriggerEnable(gt_PMCIdle, false);
    TriggerAddEventUnitBecomesIdle(gt_PMCIdle, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove PMC Item
//--------------------------------------------------------------------------------------------------
bool gt_RemovePMCItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_chance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chance = libNtve_gf_RandomPercent();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gamemode == 11) && (lv_chance <= 3.5)) {
    }
    else {
        UnitRemove(EventUnitInventoryItem());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemovePMCItem_Init () {
    gt_RemovePMCItem = TriggerCreate("gt_RemovePMCItem_Func");
    TriggerEnable(gt_RemovePMCItem, false);
    TriggerAddEventUnitInventoryChange(gt_RemovePMCItem, null, c_unitInventoryChangeDrops, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Mode
//--------------------------------------------------------------------------------------------------
bool gt_PMCMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    unitgroup auto45C8DA53_g;
    int auto45C8DA53_u;
    unit auto45C8DA53_var;
    playergroup autoA56864BB_g;
    int autoA56864BB_var;
    playergroup auto25CFCA1C_g;
    int auto25CFCA1C_var;
    playergroup autoDBAB642A_g;
    int autoDBAB642A_var;
    playergroup auto42771139_g;

    // Variable Initialization
    lv_int = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RemovePMCItem, true);
    TriggerEnable(gt_PMCIdle, true);
    libNtve_gf_SetAlliance(13, 15, libNtve_ge_AllianceSetting_Enemy);
    gv_allowISR = true;
    GameSetLighting("UACDusk", 0.0);
    UnitIssueOrder(UnitFromId(511), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitRemove(UnitFromId(286));
    UnitRemove(UnitFromId(311));
    UnitRemove(UnitFromId(615));
    UnitRemove(UnitFromId(2612));
    UnitRemove(UnitFromId(2471));
    auto45C8DA53_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto45C8DA53_u = UnitGroupCount(auto45C8DA53_g, c_unitCountAll);
    for (;; auto45C8DA53_u -= 1) {
        auto45C8DA53_var = UnitGroupUnitFromEnd(auto45C8DA53_g, auto45C8DA53_u);
        if (auto45C8DA53_var == null) { break; }
        if ((UnitGetType(auto45C8DA53_var) == "InfantryRifleman")) {
            UnitRemove(auto45C8DA53_var);
        }
    }
    if ((gv_averageXP >= 100000)) {
        gv_spawnCount = (gv_spawnCount + 1);
    }
    if ((gv_averageXP >= 300000)) {
        gv_spawnCount = (gv_spawnCount + 1);
    }
    if ((gv_averageXP >= 1000000)) {
        gv_spawnCount = (gv_spawnCount + 1);
    }
    TechTreeUpgradeAddLevel(0, "PMC", 1);
    ObjectiveCreate(StringExternal("Param/Value/4882238E"), StringExternal("Param/Value/79247FF8"), c_objectiveStateActive, false);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_optionalObj = ObjectiveLastCreated();
    TimerWindowCreate(gv_missiontimer, StringExternal("Param/Value/1BBB4DE2"), false, false);
    gv_missiontimerwindow = TimerWindowLastCreated();
    TimerWindowCreate(gv_bossTimer, StringExternal("Param/Value/7FC22DDA"), false, false);
    gv_bossTimerWindow = TimerWindowLastCreated();
    ObjectiveCreate(StringToText(""), StringToText(""), c_objectiveStateHidden, true);
    gv_mainObj = ObjectiveLastCreated();
    gf_MoveObjectivePanel(0, 85, c_anchorTopLeft);
    libNtve_gf_SetDialogItemMaximumValue(gv_objective_Mission_Tracker, gv_objective_Mission_Tracker_Max, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(gv_objective_Mission_Tracker, gv_objective_Mission_Tracker_Current, PlayerGroupAll());
    gf_PolicePatrolInitialize();
    TriggerEnable(gt_SquadContact, true);
    TriggerEnable(gt_SquadLoop, true);
    TriggerEnable(gt_PMCAlertExpire, true);
    TriggerEnable(gt_RemovePMCItem, true);
    UnitIssueOrder(UnitFromId(56), Order(AbilityCommand("MetalGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(13, 15, libNtve_ge_AllianceSetting_Enemy);
    autoA56864BB_g = gv_players;
    autoA56864BB_var = -1;
    while (true) {
        autoA56864BB_var = PlayerGroupNextPlayer(autoA56864BB_g, autoA56864BB_var);
        if (autoA56864BB_var < 0) { break; }
        libNtve_gf_SetAlliance(autoA56864BB_var, 15, libNtve_ge_AllianceSetting_Enemy);
    }
    UnitCreate(1, "CombatWalker", 0, 0, RegionGetCenter(RegionFromId(124)), 315.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
    gv_sentryGuns[1] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    UnitCreate(1, "CombatWalker", 0, 0, RegionGetCenter(RegionFromId(123)), 270.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
    gv_sentryGuns[2] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    UnitCreate(1, "CombatWalker", 0, 0, RegionGetCenter(RegionFromId(125)), 180.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
    gv_sentryGuns[3] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    gv_tCPRegion[1] = RegionFromId(114);
    gv_tCPRegion[2] = RegionFromId(115);
    gv_tCPRegion[3] = RegionFromId(116);
    gv_tCPRegion[4] = RegionFromId(117);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/61517C18"), StringExternal("Param/Value/648D4F8B"), 7.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    Wait(7.0, c_timeGame);
    TriggerSendEvent("P Commissioner");
    UnitCreate(1, "ColonistShipFlying", 0, 13, PointFromId(370), 270.0);
    gv_phantombeginning = UnitLastCreated();
    auto25CFCA1C_g = gv_players;
    auto25CFCA1C_var = -1;
    while (true) {
        auto25CFCA1C_var = PlayerGroupNextPlayer(auto25CFCA1C_g, auto25CFCA1C_var);
        if (auto25CFCA1C_var < 0) { break; }
        CameraPan(auto25CFCA1C_var, RegionGetCenter(RegionFromId(6)), 0.0, -1, 10, false);
        CameraLockInput(auto25CFCA1C_var, true);
    }
    UnitIssueOrder(gv_phantombeginning, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(RegionFromId(6))), c_orderQueueReplace);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, true);
    autoDBAB642A_g = gv_players;
    autoDBAB642A_var = -1;
    while (true) {
        autoDBAB642A_var = PlayerGroupNextPlayer(autoDBAB642A_g, autoDBAB642A_var);
        if (autoDBAB642A_var < 0) { break; }
        DialogSetVisible(gv_functionaldialog[autoDBAB642A_var], PlayerGroupSingle(autoDBAB642A_var), true);
    }
    gf_DisplayUIButtons(true);
    Wait(18.0, c_timeGame);
    auto42771139_g = gv_players;
    lv_int = -1;
    while (true) {
        lv_int = PlayerGroupNextPlayer(auto42771139_g, lv_int);
        if (lv_int < 0) { break; }
        if ((gv_mod_1life == true)) {
            TechTreeUpgradeAddLevel(lv_int, "1Life", 1);
        }
        if ((gv_mod_rifle == true)) {
            TechTreeUpgradeAddLevel(lv_int, "RifleMode", 1);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroSelector", 0, lv_int, PlayerStartLocation(lv_int));
        gv_heroselector[lv_int] = UnitLastCreated();
        UnitClearSelection(lv_int);
        if ((gv_mod_allrandom)) {
            UnitIssueOrder(gv_heroselector[lv_int], Order(AbilityCommand("ChooseRandomMos", 0)), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
        }
        else {
            UnitSelect(UnitLastCreated(), lv_int, true);
            UnitGroupAdd(gv_heroselectors, UnitLastCreated());
        }
    }
    Wait(0.1, c_timeGame);
    TriggerEnable(gt_SelectHeroSelector, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(138)), ColorWithAlpha(0.00, 100.00, 0.00, 49.41), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D0E0F3C7"));
    PingSetScale(PingLastCreated(), 0.75);
    gv_missionping = PingLastCreated();
    gf_DisplayObjectiveMissionCounter(ge_ObjectiveMissionType_Show);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/9CD605B5"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/EE0782EA"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(gv_missiontimer, 180.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCMode_Init () {
    gt_PMCMode = TriggerCreate("gt_PMCMode_Func");
    TriggerAddEventGeneric(gt_PMCMode, "Init PMC Campaign");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Commissioner
//--------------------------------------------------------------------------------------------------
bool gt_PCommissioner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/B760BD33"));
    Wait(5.0, c_timeGame);
    UnitCreate(1, "ChiefScarland", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(138)), 180.0);
    gv_policeChief = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById PoliceDecal");
    TriggerEnable(gt_PApproachCommissioner, true);
    TriggerEnable(gt_PCommissionerTimeout, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PCommissioner_Init () {
    gt_PCommissioner = TriggerCreate("gt_PCommissioner_Func");
    TriggerAddEventGeneric(gt_PCommissioner, "P Commissioner");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Approach Commissioner
//--------------------------------------------------------------------------------------------------
bool gt_PApproachCommissioner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PCommissionerTimeout, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroy(gv_missionping);
    libNtve_gf_MakeUnitFacePoint(gv_policeChief, UnitGetPosition(EventUnit()), 0.5);
    gf_MissionText(StringExternal("Param/Value/2E729795"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/C1D73BEC"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/B825ECD0"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/82FADAAC"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/0E81018D"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_UpdateMissionCompletionTracker(true);
    gf_SucceedMission(10, StringExternal("Param/Value/6068FDAF"), 0, false);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(6.0, c_timeGame);
    TriggerSendEvent("Police Check Points");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PApproachCommissioner_Init () {
    gt_PApproachCommissioner = TriggerCreate("gt_PApproachCommissioner_Func");
    TriggerEnable(gt_PApproachCommissioner, false);
    TriggerAddEventUnitRegion(gt_PApproachCommissioner, null, RegionFromId(138), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Commissioner Timeout
//--------------------------------------------------------------------------------------------------
bool gt_PCommissionerTimeout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PApproachCommissioner, false);
    gf_SkipActionsIfGameOver();
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroy(gv_missionping);
    gf_MissionText(StringExternal("Param/Value/3528E421"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    gf_UpdateMissionCompletionTracker(false);
    Wait(5.0, c_timeGame);
    gf_FailMission(12, StringExternal("Param/Value/B8F1EE02"), 0);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(6.0, c_timeGame);
    TriggerSendEvent("Police Check Points");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PCommissionerTimeout_Init () {
    gt_PCommissionerTimeout = TriggerCreate("gt_PCommissionerTimeout_Func");
    TriggerEnable(gt_PCommissionerTimeout, false);
    TriggerAddEventTimer(gt_PCommissionerTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC First Contact
//--------------------------------------------------------------------------------------------------
bool gt_PMCFirstContact_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_players, UnitGetOwner(EventUnitTarget())) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/DDDC67F9"));
    Wait(6.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/3FFC06B4"));
    Wait(6.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/62248BBF"));
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/816E5F80"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/924AF084"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCFirstContact_Init () {
    gt_PMCFirstContact = TriggerCreate("gt_PMCFirstContact_Func");
    TriggerEnable(gt_PMCFirstContact, false);
    TriggerAddEventUnitAttacked2(gt_PMCFirstContact, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Police Checkpoint
//--------------------------------------------------------------------------------------------------
bool gt_PPoliceCheckpoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int auto227DB898_ae = 7;
    const int auto227DB898_ai = 1;
    const int auto8E4B8CC2_n = 3;
    int auto8E4B8CC2_i;
    unitgroup auto4F0E78A2_g;
    int auto4F0E78A2_u;
    unit auto4F0E78A2_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PMCFirstContact, true);
    if ((RandomInt(1, 2) == 1)) {
        gf_MissionText(StringExternal("Param/Value/E5396D1D"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/60228AC7"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/5C4F836B"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/9787BFCD"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/E3B92DF9"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/B7751EFC"));
    }
    else {
        gf_MissionText(StringExternal("Param/Value/0B88171B"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/AFE125BC"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/254963EC"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/53E3DFEF"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/259878ED"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/09CE5B38"));
        Wait(12.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/CF92202D"));
    }
    TriggerEnable(gt_UndeadSpawningPrologue, true);
    Wait(7.0, c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/0D62F4E0"));
    UnitRemove(gv_policeChief);
    gv_sensorcount = 7;
    gv_silonextint = RandomInt(1, 7);
    gv_policeTCPs[1] = RegionFromId(28);
    gv_policeTCPs[2] = RegionFromId(29);
    gv_policeTCPs[3] = RegionFromId(30);
    gv_policeTCPs[4] = RegionFromId(31);
    gv_policeTCPs[5] = RegionFromId(148);
    gv_policeTCPs[6] = RegionFromId(149);
    gv_policeTCPs[7] = RegionFromId(92);
    Wait(7.0, c_timeGame);
    UnitCreate(1, "PoliceOfficer", 0, 0, RegionRandomPoint(RegionFromId(148)), libNtve_gf_RandomAngle());
    UnitCreate(1, "PoliceOfficerShotgun", 0, 0, RegionRandomPoint(RegionFromId(148)), libNtve_gf_RandomAngle());
    UnitCreate(1, "PoliceOfficer", 0, 0, RegionRandomPoint(RegionFromId(92)), libNtve_gf_RandomAngle());
    UnitCreate(1, "PoliceOfficerShotgun", 0, 0, RegionRandomPoint(RegionFromId(92)), libNtve_gf_RandomAngle());
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/E1BDFD64") + IntToText(gv_sensorcount) + StringExternal("Param/Value/384468DF")));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/206AE5EE"));
    lv_int = 1;
    for ( ; ( (auto227DB898_ai >= 0 && lv_int <= auto227DB898_ae) || (auto227DB898_ai < 0 && lv_int >= auto227DB898_ae) ) ; lv_int += auto227DB898_ai ) {
        if ((lv_int == gv_silonextint)) {
            for (auto8E4B8CC2_i = 1; auto8E4B8CC2_i <= auto8E4B8CC2_n; auto8E4B8CC2_i += 1) {
                UnitCreate(1, "RARifleman", 0, 15, RegionRandomPoint(gv_policeTCPs[lv_int]), libNtve_gf_RandomAngle());
                UnitBehaviorAdd(UnitLastCreated(), "LiftBootsIn", UnitLastCreated(), 1);
                UnitBehaviorAdd(UnitLastCreated(), "PMCExplosionReduction", UnitLastCreated(), 1);
                gf_AddTextureToPMCUnit(UnitLastCreated());
            }
        }

        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), gv_pingNumeral[lv_int], RegionGetCenter(gv_policeTCPs[lv_int]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_sensorpings[lv_int] = PingLastCreated();
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/92B5F8CC"));
        PingSetScale(PingLastCreated(), 0.85);
        UnitCreate(1, "PoliceOfficer", 0, 0, RegionRandomPoint(gv_policeTCPs[lv_int]), libNtve_gf_RandomAngle());
        auto4F0E78A2_g = UnitGroup(null, 0, gv_policeTCPs[lv_int], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4F0E78A2_u = UnitGroupCount(auto4F0E78A2_g, c_unitCountAll);
        for (;; auto4F0E78A2_u -= 1) {
            auto4F0E78A2_var = UnitGroupUnitFromEnd(auto4F0E78A2_g, auto4F0E78A2_u);
            if (auto4F0E78A2_var == null) { break; }
            if (((UnitGetType(auto4F0E78A2_var) == "PoliceOfficer") || (UnitGetType(auto4F0E78A2_var) == "PoliceOfficerShotgun"))) {
                UnitGroupAdd(gv_policeTCPGroups[lv_int], auto4F0E78A2_var);
                ActorSend(libNtve_gf_MainActorofUnit(auto4F0E78A2_var), "TextureSelectById PoliceDecal");
            }
        }
    }
    TimerStart(gv_missiontimer, 360.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_PEnterPoliceTCP, true);
    TriggerEnable(gt_PPoliceTCPEnd, true);
    TriggerExecute(gt_UndeadSpawningPrologue, true, false);
    Wait(RandomInt(80, 120), c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PPoliceCheckpoint_Init () {
    gt_PPoliceCheckpoint = TriggerCreate("gt_PPoliceCheckpoint_Func");
    TriggerAddEventGeneric(gt_PPoliceCheckpoint, "Police Check Points");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Enter Police TCP
//--------------------------------------------------------------------------------------------------
bool gt_PEnterPoliceTCP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_index;
    bool lv_tcpcompleted;

    // Automatic Variable Declarations
    const int auto8BF84408_ae = 7;
    const int auto8BF84408_ai = 1;

    // Variable Initialization
    lv_tcpcompleted = true;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_int = 1;
    for ( ; ( (auto8BF84408_ai >= 0 && lv_int <= auto8BF84408_ae) || (auto8BF84408_ai < 0 && lv_int >= auto8BF84408_ae) ) ; lv_int += auto8BF84408_ai ) {
        if ((EventUnitRegion() == gv_policeTCPs[lv_int]) && (gv_tCPRelieved[lv_int] == false)) {
            lv_index = lv_int;
            if ((gv_tCPRelieved[lv_index] == false)) {
                gv_tCPRelieved[lv_index] = true;
                lv_tcpcompleted = false;
            }
            break;
        }

    }
    if ((lv_tcpcompleted == true)) {
        return true;
    }
    PingDestroy(gv_sensorpings[lv_index]);
    if ((libNtve_gf_UnitGroupIsDead(gv_policeTCPGroups[lv_index]) == true)) {
        gf_MissionText(StringExternal("Param/Value/7C3B84FF"));
        gv_sensorcount -= 1;
        gf_FailMission(2, StringExternal("Param/Value/6ACC3A35"), 0);
        ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/1C6F69A9") + IntToText(gv_sensorcount) + StringExternal("Param/Value/505FBD3E")));
        if ((gv_sensorcount == 0)) {
            TriggerExecute(gt_PPoliceTCPEnd, true, false);
        }
    }
    else {
        gf_MissionText(StringExternal("Param/Value/67D2E88E"));
        libNtve_gf_CreateUnitsWithDefaultFacing(15, "Zombie", 0, 14, PointWithOffsetPolar(RegionGetCenter(EventUnitRegion()), RandomFixed(15.0, 25.0), libNtve_gf_RandomAngle()));
        if ((RandomInt(0, 4) == 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZombieWraith", 0, 14, PointWithOffsetPolar(RegionGetCenter(EventUnitRegion()), RandomFixed(15.0, 25.0), libNtve_gf_RandomAngle()));
            if ((RandomInt(0, 1) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bruchus", 0, 14, PointWithOffsetPolar(RegionGetCenter(EventUnitRegion()), RandomFixed(10.0, 15.0), libNtve_gf_RandomAngle()));
            }
        }
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(EventUnitRegion())), c_orderQueueReplace);
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(5, "Creeper", 0, 14, PointWithOffsetPolar(RegionGetCenter(EventUnitRegion()), RandomFixed(15.0, 25.0), libNtve_gf_RandomAngle()));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(EventUnitRegion())), c_orderQueueReplace);
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        Wait(2.0, c_timeGame);
        gf_PoliceTCPCheck(lv_index);
        gf_TextChat(UnitGroupRandomUnit(gv_policeTCPGroups[lv_index], c_unitCountAlive), StringExternal("Param/Value/E8551A66"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PEnterPoliceTCP_Init () {
    gt_PEnterPoliceTCP = TriggerCreate("gt_PEnterPoliceTCP_Func");
    TriggerEnable(gt_PEnterPoliceTCP, false);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(28), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(28), false);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(29), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(29), false);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(30), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(30), false);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(31), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(31), false);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(148), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(148), false);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(149), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(149), false);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(92), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(92), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Police TCP End
//--------------------------------------------------------------------------------------------------
bool gt_PPoliceTCPEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tcpremaining;

    // Automatic Variable Declarations
    const int auto8B2C7936_ae = 7;
    const int auto8B2C7936_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PEnterPoliceTCP, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    lv_index = 1;
    for ( ; ( (auto8B2C7936_ai >= 0 && lv_index <= auto8B2C7936_ae) || (auto8B2C7936_ai < 0 && lv_index >= auto8B2C7936_ae) ) ; lv_index += auto8B2C7936_ai ) {
        if ((gv_tCPRelieved[lv_index] == false)) {
            PingDestroy(gv_sensorpings[lv_index]);
            lv_tcpremaining += 1;
        }
    }
    if ((lv_tcpremaining >= 1)) {
        gf_MissionText(StringExternal("Param/Value/F24F17D5"));
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_UpdateMissionCompletionTracker(false);
        gf_FailMission(5, StringExternal("Param/Value/4C17BEA6"), 0);
    }
    else {
        gf_UpdateMissionCompletionTracker(true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(30.0, c_timeGame);
    TriggerSendEvent("RA Phantom Down");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PPoliceTCPEnd_Init () {
    gt_PPoliceTCPEnd = TriggerCreate("gt_PPoliceTCPEnd_Func");
    TriggerEnable(gt_PPoliceTCPEnd, false);
    TriggerAddEventTimer(gt_PPoliceTCPEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P RA Phantom Down
//--------------------------------------------------------------------------------------------------
bool gt_PRAPhantomDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3200E997_n = 4;
    int auto3200E997_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnPMCSquad(1, 0);
    gv_phantomDownLZ = RandomInt(1, 4);
    libNtve_gf_CreateModelAtPoint("RAPhantomWreckage", RegionGetCenter(gv_lZs[gv_phantomDownLZ]));
    gv_rAPhantomDown = libNtve_gf_ActorLastCreated();
    SoundPlay(SoundLink("Terran_ExplosionMedium", -1), PlayerGroupAll(), 100.0, 0.0);
    for (auto3200E997_i = 1; auto3200E997_i <= auto3200E997_n; auto3200E997_i += 1) {
        UnitCreate(1, "RAPhantomCrew", 0, 0, RegionRandomPoint(gv_lZs[gv_phantomDownLZ]), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_phantomCrew, UnitLastCreated());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    }
    TriggerEnable(gt_PKillCrew, true);
    TriggerEnable(gt_PEnterPhantomLZ, true);
    Wait(2.5, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/BA27FFA3"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_lZs[gv_phantomDownLZ]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A9474A91"));
    gv_missionping = PingLastCreated();
    Wait(2.5, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/6B423C27"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/9E05E41E"));
    Wait(15.0, c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    Wait(15.0, c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    Wait(20.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(1, 0);
    Wait(30.0, c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PRAPhantomDown_Init () {
    gt_PRAPhantomDown = TriggerCreate("gt_PRAPhantomDown_Func");
    TriggerAddEventGeneric(gt_PRAPhantomDown, "RA Phantom Down");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Enter Phantom LZ
//--------------------------------------------------------------------------------------------------
bool gt_PEnterPhantomLZ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBCB237E9_g;
    int autoBCB237E9_u;
    unit autoBCB237E9_var;
    unitgroup autoF5A756AE_g;
    int autoF5A756AE_u;
    unit autoF5A756AE_var;

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_lZs[gv_phantomDownLZ]))) {
            return false;
        }

        if (!(((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true) || ((EventPlayer() == 15) && (UnitGetCustomValue(EventUnit(), 4) != 0.0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PExtractCrew, true);
    PingDestroy(gv_missionping);
    gv_tCPSpawns[1] = RegionFromId(118);
    gv_tCPSpawns[2] = RegionFromId(121);
    gv_tCPSpawns[3] = RegionFromId(119);
    gv_tCPSpawns[4] = RegionFromId(120);
    if ((EventPlayer() == 15)) {
        gv_pMCReachedPhantom = true;
        gv_pMCSquads[FixedToInt(UnitGetCustomValue(EventUnit(), 4))].lv_extracting = true;
        gv_phantomDownLZ = 0;
        gv_phantomCrewExtraction = RandomInt(1, 4);
        autoF5A756AE_g = gv_phantomCrew;
        autoF5A756AE_u = UnitGroupCount(autoF5A756AE_g, c_unitCountAll);
        for (;; autoF5A756AE_u -= 1) {
            autoF5A756AE_var = UnitGroupUnitFromEnd(autoF5A756AE_g, autoF5A756AE_u);
            if (autoF5A756AE_var == null) { break; }
            UnitSetOwner(autoF5A756AE_var, 15, true);
            libNtve_gf_MakeUnitInvulnerable(autoF5A756AE_var, false);
        }
        UnitGroupIssueOrder(gv_phantomCrew, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_tCPSpawns[gv_phantomCrewExtraction])), c_orderQueueReplace);
        gf_MissionText(StringExternal("Param/Value/D3C4D5CF"));
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/AF1F2BCF"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/FB1E5337"));
        gf_SpawnPMCSquad(1, 0);
    }
    else {
        gv_phantomDownLZ = 0;
        gv_phantomCrewExtraction = RandomInt(1, 4);
        autoBCB237E9_g = gv_phantomCrew;
        autoBCB237E9_u = UnitGroupCount(autoBCB237E9_g, c_unitCountAll);
        for (;; autoBCB237E9_u -= 1) {
            autoBCB237E9_var = UnitGroupUnitFromEnd(autoBCB237E9_g, autoBCB237E9_u);
            if (autoBCB237E9_var == null) { break; }
            UnitSetOwner(autoBCB237E9_var, EventPlayer(), true);
            libNtve_gf_MakeUnitInvulnerable(autoBCB237E9_var, false);
            gf_MissionItemPingAddItem(autoBCB237E9_var);
        }
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/181A2C38"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/731E38C0"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_tCPSpawns[gv_phantomCrewExtraction]), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E5C078D0"));
        gv_missionping = PingLastCreated();
        gf_MissionText(StringExternal("Param/Value/975C323B"));
        Wait(2.5, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/6735B206"));
    }
    TriggerExecute(gt_SquadLoop, true, false);
    Wait(30.0, c_timeGame);
    ActorSend(gv_rAPhantomDown, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PEnterPhantomLZ_Init () {
    gt_PEnterPhantomLZ = TriggerCreate("gt_PEnterPhantomLZ_Func");
    TriggerEnable(gt_PEnterPhantomLZ, false);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(13), false);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(15), false);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(14), false);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(16), false);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(6), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Kill Crew
//--------------------------------------------------------------------------------------------------
bool gt_PKillCrew_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_phantomCrew, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_phantomCrew, EventUnit());
    gf_MissionItemPingRemoveItem(EventUnit());
    gv_rAPCCount[0] += 1;
    if ((gv_pMCReachedPhantom == true)) {
        gf_SucceedMission(8, StringExternal("Param/Value/4F6ABEC1"), 0, false);
    }
    else {
        gf_FailMission(2, StringExternal("Param/Value/EC3F2FBA"), 0);
    }
    if ((UnitGroupCount(gv_phantomCrew, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_PExtractCrew, false);
        TriggerSendEvent("Phantom Down End");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PKillCrew_Init () {
    gt_PKillCrew = TriggerCreate("gt_PKillCrew_Func");
    TriggerEnable(gt_PKillCrew, false);
    TriggerAddEventUnitDied(gt_PKillCrew, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Extract Crew
//--------------------------------------------------------------------------------------------------
bool gt_PExtractCrew_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_phantomCrew, EventUnit()) == true))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_tCPSpawns[gv_phantomCrewExtraction]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_phantomCrew, EventUnit());
    UnitRemove(EventUnit());
    gf_MissionItemPingRemoveItem(EventUnit());
    gv_rAPCCount[1] += 1;
    if ((gv_pMCReachedPhantom == true)) {
        gf_FailMission(3, StringExternal("Param/Value/59D6E8B4"), 0);
    }
    else {
        gf_SucceedMission(12, StringExternal("Param/Value/B239E83B"), 0, false);
    }
    if ((UnitGroupCount(gv_phantomCrew, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_PKillCrew, false);
        TriggerSendEvent("Phantom Down End");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PExtractCrew_Init () {
    gt_PExtractCrew = TriggerCreate("gt_PExtractCrew_Func");
    TriggerEnable(gt_PExtractCrew, false);
    TriggerAddEventUnitRegion(gt_PExtractCrew, null, RegionFromId(118), true);
    TriggerAddEventUnitRegion(gt_PExtractCrew, null, RegionFromId(121), true);
    TriggerAddEventUnitRegion(gt_PExtractCrew, null, RegionFromId(119), true);
    TriggerAddEventUnitRegion(gt_PExtractCrew, null, RegionFromId(120), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Phantom Down End
//--------------------------------------------------------------------------------------------------
bool gt_PhantomDownEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_bonusMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(gv_missionping);
    gv_phantomDownLZ = 1;
    if ((gv_pMCReachedPhantom == true)) {
        if ((gv_rAPCCount[1] == 4)) {
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
            gf_UpdateMissionCompletionTracker(false);
            gf_MissionText(StringExternal("Param/Value/34D74378"));
        }
        else {
            if ((gv_rAPCCount[0] >= 1)) {
                ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
                gf_UpdateMissionCompletionTracker(true);
                gf_MissionText(StringExternal("Param/Value/235BF88B"));
            }
        }
    }
    else {
        if ((gv_rAPCCount[1] == 4)) {
            lv_bonusMission = true;
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
            gf_UpdateMissionCompletionTracker(true);
            gf_MissionText(StringExternal("Param/Value/E047DACD"));
        }
        else if ((gv_rAPCCount[1] < 4) && (gv_rAPCCount[1] >= 1)) {
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
            gf_UpdateMissionCompletionTracker(true);
            gf_MissionText(StringExternal("Param/Value/A007D003"));
        }
        else if ((gv_rAPCCount[0] == 4)) {
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
            gf_UpdateMissionCompletionTracker(false);
            gf_MissionText(StringExternal("Param/Value/55045D35"));
        }
    }
    Wait(5.0, c_timeGame);
    gf_PMCCampaignSupplyCaches(1);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(30.0, c_timeGame);
    if ((lv_bonusMission == true)) {
        TriggerSendEvent("Juggernaught");
    }
    else {
        TriggerSendEvent("P Chapter 1");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhantomDownEnd_Init () {
    gt_PhantomDownEnd = TriggerCreate("gt_PhantomDownEnd_Func");
    TriggerAddEventGeneric(gt_PhantomDownEnd, "Phantom Down End");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RA Juggernaught
//--------------------------------------------------------------------------------------------------
bool gt_RAJuggernaught_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[2] lv_phantom;
    int[2] lv_tempLZ;
    bool lv_windsorLZ;

    // Automatic Variable Declarations
    playergroup auto8BA0A47A_g;
    int auto8BA0A47A_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(11.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/776CBEA3"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/F492EFB3"));
    Wait(11.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/9BC06094"));
    if ((RandomInt(0, 2) == 2)) {
        lv_windsorLZ = true;
        libNtve_gf_UnitCreateFacingPoint(1, "MilitarizedColonistShipFlying", c_unitCreateIgnorePlacement, 15, PointWithOffset(RegionGetCenter(RegionFromId(43)), -12.0, 0.0), RegionGetCenter(RegionFromId(43)));
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRA");
        lv_phantom[0] = UnitLastCreated();
        UnitIssueOrder(lv_phantom[0], OrderTargetingPoint(AbilityCommand("MilitarizedColonistShipLand", 0), RegionGetCenter(RegionFromId(43))), c_orderQueueReplace);
    }
    else {
        lv_tempLZ[0] = RandomInt(1, 2);
        libNtve_gf_UnitCreateFacingPoint(1, "MilitarizedColonistShipFlying", c_unitCreateIgnorePlacement, 15, PointWithOffset(RegionGetCenter(gv_lZs[lv_tempLZ[0]]), -12.0, 0.0), RegionGetCenter(gv_lZs[lv_tempLZ[0]]));
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRA");
        lv_phantom[0] = UnitLastCreated();
        UnitIssueOrder(lv_phantom[0], OrderTargetingPoint(AbilityCommand("MilitarizedColonistShipLand", 0), RegionGetCenter(gv_lZs[lv_tempLZ[0]])), c_orderQueueReplace);
    }
    Wait(0.1, c_timeGame);
    lv_tempLZ[1] = RandomInt(3, 4);
    libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", c_unitCreateIgnorePlacement, 15, PointWithOffset(RegionGetCenter(gv_lZs[lv_tempLZ[1]]), -12.0, 0.0), RegionGetCenter(gv_lZs[lv_tempLZ[1]]));
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRA");
    lv_phantom[1] = UnitLastCreated();
    UnitIssueOrder(lv_phantom[1], OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(gv_lZs[lv_tempLZ[1]])), c_orderQueueReplace);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/49A6B61E"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/B168B511"));
    Wait(12.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/27F71E1F"));
    if ((lv_windsorLZ == true)) {
        gf_SpawnPMCSquadInRegion(9, 0, RegionFromId(43));
        if ((RandomInt(0, 1) == 1)) {
            gf_SpawnPMCSquadInRegion(26, 0, RegionFromId(43));
        }
        else {
            gf_SpawnPMCSquadInRegion(26, 0, gv_lZs[lv_tempLZ[1]]);
        }
    }
    else {
        gf_SpawnPMCSquadInRegion(9, 0, gv_lZs[lv_tempLZ[0]]);
        gf_SpawnPMCSquadInRegion(26, 0, gv_lZs[lv_tempLZ[RandomInt(0, 1)]]);
    }
    if ((RandomInt(0, 1) == 1)) {
        gf_SpawnPMCSquadInRegion(22, 0, gv_lZs[lv_tempLZ[1]]);
    }
    else {
        gf_SpawnPMCSquadInRegion(20, 0, gv_lZs[lv_tempLZ[1]]);
    }
    Wait(2.5, c_timeGame);
    TriggerExecute(gt_SquadLoop, true, false);
    Wait(2.5, c_timeGame);
    UnitIssueOrder(lv_phantom[0], Order(AbilityCommand("MilitarizedColonistShipLiftOff", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lv_phantom[0], true);
    UnitIssueOrder(lv_phantom[1], Order(AbilityCommand("MilitarizedColonistShipLiftOff", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lv_phantom[1], true);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(lv_phantom[0], OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    UnitIssueOrder(lv_phantom[1], OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_phantom[0]);
    UnitRemove(lv_phantom[1]);
    while (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_SucceedMission(100, StringExternal("Param/Value/BD3D93E0"), 0, false);
    gf_UpdateMissionCompletionTracker(true);
    gv_pMCPrologueCompleted = true;
    auto8BA0A47A_g = gv_players;
    auto8BA0A47A_var = -1;
    while (true) {
        auto8BA0A47A_var = PlayerGroupNextPlayer(auto8BA0A47A_g, auto8BA0A47A_var);
        if (auto8BA0A47A_var < 0) { break; }
        gf_UnlockAchievement(auto8BA0A47A_var);
    }
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(30.0, c_timeGame);
    TriggerSendEvent("P Chapter 1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RAJuggernaught_Init () {
    gt_RAJuggernaught = TriggerCreate("gt_RAJuggernaught_Func");
    TriggerAddEventGeneric(gt_RAJuggernaught, "Juggernaught");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Chapter 1 - Ghost Of The Jungle
//--------------------------------------------------------------------------------------------------
bool gt_PChapter1GhostOfTheJungle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOn();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/07FF6C14"), StringExternal("Param/Value/3AF149A3"), 7.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/A0D5ADF1"), 0, true);
    Wait(7.0, c_timeGame);
    GameSetLighting("IceWorldNight", 0.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOff();
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerSendEvent("P Convoy Raid");
    TriggerEnable(gt_PMCPeriodicSpawn, true);
    gf_StartSpawnLoop(1, gv_loopType);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PChapter1GhostOfTheJungle_Init () {
    gt_PChapter1GhostOfTheJungle = TriggerCreate("gt_PChapter1GhostOfTheJungle_Func");
    TriggerAddEventGeneric(gt_PChapter1GhostOfTheJungle, "P Chapter 1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Convoy Raid
//--------------------------------------------------------------------------------------------------
bool gt_PConvoyRaid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    int auto8A5683CA_val;
    const int auto36400307_ae = 5;
    const int auto36400307_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ReinforcementsGlobal();
    Wait(25.0, c_timeGame);
    gv_convoyset = RandomInt(1, 3);
    auto8A5683CA_val = gv_convoyset;
    if (auto8A5683CA_val == 1) {
        gv_convoystartend[1][1] = RegionFromId(17);
        gv_convoyroutes[1][1] = PointFromId(1776);
        gv_convoyroutes[1][2] = PointFromId(1777);
        gv_convoyroutes[1][3] = PointFromId(1778);
        gv_convoyroutes[1][4] = PointFromId(1779);
        gv_convoyroutes[1][5] = PointFromId(1780);
        gv_convoyroutes[1][6] = PointFromId(1781);
        gv_convoyroutes[1][7] = PointFromId(1782);
        gv_convoyroutes[1][8] = PointFromId(1783);
        gv_convoyroutes[1][9] = PointFromId(1784);
        gv_convoystartend[1][2] = RegionFromId(18);
        gv_convoymax = 9;
    }
    else if (auto8A5683CA_val == 2) {
        gv_convoystartend[2][1] = RegionFromId(41);
        gv_convoyroutes[2][1] = PointFromId(1785);
        gv_convoyroutes[2][2] = PointFromId(1786);
        gv_convoyroutes[2][3] = PointFromId(1787);
        gv_convoyroutes[2][4] = PointFromId(1788);
        gv_convoyroutes[2][5] = PointFromId(1789);
        gv_convoyroutes[2][6] = PointFromId(1790);
        gv_convoyroutes[2][7] = PointFromId(1791);
        gv_convoyroutes[2][8] = PointFromId(1792);
        gv_convoyroutes[2][9] = PointFromId(1782);
        gv_convoyroutes[2][10] = PointFromId(1783);
        gv_convoyroutes[2][11] = PointFromId(1784);
        gv_convoystartend[2][2] = RegionFromId(18);
        gv_convoymax = 11;
    }
    else if (auto8A5683CA_val == 3) {
        gv_convoystartend[3][1] = RegionFromId(19);
        gv_convoyroutes[3][1] = PointFromId(1793);
        gv_convoyroutes[3][2] = PointFromId(1788);
        gv_convoyroutes[3][3] = PointFromId(1789);
        gv_convoyroutes[3][4] = PointFromId(1790);
        gv_convoyroutes[3][5] = PointFromId(1791);
        gv_convoyroutes[3][6] = PointFromId(1792);
        gv_convoyroutes[3][7] = PointFromId(1782);
        gv_convoyroutes[3][8] = PointFromId(1783);
        gv_convoyroutes[3][9] = PointFromId(1784);
        gv_convoystartend[3][2] = RegionFromId(18);
        gv_convoymax = 9;
    }
    else {
    }
    if ((RandomInt(1, 2) == 1)) {
        gv_pConvoyReverse = true;
        gv_convoynext = gv_convoymax;
        gv_convoymax = 1;
        gv_convoystartend[gv_convoyset][0] = gv_convoystartend[gv_convoyset][2];
        gv_convoystartend[gv_convoyset][2] = gv_convoystartend[gv_convoyset][1];
        gv_convoystartend[gv_convoyset][1] = gv_convoystartend[gv_convoyset][0];
    }
    gf_MissionText(StringExternal("Param/Value/309413F6"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/6E126E47"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/2C29E844"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/5D6D3216"));
    TriggerEnable(gt_PConvoyRaidDies, true);
    TriggerEnable(gt_PConvoyPatrols, true);
    TriggerSendEvent("P RA C1 Patrol");
    gv_pauseSpawning = true;
    lv_int = 1;
    for ( ; ( (auto36400307_ai >= 0 && lv_int <= auto36400307_ae) || (auto36400307_ai < 0 && lv_int >= auto36400307_ae) ) ; lv_int += auto36400307_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "ColonistTransport", c_unitCreateIgnorePlacement, 15, RegionGetCenter(gv_convoystartend[gv_convoyset][1]), gv_convoyroutes[gv_convoyset][1]);
        UnitBehaviorAdd(UnitLastCreated(), "RAMTAV", UnitLastCreated(), 1);
        UnitGroupAdd(gv_convoy, UnitLastCreated());
        if ((gv_pConvoyReverse == false)) {
            if ((lv_int == 1)) {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][(gv_convoynext + lv_int)]), c_orderQueueReplace);
            }
        }
        else {
            if ((lv_int == 1)) {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][(gv_convoynext - lv_int)]), c_orderQueueReplace);
            }
        }
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
        if ((lv_int == 1)) {
            SoundPlay(SoundLink("THanson03AMusicEventC", -1), PlayerGroupAll(), 100.0, 0.0);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_convoystartend[gv_convoyset][1]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
            PingSetUnit(PingLastCreated(), UnitLastCreated());
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/00EF0AF6"));
            gv_missionping = PingLastCreated();
        }
        if ((lv_int < 5)) {
            Wait(10.0, c_timeGame);
        }
        else {
            Wait(5.0, c_timeGame);
        }
        TriggerExecute(gt_PConvoyRaidLoop, true, false);
    }
    gv_convoy_Set = true;
    TriggerEnable(gt_PConvoyRaidLoop, true);
    TriggerEnable(gt_PConvoyRaidLeave, true);
    gv_pauseSpawning = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PConvoyRaid_Init () {
    gt_PConvoyRaid = TriggerCreate("gt_PConvoyRaid_Func");
    TriggerAddEventGeneric(gt_PConvoyRaid, "P Convoy Raid");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Convoy Patrols
//--------------------------------------------------------------------------------------------------
bool gt_PConvoyPatrols_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(5.0, 15.0), c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    Wait(RandomFixed(15.0, 20.0), c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    Wait(RandomFixed(5.0, 15.0), c_timeGame);
    if ((RandomInt(0, 1) == 1)) {
        gf_SpawnPMCSquad(4, 0);
    }
    else {
        gf_SpawnPMCSquad(15, 0);
    }
    Wait(30.0, c_timeGame);
    gf_SpawnPMCSquad(23, 0);
    gf_SpawnPMCSquad(19, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PConvoyPatrols_Init () {
    gt_PConvoyPatrols = TriggerCreate("gt_PConvoyPatrols_Func");
    TriggerEnable(gt_PConvoyPatrols, false);
    TriggerAddEventGeneric(gt_PConvoyPatrols, "P RA C1 Patrol");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Convoy Raid Loop
//--------------------------------------------------------------------------------------------------
bool gt_PConvoyRaidLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    unit lv_tempunit;
    unit lv_nextunit;

    // Automatic Variable Declarations
    int auto97629B7A_ae;
    const int auto97629B7A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) > 1)) {
        PingSetUnit(gv_missionping, UnitGroupUnit(gv_convoy, 1));
    }
    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), gv_convoyroutes[gv_convoyset][gv_convoynext]) <= 2.0) && (gv_convoyfinal == false)) {
        if ((gv_convoynext == gv_convoymax)) {
            gv_convoyfinal = true;
        }
        else {
            if ((gv_pConvoyReverse == false)) {
                gv_convoynext += 1;
            }
            else {
                gv_convoynext -= 1;
            }
        }
    }
    auto97629B7A_ae = UnitGroupCount(gv_convoy, c_unitCountAll);
    lv_loopint = 1;
    for ( ; ( (auto97629B7A_ai >= 0 && lv_loopint <= auto97629B7A_ae) || (auto97629B7A_ai < 0 && lv_loopint >= auto97629B7A_ae) ) ; lv_loopint += auto97629B7A_ai ) {
        lv_tempunit = UnitGroupUnit(gv_convoy, lv_loopint);
        if ((gv_convoyfinal == true)) {
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_convoystartend[gv_convoyset][2])), c_orderQueueReplace);
        }
        else {
            if ((lv_loopint == 1)) {
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
            }
            else {
                lv_nextunit = UnitGroupUnit(gv_convoy, (lv_loopint - 1));
                if ((DistanceBetweenPoints(UnitGetPosition(lv_tempunit), UnitGetPosition(lv_nextunit)) >= 15.0)) {
                    UnitBehaviorAdd(lv_tempunit, "CatchingUp", lv_tempunit, 1);
                }
                else {
                    UnitBehaviorRemove(lv_tempunit, "CatchingUp", 1);
                }
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_nextunit), 5.0, AngleBetweenPoints(UnitGetPosition(lv_nextunit), UnitGetPosition(lv_tempunit)))), c_orderQueueReplace);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PConvoyRaidLoop_Init () {
    gt_PConvoyRaidLoop = TriggerCreate("gt_PConvoyRaidLoop_Func");
    TriggerEnable(gt_PConvoyRaidLoop, false);
    TriggerAddEventTimePeriodic(gt_PConvoyRaidLoop, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Convoy Raid Leave
//--------------------------------------------------------------------------------------------------
bool gt_PConvoyRaidLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_convoystartend[gv_convoyset][2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    gf_SpawnUndead(2, "Hunter", 0);
    gv_convoyvehiclessafe += 1;
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        TriggerSendEvent("P Convoy Raid End");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PConvoyRaidLeave_Init () {
    gt_PConvoyRaidLeave = TriggerCreate("gt_PConvoyRaidLeave_Func");
    TriggerEnable(gt_PConvoyRaidLeave, false);
    TriggerAddEventUnitRegion(gt_PConvoyRaidLeave, null, RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_PConvoyRaidLeave, null, RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_PConvoyRaidLeave, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_PConvoyRaidLeave, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Convoy Raid Dies
//--------------------------------------------------------------------------------------------------
bool gt_PConvoyRaidDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_convoy, EventUnit());
    gv_convoysKilled += 1;
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        if ((gv_convoy_Set == true)) {
            TriggerSendEvent("P Convoy Raid End");
        }
    }
    else {
        PingSetUnit(gv_missionping, UnitGroupUnit(gv_convoy, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PConvoyRaidDies_Init () {
    gt_PConvoyRaidDies = TriggerCreate("gt_PConvoyRaidDies_Func");
    TriggerEnable(gt_PConvoyRaidDies, false);
    TriggerAddEventUnitDied(gt_PConvoyRaidDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Convoy Raid End
//--------------------------------------------------------------------------------------------------
bool gt_PConvoyRaidEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PConvoyRaidLoop, false);
    TriggerEnable(gt_PConvoyRaidDies, false);
    TriggerEnable(gt_PConvoyRaidLeave, false);
    PingDestroy(gv_missionping);
    if ((gv_convoyvehiclessafe >= 1)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_UpdateMissionCompletionTracker(false);
        gf_MissionText(StringExternal("Param/Value/F65E41F9"));
        if ((gv_convoysKilled >= 1)) {
            gf_SucceedMission((gv_convoysKilled * 15), (IntToText(gv_convoysKilled) + StringExternal("Param/Value/57C8EE3C")), 0, false);
        }
        else {
            gf_FailMission(35, StringExternal("Param/Value/1EA885AC"), 0);
        }
        SoundPlay(SoundLink("TValerian02AMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
        TriggerSendEvent("P Guard Posts");
    }
    else {
        gv_pMissionCount += 1;
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_UpdateMissionCompletionTracker(true);
        gf_SucceedMission(75, StringExternal("Param/Value/38C8819B"), 0, false);
        gf_MissionText(StringExternal("Param/Value/15C4E8E1"));
        SoundPlay(SoundLink("TTychus02MusicIntro", -1), PlayerGroupAll(), 100.0, 0.0);
        TriggerSendEvent("Ignis & Ves");
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PConvoyRaidEnd_Init () {
    gt_PConvoyRaidEnd = TriggerCreate("gt_PConvoyRaidEnd_Func");
    TriggerAddEventGeneric(gt_PConvoyRaidEnd, "P Convoy Raid End");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ignis & Vesania
//--------------------------------------------------------------------------------------------------
bool gt_PIgnisVesania_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/78472229"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/22919EC1"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/F3303AF7"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/37709814"));
    Wait(9.0, c_timeGame);
    SoundPlay(SoundLink("THanson03AMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnPMCSquad(2, 0);
    Wait(3.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    Wait(3.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(15, 0);
    Wait(3.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/A8D657AD"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/A6B72865"));
    gf_SpawnPMCSquad(17, 0);
    gf_SpawnPMCSquad(16, 0);
    gf_SpawnPMCSquad(3, 0);
    while (!((libNtve_gf_UnitGroupIsDead(UnitGroup("Ignis20", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (libNtve_gf_UnitGroupIsDead(UnitGroup("Vesania20", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), false);
    gf_SucceedMission(60, StringExternal("Param/Value/1CC81B8B"), 0, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_UpdateMissionCompletionTracker(true);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(30.0, c_timeGame);
    TriggerSendEvent("P Guard Posts");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PIgnisVesania_Init () {
    gt_PIgnisVesania = TriggerCreate("gt_PIgnisVesania_Func");
    TriggerAddEventGeneric(gt_PIgnisVesania, "Ignis & Ves");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Guard Posts
//--------------------------------------------------------------------------------------------------
bool gt_PGuardPosts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    region[7] lv_heliportdockingbays;
    region[7] lv_guslaniguards;

    // Automatic Variable Declarations
    const int autoFDCA5E5C_ae = 11;
    const int autoFDCA5E5C_ai = 1;
    const int autoAB85F7D5_ae = 11;
    const int autoAB85F7D5_ai = 1;
    int autoFC886B57_n;
    int autoFC886B57_i;
    const int autoB8D4C7ED_ae = 11;
    const int autoB8D4C7ED_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_heliportdockingbays[1] = RegionFromId(67);
    lv_heliportdockingbays[2] = RegionFromId(68);
    lv_heliportdockingbays[3] = RegionFromId(69);
    lv_heliportdockingbays[4] = RegionFromId(70);
    lv_heliportdockingbays[5] = RegionFromId(71);
    lv_heliportdockingbays[6] = RegionFromId(72);
    lv_guslaniguards[1] = RegionFromId(137);
    lv_guslaniguards[2] = RegionFromId(138);
    lv_guslaniguards[3] = RegionFromId(12);
    lv_guslaniguards[4] = RegionFromId(135);
    lv_guslaniguards[5] = RegionFromId(136);
    lv_guslaniguards[6] = RegionFromId(133);
    gv_policeTCPs[1] = RegionFromId(28);
    gv_policeTCPs[2] = RegionFromId(29);
    gv_policeTCPs[3] = RegionFromId(30);
    gv_policeTCPs[4] = RegionFromId(31);
    gv_policeTCPs[5] = RegionFromId(148);
    gv_policeTCPs[6] = RegionFromId(149);
    gv_policeTCPs[7] = RegionFromId(92);
    gv_policeTCPs[8] = lv_heliportdockingbays[RandomInt(1, 6)];
    gv_policeTCPs[9] = gv_lZs[RandomInt(1, 4)];
    gv_policeTCPs[10] = lv_guslaniguards[RandomInt(1, 6)];
    gv_policeTCPs[11] = RegionFromId(140);
    gv_sensorcount = 11;
    lv_int = 1;
    for ( ; ( (autoFDCA5E5C_ai >= 0 && lv_int <= autoFDCA5E5C_ae) || (autoFDCA5E5C_ai < 0 && lv_int >= autoFDCA5E5C_ae) ) ; lv_int += autoFDCA5E5C_ai ) {
        UnitGroupClear(gv_policeTCPGroups[lv_int]);
    }
    gf_MissionText(StringExternal("Param/Value/7FA3B97C"));
    Wait(5.0, c_timeGame);
    gf_SpawnPMCSquad(5, 0);
    TriggerEnable(gt_PDestroyGuardPost, true);
    lv_int = 1;
    for ( ; ( (autoAB85F7D5_ai >= 0 && lv_int <= autoAB85F7D5_ae) || (autoAB85F7D5_ai < 0 && lv_int >= autoAB85F7D5_ae) ) ; lv_int += autoAB85F7D5_ai ) {
        gv_postSearched[lv_int] = false;
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_policeTCPs[lv_int]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B68763BF"));
        gv_sensorpings[lv_int] = PingLastCreated();
        autoFC886B57_n = RandomInt(2, 3);
        for (autoFC886B57_i = 1; autoFC886B57_i <= autoFC886B57_n; autoFC886B57_i += 1) {
            UnitCreate(1, "RARifleman", 0, 15, RegionRandomPoint(gv_policeTCPs[lv_int]), libNtve_gf_RandomAngle());
            UnitBehaviorAdd(UnitLastCreated(), "TempInvun3Sec", UnitLastCreated(), 1);
            UnitGroupAdd(gv_policeTCPGroups[lv_int], UnitLastCreated());
            UnitSetCustomValue(UnitLastCreated(), 6, lv_int);
            UnitBehaviorAdd(UnitLastCreated(), "LiftBootsIn", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "PMCExplosionReduction", UnitLastCreated(), 1);
            gf_AddTextureToPMCUnit(UnitLastCreated());
        }
        UnitCreate(1, "RARifleman", 0, 15, RegionRandomPoint(gv_mapEdges[RandomInt(1, 4)]), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "TempInvun3Sec", UnitLastCreated(), 1);
        UnitGroupAdd(gv_policeTCPGroups[lv_int], UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 6, lv_int);
        UnitBehaviorAdd(UnitLastCreated(), "PMCExplosionReduction", UnitLastCreated(), 1);
        gf_AddTextureToPMCUnit(UnitLastCreated());
        gf_MoveToGuardPos(UnitLastCreated(), gv_policeTCPs[lv_int]);
        UnitCreate(1, "RAAutomaticRifleman", 0, 15, RegionRandomPoint(gv_policeTCPs[lv_int]), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "TempInvun3Sec", UnitLastCreated(), 1);
        UnitGroupAdd(gv_policeTCPGroups[lv_int], UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "LiftBootsIn", UnitLastCreated(), 1);
        UnitSetCustomValue(UnitLastCreated(), 6, lv_int);
        UnitBehaviorAdd(UnitLastCreated(), "PMCExplosionReduction", UnitLastCreated(), 1);
        gf_AddTextureToPMCUnit(UnitLastCreated());
    }
    lv_int = 1;
    for ( ; ( (autoB8D4C7ED_ai >= 0 && lv_int <= autoB8D4C7ED_ae) || (autoB8D4C7ED_ai < 0 && lv_int >= autoB8D4C7ED_ae) ) ; lv_int += autoB8D4C7ED_ai ) {
        if ((UnitGroupCount(gv_policeTCPGroups[lv_int], c_unitCountAlive) == 0)) {
            PingDestroy(gv_sensorpings[lv_int]);
            if ((gv_postSearched[lv_int] == false)) {
                gv_sensorcount -= 1;
                gv_postSearched[lv_int] = true;
            }
        }
    }
    if ((gv_sensorcount < 11)) {
        gf_MissionText(StringExternal("Param/Value/910B61A2"));
    }
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(24, 0);
    if ((PlayerGroupCount(gv_players) <= 2)) {
        TimerStart(gv_missiontimer, RandomFixed(720.0, 780.0), false, c_timeGame);
    }
    else {
        TimerStart(gv_missiontimer, RandomFixed(360.0, 420.0), false, c_timeGame);
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/770199CB") + IntToText(gv_sensorcount) + StringExternal("Param/Value/51C00D1D")));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/CD0CEEA5"));
    TriggerEnable(gt_PGuardPostsTimeout, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGuardPosts_Init () {
    gt_PGuardPosts = TriggerCreate("gt_PGuardPosts_Func");
    TriggerAddEventGeneric(gt_PGuardPosts, "P Guard Posts");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Destroy Guard Post
//--------------------------------------------------------------------------------------------------
bool gt_PDestroyGuardPost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    fixed lv_time;
    int lv_index;

    // Automatic Variable Declarations
    const int auto138F3AA7_ae = 11;
    const int auto138F3AA7_ai = 1;

    // Variable Initialization
    lv_index = FixedToInt(UnitGetCustomValue(EventUnit(), 6));

    // Conditions
    if (testConds) {
        if (!((lv_index > 0))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_policeTCPGroups[lv_index], EventUnit());
    if ((UnitGroupCount(gv_policeTCPGroups[lv_index], c_unitCountAlive) == 0)) {
        if ((UnitGetOwner(libNtve_gf_KillingUnit()) == 14)) {
            gf_MissionText(StringExternal("Param/Value/DF87ADBB"));
        }
        else {
            gf_SucceedMission(6, StringExternal("Param/Value/F3CF62D6"), 0, false);
        }
        PingDestroy(gv_sensorpings[lv_index]);
        gv_sensorcount -= 1;
        gv_postSearched[lv_index] = true;
        ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/B3057696") + IntToText(gv_sensorcount) + StringExternal("Param/Value/6A894F40")));
        if ((gv_sensorcount == 0)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerEnable(gt_PGuardPostsTimeout, false);
            lv_int = 1;
            for ( ; ( (auto138F3AA7_ai >= 0 && lv_int <= auto138F3AA7_ae) || (auto138F3AA7_ai < 0 && lv_int >= auto138F3AA7_ae) ) ; lv_int += auto138F3AA7_ai ) {
                PingDestroy(gv_sensorpings[lv_int]);
            }
            gv_pMissionCount += 1;
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
            gf_UpdateMissionCompletionTracker(true);
            lv_time = TimerGetRemaining(gv_missiontimer);
            TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
            Wait(2.0, c_timeGame);
            gf_SucceedMission(22, StringExternal("Param/Value/3FD4D122"), 0, false);
            Wait(2.0, c_timeGame);
            if ((lv_time >= 120.0)) {
                gf_SucceedMission(30, StringExternal("Param/Value/B69ADED8"), 0, false);
            }
            Wait(5.0, c_timeGame);
            ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
            Wait(30.0, c_timeGame);
            TriggerSendEvent("P Umbra");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PDestroyGuardPost_Init () {
    gt_PDestroyGuardPost = TriggerCreate("gt_PDestroyGuardPost_Func");
    TriggerEnable(gt_PDestroyGuardPost, false);
    TriggerAddEventUnitDied(gt_PDestroyGuardPost, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Guard Posts Timeout
//--------------------------------------------------------------------------------------------------
bool gt_PGuardPostsTimeout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int auto59FF22CB_ae = 11;
    const int auto59FF22CB_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PDestroyGuardPost, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    lv_int = 1;
    for ( ; ( (auto59FF22CB_ai >= 0 && lv_int <= auto59FF22CB_ae) || (auto59FF22CB_ai < 0 && lv_int >= auto59FF22CB_ae) ) ; lv_int += auto59FF22CB_ai ) {
        PingDestroy(gv_sensorpings[lv_int]);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    gf_UpdateMissionCompletionTracker(false);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    if ((gv_sensorcount <= 3)) {
        gf_MissionText(StringExternal("Param/Value/A62CBA51"));
    }
    else {
        gf_MissionText(StringExternal("Param/Value/1EC277AB"));
        gf_SpawnPMCSquad(1, 0);
        gf_SpawnPMCSquad(5, 0);
        gf_SpawnPMCSquad(2, 0);
        gf_SpawnPMCSquad(19, 0);
        gf_SpawnPMCSquad(11, 0);
    }
    Wait(10.0, c_timeGame);
    gf_PMCCampaignSupplyCaches(2);
    Wait(20.0, c_timeGame);
    TriggerSendEvent("P Umbra");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGuardPostsTimeout_Init () {
    gt_PGuardPostsTimeout = TriggerCreate("gt_PGuardPostsTimeout_Func");
    TriggerEnable(gt_PGuardPostsTimeout, false);
    TriggerAddEventTimer(gt_PGuardPostsTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Umbra
//--------------------------------------------------------------------------------------------------
bool gt_PUmbra_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    unit lv_umbra;

    // Automatic Variable Declarations
    playergroup auto23947D31_g;
    int auto23947D31_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Ally);
    SoundPlay(SoundLink("TTosh03BMusicEventAAAA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/C6F55720"));
    gf_SpawnPMCSquad(1, 0);
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/A365B254"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/D1B30798"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/4E6B2B98"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/3ED08CBB"));
    gf_SpawnPMCSquad(8, 0);
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCBoss(1, "Umbra");
    lv_umbra = UnitLastCreated();
    while (!((UnitIsAlive(lv_umbra) == false) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_MissionText(StringExternal("Param/Value/3D5DB05D"));
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    Wait(3.0, c_timeGame);
    gf_SucceedMission(200, StringExternal("Param/Value/0C61B0C5"), 0, false);
    gf_UpdateMissionCompletionTracker(true);
    if ((gv_pMissionCount == 2)) {
        gv_pMCCh1Completed = true;
    }
    if ((gv_pMCCh1Completed == true)) {
        auto23947D31_g = gv_players;
        auto23947D31_var = -1;
        while (true) {
            auto23947D31_var = PlayerGroupNextPlayer(auto23947D31_g, auto23947D31_var);
            if (auto23947D31_var < 0) { break; }
            gf_UnlockAchievement(auto23947D31_var);
        }
    }
    gv_pMissionCount = 0;
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(20.0, c_timeGame);
    TriggerSendEvent("Chapter 2 Miserere");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PUmbra_Init () {
    gt_PUmbra = TriggerCreate("gt_PUmbra_Func");
    TriggerAddEventGeneric(gt_PUmbra, "P Umbra");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Chapter 2 - Tame The Beast
//--------------------------------------------------------------------------------------------------
bool gt_PChapter2TameTheBeast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOn();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/B8626747"), StringExternal("Param/Value/03266D82"), 7.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/2E0A3812"), 0, true);
    Wait(7.0, c_timeGame);
    GameSetLighting("UACDawn", 0.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOff();
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerSendEvent("The Burrowed");
    TriggerEnable(gt_WeaponsItems2, true);
    gv_pMissionCount = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PChapter2TameTheBeast_Init () {
    gt_PChapter2TameTheBeast = TriggerCreate("gt_PChapter2TameTheBeast_Func");
    TriggerAddEventGeneric(gt_PChapter2TameTheBeast, "Chapter 2 Miserere");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P The Burrowed
//--------------------------------------------------------------------------------------------------
bool gt_PTheBurrowed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_item;

    // Automatic Variable Declarations
    playergroup autoBA61F220_g;
    int autoBA61F220_var;
    unitgroup auto671D22CD_g;
    int auto671D22CD_u;
    unit auto671D22CD_var;
    unitgroup auto38DEDDB2_g;
    int auto38DEDDB2_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_aORegions[1] = RegionFromId(67);
    gv_aORegions[2] = RegionFromId(68);
    gv_aORegions[3] = RegionFromId(69);
    gv_aORegions[4] = RegionFromId(70);
    gv_aORegions[5] = RegionFromId(71);
    gv_aORegions[6] = RegionFromId(72);
    gf_ReinforcementsGlobal();
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/327A1FD3"));
    autoBA61F220_g = gv_players;
    autoBA61F220_var = -1;
    while (true) {
        autoBA61F220_var = PlayerGroupNextPlayer(autoBA61F220_g, autoBA61F220_var);
        if (autoBA61F220_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoBA61F220_var, "CASOnStation", 1);
    }
    Wait(10.0, c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    gf_MissionText(StringExternal("Param/Value/FEE42812"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/CB282B18"));
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(5, 0);
    Wait(9.0, c_timeGame);
    gf_SpawnUndead(1, "Arachnathid", 1);
    gf_SpawnUndead(1, "Arachnathid", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    if ((RandomInt(0, 1) == 1)) {
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    }
    if ((RandomInt(0, 3) == 3)) {
        gf_SpawnUndead(1, "ThresherMaw", 1);
    }
    TriggerEnable(gt_PMCPeriodicSpawn, false);
    TriggerEnable(gt_UndeadSpawningBurrowed, true);
    TriggerExecute(gt_UndeadSpawningBurrowed, true, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/B8BDB2C6"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/65675F25"));
    TimerStart(gv_missiontimer, 180.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    Wait(180.0, c_timeGame);
    TriggerExecute(gt_UndeadSpawningBurrowed, true, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_UpdateMissionCompletionTracker(true);
    Wait(5.0, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(7.0, c_timeGame);
    TriggerEnable(gt_UseSeismicResonator, true);
    gf_SpawnItemLoc("SeismicResonator", 1, RegionRandomPoint(gv_lZs[RandomInt(1, 3)]));
    gf_SpawnItemLoc("SeismicResonator", 1, RegionRandomPoint(gv_aORegions[RandomInt(1, 6)]));
    gf_SpawnItemLoc("SeismicResonator", 1, RegionRandomPoint(gv_lZs[RandomInt(4, 5)]));
    auto671D22CD_g = UnitGroup("SeismicResonator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto671D22CD_u = UnitGroupCount(auto671D22CD_g, c_unitCountAll);
    for (;; auto671D22CD_u -= 1) {
        auto671D22CD_var = UnitGroupUnitFromEnd(auto671D22CD_g, auto671D22CD_u);
        if (auto671D22CD_var == null) { break; }
        gf_MissionItemPingAddItem(auto671D22CD_var);
        UnitGroupAdd(gv_seismicSatchel, auto671D22CD_var);
    }
    gf_MissionText(StringExternal("Param/Value/8AC833D8"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/92F847A7"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/75B83399"));
    TimerStart(gv_missiontimer, 300.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    while (!(((UnitGroupCount(gv_seismicSatchel, c_unitCountAlive) == 0) || (TimerGetRemaining(gv_missiontimer) == 0.0)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(gt_UseSeismicResonator, false);
    if ((TimerGetRemaining(gv_missiontimer) == 0.0)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_UpdateMissionCompletionTracker(false);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        gf_FailMission(12, StringExternal("Param/Value/DF27F943"), 0);
        auto38DEDDB2_g = gv_seismicSatchel;
        auto38DEDDB2_u = UnitGroupCount(auto38DEDDB2_g, c_unitCountAll);
        for (;; auto38DEDDB2_u -= 1) {
            lv_item = UnitGroupUnitFromEnd(auto38DEDDB2_g, auto38DEDDB2_u);
            if (lv_item == null) { break; }
            gf_MissionItemPingRemoveItem(lv_item);
            UnitGroupRemove(gv_seismicSatchel, lv_item);
        }
        TriggerExecute(gt_UndeadSpawningBurrowed, true, false);
        TriggerExecute(gt_UndeadSpawningBurrowed, true, false);
        TriggerExecute(gt_UndeadSpawningBurrowed, true, false);
        gf_SpawnPMCSquad(9, 0);
        gf_SpawnPMCSquad(4, 0);
        gf_SpawnPMCSquad(5, 0);
    }
    else {
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_UpdateMissionCompletionTracker(true);
        gv_pMissionCount += 1;
        TriggerEnable(gt_UndeadSpawningBurrowed, false);
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(30.0, c_timeGame);
    TriggerSendEvent("P Ghost Convoy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTheBurrowed_Init () {
    gt_PTheBurrowed = TriggerCreate("gt_PTheBurrowed_Func");
    TriggerAddEventGeneric(gt_PTheBurrowed, "The Burrowed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Seismic Resonator
//--------------------------------------------------------------------------------------------------
bool gt_UseSeismicResonator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    fixed lv_magnitude;
    fixed lv_dist;
    point lv_epicenter;

    // Automatic Variable Declarations
    unitgroup auto7191B481_g;
    int auto7191B481_u;
    unit auto7191B481_var;

    // Variable Initialization
    lv_epicenter = UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem()));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "SeismicResonator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("EnergyNovaShockwave", UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())));
    SoundPlayOnUnit(SoundLink("Spectre_EMPImpact", -1), PlayerGroupAll(), UnitInventoryUnit(EventUnitInventoryItem()), 0.0, 100.0, 0.0);
    SoundPlay(SoundLink("CargoTruck_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
    UnitGroupRemove(gv_seismicSatchel, EventUnitInventoryItem());
    auto7191B481_g = gv_heroesGroup;
    auto7191B481_u = UnitGroupCount(auto7191B481_g, c_unitCountAll);
    for (;; auto7191B481_u -= 1) {
        auto7191B481_var = UnitGroupUnitFromEnd(auto7191B481_g, auto7191B481_u);
        if (auto7191B481_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(auto7191B481_var), lv_epicenter) <= 20.0)) {
            lv_magnitude = (3.1 - (DistanceBetweenPoints(UnitGetPosition(auto7191B481_var), lv_epicenter) / 10.0));
            lv_dist = DistanceBetweenPoints(UnitGetPosition(auto7191B481_var), lv_epicenter);
            CameraShakeStart(UnitGetOwner(auto7191B481_var), c_cameraPositionTarget, c_cameraDirectionXY, lv_magnitude, 20.0, 2.0, 1.5);
            SoundPlay(SoundLink("EarRinging", -1), PlayerGroupSingle(UnitGetOwner(auto7191B481_var)), (100.0 - (lv_dist * 10.0)), 0.0);
        }
    }
    gf_SucceedMission(11, StringExternal("Param/Value/90851D84"), 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UseSeismicResonator_Init () {
    gt_UseSeismicResonator = TriggerCreate("gt_UseSeismicResonator_Func");
    TriggerEnable(gt_UseSeismicResonator, false);
    TriggerAddEventUnitInventoryChange(gt_UseSeismicResonator, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost Convoy
//--------------------------------------------------------------------------------------------------
bool gt_PGhostConvoy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_convoyspawn;

    // Automatic Variable Declarations
    unitgroup autoD71F10BB_g;
    int autoD71F10BB_u;
    unit autoD71F10BB_var;
    int auto6C7FD56E_val;
    const int autoF298EC8E_ae = 5;
    const int autoF298EC8E_ai = 1;
    const int auto9B66519F_ae = 3;
    const int auto9B66519F_ai = 1;
    const int auto2A3F394E_n = 4;
    int auto2A3F394E_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_convoyvehiclessafe = 0;
    gv_convoysKilled = 0;
    gv_convoyset = RandomInt(1, 3);
    gv_pConvoyReverse = false;
    gv_convoy_Set = false;
    autoD71F10BB_g = gv_convoy;
    autoD71F10BB_u = UnitGroupCount(autoD71F10BB_g, c_unitCountAll);
    for (;; autoD71F10BB_u -= 1) {
        autoD71F10BB_var = UnitGroupUnitFromEnd(autoD71F10BB_g, autoD71F10BB_u);
        if (autoD71F10BB_var == null) { break; }
        UnitGroupRemove(gv_convoy, autoD71F10BB_var);
    }
    auto6C7FD56E_val = gv_convoyset;
    if (auto6C7FD56E_val == 1) {
        gv_convoystartend[1][1] = RegionFromId(17);
        gv_convoyroutes[1][1] = PointFromId(1776);
        gv_convoyroutes[1][2] = PointFromId(1777);
        gv_convoyroutes[1][3] = PointFromId(1778);
        gv_convoyroutes[1][4] = PointFromId(1779);
        gv_convoyroutes[1][5] = PointFromId(1780);
        gv_convoyroutes[1][6] = PointFromId(1781);
        gv_convoyroutes[1][7] = PointFromId(1782);
        gv_convoyroutes[1][8] = PointFromId(1783);
        gv_convoyroutes[1][9] = PointFromId(1784);
        gv_convoystartend[1][2] = RegionFromId(18);
        gv_convoymax = 9;
    }
    else if (auto6C7FD56E_val == 2) {
        gv_convoystartend[2][1] = RegionFromId(41);
        gv_convoyroutes[2][1] = PointFromId(1785);
        gv_convoyroutes[2][2] = PointFromId(1786);
        gv_convoyroutes[2][3] = PointFromId(1787);
        gv_convoyroutes[2][4] = PointFromId(1788);
        gv_convoyroutes[2][5] = PointFromId(1789);
        gv_convoyroutes[2][6] = PointFromId(1790);
        gv_convoyroutes[2][7] = PointFromId(1791);
        gv_convoyroutes[2][8] = PointFromId(1792);
        gv_convoyroutes[2][9] = PointFromId(1782);
        gv_convoyroutes[2][10] = PointFromId(1783);
        gv_convoyroutes[2][11] = PointFromId(1784);
        gv_convoystartend[2][2] = RegionFromId(18);
        gv_convoymax = 11;
    }
    else if (auto6C7FD56E_val == 3) {
        gv_convoystartend[3][1] = RegionFromId(19);
        gv_convoyroutes[3][1] = PointFromId(1793);
        gv_convoyroutes[3][2] = PointFromId(1788);
        gv_convoyroutes[3][3] = PointFromId(1789);
        gv_convoyroutes[3][4] = PointFromId(1790);
        gv_convoyroutes[3][5] = PointFromId(1791);
        gv_convoyroutes[3][6] = PointFromId(1792);
        gv_convoyroutes[3][7] = PointFromId(1782);
        gv_convoyroutes[3][8] = PointFromId(1783);
        gv_convoyroutes[3][9] = PointFromId(1784);
        gv_convoystartend[3][2] = RegionFromId(18);
        gv_convoymax = 9;
    }
    else {
    }
    if ((RandomInt(1, 2) == 1)) {
        gv_pConvoyReverse = true;
        gv_convoynext = gv_convoymax;
        gv_convoymax = 1;
        gv_convoystartend[gv_convoyset][0] = gv_convoystartend[gv_convoyset][2];
        gv_convoystartend[gv_convoyset][2] = gv_convoystartend[gv_convoyset][1];
        gv_convoystartend[gv_convoyset][1] = gv_convoystartend[gv_convoyset][0];
    }
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/773DCB69"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/24F93E6D"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/26789AAE"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/2623A1C4"));
    TriggerEnable(gt_PGhostConvoyDies, true);
    TriggerEnable(gt_PGhostConvoyContact, true);
    TriggerEnable(gt_PGhostRAPatrols, true);
    TriggerSendEvent("P RA C2 Patrol");
    gv_pauseSpawning = true;
    lv_int = 1;
    for ( ; ( (autoF298EC8E_ai >= 0 && lv_int <= autoF298EC8E_ae) || (autoF298EC8E_ai < 0 && lv_int >= autoF298EC8E_ae) ) ; lv_int += autoF298EC8E_ai ) {
        if (((lv_int == 1) || (lv_int == 5))) {
            libNtve_gf_UnitCreateFacingPoint(1, "ColonistTransport", c_unitCreateIgnorePlacement, 13, RegionGetCenter(gv_convoystartend[gv_convoyset][1]), gv_convoyroutes[gv_convoyset][1]);
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "LMTV", c_unitCreateIgnorePlacement, 13, RegionGetCenter(gv_convoystartend[gv_convoyset][1]), gv_convoyroutes[gv_convoyset][1]);
        }
        UnitGroupAdd(gv_convoy, UnitLastCreated());
        if ((gv_pConvoyReverse == false)) {
            if ((lv_int == 1)) {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][(gv_convoynext + lv_int)]), c_orderQueueReplace);
            }
        }
        else {
            if ((lv_int == 1)) {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][(gv_convoynext - lv_int)]), c_orderQueueReplace);
            }
        }
        libNtve_gf_UnitCreateFacingPoint(1, "GhostMini", c_unitCreateIgnorePlacement, 13, RegionGetCenter(gv_convoystartend[gv_convoyset][1]), gv_convoyroutes[gv_convoyset][1]);
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "FragAIGrouporHero", UnitLastCreated(), 1);
        }
        if ((lv_int == 1)) {
            SoundPlay(SoundLink("TTosh03BMusicEventCCCC", -1), PlayerGroupAll(), 100.0, 0.0);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_convoystartend[gv_convoyset][1]), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 0.0, 270.0);
            PingSetUnit(PingLastCreated(), UnitLastCreated());
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/F5F17D73"));
            gv_missionping = PingLastCreated();
        }
        if ((lv_int < 5)) {
            Wait(10.0, c_timeGame);
        }
        else {
            Wait(5.0, c_timeGame);
        }
        TriggerExecute(gt_PGhostConvoyLoop, true, false);
    }
    gv_convoy_Set = true;
    TriggerEnable(gt_PGhostConvoyLoop, true);
    TriggerEnable(gt_PGhostConvoyLeave, true);
    lv_int = 1;
    for ( ; ( (auto9B66519F_ai >= 0 && lv_int <= auto9B66519F_ae) || (auto9B66519F_ai < 0 && lv_int >= auto9B66519F_ae) ) ; lv_int += auto9B66519F_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "GhostMini", c_unitCreateIgnorePlacement, 13, RegionGetCenter(gv_convoystartend[gv_convoyset][1]), gv_convoyroutes[gv_convoyset][1]);
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "FragAIGrouporHero", UnitLastCreated(), 1);
        }
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        Wait(0.0, c_timeGame);
    }
    for (auto2A3F394E_i = 1; auto2A3F394E_i <= auto2A3F394E_n; auto2A3F394E_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "GhostMini", c_unitCreateIgnorePlacement, 13, RegionGetCenter(gv_convoystartend[gv_convoyset][1]), gv_convoyroutes[gv_convoyset][1]);
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "FragAIGrouporHero", UnitLastCreated(), 1);
        }
        UnitGroupAdd(gv_ghostSquad, UnitLastCreated());
    }
    gv_pauseSpawning = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostConvoy_Init () {
    gt_PGhostConvoy = TriggerCreate("gt_PGhostConvoy_Func");
    TriggerAddEventGeneric(gt_PGhostConvoy, "P Ghost Convoy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost RA Patrols
//--------------------------------------------------------------------------------------------------
bool gt_PGhostRAPatrols_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(10.0, c_timeGame);
    TriggerEnable(gt_PMCPeriodicSpawn, true);
    gf_SpawnUndead(1, "Raisuli", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(1, 0);
    Wait(RandomFixed(15.0, 30.0), c_timeGame);
    gf_SpawnPMCSquad(19, 0);
    gf_SpawnPMCSquad(8, 0);
    gf_SpawnPMCSquad(15, 1);
    gf_SpawnPMCSquad(24, 0);
    gf_SpawnUndead(1, "Raisuli", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(1, "Horror", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostRAPatrols_Init () {
    gt_PGhostRAPatrols = TriggerCreate("gt_PGhostRAPatrols_Func");
    TriggerEnable(gt_PGhostRAPatrols, false);
    TriggerAddEventGeneric(gt_PGhostRAPatrols, "P RA C2 Patrol");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost Convoy Loop
//--------------------------------------------------------------------------------------------------
bool gt_PGhostConvoyLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    int lv_z;
    unit lv_tempunit;
    unit lv_nextunit;
    point lv_offset;

    // Automatic Variable Declarations
    int auto57137BD7_ae;
    const int auto57137BD7_ai = 1;
    int autoC6109EF3_ae;
    const int autoC6109EF3_ai = 1;
    int autoECB26E33_ae;
    const int autoECB26E33_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) > 1)) {
        PingSetUnit(gv_missionping, UnitGroupUnit(gv_convoy, 1));
    }
    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), gv_convoyroutes[gv_convoyset][gv_convoynext]) <= 2.0) && (gv_convoyfinal == false)) {
        if ((gv_convoynext == gv_convoymax)) {
            gv_convoyfinal = true;
        }
        else {
            if ((gv_pConvoyReverse == false)) {
                gv_convoynext += 1;
            }
            else {
                gv_convoynext -= 1;
            }
        }
    }
    auto57137BD7_ae = UnitGroupCount(gv_convoy, c_unitCountAll);
    lv_loopint = 1;
    for ( ; ( (auto57137BD7_ai >= 0 && lv_loopint <= auto57137BD7_ae) || (auto57137BD7_ai < 0 && lv_loopint >= auto57137BD7_ae) ) ; lv_loopint += auto57137BD7_ai ) {
        lv_tempunit = UnitGroupUnit(gv_convoy, lv_loopint);
        if ((gv_convoyfinal == true)) {
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_convoystartend[gv_convoyset][2])), c_orderQueueReplace);
        }
        else {
            if ((lv_loopint == 1)) {
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
            }
            else {
                lv_nextunit = UnitGroupUnit(gv_convoy, (lv_loopint - 1));
                if ((DistanceBetweenPoints(UnitGetPosition(lv_tempunit), UnitGetPosition(lv_nextunit)) >= 15.0)) {
                    UnitBehaviorAdd(lv_tempunit, "CatchingUp", lv_tempunit, 1);
                }
                else {
                    UnitBehaviorRemove(lv_tempunit, "CatchingUp", 1);
                }
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_nextunit), 5.0, AngleBetweenPoints(UnitGetPosition(lv_nextunit), UnitGetPosition(lv_tempunit)))), c_orderQueueReplace);
            }
        }
    }
    if ((UnitGroupCount(gv_ghostSquad, c_unitCountAlive) >= 1)) {
        autoC6109EF3_ae = UnitGroupCount(gv_convoy, c_unitCountAlive);
        lv_loopint = 1;
        for ( ; ( (autoC6109EF3_ai >= 0 && lv_loopint <= autoC6109EF3_ae) || (autoC6109EF3_ai < 0 && lv_loopint >= autoC6109EF3_ae) ) ; lv_loopint += autoC6109EF3_ai ) {
            lv_z += 1;
        }
        lv_offset = PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(gv_convoy, lv_z)), 4.0, AngleBetweenPoints(gv_convoyroutes[gv_convoyset][gv_convoynext], UnitGetPosition(UnitGroupUnit(gv_convoy, lv_z))));
        if ((RandomInt(0, 1) == 1)) {
            lv_offset = PointWithOffsetPolar(lv_offset, RandomFixed(4.0, 6.0), (AngleBetweenPoints(lv_offset, UnitGetPosition(UnitGroupUnit(gv_convoy, lv_z))) + 90.0));
        }
        else {
            lv_offset = PointWithOffsetPolar(lv_offset, RandomFixed(4.0, 6.0), (AngleBetweenPoints(lv_offset, UnitGetPosition(UnitGroupUnit(gv_convoy, lv_z))) - 90.0));
        }
        UnitGroupIssueOrder(gv_ghostSquad, OrderTargetingPoint(AbilityCommand("attack", 0), lv_offset), c_orderQueueReplace);
    }
    if ((UnitGroupCount(gv_patrol, c_unitCountAlive) >= 1)) {
        lv_offset = PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), 2.0, AngleBetweenPoints(gv_convoyroutes[gv_convoyset][gv_convoynext], UnitGetPosition(UnitGroupUnit(gv_convoy, 1))));
        autoECB26E33_ae = UnitGroupCount(gv_patrol, c_unitCountAll);
        lv_loopint = 1;
        for ( ; ( (autoECB26E33_ai >= 0 && lv_loopint <= autoECB26E33_ae) || (autoECB26E33_ai < 0 && lv_loopint >= autoECB26E33_ae) ) ; lv_loopint += autoECB26E33_ai ) {
            lv_tempunit = UnitGroupUnit(gv_patrol, lv_loopint);
            lv_offset = PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), ((IntToFixed(lv_loopint) - 1.0) * 3.2), AngleBetweenPoints(gv_convoyroutes[gv_convoyset][gv_convoynext], UnitGetPosition(UnitGroupUnit(gv_convoy, 1))));
            if ((DistanceBetweenPoints(UnitGetPosition(lv_tempunit), lv_offset) >= 8.0)) {
                UnitIssueOrder(lv_tempunit, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), lv_offset), c_orderQueueReplace);
            }
            else {
                if ((gf_Parity(lv_loopint) == false)) {
                    lv_offset = PointWithOffsetPolar(lv_offset, 3.0, (AngleBetweenPoints(lv_offset, UnitGetPosition(UnitGroupUnit(gv_convoy, 1))) + 90.0));
                }
                else {
                    lv_offset = PointWithOffsetPolar(lv_offset, 3.0, (AngleBetweenPoints(lv_offset, UnitGetPosition(UnitGroupUnit(gv_convoy, 1))) - 90.0));
                }
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_offset), c_orderQueueReplace);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostConvoyLoop_Init () {
    gt_PGhostConvoyLoop = TriggerCreate("gt_PGhostConvoyLoop_Func");
    TriggerEnable(gt_PGhostConvoyLoop, false);
    TriggerAddEventTimePeriodic(gt_PGhostConvoyLoop, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost Convoy Leave
//--------------------------------------------------------------------------------------------------
bool gt_PGhostConvoyLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_convoy, EventUnit()) == true) || (UnitGroupHasUnit(gv_patrol, EventUnit()) == true) || (UnitGroupHasUnit(gv_ghostSquad, EventUnit()) == true)))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_convoystartend[gv_convoyset][2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_convoy, EventUnit()) == true)) {
        UnitRemove(EventUnit());
        gv_convoyvehiclessafe += 1;
        if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerEnable(gt_PGhostConvoyDies, false);
            TriggerSendEvent("P Ghost Convoy End");
        }
    }
    else {
        UnitRemove(EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostConvoyLeave_Init () {
    gt_PGhostConvoyLeave = TriggerCreate("gt_PGhostConvoyLeave_Func");
    TriggerEnable(gt_PGhostConvoyLeave, false);
    TriggerAddEventUnitRegion(gt_PGhostConvoyLeave, null, RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_PGhostConvoyLeave, null, RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_PGhostConvoyLeave, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_PGhostConvoyLeave, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost Convoy Contact
//--------------------------------------------------------------------------------------------------
bool gt_PGhostConvoyContact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_fragging;
    text[6] lv_shadowcontactreport;

    // Automatic Variable Declarations
    unitgroup auto6DA935D0_g;
    int auto6DA935D0_u;
    unit auto6DA935D0_var;

    // Variable Initialization
    lv_fragging = true;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_patrol, c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == 15))) {
            return false;
        }

        if (!(((UnitGroupHasUnit(gv_convoy, EventUnit()) == true) || (UnitGroupHasUnit(gv_patrol, EventUnit()) == true) || (UnitGroupHasUnit(gv_ghostSquad, EventUnit()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_shadowcontactreport[1] = StringExternal("Param/Value/A48160C9");
    lv_shadowcontactreport[2] = StringExternal("Param/Value/6AAAE4BC");
    lv_shadowcontactreport[3] = StringExternal("Param/Value/8D9EAAEB");
    lv_shadowcontactreport[4] = StringExternal("Param/Value/7FF7B8B4");
    lv_shadowcontactreport[5] = StringExternal("Param/Value/77583BF2");
    UnitGroupIssueOrder(gv_ghostSquad, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_ghostSquad, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    auto6DA935D0_g = UnitGroup(null, 13, RegionCircle(UnitGetPosition(EventUnit()), 14.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6DA935D0_u = UnitGroupCount(auto6DA935D0_g, c_unitCountAll);
    for (;; auto6DA935D0_u -= 1) {
        auto6DA935D0_var = UnitGroupUnitFromEnd(auto6DA935D0_g, auto6DA935D0_u);
        if (auto6DA935D0_var == null) { break; }
        UnitIssueOrder(auto6DA935D0_var, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
        if ((RandomInt(0, 3) == 1) && (lv_fragging == false)) {
            lv_fragging = true;
            UnitIssueOrder(auto6DA935D0_var, OrderTargetingPoint(AbilityCommand("FragGrenadePMC", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(auto6DA935D0_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
        }
    }
    if ((UnitGroupHasUnit(gv_patrol, EventUnit()) == true)) {
        gf_TextChat(EventUnit(), lv_shadowcontactreport[RandomInt(1, 5)]);
    }
    else {
        gf_TextChat(UnitGroupClosestToPoint(gv_patrol, UnitGetPosition(EventUnit())), lv_shadowcontactreport[RandomInt(1, 5)]);
    }
    Wait(12.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostConvoyContact_Init () {
    gt_PGhostConvoyContact = TriggerCreate("gt_PGhostConvoyContact_Func");
    TriggerEnable(gt_PGhostConvoyContact, false);
    TriggerAddEventUnitAttacked(gt_PGhostConvoyContact, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost Convoy Dies
//--------------------------------------------------------------------------------------------------
bool gt_PGhostConvoyDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_convoy, EventUnit());
    gv_convoysKilled += 1;
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        if ((gv_convoy_Set == true)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerEnable(gt_PGhostConvoyLeave, false);
            TriggerSendEvent("P Ghost Convoy End");
        }
    }
    else {
        PingSetUnit(gv_missionping, UnitGroupUnit(gv_convoy, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostConvoyDies_Init () {
    gt_PGhostConvoyDies = TriggerCreate("gt_PGhostConvoyDies_Func");
    TriggerEnable(gt_PGhostConvoyDies, false);
    TriggerAddEventUnitDied(gt_PGhostConvoyDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost Convoy End
//--------------------------------------------------------------------------------------------------
bool gt_PGhostConvoyEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto458B1CD7_g;
    int auto458B1CD7_u;
    unit auto458B1CD7_var;
    unitgroup auto18FDF97D_g;
    int auto18FDF97D_u;
    unit auto18FDF97D_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PGhostConvoyLoop, false);
    TriggerEnable(gt_PGhostConvoyContact, false);
    PingDestroy(gv_missionping);
    auto458B1CD7_g = gv_patrol;
    auto458B1CD7_u = UnitGroupCount(auto458B1CD7_g, c_unitCountAll);
    for (;; auto458B1CD7_u -= 1) {
        auto458B1CD7_var = UnitGroupUnitFromEnd(auto458B1CD7_g, auto458B1CD7_u);
        if (auto458B1CD7_var == null) { break; }
        UnitRemove(auto458B1CD7_var);
    }
    auto18FDF97D_g = gv_ghostSquad;
    auto18FDF97D_u = UnitGroupCount(auto18FDF97D_g, c_unitCountAll);
    for (;; auto18FDF97D_u -= 1) {
        auto18FDF97D_var = UnitGroupUnitFromEnd(auto18FDF97D_g, auto18FDF97D_u);
        if (auto18FDF97D_var == null) { break; }
        UnitRemove(auto18FDF97D_var);
    }
    if ((gv_convoyvehiclessafe >= 2)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_UpdateMissionCompletionTracker(true);
        gf_MissionText(StringExternal("Param/Value/E6C73E7B"));
        gv_pMissionCount += 1;
        if ((gv_convoyvehiclessafe == 5)) {
            gf_SucceedMission((gv_convoyvehiclessafe * 35), (IntToText(gv_convoyvehiclessafe) + StringExternal("Param/Value/64AE833B")), 0, false);
        }
        else {
            gf_SucceedMission((gv_convoyvehiclessafe * 25), (IntToText(gv_convoyvehiclessafe) + StringExternal("Param/Value/1F87878E")), 0, false);
        }
        SoundPlay(SoundLink("TTychus02MusicIntro", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_UpdateMissionCompletionTracker(false);
        gf_MissionText(StringExternal("Param/Value/AB67D770"));
        if ((gv_convoysKilled == 5)) {
            gf_FailMission(35, StringExternal("Param/Value/7C830A95"), 0);
        }
        else {
            gf_SucceedMission((gv_convoyvehiclessafe * 25), (IntToText(gv_convoyvehiclessafe) + StringExternal("Param/Value/E312EEAD")), 0, false);
        }
        SoundPlay(SoundLink("TValerian02AMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
        gf_SpawnPMCSquad(1, 1);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(30.0, c_timeGame);
    TriggerSendEvent("P Combat Walker");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostConvoyEnd_Init () {
    gt_PGhostConvoyEnd = TriggerCreate("gt_PGhostConvoyEnd_Func");
    TriggerAddEventGeneric(gt_PGhostConvoyEnd, "P Ghost Convoy End");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Combat Walker
//--------------------------------------------------------------------------------------------------
bool gt_PCombatWalker_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    region[4] lv_motorpool;
    int lv_int;
    unitgroup lv_combatengineers;
    int[4] lv_pings;
    region[4] lv_highlandguards;

    // Automatic Variable Declarations
    playergroup auto75C0B7F1_g;
    int auto75C0B7F1_var;
    unitgroup autoA784E74D_g;
    int autoA784E74D_u;
    unit autoA784E74D_var;
    const int auto84CC21D4_ae = 300;
    const int auto84CC21D4_ai = 1;
    unitgroup autoD510B49A_g;
    int autoD510B49A_u;
    unit autoD510B49A_var;
    unitgroup auto62E012FB_g;
    int auto62E012FB_u;
    unit auto62E012FB_var;

    // Variable Initialization
    lv_int = 1;
    lv_combatengineers = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_pings[init_i] = c_invalidPingId;
    }

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_DasdanCasualties();
    gf_StartSpawnLoop(2, gv_loopType);
    lv_motorpool[1] = RegionFromId(124);
    lv_motorpool[2] = RegionFromId(123);
    lv_motorpool[3] = RegionFromId(125);
    lv_highlandguards[1] = RegionFromId(143);
    lv_highlandguards[2] = RegionFromId(144);
    lv_highlandguards[3] = RegionFromId(146);
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/2C1614A5"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/5C29C457"));
    Wait(9.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/AC1F55F7"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/2332C7DB"));
    gf_LandPhantom(PointFromId(2503));
    Wait(12.0, c_timeGame);
    TriggerEnable(gt_PCombatEngineerDies, true);
    gf_MissionText(StringExternal("Param/Value/8E86A27E"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_lastlandedphantom), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 12.0, 270.0);
    auto75C0B7F1_g = gv_players;
    auto75C0B7F1_var = -1;
    while (true) {
        auto75C0B7F1_var = PlayerGroupNextPlayer(auto75C0B7F1_g, auto75C0B7F1_var);
        if (auto75C0B7F1_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto75C0B7F1_var, "SpecialForces", c_techCountCompleteOnly) == 0)) {
            UnitCreate(1, gf_randomminitype(), c_unitCreateIgnorePlacement, auto75C0B7F1_var, PointWithOffsetPolar(PointFromId(2503), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
            gf_RandomMiniFlagDecal(UnitLastCreated());
        }
    }
    UnitCreate(1, "MRL", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(PointFromId(2503), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
    UnitCreate(1, "MRL", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(PointFromId(2503), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
    UnitCreate(1, "FlareGun", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(PointFromId(2503), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
    UnitCreate(1, "FlareGun", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(PointFromId(2503), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
    UnitCreate(3, "CombatEngineerMini", c_unitCreateIgnorePlacement, 13, PointFromId(2503), libNtve_gf_RandomAngle());
    UnitGroupAddUnitGroup(lv_combatengineers, UnitLastCreatedGroup());
    autoA784E74D_g = lv_combatengineers;
    autoA784E74D_u = UnitGroupCount(autoA784E74D_g, c_unitCountAll);
    for (;; autoA784E74D_u -= 1) {
        autoA784E74D_var = UnitGroupUnitFromEnd(autoA784E74D_g, autoA784E74D_u);
        if (autoA784E74D_var == null) { break; }
        UnitGroupAdd(gv_undeadTargetGroup, autoA784E74D_var);
        libE6C8C21C_gf_RegisterUnitDiesEvent(gt_PCombatEngineerDies, autoA784E74D_var);
        gf_MissionItemPingAddItem(autoA784E74D_var);
        gf_MoveToGuardPos(autoA784E74D_var, lv_motorpool[lv_int]);
        lv_int += 1;
    }
    gf_TakeoffPhantom();
    gf_MissionText(StringExternal("Param/Value/2BA153D4"));
    gf_SpawnUndead(3, "Spitter", 1);
    gf_SpawnUndead(2, "Spitter", 1);
    gf_SpawnUndead(2, "Spitter", 1);
    gf_SpawnUndead(2, "Morbus", 1);
    gf_SpawnPMCSquad(11, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(14, 0);
    gf_SpawnPMCSquad(11, 0);
    gf_SpawnPMCSquad(15, 0);
    TimerStart(gv_missiontimer, 300.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    lv_int = 1;
    for ( ; ( (auto84CC21D4_ai >= 0 && lv_int <= auto84CC21D4_ae) || (auto84CC21D4_ai < 0 && lv_int >= auto84CC21D4_ae) ) ; lv_int += auto84CC21D4_ai ) {
        if ((libNtve_gf_UnitGroupIsDead(lv_combatengineers) == true)) {
            TriggerEnable(gt_PCombatEngineerDies, false);
            TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
            gf_FailMission(15, StringExternal("Param/Value/065850AA"), 0);
            gf_UpdateMissionCompletionTracker(false);
            Wait(5.0, c_timeGame);
            ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
            Wait(30.0, c_timeGame);
            TriggerSendEvent("Tame The Beast");
            return true;
        }

        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gf_UpdateMissionCompletionTracker(true);
    gv_pMissionCount += 1;
    TriggerEnable(gt_PCombatEngineerDies, false);
    autoD510B49A_g = lv_combatengineers;
    autoD510B49A_u = UnitGroupCount(autoD510B49A_g, c_unitCountAll);
    for (;; autoD510B49A_u -= 1) {
        autoD510B49A_var = UnitGroupUnitFromEnd(autoD510B49A_g, autoD510B49A_u);
        if (autoD510B49A_var == null) { break; }
        gf_MissionItemPingRemoveItem(autoD510B49A_var);
    }
    lv_int = 1;
    auto62E012FB_g = lv_combatengineers;
    auto62E012FB_u = UnitGroupCount(auto62E012FB_g, c_unitCountAll);
    for (;; auto62E012FB_u -= 1) {
        auto62E012FB_var = UnitGroupUnitFromEnd(auto62E012FB_g, auto62E012FB_u);
        if (auto62E012FB_var == null) { break; }
        gf_SucceedMission(25, StringExternal("Param/Value/FFA638B4"), 0, false);
        UnitSetOwner(gv_sentryGuns[lv_int], 13, false);
        UnitBehaviorRemove(gv_sentryGuns[lv_int], "Unpowered", 1);
        UnitGroupAdd(gv_undeadTargetGroup, gv_sentryGuns[lv_int]);
        SoundPlayOnUnit(SoundLink("Raynor_PenetratorRoundChargeUp", -1), PlayerGroupAll(), gv_sentryGuns[lv_int], 1.0, 100.0, 0.0);
        gf_MoveToGuardPos(gv_sentryGuns[lv_int], lv_highlandguards[lv_int]);
        UnitRemove(auto62E012FB_var);
        lv_int += 1;
    }
    Wait(3.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/854FA3EE"));
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(10.0, c_timeGame);
    gf_PMCCampaignSupplyCaches(3);
    Wait(20.0, c_timeGame);
    TriggerSendEvent("Tame The Beast");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PCombatWalker_Init () {
    gt_PCombatWalker = TriggerCreate("gt_PCombatWalker_Func");
    TriggerAddEventGeneric(gt_PCombatWalker, "P Combat Walker");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Combat Engineer Dies
//--------------------------------------------------------------------------------------------------
bool gt_PCombatEngineerDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionItemPingRemoveItem(EventUnit());
    gf_MissionText(StringExternal("Param/Value/B34A2624"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PCombatEngineerDies_Init () {
    gt_PCombatEngineerDies = TriggerCreate("gt_PCombatEngineerDies_Func");
    TriggerEnable(gt_PCombatEngineerDies, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Loop
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/188AD40C", "A", TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(gv_bossTimer))), Color(0.00, 100.00, 50.20)));
    ObjectiveSetName(gv_optionalObj, TextExpressionAssemble("Param/Expression/188AD40C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveLoop_Init () {
    gt_ObjectiveLoop = TriggerCreate("gt_ObjectiveLoop_Func");
    TriggerEnable(gt_ObjectiveLoop, false);
    TriggerAddEventTimePeriodic(gt_ObjectiveLoop, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick Up Casualty
//--------------------------------------------------------------------------------------------------
bool gt_PickUpCasualty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_casualties, EventUnitInventoryItem()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingSetPosition(gv_pingsecondary, RegionGetCenter(gv_medevacregion));
    PingSetTooltip(gv_pingsecondary, StringExternal("Param/Value/B44FBC04"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickUpCasualty_Init () {
    gt_PickUpCasualty = TriggerCreate("gt_PickUpCasualty_Func");
    TriggerEnable(gt_PickUpCasualty, false);
    TriggerAddEventUnitInventoryChange(gt_PickUpCasualty, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter MEDEVAC Site
//--------------------------------------------------------------------------------------------------
bool gt_EnterMEDEVACSite_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    const int autoA981B088_ae = 6;
    const int autoA981B088_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitRegion() == gv_medevacregion))) {
            return false;
        }

        if (!((gf_CountItemType("Casualty", EventUnit()) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (autoA981B088_ai >= 0 && lv_loopint <= autoA981B088_ae) || (autoA981B088_ai < 0 && lv_loopint >= autoA981B088_ae) ) ; lv_loopint += autoA981B088_ai ) {
        if ((UnitGetType(UnitInventoryItem(EventUnit(), lv_loopint)) == "Casualty")) {
            gf_MissionItemPingRemoveItem(UnitInventoryItem(EventUnit(), lv_loopint));
            UnitRemove(UnitInventoryItem(EventUnit(), lv_loopint));
            gf_SucceedMission(25, StringExternal("Param/Value/E581138A"), 0, false);
        }
    }
    if ((UnitGroupCount(gv_casualties, c_unitCountAlive) == 0)) {
        TriggerEnable(gt_EnterMEDEVACSite, false);
        TriggerEnable(gt_MedevacTimeEnd, false);
        TriggerEnable(gt_ObjectiveLoop, false);
        TimerWindowDestroy(gv_bossTimerWindow);
        PingDestroy(gv_pingsecondary);
        ObjectiveSetState(gv_optionalObj, c_objectiveStateCompleted);
        gf_UpdateMissionCompletionTracker(true);
        gv_pMissionCount += 1;
        UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
        UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(7.0, c_timeGame);
        UnitRemove(gv_mEDEVAC);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterMEDEVACSite_Init () {
    gt_EnterMEDEVACSite = TriggerCreate("gt_EnterMEDEVACSite_Func");
    TriggerEnable(gt_EnterMEDEVACSite, false);
    TriggerAddEventUnitRegion(gt_EnterMEDEVACSite, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_EnterMEDEVACSite, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medevac Time End
//--------------------------------------------------------------------------------------------------
bool gt_MedevacTimeEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB42C4D8C_g;
    int autoB42C4D8C_u;
    unit autoB42C4D8C_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_EnterMEDEVACSite, false);
    TriggerEnable(gt_ObjectiveLoop, false);
    TimerWindowDestroy(gv_bossTimerWindow);
    PingDestroy(gv_pingsecondary);
    autoB42C4D8C_g = gv_casualties;
    autoB42C4D8C_u = UnitGroupCount(autoB42C4D8C_g, c_unitCountAll);
    for (;; autoB42C4D8C_u -= 1) {
        autoB42C4D8C_var = UnitGroupUnitFromEnd(autoB42C4D8C_g, autoB42C4D8C_u);
        if (autoB42C4D8C_var == null) { break; }
        gf_MissionItemPingRemoveItem(autoB42C4D8C_var);
        UnitGroupRemove(gv_casualties, autoB42C4D8C_var);
        UnitRemove(autoB42C4D8C_var);
    }
    ObjectiveSetState(gv_optionalObj, c_objectiveStateFailed);
    gf_UpdateMissionCompletionTracker(false);
    UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    UnitRemove(gv_mEDEVAC);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedevacTimeEnd_Init () {
    gt_MedevacTimeEnd = TriggerCreate("gt_MedevacTimeEnd_Func");
    TriggerEnable(gt_MedevacTimeEnd, false);
    TriggerAddEventTimer(gt_MedevacTimeEnd, gv_bossTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Tame the Beast
//--------------------------------------------------------------------------------------------------
bool gt_PTametheBeast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7EC4687A_g;
    int auto7EC4687A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PMCPeriodicSpawn, false);
    gf_StopSpawnLoop(2, gv_loopType);
    gf_ReinforcementsGlobal();
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/692CF8AC"));
    Wait(9.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/7D39E42A"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/848DB355"));
    Wait(10.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(11, 0);
    gf_SpawnPMCSquad(24, 0);
    Wait(30.0, c_timeGame);
    gf_SpawnPMCSquad(10, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(15, 1);
    gf_SpawnPMCSquad(19, 1);
    Wait(25.0, c_timeGame);
    gf_SpawnPMCSquad(10, 0);
    gf_SpawnPMCSquad(18, 0);
    TriggerEnable(gt_SmithyBarrageAI, true);
    gf_MissionText(StringExternal("Param/Value/9A76A5CD"));
    gf_SpawnPMCSquad(22, 0);
    Wait(30.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(15, 1);
    gf_SpawnPMCSquad(23, 0);
    TriggerEnable(gt_PMCPeriodicSpawn, false);
    while (!((UnitGroupCount(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(gt_SmithyBarrageAI, false);
    gf_SucceedMission(250, StringExternal("Param/Value/68373657"), 0, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_UpdateMissionCompletionTracker(true);
    if ((gv_pMissionCount == 4)) {
        gv_pMCCh2Completed = true;
    }
    if ((gv_pMCCh2Completed == true)) {
        auto7EC4687A_g = gv_players;
        auto7EC4687A_var = -1;
        while (true) {
            auto7EC4687A_var = PlayerGroupNextPlayer(auto7EC4687A_g, auto7EC4687A_var);
            if (auto7EC4687A_var < 0) { break; }
            gf_UnlockAchievement(auto7EC4687A_var);
        }
    }
    gv_pMissionCount = 0;
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(30.0, c_timeGame);
    TriggerEnable(gt_PMCPeriodicSpawn, true);
    TriggerSendEvent("Chapter 3 Time Stops");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTametheBeast_Init () {
    gt_PTametheBeast = TriggerCreate("gt_PTametheBeast_Func");
    TriggerAddEventGeneric(gt_PTametheBeast, "Tame The Beast");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Smithy Barrage AI
//--------------------------------------------------------------------------------------------------
bool gt_SmithyBarrageAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    point lv_randompoint;
    point[26] lv_pointset;
    point lv_target;
    region lv_origin;
    point lv_saferegion;
    bool lv_pointfound;

    // Automatic Variable Declarations
    const int auto690EC71B_ae = 25;
    const int auto690EC71B_ai = 1;
    const int auto0A55D2A5_n = 4;
    int auto0A55D2A5_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_smithy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_target = gf_FindPlayerPoint();
    UnitIssueOrder(gv_smithy, OrderTargetingPoint(AbilityCommand("OdinBarrage", 0), lv_target), c_orderQueueReplace);
    UnitCreateEffectPoint(gv_smithy, "TitanMechMissileShot", lv_target);
    lv_origin = RegionCircle(lv_target, 15.0);
    lv_saferegion = RegionGetCenter(lv_origin);
    lv_i = 1;
    for ( ; ( (auto690EC71B_ai >= 0 && lv_i <= auto690EC71B_ae) || (auto690EC71B_ai < 0 && lv_i >= auto690EC71B_ae) ) ; lv_i += auto690EC71B_ai ) {
        Wait(0.25, c_timeGame);
        lv_pointfound = false;
        lv_pointset[lv_i] = RegionRandomPoint(lv_origin);
        if ((lv_i > 1)) {
            for (auto0A55D2A5_i = 1; auto0A55D2A5_i <= auto0A55D2A5_n; auto0A55D2A5_i += 1) {
                if ((lv_pointset[lv_i] != lv_pointset[(lv_i - 1)])) {
                    UnitCreateEffectPoint(gv_smithy, "TitanMechMissileShot", lv_pointset[lv_i]);
                    lv_pointfound = true;
                    break;
                }
                else {
                    lv_pointset[lv_i] = RegionRandomPoint(lv_origin);
                }
            }
            if ((lv_pointfound == false)) {
                lv_pointset[lv_i] = lv_saferegion;
                UnitCreateEffectPoint(gv_smithy, "TitanMechMissileShot", lv_pointset[lv_i]);
            }
        }
        else {
            UnitCreateEffectPoint(gv_smithy, "TitanMechMissileShot", lv_pointset[lv_i]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SmithyBarrageAI_Init () {
    gt_SmithyBarrageAI = TriggerCreate("gt_SmithyBarrageAI_Func");
    TriggerEnable(gt_SmithyBarrageAI, false);
    TriggerAddEventTimeElapsed(gt_SmithyBarrageAI, 15.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_SmithyBarrageAI, RandomFixed(90.0, 105.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Chapter 3 - Time Stops
//--------------------------------------------------------------------------------------------------
bool gt_PChapter3TimeStops_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOn();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/2937ACDE"), StringExternal("Param/Value/0CA23DCA"), 7.0, SoundLink("UI_Nova_AuthenticationAgentAuthenticatingTextStart", -1), SoundLink("UI_TextPrintout", -1));
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/7FD3D391"), 0, true);
    Wait(7.0, c_timeGame);
    GameSetLighting("UACDay", 0.0);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    gf_ChapterIntermissionOff();
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerSendEvent("Bio Samples");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PChapter3TimeStops_Init () {
    gt_PChapter3TimeStops = TriggerCreate("gt_PChapter3TimeStops_Func");
    TriggerAddEventGeneric(gt_PChapter3TimeStops, "Chapter 3 Time Stops");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Bio Samples
//--------------------------------------------------------------------------------------------------
bool gt_PBioSamples_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int auto4CC8ECF4_ae = 8;
    const int auto4CC8ECF4_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ReinforcementsGlobal();
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_UndeadSpawning1, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_UndeadSpawning2, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_UndeadSpawning1, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_UndeadSpawning2, true, false);
    Wait(2.0, c_timeGame);
    gf_StartSpawnLoop(2, gv_loopType);
    gf_StartSpawnLoop(3, gv_loopType);
    gv_silos[1] = RegionFromId(32);
    gv_silos[2] = RegionFromId(33);
    gv_silos[3] = RegionFromId(34);
    gv_silos[4] = RegionFromId(35);
    gv_silos[5] = RegionFromId(36);
    gv_silos[6] = RegionFromId(37);
    gv_silos[7] = RegionFromId(38);
    gv_silos[8] = RegionFromId(39);
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/40E3E99A"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/5A8FA020"));
    Wait(9.0, c_timeGame);
    lv_int = 1;
    for ( ; ( (auto4CC8ECF4_ai >= 0 && lv_int <= auto4CC8ECF4_ae) || (auto4CC8ECF4_ai < 0 && lv_int >= auto4CC8ECF4_ae) ) ; lv_int += auto4CC8ECF4_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_silos[lv_int]), ColorWithAlpha(0.00, 66.67, 66.67, 0.00), 0.0, 270.0);
        gv_highlanderpings[lv_int] = PingLastCreated();
        PingSetTooltip(gv_highlanderpings[lv_int], StringExternal("Param/Value/FC0B2FC2"));
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_silos[lv_int]));
        gv_waterSiteActors[lv_int] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {128,128,255 5.000000}");
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/921C6B53"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/332FFE64"));
    TriggerEnable(gt_PCollectSample, true);
    TriggerEnable(gt_PSampleTimeEnd, true);
    TimerStart(gv_missiontimer, 360.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(4, "Gargoyle", 1);
    gf_SpawnUndead(4, "Gargoyle", 1);
    gf_SpawnUndead(4, "Gargoyle", 1);
    gf_SpawnUndead(4, "Gargoyle", 1);
    gf_SpawnUndead(8, "Shredder", 1);
    gf_SpawnUndead(8, "Shredder", 1);
    gf_SpawnUndead(4, "Shredder", 1);
    gf_SpawnUndead(6, "Shredder", 1);
    Wait(30.0, c_timeGame);
    gv_medevacregion = gv_lZs[RandomInt(1, 5)];
    gf_MissionText(StringExternal("Param/Value/3BC40277"));
    gf_LandPhantom(RegionGetCenter(gv_medevacregion));
    UnitWeaponRemove(gv_lastlandedphantom, "50CalTurret");
    TriggerEnable(gt_PTurnInSample, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_medevacregion), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_supplyPing = PingLastCreated();
    PingSetTooltip(gv_supplyPing, StringExternal("Param/Value/0F651EDB"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PBioSamples_Init () {
    gt_PBioSamples = TriggerCreate("gt_PBioSamples_Func");
    TriggerAddEventGeneric(gt_PBioSamples, "Bio Samples");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Collect Sample
//--------------------------------------------------------------------------------------------------
bool gt_PCollectSample_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    int lv_silo;
    bool lv_leftregion;

    // Automatic Variable Declarations
    const int autoD9A12F31_ae = 8;
    const int autoD9A12F31_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, c_playerAny, EventUnitRegion(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (autoD9A12F31_ai >= 0 && lv_loopint <= autoD9A12F31_ae) || (autoD9A12F31_ai < 0 && lv_loopint >= autoD9A12F31_ae) ) ; lv_loopint += autoD9A12F31_ai ) {
        if ((EventUnitRegion() == gv_silos[lv_loopint])) {
            lv_silo = lv_loopint;
        }
    }
    if ((gv_silodisabled[lv_silo] == false)) {
    }
    else {
        return true;
    }
    gf_MissionText(StringExternal("Param/Value/40FA138B"));
    UnitBehaviorAdd(EventUnit(), "CollectingSample", EventUnit(), 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(gv_silos[lv_silo]), Color(0.00, 100.00, 0.00), 10.0, 270.0);
    while (true) {
        if ((TriggerIsEnabled(gt_PCollectSample) == true) && (libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true) && (UnitIsAlive(EventUnit()) == true)) {
        }
        else {
            gf_MissionText(StringExternal("Param/Value/6F763BC8"));
            UnitBehaviorRemove(EventUnit(), "CollectingSample", 1);
            lv_leftregion = true;
            break;
        }
        if ((UnitHasBehavior(EventUnit(), "CollectingSample") == false)) {
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((lv_leftregion == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BioSample", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, UnitGetFacing(EventUnit())));
        gf_MissionItemPingAddItem(UnitLastCreated());
        UnitGroupAdd(gv_biosamples, UnitLastCreated());
        gv_silodisabled[lv_silo] = true;
        libNtve_gf_KillModel(gv_waterSiteActors[lv_silo]);
        gf_MissionText(StringExternal("Param/Value/8E88BA89"));
        PingDestroy(gv_highlanderpings[lv_silo]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PCollectSample_Init () {
    gt_PCollectSample = TriggerCreate("gt_PCollectSample_Func");
    TriggerEnable(gt_PCollectSample, false);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(33), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(34), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(35), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(36), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(37), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(38), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(39), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Turn In Sample
//--------------------------------------------------------------------------------------------------
bool gt_PTurnInSample_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto3A592444_g;
    int auto3A592444_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitRegion() == gv_medevacregion))) {
            return false;
        }

        if (!((gf_CountItemType("BioSample", EventUnit()) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3A592444_g = UnitInventoryGroup(EventUnit());
    auto3A592444_u = UnitGroupCount(auto3A592444_g, c_unitCountAll);
    for (;; auto3A592444_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto3A592444_g, auto3A592444_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "BioSample")) {
            gf_PSampleHandover(lv_unit);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTurnInSample_Init () {
    gt_PTurnInSample = TriggerCreate("gt_PTurnInSample_Func");
    TriggerEnable(gt_PTurnInSample, false);
    TriggerAddEventUnitRegion(gt_PTurnInSample, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_PTurnInSample, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_PTurnInSample, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_PTurnInSample, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_PTurnInSample, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Sample Time End
//--------------------------------------------------------------------------------------------------
bool gt_PSampleTimeEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_sampleNotReturned;

    // Automatic Variable Declarations
    const int autoD4DAC022_ae = 8;
    const int autoD4DAC022_ai = 1;
    unitgroup auto1F7DD930_g;
    int auto1F7DD930_u;
    unit auto1F7DD930_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PCollectSample, false);
    TriggerEnable(gt_PTurnInSample, false);
    gf_TakeoffPhantom();
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroy(gv_supplyPing);
    lv_int = 1;
    for ( ; ( (autoD4DAC022_ai >= 0 && lv_int <= autoD4DAC022_ae) || (autoD4DAC022_ai < 0 && lv_int >= autoD4DAC022_ae) ) ; lv_int += autoD4DAC022_ai ) {
        PingDestroy(gv_highlanderpings[lv_int]);
        libNtve_gf_KillModel(gv_waterSiteActors[lv_int]);
    }
    if ((gv_biosamplehanded < 8)) {
        auto1F7DD930_g = gv_biosamples;
        auto1F7DD930_u = UnitGroupCount(auto1F7DD930_g, c_unitCountAll);
        for (;; auto1F7DD930_u -= 1) {
            auto1F7DD930_var = UnitGroupUnitFromEnd(auto1F7DD930_g, auto1F7DD930_u);
            if (auto1F7DD930_var == null) { break; }
            UnitRemove(auto1F7DD930_var);
            UnitGroupRemove(gv_biosamples, auto1F7DD930_var);
            gf_MissionItemPingRemoveItem(auto1F7DD930_var);
        }
    }
    if ((gv_biosamplehanded == 8)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(24, StringExternal("Param/Value/736D2E36"), 0, false);
        gv_pMissionCount += 1;
        gf_UpdateMissionCompletionTracker(true);
    }
    else if ((gv_biosamplehanded <= 7) && (gv_biosamplehanded >= 1)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_MissionText(StringExternal("Param/Value/0DDFA04E"));
        gv_pMissionCount += 1;
        gf_UpdateMissionCompletionTracker(true);
    }
    else if ((gv_biosamplehanded == 0)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_UpdateMissionCompletionTracker(false);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "Gargantuan", 1);
        gf_SpawnUndead(1, "Gargantuan", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(30.0, c_timeGame);
    TriggerSendEvent("Aspectus");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PSampleTimeEnd_Init () {
    gt_PSampleTimeEnd = TriggerCreate("gt_PSampleTimeEnd_Func");
    TriggerEnable(gt_PSampleTimeEnd, false);
    TriggerAddEventTimer(gt_PSampleTimeEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Aspectus
//--------------------------------------------------------------------------------------------------
bool gt_PAspectus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_aspectus;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Ally);
    SoundPlay(SoundLink("TTosh03BMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/30ECD49F"));
    Wait(9.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/FB2CB6D8"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/886BB78A"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/03E55844"));
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_CallForFireAspectus, false);
    TriggerEnable(gt_WCallForFireTargetPlayer, true);
    Wait(5.0, c_timeGame);
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(8, 0);
    Wait(10.0, c_timeGame);
    gf_SpawnPMCBoss(1, "Aspectus");
    lv_aspectus = UnitLastCreated();
    UnitAbilityEnable(lv_aspectus, "CallForFireAspectus", false);
    while (!((UnitIsAlive(lv_aspectus) == false) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(gt_WCallForFireTargetPlayer, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_MissionText(StringExternal("Param/Value/D9187860"));
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    Wait(2.0, c_timeGame);
    gf_SucceedMission(45, StringExternal("Param/Value/787A8C5A"), 0, false);
    gf_UpdateMissionCompletionTracker(true);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    gf_StopSpawnLoop(2, gv_loopType);
    gf_StopSpawnLoop(3, gv_loopType);
    Wait(30.0, c_timeGame);
    TriggerSendEvent("Anti Air");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PAspectus_Init () {
    gt_PAspectus = TriggerCreate("gt_PAspectus_Func");
    TriggerAddEventGeneric(gt_PAspectus, "Aspectus");
}

//--------------------------------------------------------------------------------------------------
// Trigger: W Call For Fire (Target Player)
//--------------------------------------------------------------------------------------------------
bool gt_WCallForFireTargetPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_shells;
    fixed lv_radius;
    actor lv_warning;
    fixed lv_distribution;
    fixed lv_interval;
    int lv_int;
    int lv_bombPing;
    unit lv_target;

    // Automatic Variable Declarations
    int auto028492CA_ae;
    const int auto028492CA_ai = 1;
    int autoE5A3740B_n;
    int autoE5A3740B_i;

    // Variable Initialization
    lv_shells = RandomInt(5, 12);
    lv_radius = RandomFixed(6.0, 25.0);
    lv_distribution = -1.0;
    lv_interval = RandomFixed(0.1, 0.75);
    lv_bombPing = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_target = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
    libNtve_gf_CreateActorAtPoint("CallForFireWarning", UnitGetPosition(lv_target));
    lv_warning = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(lv_target), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_bombPing = PingLastCreated();
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/58B1ADA1"));
    if ((RandomInt(0, 1) == 1)) {
        lv_distribution = libNtve_gf_RandomAngle();
        lv_radius = RandomFixed(5.0, 10.0);
    }
    else {
        lv_shells = RandomInt(6, 10);
    }
    Wait(RandomFixed(1.5, 2.65), c_timeGame);
    SoundPlayAtPoint(SoundLink("IDFIncoming", -1), PlayerGroupAll(), UnitGetPosition(lv_target), 0.0, 100.0, 0.0);
    Wait(1.0, c_timeGame);
    ActorSend(lv_warning, "Destroy");
    if ((lv_distribution == -1.0)) {
        autoE5A3740B_n = lv_shells;
        for (autoE5A3740B_i = 1; autoE5A3740B_i <= autoE5A3740B_n; autoE5A3740B_i += 1) {
            Wait(lv_interval, c_timeGame);
            gf_DropShellatTargetPMC(PointWithOffsetPolar(PingGetPosition(lv_bombPing), RandomFixed(0.0, lv_radius), libNtve_gf_RandomAngle()), "CallForFirePLLaunch", 15);
        }
    }
    else {
        auto028492CA_ae = lv_shells;
        lv_int = 1;
        for ( ; ( (auto028492CA_ai >= 0 && lv_int <= auto028492CA_ae) || (auto028492CA_ai < 0 && lv_int >= auto028492CA_ae) ) ; lv_int += auto028492CA_ai ) {
            Wait(lv_interval, c_timeGame);
            gf_DropShellatTargetPMC(PointWithOffsetPolar(PingGetPosition(lv_bombPing), ((lv_int - 1) * lv_radius), lv_distribution), "CallForFirePLLaunch", 15);
        }
    }
    PingDestroy(lv_bombPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WCallForFireTargetPlayer_Init () {
    gt_WCallForFireTargetPlayer = TriggerCreate("gt_WCallForFireTargetPlayer_Func");
    TriggerEnable(gt_WCallForFireTargetPlayer, false);
    TriggerAddEventTimeElapsed(gt_WCallForFireTargetPlayer, 8.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_WCallForFireTargetPlayer, RandomFixed(25.0, 40.0), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Anti Air
//--------------------------------------------------------------------------------------------------
bool gt_PAntiAir_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region[12] lv_guardpositions;

    // Automatic Variable Declarations
    const int autoDC648D8B_n = 15;
    int autoDC648D8B_i;
    const int autoF84FDF85_n = 2;
    int autoF84FDF85_i;
    const int auto535C4FA5_n = 16;
    int auto535C4FA5_i;
    const int autoC442D6BF_n = 2;
    int autoC442D6BF_i;
    const int auto2BED3276_n = 15;
    int auto2BED3276_i;
    const int auto481DC95F_n = 2;
    int auto481DC95F_i;
    unitgroup autoC982E1BE_g;
    int autoC982E1BE_u;
    unit autoC982E1BE_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_guardpositions[1] = RegionFromId(163);
    lv_guardpositions[2] = RegionFromId(25);
    lv_guardpositions[3] = RegionFromId(137);
    lv_guardpositions[4] = RegionFromId(138);
    lv_guardpositions[5] = RegionFromId(12);
    lv_guardpositions[6] = RegionFromId(135);
    lv_guardpositions[7] = RegionFromId(136);
    lv_guardpositions[8] = RegionFromId(133);
    lv_guardpositions[9] = RegionFromId(15);
    lv_guardpositions[10] = RegionFromId(148);
    lv_guardpositions[11] = RegionFromId(26);
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/9123FDD7"));
    Wait(9.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(43)), ColorWithAlpha(50.20, 50.20, 100.00, 0.00), 0.0, 270.0);
    gv_missionping = PingLastCreated();
    TriggerEnable(gt_SamSitePing, true);
    TriggerEnable(gt_UseSamSiteItem, true);
    gf_SpawnItemLoc("SAMSitePacked", 1, RegionGetCenter(RegionFromId(43)));
    Wait(2.0, c_timeGame);
    gf_MissionItemPingAddItem(UnitLastCreated());
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/B465497E"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/96D05E90"));
    Wait(60.0, c_timeGame);
    gf_SpawnPMCSquad(7, 0);
    gf_SpawnPMCSquad(11, 0);
    gf_SpawnPMCSquad(19, 0);
    Wait(60.0, c_timeGame);
    gf_SpawnPMCSquad(7, 0);
    gf_SpawnPMCSquad(7, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    Wait(60.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/8A1E360A"));
    for (autoDC648D8B_i = 1; autoDC648D8B_i <= autoDC648D8B_n; autoDC648D8B_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_randomminitype(), 0, 13, RegionGetCenter(RegionFromId(4)));
        gf_MoveToGuardPos(UnitLastCreated(), RegionCircle(RegionRandomPoint(lv_guardpositions[RandomInt(1, 2)]), 3.0));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById DecalUSFlag2");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById VikingWoodland");
    }
    for (autoF84FDF85_i = 1; autoF84FDF85_i <= autoF84FDF85_n; autoF84FDF85_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "M2BradleyIFV", 0, 13, RegionGetCenter(RegionFromId(4)));
        gf_MoveToGuardPos(UnitLastCreated(), RegionCircle(RegionRandomPoint(lv_guardpositions[RandomInt(1, 2)]), 3.0));
    }
    for (auto535C4FA5_i = 1; auto535C4FA5_i <= auto535C4FA5_n; auto535C4FA5_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_randomminitype(), 0, 13, RegionGetCenter(RegionFromId(139)));
        gf_MoveToGuardPos(UnitLastCreated(), RegionCircle(RegionRandomPoint(lv_guardpositions[RandomInt(3, 8)]), 3.0));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById DecalUSFlag2");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById VikingWoodland");
    }
    for (autoC442D6BF_i = 1; autoC442D6BF_i <= autoC442D6BF_n; autoC442D6BF_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "M1A3Abrams", 0, 13, RegionGetCenter(RegionFromId(139)));
        gf_MoveToGuardPos(UnitLastCreated(), RegionCircle(RegionRandomPoint(lv_guardpositions[RandomInt(3, 8)]), 3.0));
    }
    for (auto2BED3276_i = 1; auto2BED3276_i <= auto2BED3276_n; auto2BED3276_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_randomminitype(), 0, 13, RegionGetCenter(RegionFromId(79)));
        gf_MoveToGuardPos(UnitLastCreated(), RegionCircle(RegionRandomPoint(lv_guardpositions[RandomInt(9, 11)]), 3.0));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById DecalUSFlag2");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById VikingWoodland");
    }
    for (auto481DC95F_i = 1; auto481DC95F_i <= auto481DC95F_n; auto481DC95F_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CombatWalker", 0, 13, RegionGetCenter(RegionFromId(79)));
        gf_MoveToGuardPos(UnitLastCreated(), RegionCircle(RegionRandomPoint(lv_guardpositions[RandomInt(9, 11)]), 3.0));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById DecalUSFlag2");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById VikingWoodland");
    }
    autoC982E1BE_g = UnitGroup(null, 13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC982E1BE_u = UnitGroupCount(autoC982E1BE_g, c_unitCountAll);
    for (;; autoC982E1BE_u -= 1) {
        autoC982E1BE_var = UnitGroupUnitFromEnd(autoC982E1BE_g, autoC982E1BE_u);
        if (autoC982E1BE_var == null) { break; }
        UnitGroupAdd(gv_undeadTargetGroup, autoC982E1BE_var);
    }
    Wait(40.0, c_timeGame);
    gf_SpawnPMCSquad(7, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(20, 0);
    gf_SpawnPMCSquad(22, 0);
    gf_SpawnPMCSquad(11, 0);
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(3, 0);
    while (!((libNtve_gf_UnitGroupIsDead(UnitGroup("AH25Hunter", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true))) {
        Wait(1.0, c_timeGame);
    }
    gf_SucceedMission(75, StringExternal("Param/Value/FF922DF7"), 0, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_UpdateMissionCompletionTracker(true);
    gv_pMissionCount += 1;
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    Wait(10.0, c_timeGame);
    gf_PMCCampaignSupplyCaches(4);
    Wait(20.0, c_timeGame);
    TriggerSendEvent("P Time Stops");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PAntiAir_Init () {
    gt_PAntiAir = TriggerCreate("gt_PAntiAir_Func");
    TriggerAddEventGeneric(gt_PAntiAir, "Anti Air");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Sam Site
//--------------------------------------------------------------------------------------------------
bool gt_CreateSamSite_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitSetOwner(EventUnitCreatedUnit(), 13, true);
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "TextureSelectById DecalUSFlag2");
    gf_MissionText(StringExternal("Param/Value/91697DD4"));
    Wait(2.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8DEBC941"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateSamSite_Init () {
    gt_CreateSamSite = TriggerCreate("gt_CreateSamSite_Func");
    TriggerAddEventUnitCreated(gt_CreateSamSite, null, "SAMSite", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Sam Site Item
//--------------------------------------------------------------------------------------------------
bool gt_UseSamSiteItem_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "SAMSitePacked"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UseSamSiteItem_Init () {
    gt_UseSamSiteItem = TriggerCreate("gt_UseSamSiteItem_Func");
    TriggerEnable(gt_UseSamSiteItem, false);
    TriggerAddEventUnitInventoryChange(gt_UseSamSiteItem, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sam Site Ping
//--------------------------------------------------------------------------------------------------
bool gt_SamSitePing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_missionping);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SamSitePing_Init () {
    gt_SamSitePing = TriggerCreate("gt_SamSitePing_Func");
    TriggerEnable(gt_SamSitePing, false);
    TriggerAddEventUnitRegion(gt_SamSitePing, null, RegionFromId(43), true);
    TriggerAddEventUnitRegion(gt_SamSitePing, null, RegionFromId(43), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Time Stops
//--------------------------------------------------------------------------------------------------
bool gt_PTimeStops_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lz;
    unitgroup lv_satchel;

    // Automatic Variable Declarations
    playergroup auto4AEB5DF3_g;
    int auto4AEB5DF3_var;
    unitgroup autoAAA75336_g;
    int autoAAA75336_u;
    unit autoAAA75336_var;

    // Variable Initialization
    lv_lz = RandomInt(1, 5);
    lv_satchel = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/476E3B51"));
    Wait(11.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/CA6226C5"));
    Wait(12.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/AD3AB911"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/B2244729"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/1B6F316D"));
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(22, 0);
    Wait(9.0, c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(24, 0);
    gf_SpawnPMCSquad(23, 0);
    Wait(30.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SatchelCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_lZs[lv_lz]));
    UnitGroupAdd(lv_satchel, UnitLastCreated());
    gf_MissionItemPingAddItem(UnitLastCreated());
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_lZs[lv_lz]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_supplyPing = PingLastCreated();
    TriggerEnable(gt_PTSPlaceSatchel, true);
    auto4AEB5DF3_g = PlayerGroupAll();
    auto4AEB5DF3_var = -1;
    while (true) {
        auto4AEB5DF3_var = PlayerGroupNextPlayer(auto4AEB5DF3_g, auto4AEB5DF3_var);
        if (auto4AEB5DF3_var < 0) { break; }
        UIAlertPoint("Trigger", auto4AEB5DF3_var, StringExternal("Param/Value/C6540767"), "Assets\\Textures\\btn-command-terran-buildstructure.dds", RegionGetCenter(gv_lZs[lv_lz]));
    }
    TriggerEnable(gt_PSatchelPing, true);
    TimerStart(gv_missiontimer, 240.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    Wait(120.0, c_timeGame);
    gf_SpawnPMCSquad(8, 0);
    gf_SpawnPMCSquad(10, 0);
    Wait(30.0, c_timeGame);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(13, 0);
    Wait(60.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(5, 0);
    Wait(30.0, c_timeGame);
    if ((TriggerIsEnabled(gt_PTSPlaceSatchel) == true)) {
        TriggerEnable(gt_PTSPlaceSatchel, false);
        PingDestroy(gv_missionping);
        gv_generatorMissionFailed = true;
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        gf_FailMission(5, StringExternal("Param/Value/268E15CD"), 0);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_UpdateMissionCompletionTracker(false);
        autoAAA75336_g = lv_satchel;
        autoAAA75336_u = UnitGroupCount(autoAAA75336_g, c_unitCountAll);
        for (;; autoAAA75336_u -= 1) {
            autoAAA75336_var = UnitGroupUnitFromEnd(autoAAA75336_g, autoAAA75336_u);
            if (autoAAA75336_var == null) { break; }
            gf_MissionItemPingRemoveItem(autoAAA75336_var);
            UnitRemove(autoAAA75336_var);
            UnitGroupRemove(lv_satchel, autoAAA75336_var);
        }
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        TriggerSendEvent("TS Time Stops");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTimeStops_Init () {
    gt_PTimeStops = TriggerCreate("gt_PTimeStops_Func");
    TriggerAddEventGeneric(gt_PTimeStops, "P Time Stops");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Satchel Ping
//--------------------------------------------------------------------------------------------------
bool gt_PSatchelPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "SatchelCharge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_supplyPing);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(151)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/490236A4"));
    gv_missionping = PingLastCreated();
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", RegionGetCenter(RegionFromId(151)));
    gv_waterSiteActors[1] = libNtve_gf_ActorLastCreated();
    ActorSend(gv_waterSiteActors[1], "SetScale 0.750000 0.000000 s");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PSatchelPing_Init () {
    gt_PSatchelPing = TriggerCreate("gt_PSatchelPing_Func");
    TriggerEnable(gt_PSatchelPing, false);
    TriggerAddEventUnitInventoryChange(gt_PSatchelPing, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P TS Place Satchel
//--------------------------------------------------------------------------------------------------
bool gt_PTSPlaceSatchel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int autoC41D7FAB_ae = 6;
    const int autoC41D7FAB_ai = 1;
    const int auto4EA043A8_ae = 6;
    const int auto4EA043A8_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "SatchelCharge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(UnitInventoryUnit(EventUnitInventoryItem()), RegionFromId(151)) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        PingDestroy(gv_missionping);
        libNtve_gf_KillModel(gv_waterSiteActors[1]);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        gv_silos[1] = RegionFromId(220);
        gv_silos[2] = RegionFromId(221);
        gv_silos[3] = RegionFromId(222);
        gv_silos[4] = RegionFromId(223);
        gv_silos[5] = RegionFromId(99);
        gv_silos[6] = RegionFromId(100);
        gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
        UnitRemove(EventUnitInventoryItem());
        gf_MissionText(StringExternal("Param/Value/1092C424"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(151)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 17.0, 270.0);
        Wait(15.0, c_timeGame);
        gf_SpawnPMCSquad(6, 0);
        gf_SpawnPMCSquad(6, 0);
        gf_SpawnPMCSquad(2, 0);
        gf_SpawnPMCSquad(2, 0);
        gf_SpawnPMCSquad(3, 0);
        gf_SpawnPMCSquad(11, 0);
        gf_SpawnPMCSquad(5, 0);
        PlayerCreateEffectPoint(15, "SatchelExplosionDamage", RegionGetCenter(RegionFromId(151)));
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_UpdateMissionCompletionTracker(true);
        gv_pMissionCount += 1;
        UnitIssueOrder(UnitFromId(1238), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1239), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1240), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1241), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1928584749), Order(AbilityCommand("MetalGateStraightVerticalLFLowered", 0)), c_orderQueueReplace);
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/D49548DC"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/5BC69CFF"));
        TimerStart(gv_missiontimer, 300.0, false, c_timeGame);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
        UnitCreate(1, "MK44SentryGun", 0, 15, PointFromId(2423), libNtve_gf_RandomAngle());
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById DecalRA");
        UnitCreate(1, "MK44SentryGun", 0, 15, PointFromId(2424), libNtve_gf_RandomAngle());
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById DecalRA");
        UnitCreate(1, "MK44SentryGun", 0, 15, PointFromId(2488), libNtve_gf_RandomAngle());
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById DecalRA");
        lv_int = 1;
        for ( ; ( (autoC41D7FAB_ai >= 0 && lv_int <= autoC41D7FAB_ae) || (autoC41D7FAB_ai < 0 && lv_int >= autoC41D7FAB_ae) ) ; lv_int += autoC41D7FAB_ai ) {
            gv_silodisabled[lv_int] = false;
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_silos[lv_int]), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 0.0, 270.0);
            PingSetScale(PingLastCreated(), 0.75);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/F4CDD7E2"));
            gv_highlanderpings[lv_int] = PingLastCreated();
            libNtve_gf_CreateModelAtPoint("BriefingUnitSelectProtoss", RegionGetCenter(gv_silos[lv_int]));
            gv_waterSiteActors[lv_int] = libNtve_gf_ActorLastCreated();
            ActorSend(gv_waterSiteActors[lv_int], "SetScale 0.750000 0.000000 s");
        }
        TriggerEnable(gt_PTSAbortCodes, true);
        Wait(300.0, c_timeGame);
        if ((TriggerIsEnabled(gt_PTSAbortCodes) == true)) {
            TriggerEnable(gt_PTSAbortCodes, false);
            gv_generatorMissionFailed = true;
            TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
            gf_UpdateMissionCompletionTracker(false);
            gf_FailMission(10, StringExternal("Param/Value/234B1474"), 0);
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
            lv_int = 1;
            for ( ; ( (auto4EA043A8_ai >= 0 && lv_int <= auto4EA043A8_ae) || (auto4EA043A8_ai < 0 && lv_int >= auto4EA043A8_ae) ) ; lv_int += auto4EA043A8_ai ) {
                if ((gv_silodisabled[lv_int] == false)) {
                    PingDestroy(gv_highlanderpings[lv_int]);
                    libNtve_gf_KillModel(gv_waterSiteActors[lv_int]);
                }
            }
            Wait(5.0, c_timeGame);
            ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
            TriggerSendEvent("TS Time Stops");
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaError, StringExternal("Param/Value/FE4CA299"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(151)), ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 5.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0262F19D"));
        SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTSPlaceSatchel_Init () {
    gt_PTSPlaceSatchel = TriggerCreate("gt_PTSPlaceSatchel_Func");
    TriggerEnable(gt_PTSPlaceSatchel, false);
    TriggerAddEventUnitInventoryChange(gt_PTSPlaceSatchel, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P TS Abort Codes
//--------------------------------------------------------------------------------------------------
bool gt_PTSAbortCodes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    int lv_silo;
    bool lv_leftregion;

    // Automatic Variable Declarations
    const int autoE7F99850_ae = 6;
    const int autoE7F99850_ai = 1;
    const int auto1A84BF15_ae = 10;
    const int auto1A84BF15_ai = 1;
    int auto881C7EBB_val;
    const int auto7B72CDD6_ae = 6;
    const int auto7B72CDD6_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (autoE7F99850_ai >= 0 && lv_loopint <= autoE7F99850_ae) || (autoE7F99850_ai < 0 && lv_loopint >= autoE7F99850_ae) ) ; lv_loopint += autoE7F99850_ai ) {
        if ((EventUnitRegion() == gv_silos[lv_loopint])) {
            lv_silo = lv_loopint;
        }
    }
    if ((gv_silodisabled[lv_silo] == false)) {
    }
    else {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/D52BE6A4"));
    lv_loopint = 1;
    for ( ; ( (auto1A84BF15_ai >= 0 && lv_loopint <= auto1A84BF15_ae) || (auto1A84BF15_ai < 0 && lv_loopint >= auto1A84BF15_ae) ) ; lv_loopint += auto1A84BF15_ai ) {
        auto881C7EBB_val = lv_loopint;
        if (auto881C7EBB_val == 2) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/5319D4C0"));
        }
        else if (auto881C7EBB_val == 5) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/F91B8A0A"));
        }
        else if (auto881C7EBB_val == 6) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/33B82A02"));
            SoundPlayOnUnit(SoundLink("WidowMine_ArmedBeep", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
        }
        else if (auto881C7EBB_val == 7) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/017A8760"));
            SoundPlayOnUnit(SoundLink("WidowMine_ArmedBeep", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
        }
        else if (auto881C7EBB_val == 8) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/9B1DA215"));
            SoundPlayOnUnit(SoundLink("WidowMine_ArmedBeep", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
        }
        else if (auto881C7EBB_val == 9) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/13DCC478"));
            SoundPlayOnUnit(SoundLink("WidowMine_ArmedBeep", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
        }
        else if (auto881C7EBB_val == 10) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/CC48CFFA"));
        }
        else {
        }
        if ((libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true) && (UnitIsAlive(EventUnit()) == true) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        }
        else {
            SoundPlayOnUnit(SoundLink("TUIWarning", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/9FA4EFD4"));
            lv_leftregion = true;
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((lv_leftregion == false)) {
        gv_silodisabled[lv_silo] = true;
        SoundPlayOnUnit(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
        gf_MissionText(StringExternal("Param/Value/519D8784"));
        libNtve_gf_KillModel(gv_waterSiteActors[lv_silo]);
        PingDestroy(gv_highlanderpings[lv_silo]);
        lv_loopint = 1;
        for ( ; ( (auto7B72CDD6_ai >= 0 && lv_loopint <= auto7B72CDD6_ae) || (auto7B72CDD6_ai < 0 && lv_loopint >= auto7B72CDD6_ae) ) ; lv_loopint += auto7B72CDD6_ai ) {
            if ((gv_silodisabled[lv_loopint] == false)) {
                lv_leftregion = true;
            }
        }
        if ((lv_leftregion == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            gf_SucceedMission(80, StringExternal("Param/Value/CA719895"), 0, false);
            gf_UpdateMissionCompletionTracker(true);
            gv_pMissionCount += 1;
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
            Wait(5.0, c_timeGame);
            ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
            TriggerSendEvent("TS Time Stops");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTSAbortCodes_Init () {
    gt_PTSAbortCodes = TriggerCreate("gt_PTSAbortCodes_Func");
    TriggerEnable(gt_PTSAbortCodes, false);
    TriggerAddEventUnitRegion(gt_PTSAbortCodes, null, RegionFromId(220), true);
    TriggerAddEventUnitRegion(gt_PTSAbortCodes, null, RegionFromId(221), true);
    TriggerAddEventUnitRegion(gt_PTSAbortCodes, null, RegionFromId(222), true);
    TriggerAddEventUnitRegion(gt_PTSAbortCodes, null, RegionFromId(223), true);
    TriggerAddEventUnitRegion(gt_PTSAbortCodes, null, RegionFromId(99), true);
    TriggerAddEventUnitRegion(gt_PTSAbortCodes, null, RegionFromId(100), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P TS Time Stops
//--------------------------------------------------------------------------------------------------
bool gt_PTSTimeStops_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    point lv_point;
    bool lv_abortcodes;

    // Automatic Variable Declarations
    const int auto23335EE3_ae = 5;
    const int auto23335EE3_ai = 1;
    const int autoEC2C266B_ae = 3;
    const int autoEC2C266B_ai = 1;
    int auto0636A08B_val;
    const int auto6A5FD346_ae = 3;
    const int auto6A5FD346_ai = 1;
    playergroup autoEA9D52FC_g;
    int autoEA9D52FC_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    RegionAddRegion(RegionFromId(62), RegionFromId(63));
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(6)), 20.0);
    gv_weaponcacheregion[1] = RegionFromId(57);
    gv_weaponcacheregion[2] = RegionFromId(58);
    gv_weaponcacheregion[3] = RegionFromId(59);
    gv_weaponcacheregion[4] = RegionFromId(60);
    gv_weaponcacheregion[5] = RegionFromId(61);
    lv_int = 1;
    for ( ; ( (auto23335EE3_ai >= 0 && lv_int <= auto23335EE3_ae) || (auto23335EE3_ai < 0 && lv_int >= auto23335EE3_ae) ) ; lv_int += auto23335EE3_ai ) {
        while (true) {
            lv_point = RegionRandomPoint(RegionFromId(62));
            if ((PointPathingPassable(lv_point) == true) && (PointPathingIsConnected(lv_point, PointFromId(1840075581)) == true)) {
                break;
            }
            Wait(0.0625, c_timeGame);
        }
        RegionSetCenter(gv_weaponcacheregion[lv_int], lv_point);
    }
    lv_int = 1;
    for ( ; ( (autoEC2C266B_ai >= 0 && lv_int <= autoEC2C266B_ae) || (autoEC2C266B_ai < 0 && lv_int >= autoEC2C266B_ae) ) ; lv_int += autoEC2C266B_ai ) {
        while (true) {
            if ((lv_int == 2)) {
                lv_point = RegionRandomPoint(RegionFromId(63));
            }
            else {
                lv_point = RegionRandomPoint(RegionFromId(62));
            }
            if ((PointPathingPassable(lv_point) == true) && (PointPathingIsConnected(lv_point, PointFromId(1840075581)) == true)) {
                break;
            }
            Wait(0.0625, c_timeGame);
        }
        auto0636A08B_val = lv_int;
        if (auto0636A08B_val == 1) {
            RegionSetCenter(RegionFromId(234), lv_point);
        }
        else if (auto0636A08B_val == 2) {
            RegionSetCenter(RegionFromId(53), lv_point);
        }
        else if (auto0636A08B_val == 3) {
            RegionSetCenter(RegionFromId(54), lv_point);
        }
        else {
        }
    }
    gv_silos[1] = RegionFromId(234);
    gv_silos[2] = RegionFromId(53);
    gv_silos[3] = RegionFromId(54);
    lv_int = 1;
    for ( ; ( (auto6A5FD346_ai >= 0 && lv_int <= auto6A5FD346_ae) || (auto6A5FD346_ai < 0 && lv_int >= auto6A5FD346_ae) ) ; lv_int += auto6A5FD346_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TimeStop", c_unitCreateIgnorePlacement, 15, RegionGetCenter(gv_silos[lv_int]));
        autoEA9D52FC_g = PlayerGroupAll();
        autoEA9D52FC_var = -1;
        while (true) {
            autoEA9D52FC_var = PlayerGroupNextPlayer(autoEA9D52FC_g, autoEA9D52FC_var);
            if (autoEA9D52FC_var < 0) { break; }
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, autoEA9D52FC_var);
        }
        gv_missionUnit[lv_int] = UnitLastCreated();
        gv_silodisabled[lv_int] = false;
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_silos[lv_int]), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/47679ACD"));
        gv_highlanderpings[lv_int] = PingLastCreated();
    }
    if ((gv_generatorMissionFailed == true)) {
        gf_MissionText(StringExternal("Param/Value/8D20167F"));
        Wait(20.0, c_timeGame);
        TriggerExecute(gt_PTSTimeStopEnd, true, false);
    }
    else {
        lv_abortcodes = true;
        gf_MissionText(StringExternal("Param/Value/36774CA6"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/CF497295"));
        Wait(7.0, c_timeGame);
        TriggerEnable(gt_PTSTimeStopRevert, true);
        TriggerEnable(gt_PTSTimeStopEnd, true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/A5862E0A"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/E19AA056"));
        TimerStart(gv_missiontimer, 280.0, false, c_timeGame);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    }
    gf_SpawnPMCSquad(8, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(5, 0);
    Wait(20.0, c_timeGame);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(11, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(1, 0);
    Wait(20.0, c_timeGame);
    gf_SpawnPMCSquad(7, 0);
    gf_SpawnPMCSquad(13, 0);
    gf_SpawnPMCSquad(21, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTSTimeStops_Init () {
    gt_PTSTimeStops = TriggerCreate("gt_PTSTimeStops_Func");
    TriggerAddEventGeneric(gt_PTSTimeStops, "TS Time Stops");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P TS Time Stop Revert
//--------------------------------------------------------------------------------------------------
bool gt_PTSTimeStopRevert_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    int lv_silo;
    bool lv_leftregion;

    // Automatic Variable Declarations
    const int autoE988C7E0_ae = 3;
    const int autoE988C7E0_ai = 1;
    const int auto6B232576_ae = 10;
    const int auto6B232576_ai = 1;
    const int auto077D2E33_ae = 3;
    const int auto077D2E33_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (autoE988C7E0_ai >= 0 && lv_loopint <= autoE988C7E0_ae) || (autoE988C7E0_ai < 0 && lv_loopint >= autoE988C7E0_ae) ) ; lv_loopint += autoE988C7E0_ai ) {
        if ((EventUnitRegion() == gv_silos[lv_loopint])) {
            lv_silo = lv_loopint;
        }
    }
    if ((gv_silodisabled[lv_silo] == false)) {
    }
    else {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/12035E3F"));
    lv_loopint = 1;
    for ( ; ( (auto6B232576_ai >= 0 && lv_loopint <= auto6B232576_ae) || (auto6B232576_ai < 0 && lv_loopint >= auto6B232576_ae) ) ; lv_loopint += auto6B232576_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true) && (UnitIsAlive(EventUnit()) == true)) {
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/C2A789E6"));
            lv_leftregion = true;
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((lv_leftregion == false)) {
        gv_silodisabled[lv_silo] = true;
        SoundPlayOnUnit(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
        gf_MissionText(StringExternal("Param/Value/4C160A11"));
        ActorSend(libNtve_gf_MainActorofUnit(gv_missionUnit[lv_silo]), "SetTintColor 255,128,0 2.000000 OneShot t");
        PingDestroy(gv_highlanderpings[lv_silo]);
        lv_loopint = 1;
        for ( ; ( (auto077D2E33_ai >= 0 && lv_loopint <= auto077D2E33_ae) || (auto077D2E33_ai < 0 && lv_loopint >= auto077D2E33_ae) ) ; lv_loopint += auto077D2E33_ai ) {
            if ((gv_silodisabled[lv_loopint] == false)) {
                lv_leftregion = true;
            }
        }
        if ((lv_leftregion == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            gv_tSMissionFailed = false;
            TimerPause(gv_missiontimer, true);
            TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
            gf_SucceedMission(120, StringExternal("Param/Value/43903A05"), 0, false);
            gf_UpdateMissionCompletionTracker(true);
            gv_pMissionCount += 1;
            Wait(5.0, c_timeGame);
            ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
            TriggerExecute(gt_PTSTimeStopEnd, true, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTSTimeStopRevert_Init () {
    gt_PTSTimeStopRevert = TriggerCreate("gt_PTSTimeStopRevert_Func");
    TriggerEnable(gt_PTSTimeStopRevert, false);
    TriggerAddEventUnitRegion(gt_PTSTimeStopRevert, null, RegionFromId(234), true);
    TriggerAddEventUnitRegion(gt_PTSTimeStopRevert, null, RegionFromId(53), true);
    TriggerAddEventUnitRegion(gt_PTSTimeStopRevert, null, RegionFromId(54), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P TS Time Stop End
//--------------------------------------------------------------------------------------------------
bool gt_PTSTimeStopEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_count;

    // Automatic Variable Declarations
    const int auto6BD58249_ae = 3;
    const int auto6BD58249_ai = 1;
    const int autoB791F074_ae = 3;
    const int autoB791F074_ai = 1;
    unitgroup auto0CCC52B8_g;
    int auto0CCC52B8_u;
    unit auto0CCC52B8_var;
    unitgroup auto747BCA8D_g;
    int auto747BCA8D_u;
    unit auto747BCA8D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    TriggerEnable(gt_PTSAbortCodes, false);
    TriggerEnable(gt_PTSTimeStopRevert, false);
    if ((gv_generatorMissionFailed == true)) {
        gf_MissionText(StringExternal("Param/Value/B8A9B6A4"));
    }
    else if ((gv_generatorMissionFailed == false) && (gv_tSMissionFailed == true)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_UpdateMissionCompletionTracker(false);
        Wait(5.0, c_timeGame);
        lv_int = 1;
        for ( ; ( (auto6BD58249_ai >= 0 && lv_int <= auto6BD58249_ae) || (auto6BD58249_ai < 0 && lv_int >= auto6BD58249_ae) ) ; lv_int += auto6BD58249_ai ) {
            if ((gv_silodisabled[lv_int] == true)) {
                lv_count += 1;
            }
        }
        ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        if ((lv_count == 3)) {
            gf_MissionText(StringExternal("Param/Value/1BE83C87"));
        }
        else if ((lv_count <= 2) && (lv_count >= 1)) {
            gf_MissionText(StringExternal("Param/Value/87FECD08"));
        }
        else if ((lv_count == 0)) {
            gf_MissionText(StringExternal("Param/Value/3E8195AA"));
        }
    }
    GameSetLighting("TimeStop", 3.0);
    SoundPlay(SoundLink("TValerian02BMusicEventBB", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("UI_ScoreScreenMissionTime", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_int = 1;
    for ( ; ( (autoB791F074_ai >= 0 && lv_int <= autoB791F074_ae) || (autoB791F074_ai < 0 && lv_int >= autoB791F074_ae) ) ; lv_int += autoB791F074_ai ) {
        if ((gv_silodisabled[lv_int] == false)) {
            auto747BCA8D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic), (1 << (c_targetFilterHidden - 32))), 0);
            auto747BCA8D_u = UnitGroupCount(auto747BCA8D_g, c_unitCountAll);
            for (;; auto747BCA8D_u -= 1) {
                auto747BCA8D_var = UnitGroupUnitFromEnd(auto747BCA8D_g, auto747BCA8D_u);
                if (auto747BCA8D_var == null) { break; }
                if ((UnitGetOwner(auto747BCA8D_var) != 15) && (UnitGetOwner(auto747BCA8D_var) != 14) && (UnitGetOwner(auto747BCA8D_var) != 0)) {
                    UnitBehaviorAdd(auto747BCA8D_var, "TimeStopped", auto747BCA8D_var, 1);
                }
            }
        }
        else {
            auto0CCC52B8_g = UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto0CCC52B8_u = UnitGroupCount(auto0CCC52B8_g, c_unitCountAll);
            for (;; auto0CCC52B8_u -= 1) {
                auto0CCC52B8_var = UnitGroupUnitFromEnd(auto0CCC52B8_g, auto0CCC52B8_u);
                if (auto0CCC52B8_var == null) { break; }
                UnitBehaviorAdd(auto0CCC52B8_var, "TimeStopped", auto0CCC52B8_var, 1);
            }
        }
    }
    TriggerSendEvent("P Destroy RA");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTSTimeStopEnd_Init () {
    gt_PTSTimeStopEnd = TriggerCreate("gt_PTSTimeStopEnd_Func");
    TriggerEnable(gt_PTSTimeStopEnd, false);
    TriggerAddEventTimer(gt_PTSTimeStopEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Destroy the RA
//--------------------------------------------------------------------------------------------------
bool gt_PDestroytheRA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int auto678AEB67_ae = 3;
    const int auto678AEB67_ai = 1;
    unitgroup autoA9A600F6_g;
    int autoA9A600F6_u;
    unit autoA9A600F6_var;
    unitgroup autoFF4E4D38_g;
    int autoFF4E4D38_u;
    unit autoFF4E4D38_var;
    unitgroup auto57610B32_g;
    int auto57610B32_u;
    unit auto57610B32_var;
    playergroup auto6D056D1F_g;
    int auto6D056D1F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PMCPeriodicSpawn, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/B334A2D1"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/35B04030"));
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(15, 0);
    gf_SpawnPMCSquad(10, 0);
    lv_int = 1;
    for ( ; ( (auto678AEB67_ai >= 0 && lv_int <= auto678AEB67_ae) || (auto678AEB67_ai < 0 && lv_int >= auto678AEB67_ae) ) ; lv_int += auto678AEB67_ai ) {
        if ((gv_silodisabled[lv_int] == false)) {
            autoFF4E4D38_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic), (1 << (c_targetFilterHidden - 32))), 0);
            autoFF4E4D38_u = UnitGroupCount(autoFF4E4D38_g, c_unitCountAll);
            for (;; autoFF4E4D38_u -= 1) {
                autoFF4E4D38_var = UnitGroupUnitFromEnd(autoFF4E4D38_g, autoFF4E4D38_u);
                if (autoFF4E4D38_var == null) { break; }
                if ((UnitGetOwner(autoFF4E4D38_var) != 15) && (UnitGetOwner(autoFF4E4D38_var) != 14) && (UnitGetOwner(autoFF4E4D38_var) != 0)) {
                    UnitBehaviorAdd(autoFF4E4D38_var, "TimeStopped", autoFF4E4D38_var, 1);
                }
            }
        }
        else {
            autoA9A600F6_g = UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoA9A600F6_u = UnitGroupCount(autoA9A600F6_g, c_unitCountAll);
            for (;; autoA9A600F6_u -= 1) {
                autoA9A600F6_var = UnitGroupUnitFromEnd(autoA9A600F6_g, autoA9A600F6_u);
                if (autoA9A600F6_var == null) { break; }
                UnitBehaviorAdd(autoA9A600F6_var, "TimeStopped", autoA9A600F6_var, 1);
            }
        }
    }
    while (!((UnitGroupCount(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gf_SucceedMission(600, StringExternal("Param/Value/4CF072AC"), 0, false);
    Wait(2.0, c_timeGame);
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/315A1827"), 0, true);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_UpdateMissionCompletionTracker(true);
    auto57610B32_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0);
    auto57610B32_u = UnitGroupCount(auto57610B32_g, c_unitCountAll);
    for (;; auto57610B32_u -= 1) {
        auto57610B32_var = UnitGroupUnitFromEnd(auto57610B32_g, auto57610B32_u);
        if (auto57610B32_var == null) { break; }
        if ((UnitGetOwner(auto57610B32_var) != 15) && (UnitGetOwner(auto57610B32_var) != 14) && (UnitGetOwner(auto57610B32_var) != 0)) {
            UnitBehaviorRemove(auto57610B32_var, "TimeStopped", 1);
        }
    }
    if ((gv_pMissionCount == 5)) {
        gv_pMCCh3Completed = true;
    }
    if ((gv_pMCCh3Completed == true)) {
        auto6D056D1F_g = gv_players;
        auto6D056D1F_var = -1;
        while (true) {
            auto6D056D1F_var = PlayerGroupNextPlayer(auto6D056D1F_g, auto6D056D1F_var);
            if (auto6D056D1F_var < 0) { break; }
            gf_UnlockAchievement(auto6D056D1F_var);
        }
    }
    if ((gv_missionCompleted == gv_totalMissions)) {
        gf_DisplayObjectiveMissionCounter(ge_ObjectiveMissionType_Completed);
    }
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_UACGameEnd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PDestroytheRA_Init () {
    gt_PDestroytheRA = TriggerCreate("gt_PDestroytheRA_Func");
    TriggerAddEventGeneric(gt_PDestroytheRA, "P Destroy RA");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sand Box Vote
//--------------------------------------------------------------------------------------------------
bool gt_SandBoxVote_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[13] lv_rankplayerselected;
    int lv_loopint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_sandBox.lv_sandBoxVoteDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_sandBox.lv_sandBoxButton[1] == EventDialogControl())) {
        gv_sandBox.lv_voteCount[1] += 1;
        DialogSetVisible(gv_sandBox.lv_sandBoxVoteDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_sandBox.lv_sandBoxButton[2] == EventDialogControl())) {
        gv_sandBox.lv_voteCount[2] += 1;
        DialogSetVisible(gv_sandBox.lv_sandBoxVoteDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    if (((gv_sandBox.lv_voteCount[1] + gv_sandBox.lv_voteCount[2]) == gf_NumberofPlayers())) {
        TriggerEnable(gt_SandBoxVoteTimer, false);
        TimerPause(gv_modetimer, true);
        TimerWindowDestroy(gv_modetimeoutwindow);
        gf_SandBoxInitialize();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandBoxVote_Init () {
    gt_SandBoxVote = TriggerCreate("gt_SandBoxVote_Func");
    TriggerEnable(gt_SandBoxVote, false);
    TriggerAddEventDialogControl(gt_SandBoxVote, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sand Box Vote Timer
//--------------------------------------------------------------------------------------------------
bool gt_SandBoxVoteTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_modetimer, true);
    TimerWindowDestroy(gv_modetimeoutwindow);
    DialogSetVisible(gv_sandBox.lv_sandBoxVoteDialog, PlayerGroupAll(), false);
    TriggerEnable(gt_SandBoxVote, false);
    gf_SandBoxInitialize();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandBoxVoteTimer_Init () {
    gt_SandBoxVoteTimer = TriggerCreate("gt_SandBoxVoteTimer_Func");
    TriggerEnable(gt_SandBoxVoteTimer, false);
    TriggerAddEventTimer(gt_SandBoxVoteTimer, gv_modetimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sand Box Commands
//--------------------------------------------------------------------------------------------------
bool gt_SandBoxCommands_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingplayer;
    string lv_message;
    int lv_player;

    // Automatic Variable Declarations
    string auto8821A5A6_val;
    unitgroup autoA3E0DFD9_g;
    int autoA3E0DFD9_u;
    unit autoA3E0DFD9_var;
    unitgroup auto0498FAEE_g;
    int auto0498FAEE_u;
    unit auto0498FAEE_var;
    playergroup auto8324313E_g;
    int auto8324313E_var;
    unitgroup auto1CA7DB4C_g;
    int auto1CA7DB4C_u;
    unit auto1CA7DB4C_var;
    playergroup auto6F304C96_g;
    int auto6F304C96_var;

    // Variable Initialization
    lv_dyingplayer = EventPlayer();
    lv_message = EventChatMessage(false);
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((StringEqual(StringWord(lv_message, 1), "p", c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8821A5A6_val = StringCase(StringWord(lv_message, 2), true);
    if (auto8821A5A6_val == "LN") {
        gf_SpawnSandboxLN(lv_player, StringToInt(StringWord(EventChatMessage(false), 3)), StringWord(EventChatMessage(false), 4));
    }
    else if (auto8821A5A6_val == "UNBUFF") {
        if (((StringWord(lv_message, 3)) != null)) {
            autoA3E0DFD9_g = UnitGroupSelected(lv_player);
            autoA3E0DFD9_u = UnitGroupCount(autoA3E0DFD9_g, c_unitCountAll);
            for (;; autoA3E0DFD9_u -= 1) {
                autoA3E0DFD9_var = UnitGroupUnitFromEnd(autoA3E0DFD9_g, autoA3E0DFD9_u);
                if (autoA3E0DFD9_var == null) { break; }
                UnitBehaviorRemove(autoA3E0DFD9_var, (StringWord(lv_message, 3)), 1);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/219D0BC8"));
        }
    }
    else if (auto8821A5A6_val == "LEVEL") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) <= 21)) {
            auto0498FAEE_g = UnitGroupSelected(lv_player);
            auto0498FAEE_u = UnitGroupCount(auto0498FAEE_g, c_unitCountAll);
            for (;; auto0498FAEE_u -= 1) {
                auto0498FAEE_var = UnitGroupUnitFromEnd(auto0498FAEE_g, auto0498FAEE_u);
                if (auto0498FAEE_var == null) { break; }
                UnitSetPropertyFixed(auto0498FAEE_var, c_unitPropLevel, StringToFixed(StringWord(lv_message, 3)));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/D31228D5"));
        }
    }
    else if (auto8821A5A6_val == "PMC") {
        if ((gv_pmcset == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B2413071"));
            gv_pmcset = true;
            gv_pmcon = true;
            TriggerEnable(gt_SquadContact, true);
            TriggerEnable(gt_SquadLoop, true);
            TriggerEnable(gt_PMCAlertExpire, true);
            auto8324313E_g = gv_players;
            auto8324313E_var = -1;
            while (true) {
                auto8324313E_var = PlayerGroupNextPlayer(auto8324313E_g, auto8324313E_var);
                if (auto8324313E_var < 0) { break; }
                libNtve_gf_SetAlliance(auto8324313E_var, 15, libNtve_ge_AllianceSetting_Enemy);
            }
            libNtve_gf_SetAlliance(13, 15, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/D3244A86"));
        }
    }
    else if (auto8821A5A6_val == "PMCSQUAD") {
        if ((gv_pmcon == true)) {
            if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) <= 22)) {
                gf_SpawnPMCSquad(StringToInt(StringWord(lv_message, 3)), 0);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/7529524C"));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/46331A78"));
        }
    }
    else if (auto8821A5A6_val == "BUFF") {
        if (((StringWord(lv_message, 3)) != null)) {
            auto1CA7DB4C_g = UnitGroupSelected(lv_player);
            auto1CA7DB4C_u = UnitGroupCount(auto1CA7DB4C_g, c_unitCountAll);
            for (;; auto1CA7DB4C_u -= 1) {
                auto1CA7DB4C_var = UnitGroupUnitFromEnd(auto1CA7DB4C_g, auto1CA7DB4C_u);
                if (auto1CA7DB4C_var == null) { break; }
                UnitBehaviorAdd(auto1CA7DB4C_var, (StringWord(lv_message, 3)), auto1CA7DB4C_var, 1);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/39A39EB8"));
        }
    }
    else if (auto8821A5A6_val == "SMITHY") {
        if ((TriggerIsEnabled(gt_SmithyBarrageAI2) == false)) {
            TriggerEnable(gt_SmithyBarrageAI2, true);
        }
        else {
            TriggerEnable(gt_SmithyBarrageAI2, false);
        }
    }
    else if (auto8821A5A6_val == "REVEAL") {
        auto6F304C96_g = PlayerGroupAll();
        auto6F304C96_var = -1;
        while (true) {
            auto6F304C96_var = PlayerGroupNextPlayer(auto6F304C96_g, auto6F304C96_var);
            if (auto6F304C96_var < 0) { break; }
            VisRevealArea(auto6F304C96_var, RegionEntireMap(), 0.0, false);
        }
    }
    else if (auto8821A5A6_val == "REVIVE") {
        if ((gv_playersHeroisDead[lv_dyingplayer] == true)) {
            UnitCreateEffectUnit(gv_playerHeroes[lv_dyingplayer], "ReviveModifyUnit", gv_playerHeroes[lv_dyingplayer]);
        }

    }
    else if (auto8821A5A6_val == "MOS") {
        if ((gv_allselectors == true)) {
            if ((UnitTypeFromString(StringWord(lv_message, 3)) == "RiflemanOld")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "CombatMedic")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "AutomaticRifleman")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "Flamethrower")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "CavalryScout")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "SquadDesignatedMarksman")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "LaserEnforcer")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "Enforcer")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "PlatoonLeader")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "GhostHero")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "FireSupportSpecialist")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "JavelinGunner")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "Cyborg")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "CombatEngineer")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "Specter")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "CommandoHero")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "OrbitalSupportSpecialist")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
            else if ((UnitTypeFromString(StringWord(lv_message, 3)) == "HeavyGunner")) {
                gf_SpawnPlayerHeroSandBox(CameraGetTarget(lv_player), lv_player, StringWord(lv_message, 3));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/5DD348B3"));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/AAF59EFE"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandBoxCommands_Init () {
    gt_SandBoxCommands = TriggerCreate("gt_SandBoxCommands_Func");
    TriggerEnable(gt_SandBoxCommands, false);
    TriggerAddEventChatMessage(gt_SandBoxCommands, c_playerAny, "p", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive Sand Box Mode
//--------------------------------------------------------------------------------------------------
bool gt_ReviveSandBoxMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    int lv_targetplayer;
    int lv_i;
    fixed lv_charge;

    // Automatic Variable Declarations
    const int auto3537A0B8_ae = 12;
    const int auto3537A0B8_ai = 1;
    int auto8BFDFC18_n;
    int auto8BFDFC18_i;
    int auto9D32F83C_n;
    int auto9D32F83C_i;
    unitgroup auto33DA8C4D_g;
    int auto33DA8C4D_u;
    unit auto33DA8C4D_var;
    playergroup auto0FE91E82_g;
    int auto0FE91E82_var;
    playergroup autoFC00981F_g;
    int autoFC00981F_var;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetplayer = UnitGetOwner(lv_target);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playersHeroisDead[lv_targetplayer] = false;
    UnitRevive(lv_target);
    UnitSetPropertyFixed(lv_target, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lv_target, c_unitPropEnergyPercent, 100.0);
    UnitGroupAdd(gv_undeadTargetGroup, lv_target);
    libNtve_gf_SendActorMessageToUnit(lv_target, gv_rankActorMsg[gv_playerRankSet[lv_targetplayer]][gf_GetPlayerRank(lv_targetplayer)]);
    UnitRemove(gv_deadHeroIndicator[lv_targetplayer]);
    libNtve_gf_ShowHideUnit(lv_target, false);
    Wait(0.625, c_timeGame);
    libNtve_gf_ShowHideUnit(lv_target, true);
    PlayerModifyPropertyInt(lv_targetplayer, c_playerPropCustom, c_playerPropOperSetTo, 99999);
    UnitGroupRemove(gv_jammed, lv_target);
    UnitBehaviorRemove(lv_target, "Jammed", 1);
    UnitGroupRemove(gv_immediateAction, lv_target);
    lv_i = 1;
    for ( ; ( (auto3537A0B8_ai >= 0 && lv_i <= auto3537A0B8_ae) || (auto3537A0B8_ai < 0 && lv_i >= auto3537A0B8_ae) ) ; lv_i += auto3537A0B8_ai ) {
        UnitGroupRemove(gv_heroskilledbyplayer[lv_i], lv_target);
    }
    if ((gv_mod_NoAmmo == false)) {
        auto9D32F83C_n = UnitGroupCount(gv_playerdroppedammo[lv_targetplayer], c_unitCountAlive);
        for (auto9D32F83C_i = 1; auto9D32F83C_i <= auto9D32F83C_n; auto9D32F83C_i += 1) {
            if ((UnitInventoryCount(lv_target, c_unitInventoryCountCarried) == 6)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Magazines", 0, 0, UnitGetPosition(lv_target));
                lv_charge = gf_chargesremaining(UnitLastCreated(), "AmmoCharges", 3.0);
                UnitSetInfoText(UnitLastCreated(), StringToText(""), (StringExternal("Param/Value/40EC7F75") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/5C02CB57") + FixedToText(lv_charge, c_fixedPrecisionAny) + StringExternal("Param/Value/64AFF6DE")), StringToText(""));
            }
            else {
                UnitInventoryCreate(lv_target, "Magazines");
            }
        }
    }
    else {
        auto8BFDFC18_n = UnitGroupCount(gv_playerdroppedammo[lv_targetplayer], c_unitCountAlive);
        for (auto8BFDFC18_i = 1; auto8BFDFC18_i <= auto8BFDFC18_n; auto8BFDFC18_i += 1) {
            if ((UnitInventoryCount(lv_target, c_unitInventoryCountCarried) == 6)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Magazines", 0, 0, UnitGetPosition(lv_target));
                UnitAddChargeUsed(UnitLastCreated(), "AmmoCharges", -2.0);
                lv_charge = gf_chargesremaining(UnitLastCreated(), "AmmoCharges", 3.0);
                UnitSetInfoText(UnitLastCreated(), StringToText(""), (StringExternal("Param/Value/75014402") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/C75E1520") + FixedToText(lv_charge, c_fixedPrecisionAny) + StringExternal("Param/Value/139C6A5F")), StringToText(""));
            }
            else {
                UnitInventoryCreate(lv_target, "Magazines");
                UnitAddChargeUsed(UnitInventoryLastCreated(), "AmmoCharges", -2.0);
            }
        }
    }
    auto33DA8C4D_g = gv_playerdroppedammo[lv_targetplayer];
    auto33DA8C4D_u = UnitGroupCount(auto33DA8C4D_g, c_unitCountAll);
    for (;; auto33DA8C4D_u -= 1) {
        auto33DA8C4D_var = UnitGroupUnitFromEnd(auto33DA8C4D_g, auto33DA8C4D_u);
        if (auto33DA8C4D_var == null) { break; }
        UnitRemove(auto33DA8C4D_var);
    }
    if ((gv_pauseSpawning == false)) {
        CameraPan(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), UnitGetPosition(lv_target), 0.0, -1, 10, false);
    }

    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_target)), c_messageAreaSubtitle, StringExternal("Param/Value/1E814AA1"));
    auto0FE91E82_g = gv_players;
    auto0FE91E82_var = -1;
    while (true) {
        auto0FE91E82_var = PlayerGroupNextPlayer(auto0FE91E82_g, auto0FE91E82_var);
        if (auto0FE91E82_var < 0) { break; }
        if ((auto0FE91E82_var != lv_targetplayer)) {
            UIDisplayMessage(PlayerGroupSingle(auto0FE91E82_var), c_messageAreaError, (gf_TextImage(gf_GetPlayerImage(lv_targetplayer), 25) + StringExternal("Param/Value/0FBA3F47") + PlayerName(lv_targetplayer) + StringExternal("Param/Value/D1C7FB78") + UnitGetName(gv_playerHeroes[lv_targetplayer]) + StringExternal("Param/Value/F4C9DEE8") + StringExternal("Param/Value/062822F2")));
        }
    }
    UnitSelect(lv_target, UnitGetOwner(lv_target), true);
    libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lv_targetplayer], libNtve_gf_TextureSelectByID(UserDataGetGameLink("Camos", UserDataInstance("Camos", gv_textureValue[lv_targetplayer][1]), "Camo", 1)));
    if ((gv_textureValue[lv_targetplayer][0] >= 1)) {
        libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lv_targetplayer], libNtve_gf_TextureSelectByID(UserDataGetGameLink("Decals", UserDataInstance("Decals", gv_textureValue[lv_targetplayer][0]), "Decals", 1)));
    }
    autoFC00981F_g = gv_players;
    autoFC00981F_var = -1;
    while (true) {
        autoFC00981F_var = PlayerGroupNextPlayer(autoFC00981F_g, autoFC00981F_var);
        if (autoFC00981F_var < 0) { break; }
        if ((PlayerStatus(autoFC00981F_var) == c_playerStatusActive) && (autoFC00981F_var != EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) {
            PlayerSetAlliance(autoFC00981F_var, c_allianceIdVision, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReviveSandBoxMode_Init () {
    gt_ReviveSandBoxMode = TriggerCreate("gt_ReviveSandBoxMode_Func");
    TriggerEnable(gt_ReviveSandBoxMode, false);
    TriggerAddEventPlayerEffectUsed(gt_ReviveSandBoxMode, c_playerAny, "ReviveModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide Spawn Menu
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideSpawnMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_sand_Box_View_Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_sand_Box_Spawner, lv_player) == false)) {
        DialogSetVisible(gv_sand_Box_Spawner, PlayerGroupSingle(lv_player), true);
    }
    else {
        DialogSetVisible(gv_sand_Box_Spawner, PlayerGroupSingle(lv_player), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideSpawnMenu_Init () {
    gt_ShowHideSpawnMenu = TriggerCreate("gt_ShowHideSpawnMenu_Func");
    TriggerEnable(gt_ShowHideSpawnMenu, false);
    TriggerAddEventDialogControl(gt_ShowHideSpawnMenu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sand Box List Box
//--------------------------------------------------------------------------------------------------
bool gt_SandBoxListBox_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_sand_Box_Spawner, EventPlayer()) == true))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_sand_Box_Spawner_Boxes[1]) || (EventDialogControl() == gv_sand_Box_Spawner_Boxes[2]) || (EventDialogControl() == gv_sand_Box_Spawner_Boxes[3]) || (EventDialogControl() == gv_sand_Box_Spawner_Boxes[4]) || (EventDialogControl() == gv_sand_Box_Spawner_Boxes[5])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_sand_Box_Spawner_Boxes[1])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[1], lv_player) == true)) {
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[2], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[3], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[4], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[5], false, PlayerGroupSingle(lv_player));
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[1], PlayerGroupSingle(lv_player), true);
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[2], PlayerGroupSingle(lv_player), false);
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[3], PlayerGroupSingle(lv_player), false);
        }
    }
    else if ((EventDialogControl() == gv_sand_Box_Spawner_Boxes[2])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[2], lv_player) == true)) {
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[1], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[3], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[4], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[5], false, PlayerGroupSingle(lv_player));
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[1], PlayerGroupSingle(lv_player), true);
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[2], PlayerGroupSingle(lv_player), false);
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[3], PlayerGroupSingle(lv_player), false);
        }
    }
    else if ((EventDialogControl() == gv_sand_Box_Spawner_Boxes[3])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[3], lv_player) == true)) {
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[1], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[2], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[4], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[5], false, PlayerGroupSingle(lv_player));
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[1], PlayerGroupSingle(lv_player), false);
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[2], PlayerGroupSingle(lv_player), true);
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[3], PlayerGroupSingle(lv_player), false);
        }
    }
    else if ((EventDialogControl() == gv_sand_Box_Spawner_Boxes[4])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[4], lv_player) == true)) {
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[1], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[2], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[3], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[5], false, PlayerGroupSingle(lv_player));
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[1], PlayerGroupSingle(lv_player), false);
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[2], PlayerGroupSingle(lv_player), false);
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[3], PlayerGroupSingle(lv_player), true);
        }
    }
    else if ((EventDialogControl() == gv_sand_Box_Spawner_Boxes[5])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[5], lv_player) == true)) {
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[1], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[2], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[3], false, PlayerGroupSingle(lv_player));
            libNtve_gf_SetDialogItemChecked(gv_sand_Box_Spawner_Boxes[4], false, PlayerGroupSingle(lv_player));
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[1], PlayerGroupSingle(lv_player), true);
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[2], PlayerGroupSingle(lv_player), false);
            DialogControlSetVisible(gv_sand_Box_Spawner_Buttons[3], PlayerGroupSingle(lv_player), false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandBoxListBox_Init () {
    gt_SandBoxListBox = TriggerCreate("gt_SandBoxListBox_Func");
    TriggerEnable(gt_SandBoxListBox, false);
    TriggerAddEventDialogControl(gt_SandBoxListBox, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sand Box Spawn Unit/Item
//--------------------------------------------------------------------------------------------------
bool gt_SandBoxSpawnUnitItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_itemorUnit;
    int lv_spawnAmountorLoop;
    fixed lv_chargeCount;

    // Automatic Variable Declarations
    int auto439DDC7E_n;
    int auto439DDC7E_i;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_sand_Box_Spawner_Buttons[1]) || (EventDialogControl() == gv_sand_Box_Spawner_Buttons[2]) || (EventDialogControl() == gv_sand_Box_Spawner_Buttons[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[1], lv_player) == false) && (libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[2], lv_player) == false) && (libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[3], lv_player) == false) && (libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[4], lv_player) == false) && (libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[5], lv_player) == false)) {
        return true;
    }
    if ((EventDialogControl() == gv_sand_Box_Spawner_Buttons[1])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[1], lv_player) == true)) {
            lv_itemorUnit = gf_GetArmorWeaponTypeFromList(DialogControlGetSelectedItem(gv_sand_Box_Spawner_Pull_Down_Tabs[1], lv_player));
            gf_SpawnItemLoc(lv_itemorUnit, 1, PointWithOffsetPolar(UnitGetPosition(gv_playerHeroes[lv_player]), RandomFixed(-1.0, 1.0), RandomFixed(360.0, 180.0)));
            UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        }
        else if ((libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[2], lv_player) == true)) {
            lv_itemorUnit = gf_GetItemTypeFromList(DialogControlGetSelectedItem(gv_sand_Box_Spawner_Pull_Down_Tabs[2], lv_player));
            gf_SpawnItemLoc(lv_itemorUnit, 1, PointWithOffsetPolar(UnitGetPosition(gv_playerHeroes[lv_player]), RandomFixed(-1.0, 1.0), RandomFixed(360.0, 180.0)));
            UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            if ((UnitGetType(UnitLastCreated()) == "Magazines")) {
                UnitAddChargeUsed(UnitLastCreated(), "AmmoCharges", -2.0);
            }

        }
        else if ((libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[5], lv_player) == true)) {
            lv_itemorUnit = gf_GetMiniVehicleFromList(DialogControlGetSelectedItem(gv_sand_Box_Spawner_Pull_Down_Tabs[5], lv_player), lv_player);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_itemorUnit, 0, lv_player, PointWithOffsetPolar(UnitGetPosition(gv_playerHeroes[lv_player]), RandomFixed(-1.0, 1.0), RandomFixed(360.0, 180.0)));
            if ((UnitTypeTestAttribute(UnitGetType(UnitLastCreated()), c_unitAttributeBiological) == true)) {
                gf_RandomMiniFlagDecal(UnitLastCreated());
            }
        }
    }
    else if ((EventDialogControl() == gv_sand_Box_Spawner_Buttons[2])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[3], lv_player) == true)) {
            lv_spawnAmountorLoop = gf_GetSpawnAmountOrLoopFromList(DialogControlGetSelectedItem(gv_sand_Box_Spawner_Pull_Down_Tabs[3], lv_player));
            if ((lv_spawnAmountorLoop <= 3)) {
                gf_StartSpawnLoop(lv_spawnAmountorLoop, 0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(lv_player) + (StringExternal("Param/Value/58A61AA1") + IntToText(lv_spawnAmountorLoop))));
            }
            else {
                gf_StopSpawnLoop(lv_spawnAmountorLoop, 0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(lv_player) + (StringExternal("Param/Value/F5D75080") + IntToText(lv_spawnAmountorLoop))));
            }
        }
    }
    else if ((EventDialogControl() == gv_sand_Box_Spawner_Buttons[3])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_sand_Box_Spawner_Boxes[4], lv_player) == true)) {
            lv_itemorUnit = gf_GetUndeadUnitFromList(DialogControlGetSelectedItem(gv_sand_Box_Spawner_Pull_Down_Tabs[4], lv_player));
            lv_spawnAmountorLoop = gf_GetSpawnAmountOrLoopFromList(DialogControlGetSelectedItem(gv_sand_Box_Spawner_Pull_Down_Tabs[6], lv_player));
            if ((lv_itemorUnit != "Thanatos")) {
                gf_SpawnUndead(lv_spawnAmountorLoop, lv_itemorUnit, 1);
            }
            else {
                auto439DDC7E_n = lv_spawnAmountorLoop;
                for (auto439DDC7E_i = 1; auto439DDC7E_i <= auto439DDC7E_n; auto439DDC7E_i += 1) {
                    gf_SpawnThanatos();
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandBoxSpawnUnitItem_Init () {
    gt_SandBoxSpawnUnitItem = TriggerCreate("gt_SandBoxSpawnUnitItem_Func");
    TriggerEnable(gt_SandBoxSpawnUnitItem, false);
    TriggerAddEventDialogControl(gt_SandBoxSpawnUnitItem, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Smithy Barrage AI 2
//--------------------------------------------------------------------------------------------------
bool gt_SmithyBarrageAI2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    point lv_randompoint;
    point[26] lv_pointset;
    point lv_target;
    region lv_origin;
    point lv_saferegion;
    bool lv_pointfound;

    // Automatic Variable Declarations
    const int auto7BF62A7F_ae = 25;
    const int auto7BF62A7F_ai = 1;
    const int auto368BA92D_n = 4;
    int auto368BA92D_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_target = gf_FindPlayerPoint();
    UnitIssueOrder(gv_smithy, OrderTargetingPoint(AbilityCommand("OdinBarrage", 0), lv_target), c_orderQueueReplace);
    UnitCreateEffectPoint(gv_smithy, "TitanMechMissileShot", lv_target);
    lv_origin = RegionCircle(lv_target, 15.0);
    lv_saferegion = RegionGetCenter(lv_origin);
    lv_i = 1;
    for ( ; ( (auto7BF62A7F_ai >= 0 && lv_i <= auto7BF62A7F_ae) || (auto7BF62A7F_ai < 0 && lv_i >= auto7BF62A7F_ae) ) ; lv_i += auto7BF62A7F_ai ) {
        Wait(0.25, c_timeGame);
        lv_pointfound = false;
        lv_pointset[lv_i] = RegionRandomPoint(lv_origin);
        if ((lv_i > 1)) {
            for (auto368BA92D_i = 1; auto368BA92D_i <= auto368BA92D_n; auto368BA92D_i += 1) {
                if ((lv_pointset[lv_i] != lv_pointset[(lv_i - 1)])) {
                    UnitCreateEffectPoint(gv_smithy, "TitanMechMissileShot", lv_pointset[lv_i]);
                    lv_pointfound = true;
                    break;
                }
                else {
                    lv_pointset[lv_i] = RegionRandomPoint(lv_origin);
                }
            }
            if ((lv_pointfound == false)) {
                lv_pointset[lv_i] = lv_saferegion;
                UnitCreateEffectPoint(gv_smithy, "TitanMechMissileShot", lv_pointset[lv_i]);
            }
        }
        else {
            UnitCreateEffectPoint(gv_smithy, "TitanMechMissileShot", lv_pointset[lv_i]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SmithyBarrageAI2_Init () {
    gt_SmithyBarrageAI2 = TriggerCreate("gt_SmithyBarrageAI2_Func");
    TriggerEnable(gt_SmithyBarrageAI2, false);
    TriggerAddEventTimeElapsed(gt_SmithyBarrageAI2, 15.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_SmithyBarrageAI2, RandomFixed(90.0, 105.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Mode 2
//--------------------------------------------------------------------------------------------------
bool gt_ThalimHoldout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    const int auto2CD5DD1B_ae = 12;
    const int auto2CD5DD1B_ai = 1;
    unitgroup auto25FABA9D_g;
    int auto25FABA9D_u;
    unit auto25FABA9D_var;
    playergroup auto3A92BD76_g;
    int auto3A92BD76_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tCPSpawns[4] = RegionFromId(155);
    gv_tCPSpawns[1] = RegionFromId(154);
    gv_tCPSpawns[2] = RegionFromId(157);
    gv_tCPSpawns[3] = RegionFromId(156);
    gv_spawnRegion = RegionFromId(155);
    RegionAddRegion(gv_spawnRegion, RegionFromId(154));
    RegionAddRegion(gv_spawnRegion, RegionFromId(157));
    RegionAddRegion(gv_spawnRegion, RegionFromId(156));
    gv_bossSpawnRegion = RegionFromId(155);
    RegionAddRegion(gv_bossSpawnRegion, RegionFromId(154));
    RegionAddRegion(gv_bossSpawnRegion, RegionFromId(157));
    RegionAddRegion(gv_bossSpawnRegion, RegionFromId(156));
    gv_mapEdges[1] = RegionFromId(156);
    gv_mapEdges[2] = RegionFromId(157);
    gv_mapEdges[3] = RegionFromId(155);
    gv_mapEdges[4] = RegionFromId(154);
    lv_loopint = 1;
    for ( ; ( (auto2CD5DD1B_ai >= 0 && lv_loopint <= auto2CD5DD1B_ae) || (auto2CD5DD1B_ai < 0 && lv_loopint >= auto2CD5DD1B_ae) ) ; lv_loopint += auto2CD5DD1B_ai ) {
        PlayerSetAlliance(lv_loopint, c_allianceIdVision, 13, true);
    }
    TriggerEnable(TriggerGetCurrent(), false);
    auto25FABA9D_g = UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto25FABA9D_u = UnitGroupCount(auto25FABA9D_g, c_unitCountAll);
    for (;; auto25FABA9D_u -= 1) {
        auto25FABA9D_var = UnitGroupUnitFromEnd(auto25FABA9D_g, auto25FABA9D_u);
        if (auto25FABA9D_var == null) { break; }
        gf_FillBunker(auto25FABA9D_var);
    }
    auto3A92BD76_g = gv_players;
    auto3A92BD76_var = -1;
    while (true) {
        auto3A92BD76_var = PlayerGroupNextPlayer(auto3A92BD76_g, auto3A92BD76_var);
        if (auto3A92BD76_var < 0) { break; }
        libNtve_gf_SetAlliance(auto3A92BD76_var, 15, libNtve_ge_AllianceSetting_Enemy);
    }
    TimerWindowCreate(gv_missiontimer, StringExternal("Param/Value/857B04B9"), false, false);
    gv_missiontimerwindow = TimerWindowLastCreated();
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    gf_StartSpawnLoop(1, gv_loopType);
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/A0F8527A"));
    gf_HoldoutCivEscort();
    Wait(4.5, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/8CB0BE45"), StringExternal("Param/Value/B2025872"), c_objectiveStateActive, true);
    gv_mainObj = ObjectiveLastCreated();
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/527358B0") + IntToText(UnitGroupCount(gv_escortCivilians, c_unitCountAlive)) + StringExternal("Param/Value/568BEB16")));
    TriggerEnable(gt_SurvivalIncreasedT2Spawning, true);
    TriggerEnable(gt_ThalimHoldoutTimeout, true);
    TriggerEnable(gt_ThalimHoldout5Min, true);
    TriggerEnable(gt_ThalimHoldout10Min, true);
    TriggerEnable(gt_ThalimHoldout15Min, true);
    TriggerEnable(gt_ThalimHoldout20Min, true);
    TriggerEnable(gt_ThalimHoldout25Min, true);
    Wait(120.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThalimHoldout_Init () {
    gt_ThalimHoldout = TriggerCreate("gt_ThalimHoldout_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilian Dies 2
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutCivDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_escortCivilians, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_escortCivilians, EventUnit());
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/2D819AAD") + IntToText(UnitGroupCount(gv_escortCivilians, c_unitCountAlive)) + StringExternal("Param/Value/18B48C79")));
    if (((UnitGroupCount(gv_escortCivilians, c_unitCountAlive) + gv_civsExtracted) == 0)) {
        gf_FailMission(50, StringExternal("Param/Value/BC30CC41"), 2);
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/C3DD56F9"));
        Wait(5.0, c_timeGame);
        TriggerExecute(gt_FailGameOver, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutCivDies_Init () {
    gt_HoldoutCivDies = TriggerCreate("gt_HoldoutCivDies_Func");
    TriggerEnable(gt_HoldoutCivDies, false);
    TriggerAddEventUnitDied(gt_HoldoutCivDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilian Enters Thalim 2
//--------------------------------------------------------------------------------------------------
bool gt_HoldoutCivExtracts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allextracted;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto9E09D9ED_g;
    int auto9E09D9ED_u;
    unit auto9E09D9ED_var;
    unitgroup auto06FDA141_g;
    int auto06FDA141_u;
    unit auto06FDA141_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_escortCivilians, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_civsExtracted += 1;
    gf_MissionItemPingRemoveItem(EventUnit());
    UnitGroupRemove(gv_escortCivilians, EventUnit());
    UnitGroupAdd(gv_civilians, EventUnit());
    UnitBehaviorRemove(EventUnit(), "CivilianEscort", c_unitBehaviorCountAll);
    UnitSetOwner(EventUnit(), 0, true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(24))), c_orderQueueReplace);
    libNtve_gf_PauseUnit(EventUnit(), true);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    auto9E09D9ED_g = gv_heroesGroup;
    auto9E09D9ED_u = UnitGroupCount(auto9E09D9ED_g, c_unitCountAll);
    for (;; auto9E09D9ED_u -= 1) {
        auto9E09D9ED_var = UnitGroupUnitFromEnd(auto9E09D9ED_g, auto9E09D9ED_u);
        if (auto9E09D9ED_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto9E09D9ED_var) == false) && (UnitIsAlive(auto9E09D9ED_var) == true)) {
            lv_allextracted = false;
        }
    }
    auto06FDA141_g = gv_escortCivilians;
    auto06FDA141_u = UnitGroupCount(auto06FDA141_g, c_unitCountAll);
    for (;; auto06FDA141_u -= 1) {
        auto06FDA141_var = UnitGroupUnitFromEnd(auto06FDA141_g, auto06FDA141_u);
        if (auto06FDA141_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto06FDA141_var) == false) && (UnitIsAlive(auto06FDA141_var) == true)) {
            lv_allextracted = false;
        }
    }
    if ((lv_allextracted == true)) {
        if ((gv_extractionCount == 12)) {
            gv__12ManExtraction = true;
        }
        TriggerExecute(gt_ThalimHoldoutEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HoldoutCivExtracts_Init () {
    gt_HoldoutCivExtracts = TriggerCreate("gt_HoldoutCivExtracts_Func");
    TriggerEnable(gt_HoldoutCivExtracts, false);
    TriggerAddEventUnitRegion(gt_HoldoutCivExtracts, null, RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_HoldoutCivExtracts, null, RegionFromId(17), false);
    TriggerAddEventUnitRegion(gt_HoldoutCivExtracts, null, RegionFromId(141), true);
    TriggerAddEventUnitRegion(gt_HoldoutCivExtracts, null, RegionFromId(141), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 5 Min 2
//--------------------------------------------------------------------------------------------------
bool gt_ThalimHoldout5Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8DEC5F5D_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SurvivalPeriodicXP, true);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Deceiver", 1);
    gf_MissionText(StringExternal("Param/Value/2D87E69D"));
    Wait(10.0, c_timeGame);
    auto8DEC5F5D_val = RandomInt(1, 3);
    if (auto8DEC5F5D_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/0CC43483"));
        gf_SpawnUndead(1, "Darreus", 1);
    }
    else if (auto8DEC5F5D_val == 2) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/60F4A597"));
        gf_SpawnUndead(1, "Kraith", 1);
    }
    else if (auto8DEC5F5D_val == 3) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/4D7B8CE1"));
        gf_SpawnUndead(1, "Grotesque", 1);
    }
    else {
        gf_SpawnUndead(1, "Darreus", 1);
    }
    Wait(15.0, c_timeGame);
    gv_sensorLZ = RegionFromId(14);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_sensorLZ), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 5.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/96A076A3"));
    gf_MissionText(StringExternal("Param/Value/D51E1EBB"));
    Wait(2.0, c_timeGame);
    gf_AirDropItemLoc("AimAssistant", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("APRounds", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("ProjectileAccelerator", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("EnergyCell", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("EnergyCell", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("KevlarBodyArmor", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("FirstAidKit", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("QuikClot", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("FirstAidKit", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("QuikClot", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("MRL", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("FlareGun", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("FlareGun", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("GroundFlare", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("ExplosiveCharge", RegionRandomPoint(RegionFromId(14)), 1);
    gf_AirDropItemLoc("ExplosiveCharge", RegionRandomPoint(RegionFromId(14)), 1);
    if (((gv_rifleman == true) || (gv_platoonLeader == true) || (gv_calvaryScout == true) || (gv_fireSupportSpecialist == true) || (gv_javelinGunner == true) || (gv_combatMedic == true))) {
        gf_AirDropItemLoc("HK42", RegionRandomPoint(RegionFromId(14)), 1);
        gf_AirDropItemLoc("USMCR", RegionRandomPoint(RegionFromId(14)), 1);
    }

    if ((gf_CyborgMG() || (gv_automaticRifleman == true))) {
        gf_AirDropItemLoc("M41SAW", RegionRandomPoint(RegionFromId(14)), 1);
    }

    if ((gf_CyborgPlasma() || (gv_ghost == true) || (gv_mechOperator == true))) {
        gf_AirDropItemLoc("PR34E", RegionRandomPoint(RegionFromId(14)), 1);
    }

    if ((gf_CyborgShotgun() || (gv_combatEngineer == true) || (gv_commando == true) || (gv_enforcer == true))) {
        gf_AirDropItemLoc("ISS7", RegionRandomPoint(RegionFromId(14)), 1);
    }

    if ((gf_CyborgDMR() || (gv_sDM == true))) {
        gf_AirDropItemLoc("IDMR2", RegionRandomPoint(RegionFromId(14)), 1);
    }

    Wait(10.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Deceiver", 1);
    if ((gv_averageXP >= 21000)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
    }

    Wait(60.0, c_timeGame);
    gf_SpawnUndead(1, "Raisuli", 1);
    gf_SpawnUndead(gv_spawnCount, "Charger", 1);
    gf_SpawnUndead(gv_spawnCount, "Charger", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThalimHoldout5Min_Init () {
    gt_ThalimHoldout5Min = TriggerCreate("gt_ThalimHoldout5Min_Func");
    TriggerEnable(gt_ThalimHoldout5Min, false);
    TriggerAddEventTimeElapsed(gt_ThalimHoldout5Min, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 10 Min 2
//--------------------------------------------------------------------------------------------------
bool gt_ThalimHoldout10Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC86397E5_val;
    const int auto3DE2E2FF_n = 6;
    int auto3DE2E2FF_i;
    const int auto437D8C73_n = 6;
    int auto437D8C73_i;
    const int autoCEB3C2CF_n = 6;
    int autoCEB3C2CF_i;
    const int auto90B7E0AB_n = 6;
    int auto90B7E0AB_i;
    int autoA5A19437_val;
    const int auto33C68D8E_n = 4;
    int auto33C68D8E_i;
    const int autoB59A2108_n = 4;
    int autoB59A2108_i;
    const int autoCD2E7741_n = 4;
    int autoCD2E7741_i;
    const int auto0239B5D1_n = 3;
    int auto0239B5D1_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SucceedMission(30, StringExternal("Param/Value/47B12FC3"), -1, false);
    gf_StartSpawnLoop(2, gv_loopType);
    autoC86397E5_val = RandomInt(1, 3);
    if (autoC86397E5_val == 3) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/AFEBE2FF"));
        gf_MissionText(StringExternal("Param/Value/E71350AA"));
        for (auto3DE2E2FF_i = 1; auto3DE2E2FF_i <= auto3DE2E2FF_n; auto3DE2E2FF_i += 1) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(RegionFromId(17)), 270.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(312))), c_orderQueueReplace);
        }
        for (auto437D8C73_i = 1; auto437D8C73_i <= auto437D8C73_n; auto437D8C73_i += 1) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(RegionFromId(130)), 90.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(142))), c_orderQueueReplace);
        }
        for (autoCEB3C2CF_i = 1; autoCEB3C2CF_i <= autoCEB3C2CF_n; autoCEB3C2CF_i += 1) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(RegionFromId(141)), 270.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(147))), c_orderQueueReplace);
        }
        for (auto90B7E0AB_i = 1; auto90B7E0AB_i <= auto90B7E0AB_n; auto90B7E0AB_i += 1) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(RegionFromId(141)), 270.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(150))), c_orderQueueReplace);
        }
    }
    else if (autoC86397E5_val == 2) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/5AACF468"));
        gf_MissionText(StringExternal("Param/Value/9A469D19"));
        UnitCreate(1, "LAV25Recon", 0, 13, RegionRandomPoint(RegionFromId(17)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(142))), c_orderQueueReplace);
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionRandomPoint(RegionFromId(17)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(142))), c_orderQueueReplace);
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionRandomPoint(RegionFromId(17)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(142))), c_orderQueueReplace);
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionRandomPoint(RegionFromId(17)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(142))), c_orderQueueReplace);
        UnitCreate(1, "Infantry68WCombatMedic", 0, 13, RegionRandomPoint(RegionFromId(17)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(142))), c_orderQueueReplace);
        UnitCreate(1, "LAV25Recon", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(147))), c_orderQueueReplace);
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(147))), c_orderQueueReplace);
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(147))), c_orderQueueReplace);
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(147))), c_orderQueueReplace);
        UnitCreate(1, "Infantry68WCombatMedic", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(147))), c_orderQueueReplace);
    }
    else if (autoC86397E5_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/CA5AF4F1"));
        gf_MissionText(StringExternal("Param/Value/1E6B8942"));
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/6E74B0D0"));
        Wait(2.0, c_timeGame);
        gf_AirDropItemLoc("AimAssistant", RegionRandomPoint(RegionFromId(14)), 1);
        gf_AirDropItemLoc("AimAssistant", RegionRandomPoint(RegionFromId(14)), 1);
        gf_AirDropItemLoc("AimAssistant", RegionRandomPoint(RegionFromId(14)), 1);
        gf_AirDropItemLoc("APRounds", RegionRandomPoint(RegionFromId(14)), 1);
        gf_AirDropItemLoc("APRounds", RegionRandomPoint(RegionFromId(14)), 1);
        gf_AirDropItemLoc("APRounds", RegionRandomPoint(RegionFromId(14)), 1);
        gf_AirDropItemLoc("ProjectileAccelerator", RegionRandomPoint(RegionFromId(14)), 1);
        gf_AirDropItemLoc("ProjectileAccelerator", RegionRandomPoint(RegionFromId(14)), 1);
        gf_AirDropItemLoc("ProjectileAccelerator", RegionRandomPoint(RegionFromId(14)), 1);
        gf_AirDropItemLoc("DURounds", RegionRandomPoint(RegionFromId(14)), 1);
        gf_AirDropItemLoc("Binoculars", RegionRandomPoint(RegionFromId(14)), 1);
        gf_AirDropItemLoc("PlasmaInducer", RegionRandomPoint(RegionFromId(14)), 1);
    }
    else {
    }
    Wait(10.0, c_timeGame);
    gf_SpawnUndead(2, "Hunter", 1);
    gf_SpawnUndead(2, "Hunter", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    Wait(30.0, c_timeGame);
    if ((gv_averageXP >= 25000)) {
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
    }
    Wait(10.0, c_timeGame);
    if ((gv_averageXP >= 30000) && (RandomInt(0, 1) == 1)) {
        gf_SpawnUndead(1, "Minerva", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
    }
    else {
        gf_SpawnUndead(1, "Ares", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }
    Wait(30.0, c_timeGame);
    autoA5A19437_val = RandomInt(1, 3);
    if (autoA5A19437_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/235D7E38"));
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/FA064242"));
        Wait(5.0, c_timeGame);
        gf_SpawnPMCSquad(17, 1);
        gf_SpawnPMCSquad(2, 1);
        Wait(10.0, c_timeGame);
        gf_SpawnPMCSquad(2, 1);
    }
    else if (autoA5A19437_val == 2) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/EB434333"));
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/D8344C56"));
        Wait(5.0, c_timeGame);
        for (auto33C68D8E_i = 1; auto33C68D8E_i <= auto33C68D8E_n; auto33C68D8E_i += 1) {
            gf_SpawnUndeadMixed(1, "Unburied", "Glutton", "Licker", gv_spawnCount, gv_spawnCount, 2);
        }
        gf_SpawnUndeadMixed(1, "ZombieWraith", "Leaper", "Hopper", 2, 4, gv_spawnCount);
        Wait(15.0, c_timeGame);
        for (autoB59A2108_i = 1; autoB59A2108_i <= autoB59A2108_n; autoB59A2108_i += 1) {
            gf_SpawnUndeadMixed(1, "Unburied", "Glutton", "Licker", gv_spawnCount, gv_spawnCount, 2);
        }
        gf_SpawnUndeadMixed(1, "ZombieWraith", "Leaper", "Hopper", 2, 4, gv_spawnCount);
        Wait(20.0, c_timeGame);
        for (autoCD2E7741_i = 1; autoCD2E7741_i <= autoCD2E7741_n; autoCD2E7741_i += 1) {
            gf_SpawnUndeadMixed(1, "ZombieImpaler", "Drake", "Krill", 3, gv_spawnCount, 2);
        }
        for (auto0239B5D1_i = 1; auto0239B5D1_i <= auto0239B5D1_n; auto0239B5D1_i += 1) {
            gf_SpawnUndeadMixed(1, "Charger", "Charger", "Bruchus", gv_spawnCount, gv_spawnCount, 4);
        }
    }
    else if (autoA5A19437_val == 3) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/3A4C9765"));
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/289283FF"));
        Wait(15.0, c_timeGame);
        gf_SpawnUndeadMixed(1, "Gargoyle", "Gargoyle", "Gargoyle", gv_spawnCount, gv_spawnCount, gv_spawnCount);
        gf_SpawnUndead(1, "Metasis", 1);
        gf_SpawnUndead(1, "Immussilus", 1);
        Wait(15.0, c_timeGame);
        gf_SpawnUndeadMixed(1, "Shredder", "Shredder", "Gargoyle", gv_spawnCount, gv_spawnCount, gv_spawnCount);
        gf_SpawnUndeadMixed(1, "Gargoyle", "Gargoyle", "Gargoyle", gv_spawnCount, gv_spawnCount, gv_spawnCount);
        gf_SpawnUndead(1, "Immussilus", 1);
        Wait(15.0, c_timeGame);
        gf_SpawnUndeadMixed(1, "Gargoyle", "Gargoyle", "Gargoyle", gv_spawnCount, gv_spawnCount, gv_spawnCount);
        gf_SpawnUndead(1, "Metasis", 1);
        gf_SpawnUndead(1, "Immussilus", 1);
        Wait(15.0, c_timeGame);
        gf_SpawnUndeadMixed(1, "Shredder", "Shredder", "Gargoyle", gv_spawnCount, gv_spawnCount, gv_spawnCount);
        gf_SpawnUndeadMixed(1, "Gargoyle", "Gargoyle", "Gargoyle", gv_spawnCount, gv_spawnCount, gv_spawnCount);
        gf_SpawnUndead(1, "Immussilus", 1);
    }
    else {
        gf_SpawnUndead(1, "Darreus", 1);
    }
    Wait(40.0, c_timeGame);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThalimHoldout10Min_Init () {
    gt_ThalimHoldout10Min = TriggerCreate("gt_ThalimHoldout10Min_Func");
    TriggerEnable(gt_ThalimHoldout10Min, false);
    TriggerAddEventTimeElapsed(gt_ThalimHoldout10Min, 600.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 15 Min 2
//--------------------------------------------------------------------------------------------------
bool gt_ThalimHoldout15Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto08D3B5BB_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(40, StringExternal("Param/Value/468D1601"), -1, false);
    TriggerEnable(TriggerGetCurrent(), false);
    auto08D3B5BB_val = RandomInt(1, 3);
    if (auto08D3B5BB_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/34A532FD"));
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/8F521223"));
        Wait(5.0, c_timeGame);
        gf_SpawnPMCSquad(28, 1);
        gf_SpawnPMCSquad(29, 1);
        Wait(10.0, c_timeGame);
        gf_SpawnPMCSquad(28, 1);
        gf_SpawnPMCSquad(5, 1);
        gf_SpawnPMCSquad(5, 1);
    }
    else if (auto08D3B5BB_val == 2) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/B29F7AF9"));
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/CE1CCB82"));
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        Wait(2.0, c_timeGame);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        Wait(10.0, c_timeGame);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        Wait(2.0, c_timeGame);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
    }
    else if (auto08D3B5BB_val == 3) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/7D6544F5"));
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/30D27BDC"));
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(2, "AcidVore", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(1, "Apiary", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(2, "AcidVore", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(1, "Apiary", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(2, "AcidVore", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(1, "Apiary", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(2, "AcidVore", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(2, "Morbus", 1);
        gf_SpawnUndead(1, "Apiary", 1);
    }
    else {
        gf_SpawnUndead(1, "Darreus", 1);
    }
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    Wait(40.0, c_timeGame);
    if ((gv_averageXP >= 12000)) {
        gf_SpawnUndead(1, "Gourmand", 1);
    }
    if ((gv_averageXP >= 33000)) {
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(2, "ZombieYeti", 9);
    }
    Wait(40.0, c_timeGame);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    if ((gv_averageXP >= 50000)) {
        gf_SpawnUndead(2, "Gourmand", 1);
        gf_SpawnUndead(1, "Gargantuan", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThalimHoldout15Min_Init () {
    gt_ThalimHoldout15Min = TriggerCreate("gt_ThalimHoldout15Min_Func");
    TriggerEnable(gt_ThalimHoldout15Min, false);
    TriggerAddEventTimeElapsed(gt_ThalimHoldout15Min, 900.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 20 Min 2
//--------------------------------------------------------------------------------------------------
bool gt_ThalimHoldout20Min_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_strafeOption;

    // Automatic Variable Declarations
    int autoB35BCECD_val;
    unitgroup auto16B8E8FC_g;
    int auto16B8E8FC_u;
    unit auto16B8E8FC_var;
    int auto8D9FEAE1_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(60, StringExternal("Param/Value/DEAB84E9"), -1, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gf_StartSpawnLoop(3, gv_loopType);
    SoundPlay(SoundLink("TTosh03BMusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(4, "Bruchus", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    autoB35BCECD_val = RandomInt(1, 3);
    if (autoB35BCECD_val == 3) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/0CB8D370"));
        gf_MissionText(StringExternal("Param/Value/79E1A8F4"));
        lv_strafeOption = true;
    }
    else if (autoB35BCECD_val == 2) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/1E15A589"));
        gf_MissionText(StringExternal("Param/Value/6B6D47D1"));
        UnitCreate(1, "LAV25Recon", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(147))), c_orderQueueReplace);
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(147))), c_orderQueueReplace);
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(147))), c_orderQueueReplace);
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(147))), c_orderQueueReplace);
        UnitCreate(1, "Infantry68WCombatMedic", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(147))), c_orderQueueReplace);
        Wait(5.0, c_timeGame);
        UnitCreate(1, "LAV25Recon", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(142))), c_orderQueueReplace);
        UnitCreate(1, "M270MLRS2", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(152))), c_orderQueueReplace);
        UnitCreate(1, "M270MLRS2", 0, 13, RegionRandomPoint(RegionFromId(141)), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(153))), c_orderQueueReplace);
    }
    else if (autoB35BCECD_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/52949937"));
        gf_MissionText(StringExternal("Param/Value/7D260966"));
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4D8BC06E"));
        Wait(2.0, c_timeGame);
        auto16B8E8FC_g = gv_heroesGroup;
        auto16B8E8FC_u = UnitGroupCount(auto16B8E8FC_g, c_unitCountAll);
        for (;; auto16B8E8FC_u -= 1) {
            auto16B8E8FC_var = UnitGroupUnitFromEnd(auto16B8E8FC_g, auto16B8E8FC_u);
            if (auto16B8E8FC_var == null) { break; }
            if (((UnitGetType(auto16B8E8FC_var) == "Rifleman") || (UnitGetType(auto16B8E8FC_var) == "FireSupportSpecialist") || (UnitGetType(auto16B8E8FC_var) == "CavalryScout") || (UnitGetType(auto16B8E8FC_var) == "PlatoonLeader") || (UnitGetType(auto16B8E8FC_var) == "JavelinGunner") || (UnitGetType(auto16B8E8FC_var) == "CombatMedic") || (UnitHasBehavior(auto16B8E8FC_var, "BorgEquipRifle")))) {
                if ((RandomInt(0, 1) == 1)) {
                    gf_SpawnItem("ATLASX50", 3);
                }
                else {
                    gf_SpawnItem("SOFAR", 4);
                }
            }

            if ((UnitGetType(auto16B8E8FC_var) == "SquadDesignatedMarksman") && (UnitHasBehavior(auto16B8E8FC_var, "BorgEquipDMR"))) {
                if ((RandomInt(0, 1) == 1)) {
                    gf_SpawnItem("M92Torrent", 1);
                }
                else {
                    gf_SpawnItem("XR900", 1);
                }
            }

            if (((UnitGetType(auto16B8E8FC_var) == "BioSpecialist") || (UnitGetType(auto16B8E8FC_var) == "MechOperator") || (UnitGetType(auto16B8E8FC_var) == "GhostHero") || (UnitHasBehavior(auto16B8E8FC_var, "BorgEquipPlasma")))) {
                if ((RandomInt(0, 1) == 1)) {
                    gf_SpawnItem("XM88BPhasedPlasmaRifle", 1);
                }
                else {
                    gf_SpawnItem("PR42C", 1);
                }
            }

            if ((UnitGetType(auto16B8E8FC_var) == "Flamethrower")) {
                gf_SpawnItem("Inferno", 1);
            }

            if (((UnitGetType(auto16B8E8FC_var) == "AutomaticRifleman") || (UnitHasBehavior(auto16B8E8FC_var, "BorgEquipMG")))) {
                if ((RandomInt(0, 1) == 1)) {
                    gf_SpawnItem("M241MMG", 1);
                }
                else {
                    gf_SpawnItem("M135Minigun", 1);
                }
            }

            if (((UnitGetType(auto16B8E8FC_var) == "CommandoHero") || (UnitGetType(auto16B8E8FC_var) == "Enforcer") || (UnitGetType(auto16B8E8FC_var) == "CombatEngineer") || (UnitHasBehavior(auto16B8E8FC_var, "BorgEquipShotgun")))) {
                if ((RandomInt(0, 1) == 1)) {
                    gf_SpawnItem("AA12", 1);
                }
                else {
                    gf_SpawnItem("M1014", 1);
                }
            }

            if ((UnitGetType(auto16B8E8FC_var) == "LaserEnforcer")) {
                gf_SpawnItem("D20LaserRifle", 1);
            }

        }
    }
    else {
    }
    Wait(10.0, c_timeGame);
    if ((lv_strafeOption)) {
        gf_A10Strafe();
        Wait(1.0, c_timeGame);
        gf_A10Strafe();
    }

    Wait(10.0, c_timeGame);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(20.0, c_timeGame);
    auto8D9FEAE1_val = RandomInt(1, 3);
    if (auto8D9FEAE1_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/44A507FC"));
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/8C51818E"));
        Wait(5.0, c_timeGame);
        gf_SpawnPMCSquad(28, 1);
        gf_SpawnPMCSquad(28, 1);
        gf_SpawnPMCSquad(29, 1);
        Wait(10.0, c_timeGame);
        gf_SpawnPMCSquad(28, 1);
        gf_SpawnPMCSquad(29, 1);
        gf_SpawnPMCSquad(5, 1);
        gf_SpawnPMCSquad(5, 1);
    }
    else if (auto8D9FEAE1_val == 2) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/7CBDBFA2"));
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/AE08AE68"));
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "ThresherMaw", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "ThresherMaw", 1);
        Wait(10.0, c_timeGame);
        gf_SpawnUndead(1, "ThresherMaw", 1);
        gf_SpawnUndead(1, "ThresherMaw", 1);
        Wait(10.0, c_timeGame);
        gf_SpawnUndead(1, "ElectricMaw", 1);
        gf_SpawnUndead(1, "ElectricMaw", 1);
    }
    else if (auto8D9FEAE1_val == 3) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/DD2AD70F"));
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/C46E987C"));
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "Arachnathid", 1);
        gf_SpawnUndead(2, "ArachnidMother", 1);
        gf_SpawnUndead(2, "ArachnidMother", 1);
        gf_SpawnUndead(2, "Scorpio", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(gv_spawnCount, "Parasite", 1);
        gf_SpawnUndead(gv_spawnCount, "Parasite", 1);
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
        gf_SpawnUndead(2, "ArachnidMother", 1);
        gf_SpawnUndead(2, "ArachnidMother", 1);
        gf_SpawnUndead(2, "Scorpio", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "Arachnathid", 1);
        gf_SpawnUndead(2, "ArachnidMother", 1);
        gf_SpawnUndead(2, "ArachnidMother", 1);
        gf_SpawnUndead(2, "Scorpio", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(gv_spawnCount, "Parasite", 1);
        gf_SpawnUndead(gv_spawnCount, "Parasite", 1);
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
        gf_SpawnUndead(2, "ArachnidMother", 1);
        gf_SpawnUndead(2, "ArachnidMother", 1);
        gf_SpawnUndead(2, "Scorpio", 1);
    }
    else {
        gf_SpawnUndead(1, "Darreus", 1);
    }
    if ((lv_strafeOption)) {
        gf_A10Strafe();
        Wait(1.0, c_timeGame);
        gf_A10Strafe();
        Wait(1.0, c_timeGame);
        gf_A10Strafe();
    }

    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(3, "Raisuli", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(1, "Gargantuan", 1);
    }
    if ((gv_averageXP >= 70000)) {
        gf_SpawnUndead(1, "Dilophosaur", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }
    if ((lv_strafeOption)) {
        gf_A10Strafe();
        Wait(1.0, c_timeGame);
        gf_A10Strafe();
        Wait(1.0, c_timeGame);
        gf_A10Strafe();
    }

    Wait(60.0, c_timeGame);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(gv_spawnCount, "Leaper", 1);
    gf_SpawnUndead(gv_spawnCount, "Deceiver", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(3, "ZombieWraith", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThalimHoldout20Min_Init () {
    gt_ThalimHoldout20Min = TriggerCreate("gt_ThalimHoldout20Min_Func");
    TriggerEnable(gt_ThalimHoldout20Min, false);
    TriggerAddEventTimeElapsed(gt_ThalimHoldout20Min, 1200.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 25 Min 2
//--------------------------------------------------------------------------------------------------
bool gt_ThalimHoldout25Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto96DBB03C_val;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(100, StringExternal("Param/Value/1A7C401E"), -1, false);
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/C36122BA"), 0, true);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SurvivalHellSpawning, true);
    gf_MissionText(StringExternal("Param/Value/A762EE27"));
    Wait(10.0, c_timeGame);
    auto96DBB03C_val = RandomInt(1, 3);
    if (auto96DBB03C_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/F0CAB790"));
        gf_SpawnUndead(1, "Volcanis", 1);
        gf_SpawnUndead(1, "Dilophosaur", 1);
        gf_SpawnUndead(1, "Horror", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "Dilophosaur", 1);
        gf_SpawnUndead(1, "Dilophosaur", 1);
        gf_SpawnUndead(1, "Horror", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "Dilophosaur", 1);
        gf_SpawnUndead(1, "Dilophosaur", 1);
        gf_SpawnUndead(1, "Horror", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "Dilophosaur", 1);
        gf_SpawnUndead(1, "Dilophosaur", 1);
        gf_SpawnUndead(1, "Horror", 1);
    }
    else if (auto96DBB03C_val == 2) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/9825680A"));
        gf_SpawnUndead(1, "Cacumen", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "Gargantuan", 1);
        gf_SpawnUndead(1, "Gargantuan", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "Gargantuan", 1);
        gf_SpawnUndead(1, "Gargantuan", 1);
    }
    else if (auto96DBB03C_val == 3) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/E3DA9918"));
        gf_SpawnUndead(1, "Terrorzor", 1);
        gf_SpawnUndead(1, "Baron", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "Baron", 1);
        gf_SpawnUndead(1, "Baron", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "Baron", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        Wait(5.0, c_timeGame);
        gf_SpawnUndead(1, "Baron", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }
    else {
        gf_SpawnUndead(1, "Darreus", 1);
    }
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Dilophosaur", 2);
    Wait(10.0, c_timeGame);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(1, "Dilophosaur", 2);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(6, "Cursed", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(1, "Dilophosaur", 2);
    gf_SpawnUndead(3, "Weaver", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    Wait(10.0, c_timeGame);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }
    if ((gv_averageXP >= 65000) && (RandomInt(0, 1) == 1)) {
        gf_SpawnUndead(1, "Arachnathid", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(3, "Baron", 1);
    }
    else {
        gf_SpawnUndead(3, "Lacerti", 1);
        gf_SpawnUndead(1, "Ares", 1);
        gf_SpawnUndead(1, "Apiary", 1);
    }
    Wait(40.0, c_timeGame);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnUndead(2, "Immussilus", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(gv_spawnCount, "Hopper", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }
    Wait(50.0, c_timeGame);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Dilophosaur", 2);
    Wait(40.0, c_timeGame);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(2, "Immussilus", 1);
    gf_SpawnUndead(1, "Dilophosaur", 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThalimHoldout25Min_Init () {
    gt_ThalimHoldout25Min = TriggerCreate("gt_ThalimHoldout25Min_Func");
    TriggerEnable(gt_ThalimHoldout25Min, false);
    TriggerAddEventTimeElapsed(gt_ThalimHoldout25Min, 1500.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Mode Timeout 2
//--------------------------------------------------------------------------------------------------
bool gt_ThalimHoldoutTimeout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA43E7387_g;
    int autoA43E7387_u;
    unit autoA43E7387_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(50, StringExternal("Param/Value/8A686FA7"), -1, false);
    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("TRaynor01MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(gv_missiontimer, 90.0, false, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(17)), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 120.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/16A4B9DE"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(141)), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 120.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/104DDC0D"));
    TriggerEnable(gt_ThalimHoldoutEnd, true);
    TriggerEnable(gt_ThalimHoldoutEvacPlayerEnter, true);
    TriggerEnable(gt_HoldoutCivExtracts, true);
    gf_MissionText(StringExternal("Param/Value/A06C9830"));
    autoA43E7387_g = gv_escortCivilians;
    autoA43E7387_u = UnitGroupCount(autoA43E7387_g, c_unitCountAll);
    for (;; autoA43E7387_u -= 1) {
        autoA43E7387_var = UnitGroupUnitFromEnd(autoA43E7387_g, autoA43E7387_u);
        if (autoA43E7387_var == null) { break; }
        if ((UnitGetOwner(autoA43E7387_var) == 0)) {
            if ((DistanceSquaredBetweenPoints(UnitGetPosition(autoA43E7387_var), RegionGetCenter(RegionFromId(17))) > DistanceSquaredBetweenPoints(UnitGetPosition(autoA43E7387_var), RegionGetCenter(RegionFromId(141))))) {
                UnitIssueOrder(autoA43E7387_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(141))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(autoA43E7387_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(17))), c_orderQueueReplace);
            }
        }

    }
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/DA710E40"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThalimHoldoutTimeout_Init () {
    gt_ThalimHoldoutTimeout = TriggerCreate("gt_ThalimHoldoutTimeout_Func");
    TriggerEnable(gt_ThalimHoldoutTimeout, false);
    TriggerAddEventTimeElapsed(gt_ThalimHoldoutTimeout, 1800.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Evac Player Enter 2
//--------------------------------------------------------------------------------------------------
bool gt_ThalimHoldoutEvacPlayerEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allextracted;

    // Automatic Variable Declarations
    unitgroup auto9807E740_g;
    int auto9807E740_u;
    unit auto9807E740_var;
    unitgroup autoC1BFF1F9_g;
    int autoC1BFF1F9_u;
    unit autoC1BFF1F9_var;

    // Variable Initialization
    lv_allextracted = true;

    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!(((EventUnitRegion() == RegionFromId(17)) || (EventUnitRegion() == RegionFromId(141))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_survivalCompleted = true;
    gv_extractionCount += 1;
    libNtve_gf_PauseUnit(EventUnit(), true);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    auto9807E740_g = gv_heroesGroup;
    auto9807E740_u = UnitGroupCount(auto9807E740_g, c_unitCountAll);
    for (;; auto9807E740_u -= 1) {
        auto9807E740_var = UnitGroupUnitFromEnd(auto9807E740_g, auto9807E740_u);
        if (auto9807E740_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto9807E740_var) == false) && (UnitIsAlive(auto9807E740_var) == true)) {
            lv_allextracted = false;
        }
    }
    autoC1BFF1F9_g = gv_escortCivilians;
    autoC1BFF1F9_u = UnitGroupCount(autoC1BFF1F9_g, c_unitCountAll);
    for (;; autoC1BFF1F9_u -= 1) {
        autoC1BFF1F9_var = UnitGroupUnitFromEnd(autoC1BFF1F9_g, autoC1BFF1F9_u);
        if (autoC1BFF1F9_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(autoC1BFF1F9_var) == false) && (UnitIsAlive(autoC1BFF1F9_var) == true)) {
            lv_allextracted = false;
        }
    }
    if ((lv_allextracted == true)) {
        if ((gv_extractionCount == 12)) {
            gv__12ManExtraction = true;
        }
        TriggerExecute(gt_ThalimHoldoutEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThalimHoldoutEvacPlayerEnter_Init () {
    gt_ThalimHoldoutEvacPlayerEnter = TriggerCreate("gt_ThalimHoldoutEvacPlayerEnter_Func");
    TriggerEnable(gt_ThalimHoldoutEvacPlayerEnter, false);
    TriggerAddEventUnitRegion(gt_ThalimHoldoutEvacPlayerEnter, null, RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_ThalimHoldoutEvacPlayerEnter, null, RegionFromId(17), false);
    TriggerAddEventUnitRegion(gt_ThalimHoldoutEvacPlayerEnter, null, RegionFromId(141), false);
    TriggerAddEventUnitRegion(gt_ThalimHoldoutEvacPlayerEnter, null, RegionFromId(141), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival End 2
//--------------------------------------------------------------------------------------------------
bool gt_ThalimHoldoutEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto181D1D0B_g;
    int auto181D1D0B_var;
    unitgroup auto80C593EF_g;
    int auto80C593EF_u;
    unit auto80C593EF_var;
    playergroup autoD0783A17_g;
    int autoD0783A17_var;
    unitgroup autoB0849090_g;
    int autoB0849090_u;
    unit autoB0849090_var;
    playergroup autoE151D9A9_g;
    int autoE151D9A9_var;
    playergroup auto6E47569A_g;
    int auto6E47569A_var;
    playergroup auto1343BF7A_g;
    int auto1343BF7A_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_victory = true;
    TriggerEnable(gt_ThalimHoldoutEvacPlayerEnter, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroyAll();
    SoundPlay(SoundLink("TRaynor01MusicOutro", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_startingplayers == 1)) {
        auto80C593EF_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto80C593EF_u = UnitGroupCount(auto80C593EF_g, c_unitCountAll);
        for (;; auto80C593EF_u -= 1) {
            auto80C593EF_var = UnitGroupUnitFromEnd(auto80C593EF_g, auto80C593EF_u);
            if (auto80C593EF_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto80C593EF_var, true);
        }
    }
    else {
        auto181D1D0B_g = gv_players;
        auto181D1D0B_var = -1;
        while (true) {
            auto181D1D0B_var = PlayerGroupNextPlayer(auto181D1D0B_g, auto181D1D0B_var);
            if (auto181D1D0B_var < 0) { break; }
            libNtve_gf_MakeUnitInvulnerable(gv_playerHeroes[auto181D1D0B_var], true);
            UnitSetState(gv_playerHeroes[auto181D1D0B_var], c_unitStateTargetable, false);
            CameraPan(auto181D1D0B_var, UnitGetPosition(gv_mEDEVAC), 0.0, -1, 10, false);
            CameraLookAtUnit(auto181D1D0B_var, gv_mEDEVAC);
            CameraLockInput(auto181D1D0B_var, true);
        }
        Wait(4.0, c_timeGame);
    }
    UnitPauseAll(true);
    gv_pauseSpawning = true;
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00081", 0), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(1.0, c_timeGame);
    autoD0783A17_g = gv_players;
    autoD0783A17_var = -1;
    while (true) {
        autoD0783A17_var = PlayerGroupNextPlayer(autoD0783A17_g, autoD0783A17_var);
        if (autoD0783A17_var < 0) { break; }
        gv_gamesWon[gv_gamemode][autoD0783A17_var] = (gv_gamesWon[gv_gamemode][autoD0783A17_var] + 1);
    }
    gf_DisplayScoreScreen();
    if ((gv_civsExtracted > 0)) {
        gf_SucceedMission((gv_civsExtracted * 2), (StringExternal("Param/Value/E17D32B0") + IntToText(gv_civsExtracted) + StringExternal("Param/Value/9E48EDC8")), 0, false);
    }

    if ((gv_survivalCompleted == true)) {
        gf_SucceedMission(500, StringExternal("Param/Value/5CD63A9A"), 0, false);
    }
    else {
        gf_SucceedMission(250, StringExternal("Param/Value/1FB5B652"), 0, false);
    }
    if ((gv_infestationLevel <= 5)) {
        gf_SucceedMission(250, StringExternal("Param/Value/C9A3305B"), 0, false);
    }
    else if ((gv_infestationLevel <= 15)) {
        gf_SucceedMission(200, StringExternal("Param/Value/0CA32376"), 0, false);
    }
    else if ((gv_infestationLevel <= 25)) {
        gf_SucceedMission(100, StringExternal("Param/Value/B545230A"), 0, false);
    }
    else if ((gv_infestationLevel >= 40) && (gv_infestationLevel <= 59)) {
        gf_SucceedMission(-50, StringExternal("Param/Value/DEF578A7"), 0, false);
    }
    else if ((gv_infestationLevel >= 60) && (gv_infestationLevel <= 99)) {
        gf_SucceedMission(-100, StringExternal("Param/Value/D466001C"), 0, false);
    }
    else if ((gv_infestationLevel >= 100)) {
        gf_SucceedMission(-150, StringExternal("Param/Value/9DA2CACB"), 0, false);
    }
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/0BC4D90A"), 0, true);
    gv_gameWon = true;
    autoB0849090_g = gv_undeadGroup;
    autoB0849090_u = UnitGroupCount(autoB0849090_g, c_unitCountAll);
    for (;; autoB0849090_u -= 1) {
        autoB0849090_var = UnitGroupUnitFromEnd(autoB0849090_g, autoB0849090_u);
        if (autoB0849090_var == null) { break; }
        UnitRemove(autoB0849090_var);
    }
    if ((GameIsOnline() == true)) {
        autoE151D9A9_g = gv_players;
        autoE151D9A9_var = -1;
        while (true) {
            autoE151D9A9_var = PlayerGroupNextPlayer(autoE151D9A9_g, autoE151D9A9_var);
            if (autoE151D9A9_var < 0) { break; }
            gf_UnlockAchievement(autoE151D9A9_var);
        }
    }

    auto6E47569A_g = gv_players;
    auto6E47569A_var = -1;
    while (true) {
        auto6E47569A_var = PlayerGroupNextPlayer(auto6E47569A_g, auto6E47569A_var);
        if (auto6E47569A_var < 0) { break; }
        UIDisplayMessage(PlayerGroupSingle(auto6E47569A_var), c_messageAreaError, StringExternal("Param/Value/2833E094"));
        gf_SavePlayerProgress(auto6E47569A_var);
    }
    gv_gameOver = true;
    Wait(180.0, c_timeGame);
    auto1343BF7A_g = gv_players;
    auto1343BF7A_var = -1;
    while (true) {
        auto1343BF7A_var = PlayerGroupNextPlayer(auto1343BF7A_g, auto1343BF7A_var);
        if (auto1343BF7A_var < 0) { break; }
        GameOver(auto1343BF7A_var, c_gameOverVictory, true, true);
        libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
        SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "Music_EndCreditsA1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThalimHoldoutEnd_Init () {
    gt_ThalimHoldoutEnd = TriggerCreate("gt_ThalimHoldoutEnd_Func");
    TriggerEnable(gt_ThalimHoldoutEnd, false);
    TriggerAddEventTimer(gt_ThalimHoldoutEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over 2
//--------------------------------------------------------------------------------------------------
bool gt_FailGameOver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto1FE5F9AA_g;
    int auto1FE5F9AA_var;
    unitgroup autoDE4A7402_g;
    int autoDE4A7402_u;
    unit autoDE4A7402_var;
    unitgroup autoCA14B2AC_g;
    int autoCA14B2AC_u;
    unit autoCA14B2AC_var;
    playergroup auto3255C3B4_g;
    int auto3255C3B4_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("LOTV_Music_Defeat", 0), PlayerGroupAll(), 100.0, 0.0);
    gv_gameOver = true;
    gv_pauseSpawning = true;
    GameSetMissionTimePaused(true);
    TimerPause(gv_missiontimer, true);
    TimerPause(gv_missiontimer2, true);
    TimerPause(gv_pMCAlertTimer, true);
    TimerPause(gv_bossTimer, true);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    TimerWindowShow(gv_missiontimerwindow2, PlayerGroupAll(), false);
    TimerWindowShow(gv_bossTimerWindow, PlayerGroupAll(), false);
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00084", 0), PlayerGroupAll(), 100.0, 0.0);
    auto1FE5F9AA_g = gv_players;
    auto1FE5F9AA_var = -1;
    while (true) {
        auto1FE5F9AA_var = PlayerGroupNextPlayer(auto1FE5F9AA_g, auto1FE5F9AA_var);
        if (auto1FE5F9AA_var < 0) { break; }
        gv_playerAvgGameTime[auto1FE5F9AA_var] = ((FixedToInt(GameGetMissionTime()) + gv_playerAvgGameTime[auto1FE5F9AA_var]) / 2);
    }
    UnitPauseAll(true);
    autoDE4A7402_g = gv_undeadGroup;
    autoDE4A7402_u = UnitGroupCount(autoDE4A7402_g, c_unitCountAll);
    for (;; autoDE4A7402_u -= 1) {
        autoDE4A7402_var = UnitGroupUnitFromEnd(autoDE4A7402_g, autoDE4A7402_u);
        if (autoDE4A7402_var == null) { break; }
        UnitRemove(autoDE4A7402_var);
    }
    autoCA14B2AC_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCA14B2AC_u = UnitGroupCount(autoCA14B2AC_g, c_unitCountAll);
    for (;; autoCA14B2AC_u -= 1) {
        autoCA14B2AC_var = UnitGroupUnitFromEnd(autoCA14B2AC_g, autoCA14B2AC_u);
        if (autoCA14B2AC_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoCA14B2AC_var, true);
    }
    gf_DisplayScoreScreen();
    auto3255C3B4_g = gv_players;
    auto3255C3B4_var = -1;
    while (true) {
        auto3255C3B4_var = PlayerGroupNextPlayer(auto3255C3B4_g, auto3255C3B4_var);
        if (auto3255C3B4_var < 0) { break; }
        gf_SaveBankSimple(auto3255C3B4_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FailGameOver_Init () {
    gt_FailGameOver = TriggerCreate("gt_FailGameOver_Func");
    TriggerEnable(gt_FailGameOver, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Mode 3
//--------------------------------------------------------------------------------------------------
bool gt_ClassicSurvival_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEA307C1A_g;
    int autoEA307C1A_u;
    unit autoEA307C1A_var;
    playergroup auto459DD925_g;
    int auto459DD925_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RandomFog, true);
    autoEA307C1A_g = UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEA307C1A_u = UnitGroupCount(autoEA307C1A_g, c_unitCountAll);
    for (;; autoEA307C1A_u -= 1) {
        autoEA307C1A_var = UnitGroupUnitFromEnd(autoEA307C1A_g, autoEA307C1A_u);
        if (autoEA307C1A_var == null) { break; }
        gf_FillBunker(autoEA307C1A_var);
    }
    auto459DD925_g = gv_players;
    auto459DD925_var = -1;
    while (true) {
        auto459DD925_var = PlayerGroupNextPlayer(auto459DD925_g, auto459DD925_var);
        if (auto459DD925_var < 0) { break; }
        libNtve_gf_SetAlliance(auto459DD925_var, 15, libNtve_ge_AllianceSetting_Enemy);
    }
    TimerWindowCreate(gv_missiontimer, StringExternal("Param/Value/B6D758E6"), false, false);
    gv_missiontimerwindow = TimerWindowLastCreated();
    UnitIssueOrder(UnitFromId(1238), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1239), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1240), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1241), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1928584749), Order(AbilityCommand("MetalGateStraightVerticalLFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(511), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(425), Order(AbilityCommand("SpacePrisonDoorsThinLeftLowered", 0)), c_orderQueueReplace);
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    gf_StartSpawnLoop(1, gv_loopType);
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/6C99A0B7"));
    Wait(4.5, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/4AC7F9AD"), StringExternal("Param/Value/5B96ED84"), c_objectiveStateActive, true);
    gv_mainObj = ObjectiveLastCreated();
    TriggerEnable(gt_SurvivalIncreasedT2Spawning, true);
    TriggerEnable(gt_ClassicSurvivalTimeout, true);
    TriggerEnable(gt_ClassicSurvival6Min, true);
    TriggerEnable(gt_ClassicSurvival12Min, true);
    TriggerEnable(gt_ClassicSurvival18Min, true);
    TriggerEnable(gt_ClassicSurvival24Min, true);
    TriggerEnable(gt_ClassicSurvival27Min, true);
    Wait(120.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndead(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    Wait(60.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndead(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    TriggerEnable(gt_InitWeaponCaches, true);
    TriggerSendEvent("weapon cache init");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicSurvival_Init () {
    gt_ClassicSurvival = TriggerCreate("gt_ClassicSurvival_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 5 Min 3
//--------------------------------------------------------------------------------------------------
bool gt_ClassicSurvival6Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SurvivalPeriodicXP, true);
    gf_SpawnUndead(1, "Vesania20", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Deceiver", 1);
    Wait(45.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Deceiver", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    if ((gv_averageXP >= 21000)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }

    if ((gv_averageXP >= 75000)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }

    Wait(60.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndead(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    Wait(60.0, c_timeGame);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndead(gv_spawnCount, "Unburied", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicSurvival6Min_Init () {
    gt_ClassicSurvival6Min = TriggerCreate("gt_ClassicSurvival6Min_Func");
    TriggerEnable(gt_ClassicSurvival6Min, false);
    TriggerAddEventTimeElapsed(gt_ClassicSurvival6Min, 360.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 10 Min 3
//--------------------------------------------------------------------------------------------------
bool gt_ClassicSurvival12Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(50, StringExternal("Param/Value/7070A4DB"), -1, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnUndead(1, "Aspectus", 1);
    SoundPlay(SoundLink("Event_Exp1_SnowBeastRoar", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(1, "Ares", 1);
    gf_SpawnUndead(2, "Hunter", 1);
    gf_StartSpawnLoop(2, gv_loopType);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicSurvival12Min_Init () {
    gt_ClassicSurvival12Min = TriggerCreate("gt_ClassicSurvival12Min_Func");
    TriggerEnable(gt_ClassicSurvival12Min, false);
    TriggerAddEventTimeElapsed(gt_ClassicSurvival12Min, 720.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 15 Min 3
//--------------------------------------------------------------------------------------------------
bool gt_ClassicSurvival18Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(75, StringExternal("Param/Value/8EFCA3DA"), -1, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gf_StartSpawnLoop(2, gv_loopType);
    gf_SpawnUndead(1, "Umbra", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(1, "Minerva", 1);
    if ((gv_averageXP >= 12000)) {
        gf_SpawnUndead(1, "Gourmand", 1);
    }
    if ((gv_averageXP >= 33000)) {
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(2, "ZombieYeti", 9);
    }
    Wait(90.0, c_timeGame);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "ZombieYeti", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(1, "Gargantuan", 1);
    Wait(90.0, c_timeGame);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(2, "Immussilus", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicSurvival18Min_Init () {
    gt_ClassicSurvival18Min = TriggerCreate("gt_ClassicSurvival18Min_Func");
    TriggerEnable(gt_ClassicSurvival18Min, false);
    TriggerAddEventTimeElapsed(gt_ClassicSurvival18Min, 1080.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 20 Min 3
//--------------------------------------------------------------------------------------------------
bool gt_ClassicSurvival24Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(100, StringExternal("Param/Value/CD2BAD87"), -1, false);
    TriggerEnable(TriggerGetCurrent(), false);
    gf_StartSpawnLoop(3, gv_loopType);
    SoundPlay(SoundLink("TTosh03BMusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(1, "Ignis20", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(4, "Bruchus", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(3, "Raisuli", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(1, "Gargantuan", 1);
    }
    if ((gv_averageXP >= 70000)) {
        gf_SpawnUndead(1, "Dilophosaur", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }
    Wait(90.0, c_timeGame);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(2, "Immussilus", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    Wait(90.0, c_timeGame);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicSurvival24Min_Init () {
    gt_ClassicSurvival24Min = TriggerCreate("gt_ClassicSurvival24Min_Func");
    TriggerEnable(gt_ClassicSurvival24Min, false);
    TriggerAddEventTimeElapsed(gt_ClassicSurvival24Min, 1440.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 25 Min 3
//--------------------------------------------------------------------------------------------------
bool gt_ClassicSurvival27Min_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(100, StringExternal("Param/Value/C5655AA1"), -1, false);
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/F9379C54"), 0, true);
    TriggerEnable(TriggerGetCurrent(), false);
    gf_SpawnUndead(1, "Cacumen", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndead(1, "ArchVile", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(6, "Glutton", 1);
    gf_SpawnUndead(6, "Glutton", 1);
    gf_SpawnUndead(6, "Glutton", 1);
    gf_SpawnUndead(2, "Apiary", 1);
    if ((gv_averageXP >= 25000)) {
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(6, "Glutton", 1);
        gf_SpawnUndead(2, "Gourmand", 1);
    }
    if ((gv_averageXP >= 30000) && (RandomInt(0, 1) == 1)) {
        gf_SpawnUndead(1, "Minerva", 1);
        gf_SpawnUndead(2, "ZombieYeti", 1);
    }
    else {
        gf_SpawnUndead(1, "Ares", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }
    Wait(60.0, c_timeGame);
    gf_SpawnUndead(2, "Immussilus", 1);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicSurvival27Min_Init () {
    gt_ClassicSurvival27Min = TriggerCreate("gt_ClassicSurvival27Min_Func");
    TriggerEnable(gt_ClassicSurvival27Min, false);
    TriggerAddEventTimeElapsed(gt_ClassicSurvival27Min, 1620.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Mode Timeout 3
//--------------------------------------------------------------------------------------------------
bool gt_ClassicSurvivalTimeout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto437C8567_g;
    int auto437C8567_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_medevacregion = gv_lZs[RandomInt(1, 5)];
    UnitCreate(1, "ColonistShip", 0, 13, PointWithOffset(RegionGetCenter(gv_medevacregion), 0.0, 0.0), libNtve_gf_RandomAngle());
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_mEDEVAC = UnitLastCreated();
    auto437C8567_g = gv_players;
    auto437C8567_var = -1;
    while (true) {
        auto437C8567_var = PlayerGroupNextPlayer(auto437C8567_g, auto437C8567_var);
        if (auto437C8567_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(gv_mEDEVAC, true, auto437C8567_var);
    }
    libNtve_gf_MakeUnitInvulnerable(gv_mEDEVAC, true);
    SoundPlay(SoundLink("TRaynor01MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(gv_missiontimer, 120.0, false, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_medevacregion), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 120.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/27B47CC9"));
    TriggerEnable(gt_ClassicSurvivalEnd, true);
    TriggerEnable(gt_ClassicSurvivalEvacPlayerEnter, true);
    gf_MissionText(StringExternal("Param/Value/36661681"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/FBB0A57D"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicSurvivalTimeout_Init () {
    gt_ClassicSurvivalTimeout = TriggerCreate("gt_ClassicSurvivalTimeout_Func");
    TriggerEnable(gt_ClassicSurvivalTimeout, false);
    TriggerAddEventTimeElapsed(gt_ClassicSurvivalTimeout, 1800.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Evac Player Enter 3
//--------------------------------------------------------------------------------------------------
bool gt_ClassicSurvivalEvacPlayerEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allextracted;

    // Automatic Variable Declarations
    unitgroup autoD8240820_g;
    int autoD8240820_u;
    unit autoD8240820_var;

    // Variable Initialization
    lv_allextracted = true;

    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_medevacregion))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_survivalCompleted = true;
    gv_extractionCount += 1;
    libNtve_gf_PauseUnit(EventUnit(), true);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    autoD8240820_g = gv_heroesGroup;
    autoD8240820_u = UnitGroupCount(autoD8240820_g, c_unitCountAll);
    for (;; autoD8240820_u -= 1) {
        autoD8240820_var = UnitGroupUnitFromEnd(autoD8240820_g, autoD8240820_u);
        if (autoD8240820_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(autoD8240820_var) == false) && (UnitIsAlive(autoD8240820_var) == true)) {
            lv_allextracted = false;
        }
    }
    if ((lv_allextracted == true)) {
        if ((gv_extractionCount == 12)) {
            gv__12ManExtraction = true;
        }
        TriggerExecute(gt_ClassicSurvivalEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicSurvivalEvacPlayerEnter_Init () {
    gt_ClassicSurvivalEvacPlayerEnter = TriggerCreate("gt_ClassicSurvivalEvacPlayerEnter_Func");
    TriggerEnable(gt_ClassicSurvivalEvacPlayerEnter, false);
    TriggerAddEventUnitRegion(gt_ClassicSurvivalEvacPlayerEnter, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_ClassicSurvivalEvacPlayerEnter, null, RegionFromId(13), false);
    TriggerAddEventUnitRegion(gt_ClassicSurvivalEvacPlayerEnter, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_ClassicSurvivalEvacPlayerEnter, null, RegionFromId(15), false);
    TriggerAddEventUnitRegion(gt_ClassicSurvivalEvacPlayerEnter, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_ClassicSurvivalEvacPlayerEnter, null, RegionFromId(14), false);
    TriggerAddEventUnitRegion(gt_ClassicSurvivalEvacPlayerEnter, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_ClassicSurvivalEvacPlayerEnter, null, RegionFromId(16), false);
    TriggerAddEventUnitRegion(gt_ClassicSurvivalEvacPlayerEnter, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_ClassicSurvivalEvacPlayerEnter, null, RegionFromId(6), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival End 3
//--------------------------------------------------------------------------------------------------
bool gt_ClassicSurvivalEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCD6DAEAF_g;
    int autoCD6DAEAF_var;
    unitgroup auto9AE3F061_g;
    int auto9AE3F061_u;
    unit auto9AE3F061_var;
    playergroup autoDA93A782_g;
    int autoDA93A782_var;
    playergroup autoCB034C0B_g;
    int autoCB034C0B_var;
    playergroup auto5FF2B40A_g;
    int auto5FF2B40A_var;
    playergroup auto74DDA64A_g;
    int auto74DDA64A_var;
    playergroup autoFCE3EBBD_g;
    int autoFCE3EBBD_var;
    playergroup auto050ABE04_g;
    int auto050ABE04_var;
    unitgroup auto87590ECE_g;
    int auto87590ECE_u;
    unit auto87590ECE_var;
    playergroup auto9807E626_g;
    int auto9807E626_var;
    playergroup autoAD4B8E47_g;
    int autoAD4B8E47_var;
    playergroup autoF4713AB1_g;
    int autoF4713AB1_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_victory = true;
    TriggerEnable(gt_ClassicSurvivalEvacPlayerEnter, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroyAll();
    SoundPlay(SoundLink("TRaynor01MusicOutro", -1), PlayerGroupAll(), 100.0, 0.0);
    if (gv_HyperPulseT1Acc)
    {
        gf_SucceedMission(600, StringToText("HyperPulse T1 PASS"), 0, true);
        SoundPlay(SoundLink("TESTPASS", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (gv_HyperPulseAcc)
    {
        gf_SucceedMission(200, StringToText("HyperPulse T2|T3 PASS"), 0, true);
        SoundPlay(SoundLink("TESTPASS", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    if ((gv_startingplayers == 1)) {
        auto9AE3F061_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9AE3F061_u = UnitGroupCount(auto9AE3F061_g, c_unitCountAll);
        for (;; auto9AE3F061_u -= 1) {
            auto9AE3F061_var = UnitGroupUnitFromEnd(auto9AE3F061_g, auto9AE3F061_u);
            if (auto9AE3F061_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto9AE3F061_var, true);
        }
        UnitRemove(gv_mEDEVAC);
    }
    else {
        autoCD6DAEAF_g = gv_players;
        autoCD6DAEAF_var = -1;
        while (true) {
            autoCD6DAEAF_var = PlayerGroupNextPlayer(autoCD6DAEAF_g, autoCD6DAEAF_var);
            if (autoCD6DAEAF_var < 0) { break; }
            libNtve_gf_MakeUnitInvulnerable(gv_playerHeroes[autoCD6DAEAF_var], true);
            UnitSetState(gv_playerHeroes[autoCD6DAEAF_var], c_unitStateTargetable, false);
            CameraPan(autoCD6DAEAF_var, UnitGetPosition(gv_mEDEVAC), 0.0, -1, 10, false);
            CameraLookAtUnit(autoCD6DAEAF_var, gv_mEDEVAC);
            CameraLockInput(autoCD6DAEAF_var, true);
        }
        UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(7.0, c_timeGame);
        UnitRemove(gv_mEDEVAC);
    }
    UnitPauseAll(true);
    gv_pauseSpawning = true;
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00081", 0), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(1.0, c_timeGame);
    autoDA93A782_g = gv_players;
    autoDA93A782_var = -1;
    while (true) {
        autoDA93A782_var = PlayerGroupNextPlayer(autoDA93A782_g, autoDA93A782_var);
        if (autoDA93A782_var < 0) { break; }
        gv_gamesWon[gv_gamemode][autoDA93A782_var] = (gv_gamesWon[gv_gamemode][autoDA93A782_var] + 1);
    }
    gf_DisplayScoreScreen();
    if ((gv_mod_rifle == true) && (GameIsOnline() == true)) {
        autoCB034C0B_g = gv_players;
        autoCB034C0B_var = -1;
        while (true) {
            autoCB034C0B_var = PlayerGroupNextPlayer(autoCB034C0B_g, autoCB034C0B_var);
            if (autoCB034C0B_var < 0) { break; }
            if ((gv_playercamounlocked[8][autoCB034C0B_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoCB034C0B_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoCB034C0B_var), c_messageAreaSubtitle, StringExternal("Param/Value/099A64D2"));
                gv_playercamounlocked[8][autoCB034C0B_var] = true;
            }

        }
    }

    auto5FF2B40A_g = gv_players;
    auto5FF2B40A_var = -1;
    while (true) {
        auto5FF2B40A_var = PlayerGroupNextPlayer(auto5FF2B40A_g, auto5FF2B40A_var);
        if (auto5FF2B40A_var < 0) { break; }
        if ((gv_playerdecalunlocked[2][auto5FF2B40A_var] == false) && (GameIsOnline() == true)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto5FF2B40A_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto5FF2B40A_var), c_messageAreaSubtitle, StringExternal("Param/Value/34724715"));
            gv_playerdecalunlocked[2][auto5FF2B40A_var] = true;
        }

    }
    if ((gv_startingplayers <= 4) && (gv_startingplayers >= 2) && (gv_mod_tier3 == false) && (GameIsOnline() == true)) {
        auto74DDA64A_g = gv_players;
        auto74DDA64A_var = -1;
        while (true) {
            auto74DDA64A_var = PlayerGroupNextPlayer(auto74DDA64A_g, auto74DDA64A_var);
            if (auto74DDA64A_var < 0) { break; }
            if ((gv_playercamounlocked[14][auto74DDA64A_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto74DDA64A_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto74DDA64A_var), c_messageAreaSubtitle, StringExternal("Param/Value/00FA6E9E"));
                gv_playercamounlocked[14][auto74DDA64A_var] = true;
            }

        }
    }

    if ((gv_startingplayers == 12) && (gv_mod_tier1 == true) && (gv_mod_1life == true) && (GameIsOnline() == true)) {
        autoFCE3EBBD_g = gv_players;
        autoFCE3EBBD_var = -1;
        while (true) {
            autoFCE3EBBD_var = PlayerGroupNextPlayer(autoFCE3EBBD_g, autoFCE3EBBD_var);
            if (autoFCE3EBBD_var < 0) { break; }
            if ((gv_playercamounlocked[17][autoFCE3EBBD_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(autoFCE3EBBD_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(autoFCE3EBBD_var), c_messageAreaSubtitle, StringExternal("Param/Value/05E343C1"));
                gv_playercamounlocked[17][autoFCE3EBBD_var] = true;
            }

        }
    }

    if ((gv_startingplayers == 1) && (gv_mod_tier1 == true) && (GameIsOnline() == true)) {
        auto050ABE04_g = gv_players;
        auto050ABE04_var = -1;
        while (true) {
            auto050ABE04_var = PlayerGroupNextPlayer(auto050ABE04_g, auto050ABE04_var);
            if (auto050ABE04_var < 0) { break; }
            if ((gv_playerdecalunlocked[4][auto050ABE04_var] == false)) {
                SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto050ABE04_var), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(auto050ABE04_var), c_messageAreaSubtitle, StringExternal("Param/Value/16E69879"));
                gv_playerdecalunlocked[4][auto050ABE04_var] = true;
            }

        }
    }

    if ((gv_survivalCompleted == true)) {
        gf_SucceedMission(500, StringExternal("Param/Value/A7829A71"), 0, false);
    }
    else {
        gf_SucceedMission(250, StringExternal("Param/Value/510E3B6A"), 0, false);
    }
    if ((gv_infestationLevel <= 5)) {
        gf_SucceedMission(250, StringExternal("Param/Value/5F0C8BA3"), 0, false);
    }
    else if ((gv_infestationLevel <= 15)) {
        gf_SucceedMission(150, StringExternal("Param/Value/459924C1"), 0, false);
    }
    else if ((gv_infestationLevel <= 25)) {
        gf_SucceedMission(100, StringExternal("Param/Value/C81F9A86"), 0, false);
    }
    else if ((gv_infestationLevel >= 40) && (gv_infestationLevel <= 59)) {
        gf_SucceedMission(-50, StringExternal("Param/Value/8A42D9B8"), 0, false);
    }
    else if ((gv_infestationLevel >= 60) && (gv_infestationLevel <= 99)) {
        gf_SucceedMission(-100, StringExternal("Param/Value/8925AFA1"), 0, false);
    }
    else if ((gv_infestationLevel >= 100)) {
        gf_SucceedMission(-150, StringExternal("Param/Value/3D46BC3D"), 0, false);
    }
    gf_SucceedMission(gv_bonusXpGained, StringExternal("Param/Value/652A4A57"), 0, true);
    gv_gameWon = true;
    auto87590ECE_g = gv_undeadGroup;
    auto87590ECE_u = UnitGroupCount(auto87590ECE_g, c_unitCountAll);
    for (;; auto87590ECE_u -= 1) {
        auto87590ECE_var = UnitGroupUnitFromEnd(auto87590ECE_g, auto87590ECE_u);
        if (auto87590ECE_var == null) { break; }
        UnitRemove(auto87590ECE_var);
    }
    if ((GameIsOnline() == true)) {
        auto9807E626_g = gv_players;
        auto9807E626_var = -1;
        while (true) {
            auto9807E626_var = PlayerGroupNextPlayer(auto9807E626_g, auto9807E626_var);
            if (auto9807E626_var < 0) { break; }
            gf_UnlockAchievement(auto9807E626_var);
        }
    }

    autoAD4B8E47_g = gv_players;
    autoAD4B8E47_var = -1;
    while (true) {
        autoAD4B8E47_var = PlayerGroupNextPlayer(autoAD4B8E47_g, autoAD4B8E47_var);
        if (autoAD4B8E47_var < 0) { break; }
        UIDisplayMessage(PlayerGroupSingle(autoAD4B8E47_var), c_messageAreaError, StringExternal("Param/Value/CAE35296"));
        gf_SavePlayerProgress(autoAD4B8E47_var);
    }
    gv_gameOver = true;
    Wait(180.0, c_timeGame);
    autoF4713AB1_g = gv_players;
    autoF4713AB1_var = -1;
    while (true) {
        autoF4713AB1_var = PlayerGroupNextPlayer(autoF4713AB1_g, autoF4713AB1_var);
        if (autoF4713AB1_var < 0) { break; }
        GameOver(autoF4713AB1_var, c_gameOverVictory, true, true);
        libHots_gf_StopSoundLinkCurrentlyPlayingasMusic();
        SoundtrackPlay(gv_players, c_soundtrackCategoryMusic, "Music_EndCreditsA1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicSurvivalEnd_Init () {
    gt_ClassicSurvivalEnd = TriggerCreate("gt_ClassicSurvivalEnd_Func");
    TriggerEnable(gt_ClassicSurvivalEnd, false);
    TriggerAddEventTimer(gt_ClassicSurvivalEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Police Patrol Loop
//--------------------------------------------------------------------------------------------------
bool gt_PolicePatrolLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_z;

    // Automatic Variable Declarations
    const int autoEE56DEF3_ae = 3;
    const int autoEE56DEF3_ai = 1;
    const int autoCDD224E0_ae = 3;
    const int autoCDD224E0_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_int = 1;
    for ( ; ( (autoEE56DEF3_ai >= 0 && lv_int <= autoEE56DEF3_ae) || (autoEE56DEF3_ai < 0 && lv_int >= autoEE56DEF3_ae) ) ; lv_int += autoEE56DEF3_ai ) {
        if ((libNtve_gf_UnitGroupIsDead(gv_policePatrols[lv_int].lv_group) == false)) {
            if ((DistanceBetweenPoints(gv_policePatrols[lv_int].lv_route[gv_policePatrols[lv_int].lv_routenext], UnitGetPosition(UnitGroupRandomUnit(gv_policePatrols[lv_int].lv_group, c_unitCountAlive))) <= 4.0)) {
                if ((gv_policePatrols[lv_int].lv_routenext == gv_policePatrols[lv_int].lv_routemax)) {
                    gv_policePatrols[lv_int].lv_routenext = (gv_policePatrols[lv_int].lv_routenext - 1);
                    gv_policePatrols[lv_int].lv_returning = true;
                }
                else {
                    if ((gv_policePatrols[lv_int].lv_returning == true)) {
                        gv_policePatrols[lv_int].lv_routenext = (gv_policePatrols[lv_int].lv_routenext - 1);
                        if ((gv_policePatrols[lv_int].lv_routenext == 0)) {
                            gv_policePatrols[lv_int].lv_returning = false;
                        }
                    }
                    else {
                        gv_policePatrols[lv_int].lv_routenext = (gv_policePatrols[lv_int].lv_routenext + 1);
                    }
                }
            }
            UnitGroupIssueOrder(gv_policePatrols[lv_int].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), gv_policePatrols[lv_int].lv_route[gv_policePatrols[lv_int].lv_routenext]), c_orderQueueReplace);
        }
    }
    lv_int = 1;
    for ( ; ( (autoCDD224E0_ai >= 0 && lv_int <= autoCDD224E0_ae) || (autoCDD224E0_ai < 0 && lv_int >= autoCDD224E0_ae) ) ; lv_int += autoCDD224E0_ai ) {
        if ((libNtve_gf_UnitGroupIsDead(gv_policePatrols[lv_int].lv_group) == true)) {
            lv_z += 1;
            if ((lv_z == 3)) {
                TriggerEnable(TriggerGetCurrent(), false);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PolicePatrolLoop_Init () {
    gt_PolicePatrolLoop = TriggerCreate("gt_PolicePatrolLoop_Func");
    TriggerEnable(gt_PolicePatrolLoop, false);
    TriggerAddEventTimePeriodic(gt_PolicePatrolLoop, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Police Decal
//--------------------------------------------------------------------------------------------------
bool gt_PoliceDecal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto71CC8EAE_g;
    int auto71CC8EAE_u;
    unit auto71CC8EAE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto71CC8EAE_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto71CC8EAE_u = UnitGroupCount(auto71CC8EAE_g, c_unitCountAll);
    for (;; auto71CC8EAE_u -= 1) {
        auto71CC8EAE_var = UnitGroupUnitFromEnd(auto71CC8EAE_g, auto71CC8EAE_u);
        if (auto71CC8EAE_var == null) { break; }
        if (((UnitGetType(auto71CC8EAE_var) == "PoliceOfficer") || (UnitGetType(auto71CC8EAE_var) == "PoliceOfficerShotgun"))) {
            ActorSend(libNtve_gf_MainActorofUnit(auto71CC8EAE_var), "TextureSelectById PoliceDecal");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PoliceDecal_Init () {
    gt_PoliceDecal = TriggerCreate("gt_PoliceDecal_Func");
    TriggerAddEventTimeElapsed(gt_PoliceDecal, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_InitBanks();
    gf_InitializeGameSetup();
    libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
    gf_InitializeCivilians();
    gf_InitializeRankVars();
    gf_InitializeSIVars();
    gf_InitializeMiniVars();
    gf_InitializeItemVars();
    gf_InitializeHeroVars();
    gf_InitializeAilmentVars();
    gf_InitializeAchievementVars();
    gf_CreateUnlockableDialog();
    gf_CreateSIDialog();
    gf_CreateBorgWeaponDialog();
    gf_CreateVisorTextDialog();
    gf_CreateInfoDialog();
    gf_CreateInventoryDialog();
    gf_CreateItemScannerDialog();
    gf_CreateBattleBuddyDialog();
    gf_UICreateC2ABBehaviorsC2BB();
    gf_CreateAccessoryDialog();
    libNtve_gf_PreloadSoundtrack("Music_GeneralLoop", false);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_GeneralLoop", c_soundtrackCueAny, c_soundtrackIndexAny);
    gf_InitializeAmmoSprintBar();
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
            gv_backimg = DialogLastCreated();
            DialogSetFullscreen(gv_backimg, true);
            DialogSetImageVisible(gv_backimg, false);
            DialogControlCreateFromTemplate(gv_backimg, c_triggerControlTypePanel, "MenuBackGroundTemplate/GridBGTemplate");
            gv_backimg2 = DialogControlLastCreated();
            DialogSetVisible(gv_backimg, PlayerGroupAll(), true);
            DialogControlSetVisible(gv_backimg2, PlayerGroupAll(), true);
            DialogControlSendAnimationEvent(gv_backimg2, PlayerGroupAll(), "StartShimmer");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Ghost Skills & ISR 2
//--------------------------------------------------------------------------------------------------
bool gt_ISRTowerLoop_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[12] lv_isrPings;
    int lv_currentCount;
    int lv_loopint;
    int lv_maxCount;
    int lv_isrActiveCount;

    // Automatic Variable Declarations
    const int auto989A5688_ae = 11;
    const int auto989A5688_ai = 1;
    playergroup autoF192F228_g;
    int autoF192F228_var;
    unitgroup auto652D6CC1_g;
    int auto652D6CC1_u;
    unit auto652D6CC1_var;
    unitgroup auto5F776E79_g;
    int auto5F776E79_u;
    unit auto5F776E79_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 11; init_i += 1) {
        lv_isrPings[init_i] = c_invalidPingId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((gv_allowISR)) {
            lv_isrActiveCount = 0;
            lv_loopint = 1;
            for ( ; ( (auto989A5688_ai >= 0 && lv_loopint <= auto989A5688_ae) || (auto989A5688_ai < 0 && lv_loopint >= auto989A5688_ae) ) ; lv_loopint += auto989A5688_ai ) {
                if ((UnitBehaviorCount(gv_isrTowers[lv_loopint], "ISRTowerActive") == 1)) {
                    lv_isrActiveCount += 1;
                    if ((lv_isrPings[lv_loopint] == c_invalidPingId)) {
                        PingCreate(PlayerGroupAll(), "PingSmall", gv_isrLocations[lv_loopint], ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0);
                        PingSetScale(PingLastCreated(), 0.5);
                        lv_isrPings[lv_loopint] = PingLastCreated();
                    }

                }
                else {
                    PingDestroy(lv_isrPings[lv_loopint]);
                    lv_isrPings[lv_loopint] = c_invalidPingId;
                }
            }
            lv_maxCount = (60 - (lv_isrActiveCount * 4));
            if ((lv_isrActiveCount >= 10)) {
                autoF192F228_g = PlayerGroupAll();
                autoF192F228_var = -1;
                while (true) {
                    autoF192F228_var = PlayerGroupNextPlayer(autoF192F228_g, autoF192F228_var);
                    if (autoF192F228_var < 0) { break; }
                    VisExploreArea(autoF192F228_var, RegionEntireMap(), true, false);
                }
            }

            if ((lv_isrActiveCount >= 3)) {
                lv_currentCount += 1;
                if ((lv_currentCount >= lv_maxCount)) {
                    lv_currentCount = 0;
                    auto652D6CC1_g = UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                    auto652D6CC1_u = UnitGroupCount(auto652D6CC1_g, c_unitCountAll);
                    for (;; auto652D6CC1_u -= 1) {
                        auto652D6CC1_var = UnitGroupUnitFromEnd(auto652D6CC1_g, auto652D6CC1_u);
                        if (auto652D6CC1_var == null) { break; }
                        if ((UnitGroupHasUnit(gv_pMCBossGroup, auto652D6CC1_var) == false) && (UnitHasBehavior2(auto652D6CC1_var, "AntiISR") == false)) {
                            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(auto652D6CC1_var), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 3.0, 270.0);
                            PingSetScale(PingLastCreated(), 0.75);
                            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/2E580C0F"));
                        }
                    }
                    auto5F776E79_g = UnitGroup(null, 15, RegionEntireMap(), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                    auto5F776E79_u = UnitGroupCount(auto5F776E79_g, c_unitCountAll);
                    for (;; auto5F776E79_u -= 1) {
                        auto5F776E79_var = UnitGroupUnitFromEnd(auto5F776E79_g, auto5F776E79_u);
                        if (auto5F776E79_var == null) { break; }
                        if ((UnitHasBehavior2(auto5F776E79_var, "AntiISR") == false)) {
                            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(auto5F776E79_var), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 3.0, 270.0);
                            PingSetScale(PingLastCreated(), 0.75);
                            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1705933C"));
                        }
                    }
                }

            }

        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ISRTowerLoop_Init () {
    gt_ISRTowerLoop = TriggerCreate("gt_ISRTowerLoop_Func");
    TriggerAddEventTimeElapsed(gt_ISRTowerLoop, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Item Picked Up
//--------------------------------------------------------------------------------------------------
bool gt_MissionItemPickedUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    unit lv_item;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());
    lv_item = EventUnitInventoryItem();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_players, lv_owner) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_missionItemPingItems, lv_item) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionItemCarried(lv_item, lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionItemPickedUp_Init () {
    gt_MissionItemPickedUp = TriggerCreate("gt_MissionItemPickedUp_Func");
    TriggerAddEventUnitInventoryChange(gt_MissionItemPickedUp, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_MissionItemPickedUp, null, c_unitInventoryChangeReceives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Item Dropped
//--------------------------------------------------------------------------------------------------
bool gt_MissionItemDropped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    unit lv_item;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());
    lv_item = EventUnitInventoryItem();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_missionItemPingItems, lv_item) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionItemDropped(lv_owner, lv_item);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionItemDropped_Init () {
    gt_MissionItemDropped = TriggerCreate("gt_MissionItemDropped_Func");
    TriggerAddEventUnitInventoryChange(gt_MissionItemDropped, null, c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(gt_MissionItemDropped, null, c_unitInventoryChangeLoses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 002
//--------------------------------------------------------------------------------------------------
bool gt_PingHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    libLbty_gv_pingRecentCount[lv_player] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingHandler_Init () {
    gt_PingHandler = TriggerCreate("gt_PingHandler_Func");
    TriggerAddEventPing(gt_PingHandler, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swamp Slow Enter
//--------------------------------------------------------------------------------------------------
bool gt_SwampSlowEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "BioSuit") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaShield2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaShield3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaShield1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaShield4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaBubble") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaShieldMini") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaShieldIgnis") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "StonewallProtocol") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Immunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "RegendareDefensiveTactics3") == false))) {
            return false;
        }

        if (!((UnitMoverExists(EventUnit(), "Fly") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "ImprovedNanoImmunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "ImprovedPlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmicShield") == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "SwampSlowI", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwampSlowEnter_Init () {
    gt_SwampSlowEnter = TriggerCreate("gt_SwampSlowEnter_Func");
    TriggerAddEventUnitRegion(gt_SwampSlowEnter, null, RegionFromId(267), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swamp Slow Exit
//--------------------------------------------------------------------------------------------------
bool gt_SwampSlowExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "SwampSlowI", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwampSlowExit_Init () {
    gt_SwampSlowExit = TriggerCreate("gt_SwampSlowExit_Func");
    TriggerAddEventUnitRegion(gt_SwampSlowExit, null, RegionFromId(267), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Random Fog
//--------------------------------------------------------------------------------------------------
bool gt_RandomFog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((RandomInt(1, 6) == 3))) {
            return false;
        }

        if (!((gv_gamemode != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_fogevent == false))) {
        Wait(1.0, c_timeGame);
    }
    gv_fogevent = true;
    gf_BlendFog(50.0, 50.0, 50.0, 3.0, 1.0, 8.0, 18.75);
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/88EAE556"));
    Wait(RandomFixed(200.0, 480.0), c_timeGame);
    gf_BlendFog(50.0, 50.0, 50.0, 0.0, 1.0, 0.0, 18.75);
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/895D4D26"));
    gv_fogevent = false;
    if ((gv_mod_Weather == true)) {
        Wait(500.0, c_timeGame);
        while ((gv_fogevent == false)) {
            lv_random = RandomInt(1, 5);
            if ((lv_random == 3)) {
                gv_fogevent = true;
            }
            Wait(RandomFixed(60.0, 1000.0), c_timeGame);
        }
        gf_BlendFog(50.0, 50.0, 50.0, 3.0, 1.0, 8.0, 18.75);
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/2FB65A04"));
        Wait(RandomFixed(200.0, 480.0), c_timeGame);
        gf_BlendFog(50.0, 50.0, 50.0, 0.0, 1.0, 0.0, 18.75);
        Wait(5.0, c_timeGame);
        lv_hero = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
        gf_MissionText(StringExternal("Param/Value/FEBE8326"));
        gv_fogevent = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RandomFog_Init () {
    gt_RandomFog = TriggerCreate("gt_RandomFog_Func");
    TriggerEnable(gt_RandomFog, false);
    TriggerAddEventTimeElapsed(gt_RandomFog, RandomFixed(60.0, 3000.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weather Thunder Storm Effect
//--------------------------------------------------------------------------------------------------
bool gt_WeatherThunderStormEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    sound lv_rainsound;
    actor[13] lv_weatheremitters;
    timer lv_durationtimer;

    // Automatic Variable Declarations
    const int autoDE4CA4B6_ae = 12;
    const int autoDE4CA4B6_ai = 1;
    unitgroup auto5F9A7C2C_g;
    int auto5F9A7C2C_u;
    unit auto5F9A7C2C_var;
    const int auto8A583D74_ae = 12;
    const int auto8A583D74_ai = 1;
    unitgroup auto218B57E5_g;
    int auto218B57E5_u;
    unit auto218B57E5_var;
    const int auto8B8E73B7_ae = 12;
    const int auto8B8E73B7_ai = 1;

    // Variable Initialization
    lv_durationtimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((RandomInt(1, 8) == 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
     if (!gv_LUNATICEnable)
        {
            gv_RHPDeltaFadeTarget = 60.0;
            gv_RHPDeltaFadeSpeed025s = 0.13;
            Wait(100.0, c_timeGame);
        }
        gv_TempDeltaFadeTarget -= 5.0;
    TimerStart(lv_durationtimer, 30.0, false, c_timeGame);
    if ((gv_fakeweather == false)) {
        gf_MissionText(StringExternal("Param/Value/4CBC695E"));
    }
    TimerStart(lv_durationtimer, RandomFixed(300.0, 600.0), false, c_timeGame);
    SoundPlay(SoundLink("Ambience_TRaynor03Rain", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_rainsound = SoundLastPlayed();
    gv_jamChance = 6;
    gf_EventsPoolKillToken("Weather");
    if ((gv_fakeweather == false)) {
        gf_EventSetToken(gf_EventSetWriteOut(gf_RaiseEvent(StringToText(gv_PurpleText + "Current Weather:" + "</n>" + "Thunderstorm"), 1, TimerGetRemaining(lv_durationtimer)), true, 1.0), "Weather");
        TriggerEnable(gt_SuitMalfunctionChance, true);
    }
    if ((gv_fakeweather == true)) {
        gf_EventSetToken(gf_EventSetWriteOut(gf_RaiseEvent(StringToText(gv_YellowText + "Current Weather:" + "</n>" + "Rain"), 1, TimerGetRemaining(lv_durationtimer)), true, 1.0), "Weather");
    }
    while (true) {
        if (((gv_weatherstopImme == true) || (TimerGetRemaining(lv_durationtimer) <= 1.0))) {
            gv_weatherstopImme = false;
            lv_loopint = 1;
            for ( ; ( (autoDE4CA4B6_ai >= 0 && lv_loopint <= autoDE4CA4B6_ae) || (autoDE4CA4B6_ai < 0 && lv_loopint >= autoDE4CA4B6_ae) ) ; lv_loopint += autoDE4CA4B6_ai ) {
                libNtve_gf_KillModel(lv_weatheremitters[lv_loopint]);
            }
            auto5F9A7C2C_g = UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterGround) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto5F9A7C2C_u = UnitGroupCount(auto5F9A7C2C_g, c_unitCountAll);
            for (;; auto5F9A7C2C_u -= 1) {
                auto5F9A7C2C_var = UnitGroupUnitFromEnd(auto5F9A7C2C_g, auto5F9A7C2C_u);
                if (auto5F9A7C2C_var == null) { break; }
                UnitBehaviorRemove(auto5F9A7C2C_var, "Thunderstorm", 1);
            }
            break;
        }
        lv_loopint = 1;
        for ( ; ( (auto8A583D74_ai >= 0 && lv_loopint <= auto8A583D74_ae) || (auto8A583D74_ai < 0 && lv_loopint >= auto8A583D74_ae) ) ; lv_loopint += auto8A583D74_ai ) {
            libNtve_gf_CreateModelAtPoint("RainEmitterLarge", CameraGetTarget(lv_loopint));
            lv_weatheremitters[lv_loopint] = libNtve_gf_ActorLastCreated();
        }
        auto218B57E5_g = UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterAir) | (1 << c_targetFilterBiological), 0, (1 << c_targetFilterGround) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto218B57E5_u = UnitGroupCount(auto218B57E5_g, c_unitCountAll);
        for (;; auto218B57E5_u -= 1) {
            auto218B57E5_var = UnitGroupUnitFromEnd(auto218B57E5_g, auto218B57E5_u);
            if (auto218B57E5_var == null) { break; }
            if ((gv_fakeweather == false)) {
                UnitBehaviorAdd(auto218B57E5_var, "Thunderstorm", auto218B57E5_var, 1);
            }
        }
        if ((RandomInt(1, 10) == 5)) {
            SoundPlay(SoundLink("Ambience_Thunder_OneShot", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        Wait(1.5, c_timeGame);
        lv_loopint = 1;
        for ( ; ( (auto8B8E73B7_ai >= 0 && lv_loopint <= auto8B8E73B7_ae) || (auto8B8E73B7_ai < 0 && lv_loopint >= auto8B8E73B7_ae) ) ; lv_loopint += auto8B8E73B7_ai ) {
            libNtve_gf_KillModel(lv_weatheremitters[lv_loopint]);
        }
    }
    if ((gv_fakeweather == false)) {
        gf_MissionText(StringExternal("Param/Value/F2222EF4"));
    }
    SoundStop(lv_rainsound, true);
    gv_jamChance = 7;
    TriggerEnable(gt_SuitMalfunctionChance, false);
    gv_RHPDeltaFadeTarget = 20.0;
        gv_RHPDeltaFadeSpeed025s = 0.04;
        gv_TempDeltaFadeTarget += 5.0;
        gf_EventsPoolKillToken("Weather");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeatherThunderStormEffect_Init () {
    gt_WeatherThunderStormEffect = TriggerCreate("gt_WeatherThunderStormEffect_Func");
    TriggerAddEventTimePeriodic(gt_WeatherThunderStormEffect, RandomFixed(600.0, 1080.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Suit Malfunction Chance
//--------------------------------------------------------------------------------------------------
bool gt_SuitMalfunctionChance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor[13] lv_actor;

    // Automatic Variable Declarations
    unitgroup auto6504DF4D_g;
    int auto6504DF4D_u;
    unit auto6504DF4D_var;
    unitgroup auto52D025B2_g;
    int auto52D025B2_u;
    unit auto52D025B2_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((libNtve_gf_RandomPercent() <= 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6504DF4D_g = gv_heroesGroup;
    auto6504DF4D_u = UnitGroupCount(auto6504DF4D_g, c_unitCountAll);
    for (;; auto6504DF4D_u -= 1) {
        auto6504DF4D_var = UnitGroupUnitFromEnd(auto6504DF4D_g, auto6504DF4D_u);
        if (auto6504DF4D_var == null) { break; }
        if ((UnitIsAlive(auto6504DF4D_var) == true)) {
            UnitBehaviorAdd(auto6504DF4D_var, "SuitMalfunction", auto6504DF4D_var, 1);
            libNtve_gf_AttachModelToUnit(auto6504DF4D_var, "ElectricalArcs", "Ref_Center");
            lv_actor[UnitGetOwner(auto6504DF4D_var)] = libNtve_gf_ActorLastCreated();
            ActorSend(lv_actor[UnitGetOwner(auto6504DF4D_var)], "SetScale 0.500000 0.000000 s");
            SoundPlayOnUnit(SoundLink("zLab_DebrisElectricSparks", -1), PlayerGroupAll(), auto6504DF4D_var, 0.0, 100.0, 0.0);
        }
    }
    Wait(15.0, c_timeGame);
    auto52D025B2_g = gv_heroesGroup;
    auto52D025B2_u = UnitGroupCount(auto52D025B2_g, c_unitCountAll);
    for (;; auto52D025B2_u -= 1) {
        auto52D025B2_var = UnitGroupUnitFromEnd(auto52D025B2_g, auto52D025B2_u);
        if (auto52D025B2_var == null) { break; }
        SoundPlayOnUnit(SoundLink("Amb_Protoss_Electrical_Arc2", -1), PlayerGroupAll(), auto52D025B2_var, 0.0, 100.0, 0.0);
        libNtve_gf_KillModel(lv_actor[UnitGetOwner(auto52D025B2_var)]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SuitMalfunctionChance_Init () {
    gt_SuitMalfunctionChance = TriggerCreate("gt_SuitMalfunctionChance_Func");
    TriggerEnable(gt_SuitMalfunctionChance, false);
    TriggerAddEventTimePeriodic(gt_SuitMalfunctionChance, RandomFixed(30.0, 45.0), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Random Fog Intense
//--------------------------------------------------------------------------------------------------
bool gt_RandomFogIntense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_gamemode != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_fogevent == false))) {
        Wait(1.0, c_timeGame);
    }
    gv_fogevent = true;
    gf_BlendFog(50.0, 50.0, 50.0, 3.0, 1.0, 8.0, 18.75);
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/C9BB81B3"));
    Wait(RandomFixed(200.0, 480.0), c_timeGame);
    gf_BlendFog(50.0, 50.0, 50.0, 0.0, 1.0, 0.0, 18.75);
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/9D1C77BA"));
    gv_fogevent = false;
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RandomFogIntense_Init () {
    gt_RandomFogIntense = TriggerCreate("gt_RandomFogIntense_Func");
    TriggerEnable(gt_RandomFogIntense, false);
    TriggerAddEventTimePeriodic(gt_RandomFogIntense, RandomFixed(200.0, 300.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Suit Malfunction Chance (Intense)
//--------------------------------------------------------------------------------------------------
bool gt_SuitMalfunctionChanceIntense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor[13] lv_actor;

    // Automatic Variable Declarations
    unitgroup auto03C57E65_g;
    int auto03C57E65_u;
    unit auto03C57E65_var;
    unitgroup auto7BFE354A_g;
    int auto7BFE354A_u;
    unit auto7BFE354A_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((((gv_gamemode != 9) && (libNtve_gf_RandomPercent() <= 25.0)) || ((gv_gamemode == 9) && (libNtve_gf_RandomPercent() <= 12.5))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto03C57E65_g = gv_heroesGroup;
    auto03C57E65_u = UnitGroupCount(auto03C57E65_g, c_unitCountAll);
    for (;; auto03C57E65_u -= 1) {
        auto03C57E65_var = UnitGroupUnitFromEnd(auto03C57E65_g, auto03C57E65_u);
        if (auto03C57E65_var == null) { break; }
        if ((UnitIsAlive(auto03C57E65_var) == true)) {
            UnitBehaviorAdd(auto03C57E65_var, "SuitMalfunction", auto03C57E65_var, 1);
            libNtve_gf_AttachModelToUnit(auto03C57E65_var, "ElectricalArcs", "Ref_Center");
            lv_actor[UnitGetOwner(auto03C57E65_var)] = libNtve_gf_ActorLastCreated();
            ActorSend(lv_actor[UnitGetOwner(auto03C57E65_var)], "SetScale 0.500000 0.000000 s");
            SoundPlayOnUnit(SoundLink("zLab_DebrisElectricSparks", -1), PlayerGroupAll(), auto03C57E65_var, 0.0, 100.0, 0.0);
        }
    }
    Wait(15.0, c_timeGame);
    auto7BFE354A_g = gv_heroesGroup;
    auto7BFE354A_u = UnitGroupCount(auto7BFE354A_g, c_unitCountAll);
    for (;; auto7BFE354A_u -= 1) {
        auto7BFE354A_var = UnitGroupUnitFromEnd(auto7BFE354A_g, auto7BFE354A_u);
        if (auto7BFE354A_var == null) { break; }
        SoundPlayOnUnit(SoundLink("Amb_Protoss_Electrical_Arc2", -1), PlayerGroupAll(), auto7BFE354A_var, 0.0, 100.0, 0.0);
        libNtve_gf_KillModel(lv_actor[UnitGetOwner(auto7BFE354A_var)]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SuitMalfunctionChanceIntense_Init () {
    gt_SuitMalfunctionChanceIntense = TriggerCreate("gt_SuitMalfunctionChanceIntense_Func");
    TriggerEnable(gt_SuitMalfunctionChanceIntense, false);
    TriggerAddEventTimePeriodic(gt_SuitMalfunctionChanceIntense, RandomFixed(30.0, 45.0), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frost Bite Chance (Intense)
//--------------------------------------------------------------------------------------------------
bool gt_FrostBiteChanceIntense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    timer lv_durationtimer;

    // Automatic Variable Declarations
    const int auto849BF509_ae = 12;
    const int auto849BF509_ai = 1;
    unitgroup autoC2ACCCE0_g;
    int autoC2ACCCE0_u;
    unit autoC2ACCCE0_var;
    const int autoBA8A05D7_ae = 12;
    const int autoBA8A05D7_ai = 1;
    unitgroup auto779E24FF_g;
    int auto779E24FF_u;
    unit auto779E24FF_var;

    // Variable Initialization
    lv_durationtimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((libNtve_gf_RandomPercent() <= 45.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/ABEE4426"));
    TriggerEnable(TriggerGetCurrent(), false);
    gv_frostBite = true;
    TimerStart(lv_durationtimer, RandomFixed(300.0, 600.0), false, c_timeGame);
    while (true) {
        if ((TimerGetRemaining(lv_durationtimer) <= 1.0)) {
            lv_int = 1;
            for ( ; ( (auto849BF509_ai >= 0 && lv_int <= auto849BF509_ae) || (auto849BF509_ai < 0 && lv_int >= auto849BF509_ae) ) ; lv_int += auto849BF509_ai ) {
                autoC2ACCCE0_g = UnitGroup(null, lv_int, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                autoC2ACCCE0_u = UnitGroupCount(autoC2ACCCE0_g, c_unitCountAll);
                for (;; autoC2ACCCE0_u -= 1) {
                    autoC2ACCCE0_var = UnitGroupUnitFromEnd(autoC2ACCCE0_g, autoC2ACCCE0_u);
                    if (autoC2ACCCE0_var == null) { break; }
                    UnitBehaviorRemove(autoC2ACCCE0_var, "FrostBite", 1);
                }
            }
            break;
        }

        lv_int = 1;
        for ( ; ( (autoBA8A05D7_ai >= 0 && lv_int <= autoBA8A05D7_ae) || (autoBA8A05D7_ai < 0 && lv_int >= autoBA8A05D7_ae) ) ; lv_int += autoBA8A05D7_ai ) {
            auto779E24FF_g = UnitGroup(null, lv_int, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto779E24FF_u = UnitGroupCount(auto779E24FF_g, c_unitCountAll);
            for (;; auto779E24FF_u -= 1) {
                auto779E24FF_var = UnitGroupUnitFromEnd(auto779E24FF_g, auto779E24FF_u);
                if (auto779E24FF_var == null) { break; }
                UnitBehaviorAdd(auto779E24FF_var, "FrostBite", auto779E24FF_var, 1);
                if (((UnitGetType(auto779E24FF_var) == "Civilian") || (UnitGetType(auto779E24FF_var) == "CivilianFemale"))) {
                    UnitBehaviorRemove(auto779E24FF_var, "FrostBite", 1);
                }

            }
        }
        Wait(1.5, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FrostBiteChanceIntense_Init () {
    gt_FrostBiteChanceIntense = TriggerCreate("gt_FrostBiteChanceIntense_Func");
    TriggerEnable(gt_FrostBiteChanceIntense, false);
    TriggerAddEventTimePeriodic(gt_FrostBiteChanceIntense, RandomFixed(30.0, 45.0), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power User Ecell
//--------------------------------------------------------------------------------------------------
bool gt_PowerUserEcell_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gv_playerSIsused[1][UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource))] == 15) || (gv_playerSIsused[2][UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource))] == 15)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "EnergyCellSIPU", EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerUserEcell_Init () {
    gt_PowerUserEcell = TriggerCreate("gt_PowerUserEcell_Func");
    TriggerAddEventPlayerEffectUsed(gt_PowerUserEcell, c_playerAny, "EnergyCell");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Combining
//--------------------------------------------------------------------------------------------------
bool gt_ItemCombining_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_itemtype;
    fixed lv_difference;
    int lv_inventorySlot;
    unit lv_item;

    // Automatic Variable Declarations
    const int auto421FF6F0_ae = 6;
    const int auto421FF6F0_ai = 1;

    // Variable Initialization
    lv_unit = UnitInventoryUnit(EventUnitInventoryItem());
    lv_itemtype = UnitGetType(EventUnitInventoryItem());

    // Conditions
    if (testConds) {
        if (!(((lv_itemtype == "Magazines") || (lv_itemtype == "AmmoCase") || (lv_itemtype == "QuikClot") || (lv_itemtype == "FragGrenade") || (lv_itemtype == "EnergyCell") || (lv_itemtype == "GroundFlare") || (lv_itemtype == "FlareGun") || (lv_itemtype == "SmokeGrenade") || (lv_itemtype == "FirstAidKit") || (lv_itemtype == "40mmGrenade") || (lv_itemtype == "MGL") || (lv_itemtype == "MRLRocket") || (lv_itemtype == "MRL") || (lv_itemtype == "M5MAR") || (lv_itemtype == "ExplosiveCharge") || (lv_itemtype == "C4Charge") || (lv_itemtype == "PlasmaMine")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitInventoryChange() == c_unitInventoryChangePicksUp)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }

    lv_inventorySlot = 1;
    for ( ; ( (auto421FF6F0_ai >= 0 && lv_inventorySlot <= auto421FF6F0_ae) || (auto421FF6F0_ai < 0 && lv_inventorySlot >= auto421FF6F0_ae) ) ; lv_inventorySlot += auto421FF6F0_ai ) {
        lv_item = UnitInventoryItem(lv_unit, lv_inventorySlot);
        if ((UnitGetType(lv_item) == "Magazines") && (gf_CountItemTypeUsed("AmmoCase", lv_unit, "AmmoCharges") >= 1) && (UnitGetChargeUsed(gf_FirstAmmoCaseUsed(lv_unit), "AmmoCharges") >= 1.0) && (UnitHasBehavior2(lv_unit, "ReadyMag") == false)) {
            gf_DonateItems(gf_FirstAmmoCaseUsed(lv_unit), lv_item, "AmmoCharges", 3.0);
        }

        if ((((UnitGetType(lv_item) == "40mmGrenade") && (gf_CountItemTypeUsed("MGL", lv_unit, "ItemCharges") >= 1) && (UnitGetChargeUsed(gf_FirstItemType("MGL", lv_unit), "ItemCharges") >= 1.0)) || ((UnitGetType(lv_item) == "40mmGrenade") && (gf_CountItemTypeUsed("M5MAR", lv_unit, "ItemCharges") >= 1) && (UnitGetChargeUsed(gf_FirstItemType("M5MAR", lv_unit), "ItemCharges") >= 1.0)))) {
            gf_DonateItems(gf_First40mmGrenadeUsed(lv_unit), lv_item, "ItemCharges", 10.0);
        }

        if ((UnitGetType(lv_item) == "MRLRocket") && (gf_CountItemTypeUsed("MRL", lv_unit, "ItemCharges") >= 1) && (UnitGetChargeUsed(gf_FirstItemType("MRL", lv_unit), "ItemCharges") >= 1.0)) {
            gf_DonateItems(gf_FirstItemType("MRL", lv_unit), lv_item, "ItemCharges", 3.0);
        }

        if ((UnitGetType(lv_item) == "40mmGrenade") && (gf_CountItemTypeUsed("40mmGrenade", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 10.0);
        }

        if ((UnitGetType(lv_item) == "Magazines") && (gf_CountItemTypeUsed("Magazines", lv_unit, "AmmoCharges") >= 2) && (UnitGetChargeUsed(lv_item, "AmmoCharges") >= 1.0)) {
            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "AmmoCharges"), "AmmoCharges", 3.0);
        }

        if ((UnitGetType(lv_item) == "QuikClot") && (gf_CountItemTypeUsed("QuikClot", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 3.0);
        }

        if ((UnitGetType(lv_item) == "EnergyCell") && (gf_CountItemTypeUsed("EnergyCell", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 3.0);
        }

        if ((UnitGetType(lv_item) == "FragGrenade") && (gf_CountItemTypeUsed("FragGrenade", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }

        if ((UnitGetType(lv_item) == "SmokeGrenade") && (gf_CountItemTypeUsed("SmokeGrenade", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }

        if ((UnitGetType(lv_item) == "GroundFlare") && (gf_CountItemTypeUsed("GroundFlare", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }

        if ((UnitGetType(lv_item) == "FlareGun") && (gf_CountItemTypeUsed("FlareGun", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }

        if ((UnitGetType(lv_item) == "FirstAidKit") && (gf_CountItemTypeUsed("FirstAidKit", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }

        if ((UnitGetType(lv_item) == "ExplosiveCharge") && (gf_CountItemTypeUsed("ExplosiveCharge", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 12.0);
        }

        if ((UnitGetType(lv_item) == "C4Charge") && (gf_CountItemTypeUsed("C4Charge", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 3.0);
        }

        if ((UnitGetType(lv_item) == "PlasmaMine") && (gf_CountItemTypeUsed("PlasmaMine", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 3.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemCombining_Init () {
    gt_ItemCombining = TriggerCreate("gt_ItemCombining_Func");
    TriggerAddEventUnitInventoryChange(gt_ItemCombining, null, c_unitInventoryChangeUses, null);
    TriggerAddEventUnitInventoryChange(gt_ItemCombining, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(gt_ItemCombining, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_ItemCombining, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP/DU Filter
//--------------------------------------------------------------------------------------------------
bool gt_APDUFilter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_item;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item = EventUnitInventoryItem();
    lv_unit = UnitInventoryUnit(lv_item);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(lv_item, 5, 10.0);
    libNtve_gf_MakeUnitInvulnerable(lv_item, true);
    if (((UnitGetOwner(UnitInventoryUnit(lv_item)) == 15) || (UnitGetOwner(UnitInventoryUnit(lv_item)) == 13))) {
    }
    else {
        SoundPlayOnUnit(SoundLink("PickupItem", -1), PlayerGroupAll(), lv_unit, 0.0, 100.0, 0.0);
    }
    if (((UnitGetType(lv_item) == "APRounds") || (UnitGetType(lv_item) == "DURounds")) && ((UnitGetType(lv_unit) == gv_mOS[4][0]) || (UnitGetType(lv_unit) == gv_mOS[4][1]) || (UnitGetType(lv_unit) == gv_mOS[12][0]) || (UnitGetType(lv_unit) == gv_mOS[12][1]) || (UnitGetType(lv_unit) == gv_mOS[15][0]) || (UnitGetType(lv_unit) == gv_mOS[15][1]) || (UnitGetType(lv_unit) == gv_mOS[17][0]) || (UnitGetType(lv_unit) == gv_mOS[17][1]) || (UnitGetType(lv_unit) == gv_mOS[0][0]) || (UnitGetType(lv_unit) == gv_mOS[0][1]))) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), (StringExternal("Param/Value/1CA1A8A9") + UnitGetName(lv_item) + StringExternal("Param/Value/977E68E2")), SoundLink("UI_GenericError", -1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_APDUFilter_Init () {
    gt_APDUFilter = TriggerCreate("gt_APDUFilter_Func");
    TriggerAddEventUnitInventoryChange(gt_APDUFilter, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_APDUFilter, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(gt_APDUFilter, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Item Charges
//--------------------------------------------------------------------------------------------------
bool gt_UpdateItemCharges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_item;
    string lv_itemtype;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item = EventUnitInventoryItem();
    lv_itemtype = UnitGetType(lv_item);
    lv_unit = UnitInventoryUnit(lv_item);

    // Conditions
    if (testConds) {
        if (!((lv_item != null))) {
            return false;
        }

        if (!((lv_itemtype != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(lv_item) == "SatchelCharge") || (UnitGetType(lv_item) == "M200SatchelChargePacked") || (UnitGetType(lv_item) == "Tranquilizer") || (UnitGetType(lv_item) == "MK44SentryGun2") || (UnitGetType(lv_item) == "Specimen") || (UnitGetType(lv_item) == "Vaccine") || (UnitGetType(lv_item) == "LLDR") || (UnitGetType(lv_item) == "StrafeDesignator") || (UnitGetType(lv_item) == "EmptyVial") || (UnitGetType(lv_item) == "WaterSample") || (UnitGetType(lv_item) == "ConstructionSupplies") || (UnitGetType(lv_item) == "ShockPaddles") || (UnitGetType(lv_item) == "ResearchData") || (UnitGetType(lv_item) == "SeismicResonator") || (UnitGetType(lv_item) == "EnergyBattery") || (UnitGetType(lv_item) == "Casualty"))) {
    }
    else {
        libNtve_gf_MakeUnitInvulnerable(lv_item, false);
    }
    if (((UnitGetOwner(EventUnitInventoryItemTargetUnit()) == 15) || (UnitGetOwner(EventUnitInventoryItemTargetUnit()) == 13))) {
    }
    else {
        SoundPlayOnUnit(SoundLink("PickupItem", -1), PlayerGroupAll(), lv_unit, 0.0, 100.0, 0.0);
    }
    gf_UpdateItemTextChargeDisplay(lv_item);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateItemCharges_Init () {
    gt_UpdateItemCharges = TriggerCreate("gt_UpdateItemCharges_Func");
    TriggerAddEventUnitInventoryChange(gt_UpdateItemCharges, null, c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(gt_UpdateItemCharges, null, c_unitInventoryChangeLoses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reload Sentry Gun
//--------------------------------------------------------------------------------------------------
bool gt_ReloadSentryGun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ammunition;
    string lv_ammoType;
    unit lv_sentryGun;
    string lv_sentryGunType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ammunition = EventUnitInventoryItem();
    lv_ammoType = UnitGetType(lv_ammunition);
    lv_sentryGun = UnitInventoryUnit(lv_ammunition);
    lv_sentryGunType = UnitGetType(lv_sentryGun);

    // Conditions
    if (testConds) {
        if (!(((lv_sentryGunType == "MK44SentryGun") || (lv_sentryGunType == "MK79SentryGun") || (lv_sentryGunType == "M1SentryGun") || (lv_sentryGunType == "M2SentryGun") || (lv_sentryGunType == "MiniM1SentryGun") || (lv_sentryGunType == "LNM1SentryGun") || (lv_sentryGunType == "LNM2SentryGun")))) {
            return false;
        }

        if (!(((lv_ammoType == "Magazines") || (lv_ammoType == "AmmoCase")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_sentryGunType == "MK79SentryGun")) {
        gf_ReloadSentry(lv_sentryGun, lv_ammunition, 100.0);
    }
    else {
        gf_ReloadSentry(lv_sentryGun, lv_ammunition, 200.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReloadSentryGun_Init () {
    gt_ReloadSentryGun = TriggerCreate("gt_ReloadSentryGun_Func");
    TriggerAddEventUnitInventoryChange(gt_ReloadSentryGun, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_ReloadSentryGun, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(gt_ReloadSentryGun, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Gun Item Drop Filter
//--------------------------------------------------------------------------------------------------
bool gt_SentryGunItemDropFilter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sentrygun;
    unit lv_item;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sentrygun = UnitInventoryUnit(EventUnitInventoryItem());
    lv_item = EventUnitInventoryItem();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_item) == "KineticIntegrator") || (UnitGetType(lv_item) == "EnergyBattery") || (UnitGetType(lv_item) == "MuscleRelaxant") || (UnitGetType(lv_item) == "GroundFlare") || (UnitGetType(lv_item) == "FlareGun") || (UnitGetType(lv_item) == "GroundFlare") || (UnitGetType(lv_item) == "LLDR") || (UnitGetType(lv_item) == "BioSuit") || (UnitGetType(lv_item) == "KevlarBodyArmor") || (UnitGetType(lv_item) == "SecurityArmor") || (UnitGetType(lv_item) == "CombatArmor") || (UnitGetType(lv_item) == "OPA") || (UnitGetType(lv_item) == "ShieldGenerator") || (UnitGetType(lv_item) == "SPCS") || (UnitGetType(lv_item) == "40mmGrenade") || (UnitGetType(lv_item) == "FirstAidKit") || (UnitGetType(lv_item) == "QuikClot") || (UnitGetType(lv_item) == "SmokeGrenade") || (UnitGetType(lv_item) == "StrafeDesignator") || (UnitGetType(lv_item) == "Flashlight") || (UnitGetType(lv_item) == "FragGrenade") || (UnitGetType(lv_item) == "ShockPaddles") || (UnitGetType(lv_item) == "Binoculars") || (UnitGetType(lv_item) == "ExplosiveCharge") || (UnitGetType(lv_item) == "C4Charge") || (UnitGetType(lv_item) == "PlasmaMine") || (UnitGetType(lv_item) == "MK44SentryGunPacked") || (UnitGetType(lv_item) == "MK79SentryGunPacked") || (UnitGetType(lv_item) == "Claymore") || (UnitGetType(lv_item) == "LiftBoots") || (UnitGetType(lv_item) == "MRLRocket") || (UnitGetType(lv_item) == "PlasmaInducer") || (UnitGetType(lv_item) == "MRL") || (UnitGetType(lv_item) == "MGL")))) {
            return false;
        }

        if (!(((UnitGetType(UnitInventoryUnit(lv_item)) == "MK44SentryGun") || (UnitGetType(UnitInventoryUnit(lv_item)) == "MK79SentryGun") || (UnitGetType(UnitInventoryUnit(lv_item)) == "M1SentryGun") || (UnitGetType(UnitInventoryUnit(lv_item)) == "M2SentryGun") || (UnitGetType(UnitInventoryUnit(lv_item)) == "MiniM1SentryGun") || (UnitGetType(UnitInventoryUnit(lv_item)) == "LNM1SentryGun") || (UnitGetType(UnitInventoryUnit(lv_item)) == "LNM2SentryGun")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DropAllItemsImmediate(lv_sentrygun, 1.5);
    UnitInventoryRemove(EventUnitInventoryItem());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryGunItemDropFilter_Init () {
    gt_SentryGunItemDropFilter = TriggerCreate("gt_SentryGunItemDropFilter_Func");
    TriggerAddEventUnitInventoryChange(gt_SentryGunItemDropFilter, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_SentryGunItemDropFilter, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(gt_SentryGunItemDropFilter, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Gun Energy Cell
//--------------------------------------------------------------------------------------------------
bool gt_SentryGunEnergyCell_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_ecellcurrentcharges;
    unit lv_sentrygun;

    // Automatic Variable Declarations
    fixed autoE7C6BFE6_val;

    // Variable Initialization
    lv_ecellcurrentcharges = (3.0 - UnitGetChargeUsed(EventUnitInventoryItem(), "EnergyCharges"));
    lv_sentrygun = UnitInventoryUnit(EventUnitInventoryItem());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "EnergyCell"))) {
            return false;
        }

        if (!(((UnitGetType(UnitInventoryUnit(EventUnitInventoryItem())) == "MK44SentryGun") || (UnitGetType(UnitInventoryUnit(EventUnitInventoryItem())) == "MK79SentryGun") || (UnitGetType(UnitInventoryUnit(EventUnitInventoryItem())) == "M1SentryGun") || (UnitGetType(UnitInventoryUnit(EventUnitInventoryItem())) == "M2SentryGun") || (UnitGetType(UnitInventoryUnit(EventUnitInventoryItem())) == "MiniM1SentryGun") || (UnitGetType(UnitInventoryUnit(EventUnitInventoryItem())) == "LNM1SentryGun") || (UnitGetType(UnitInventoryUnit(EventUnitInventoryItem())) == "LNM2SentryGun")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnit(SoundLink("Obelisk_TimeWarpImpact", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    autoE7C6BFE6_val = lv_ecellcurrentcharges;
    if (autoE7C6BFE6_val == 1.0) {
        UnitBehaviorAdd(lv_sentrygun, "EnergyCellBoost", EventUnitInventoryItem(), 1);
    }
    else if (autoE7C6BFE6_val == 2.0) {
        UnitBehaviorAdd(lv_sentrygun, "EnergyCellBoost2", EventUnitInventoryItem(), 1);
    }
    else if (autoE7C6BFE6_val == 3.0) {
        UnitBehaviorAdd(lv_sentrygun, "EnergyCellBoost3", EventUnitInventoryItem(), 1);
    }
    else {
    }
    UnitInventoryRemove(EventUnitInventoryItem());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryGunEnergyCell_Init () {
    gt_SentryGunEnergyCell = TriggerCreate("gt_SentryGunEnergyCell_Func");
    TriggerAddEventUnitInventoryChange(gt_SentryGunEnergyCell, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_SentryGunEnergyCell, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(gt_SentryGunEnergyCell, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shock Paddles [Remove Ping]
//--------------------------------------------------------------------------------------------------
bool gt_ShockPaddlesRemovePing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "ShockPaddles"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShockPaddlesRemovePing_Init () {
    gt_ShockPaddlesRemovePing = TriggerCreate("gt_ShockPaddlesRemovePing_Func");
    TriggerAddEventUnitInventoryChange(gt_ShockPaddlesRemovePing, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapons & Items 1
//--------------------------------------------------------------------------------------------------
bool gt_WeaponsItems1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    int auto6D759809_ae;
    const int auto6D759809_ai = 1;
    const int auto0BF230DA_ae = 2;
    const int auto0BF230DA_ai = 1;
    const int autoB8B687CA_ae = 2;
    const int autoB8B687CA_ai = 1;
    const int auto35C04298_ae = 2;
    const int auto35C04298_ai = 1;
    const int auto0D14BE6C_ae = 2;
    const int auto0D14BE6C_ai = 1;
    const int auto8D598E1F_ae = 2;
    const int auto8D598E1F_ai = 1;
    const int auto9758B29B_ae = 4;
    const int auto9758B29B_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6D759809_ae = (6 + (PlayerGroupCount(gv_players) / 2));
    lv_int = 1;
    for ( ; ( (auto6D759809_ai >= 0 && lv_int <= auto6D759809_ae) || (auto6D759809_ai < 0 && lv_int >= auto6D759809_ae) ) ; lv_int += auto6D759809_ai ) {
        gf_SpawnItem("Magazines", 1);
    }
    lv_int = 1;
    for ( ; ( (auto0BF230DA_ai >= 0 && lv_int <= auto0BF230DA_ae) || (auto0BF230DA_ai < 0 && lv_int >= auto0BF230DA_ae) ) ; lv_int += auto0BF230DA_ai ) {
        gf_SpawnItem("QuikClot", 1);
    }
    lv_int = 1;
    for ( ; ( (autoB8B687CA_ai >= 0 && lv_int <= autoB8B687CA_ae) || (autoB8B687CA_ai < 0 && lv_int >= autoB8B687CA_ae) ) ; lv_int += autoB8B687CA_ai ) {
        gf_SpawnItem("FragGrenade", 2);
    }
    lv_int = 1;
    for ( ; ( (auto35C04298_ai >= 0 && lv_int <= auto35C04298_ae) || (auto35C04298_ai < 0 && lv_int >= auto35C04298_ae) ) ; lv_int += auto35C04298_ai ) {
        gf_SpawnItem("EnergyCell", 2);
    }
    lv_int = 1;
    for ( ; ( (auto0D14BE6C_ai >= 0 && lv_int <= auto0D14BE6C_ae) || (auto0D14BE6C_ai < 0 && lv_int >= auto0D14BE6C_ae) ) ; lv_int += auto0D14BE6C_ai ) {
        gf_SpawnItem("SmokeGrenade", 2);
    }
    lv_int = 1;
    for ( ; ( (auto8D598E1F_ai >= 0 && lv_int <= auto8D598E1F_ae) || (auto8D598E1F_ai < 0 && lv_int >= auto8D598E1F_ae) ) ; lv_int += auto8D598E1F_ai ) {
        gf_SpawnItem("FirstAidKit", 2);
    }
    lv_int = 1;
    for ( ; ( (auto9758B29B_ai >= 0 && lv_int <= auto9758B29B_ae) || (auto9758B29B_ai < 0 && lv_int >= auto9758B29B_ae) ) ; lv_int += auto9758B29B_ai ) {
        gf_SpawnItem("AmmoCase", 3);
    }
    if ((gf_CyborgRifle() || (gv_rifleman == true) || (gv_platoonLeader == true) || (gv_calvaryScout == true) || (gv_fireSupportSpecialist == true) || (gv_javelinGunner == true) || (gv_combatMedic == true))) {
        gf_SpawnItem("StynerSPR", 6);
        gf_SpawnItem("SubmachineGun", 3);
        gf_SpawnItem("USMCR", 3);
        gf_SpawnItem("HK42", 6);
        gf_SpawnItem("M5MAR", 5);
        gf_SpawnItem("StynerBR3", 4);
    }

    if ((gf_CyborgDMR() || (gv_sDM == true) || (gv_platoonLeader == true))) {
        gf_SpawnItem("IDMR2", 7);
    }

    if ((gf_CyborgPlasma() || (gv_ghost == true) || (gv_mechOperator == true) || (gv_bioSpecialist == true))) {
        gf_SpawnItem("IPR", 1);
        gf_SpawnItem("PR34E", 3);
    }

    if (((gv_flamethrower == true) || (gv_platoonLeader == true))) {
        gf_SpawnItem("M79Flamethrower", 6);
        gf_SpawnItem("GasCompressor", 5);
    }

    if ((gf_CyborgMG() || (gv_automaticRifleman == true) || (gv_platoonLeader == true))) {
        gf_SpawnItem("M41SAW", 7);
        gf_SpawnItem("M241MMG", 7);
    }

    if ((gf_CyborgShotgun() || (gv_commando == true) || (gv_enforcer == true) || (gv_combatEngineer == true) || (gv_platoonLeader == true))) {
        gf_SpawnItem("ISS7", 7);
    }

    gf_SpawnItem("AimAssistant", 3);
    gf_SpawnItem("ProjectileAccelerator", 3);
    gf_SpawnItem("APRounds", 5);
    gf_SpawnItem("Binoculars", 3);
    gf_SpawnItem("Flashlight", 4);
    gf_SpawnItem("Flashlight", 7);
    gf_SpawnItem("GroundFlare", 1);
    gf_SpawnItem("FlareGun", 1);
    gf_SpawnItem("ExplosiveCharge", 1);
    gf_SpawnItem("MGL", 2);
    gf_SpawnItem("40mmGrenade", 1);
    gf_SpawnItem("MRLRocket", 2);
    gf_SpawnItem("KevlarBodyArmor", 4);
    gf_SpawnItem("BioSuit", 5);
    gf_SpawnItem("SPCS", 5);
    gf_SpawnItem("MRL", 6);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponsItems1_Init () {
    gt_WeaponsItems1 = TriggerCreate("gt_WeaponsItems1_Func");
    TriggerAddEventTimeElapsed(gt_WeaponsItems1, 30.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_WeaponsItems1, 380.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapons & Items 2
//--------------------------------------------------------------------------------------------------
bool gt_WeaponsItems2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int auto252B506F_ae = 2;
    const int auto252B506F_ai = 1;
    const int autoF0947422_ae = 2;
    const int autoF0947422_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_int = 1;
    for ( ; ( (auto252B506F_ai >= 0 && lv_int <= auto252B506F_ae) || (auto252B506F_ai < 0 && lv_int >= auto252B506F_ae) ) ; lv_int += auto252B506F_ai ) {
        gf_SpawnItem("QuikClot", 2);
    }
    lv_int = 1;
    for ( ; ( (autoF0947422_ai >= 0 && lv_int <= autoF0947422_ae) || (autoF0947422_ai < 0 && lv_int >= autoF0947422_ae) ) ; lv_int += autoF0947422_ai ) {
        gf_SpawnItem("FragGrenade", 2);
    }
    if ((gf_CyborgRifle() || (gv_rifleman == true) || (gv_fireSupportSpecialist == true) || (gv_calvaryScout == true) || (gv_platoonLeader == true) || (gv_javelinGunner == true) || (gv_combatMedic == true))) {
        gf_SpawnItem("ATLASX50", 3);
        gf_SpawnItem("SOFAR", 4);
        gf_SpawnItem("M5MAR", 2);
        gf_SpawnItem("USMCR", 6);
    }

    if (((gv_sDM == true) || (gv_platoonLeader == true) || gf_CyborgDMR())) {
        gf_SpawnItem("IDMR2", 2);
        gf_SpawnItem("M92Torrent", 3);
        gf_SpawnItem("XR900", 3);
    }

    if (((gv_bioSpecialist == true) || gf_CyborgPlasma() || (gv_ghost == true) || (gv_mechOperator == true))) {
        gf_SpawnItem("PlasmaInducer", 4);
        gf_SpawnItem("IPR", 1);
        gf_SpawnItem("XM88BPhasedPlasmaRifle", 1);
        gf_SpawnItem("PR42C", 4);
    }

    if (((gv_flamethrower == true) || (gv_platoonLeader == true))) {
        gf_SpawnItem("GasCompressor", 3);
        gf_SpawnItem("Inferno", 3);
        gf_SpawnItem("M79Flamethrower", 2);
    }

    if (((gv_automaticRifleman == true) || gf_CyborgMG() || (gv_platoonLeader == true))) {
        gf_SpawnItem("M41SAW", 2);
        gf_SpawnItem("M241MMG", 2);
        gf_SpawnItem("M135Minigun", 3);
    }

    if (((gv_platoonLeader == true) || gf_CyborgShotgun() || (gv_commando == true) || (gv_enforcer == true) || (gv_combatEngineer == true))) {
        gf_SpawnItem("AA12", 4);
        gf_SpawnItem("M1014", 5);
    }

    if ((gv_laserEnforcer == true)) {
        gf_SpawnItem("D20LaserRifle", 4);
    }

    gf_SpawnItem("AimAssistant", 2);
    gf_SpawnItem("ProjectileAccelerator", 2);
    gf_SpawnItem("DURounds", 4);
    gf_SpawnItem("APRounds", 3);
    gf_SpawnItem("Binoculars", 2);
    gf_SpawnItem("LiftBoots", 2);
    gf_SpawnItem("BioSuit", 3);
    gf_SpawnItem("ShieldGenerator", 4);
    gf_SpawnItem("SolarArmor", 4);
    gf_SpawnItem("OPA", 2);
    gf_SpawnItem("SPCS", 2);
    gf_SpawnItem("Flashlight", 2);
    gf_SpawnItem("MuscleRelaxant", 2);
    gf_SpawnItem("KineticIntegrator", 2);
    gf_SpawnItem("MGL", 2);
    gf_SpawnItem("MRL", 3);
    gf_SpawnItem("40mmGrenade", 1);
    gf_SpawnItem("MRLRocket", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponsItems2_Init () {
    gt_WeaponsItems2 = TriggerCreate("gt_WeaponsItems2_Func");
    TriggerEnable(gt_WeaponsItems2, false);
    TriggerAddEventTimeElapsed(gt_WeaponsItems2, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_WeaponsItems2, 370.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapons & Items Survival
//--------------------------------------------------------------------------------------------------
bool gt_WeaponsItemsSurvival_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_rifleman == true) || gf_CyborgRifle() || (gv_platoonLeader == true) || (gv_calvaryScout == true) || (gv_fireSupportSpecialist == true) || (gv_javelinGunner == true) || (gv_combatMedic == true))) {
        gf_SpawnItem("HK42", 7);
        gf_SpawnItem("USMCR", 7);
        gf_SpawnItem("StynerSPR", 7);
        gf_SpawnItem("M5MAR", 6);
    }

    if (((gv_sDM == true) || (gv_platoonLeader == true) || gf_CyborgDMR())) {
        gf_SpawnItem("IDMR2", 12);
    }

    if (((gv_flamethrower == true) || (gv_platoonLeader == true))) {
        gf_SpawnItem("M79Flamethrower", 8);
    }

    if ((gf_CyborgMG() || (gv_automaticRifleman == true) || (gv_platoonLeader == true))) {
        gf_SpawnItem("M41SAW", 12);
        gf_SpawnItem("M241MMG", 12);
    }

    if ((gf_CyborgShotgun() || (gv_commando == true) || (gv_enforcer == true) || (gv_combatEngineer == true) || (gv_platoonLeader == true))) {
        gf_SpawnItem("ISS7", 12);
    }

    gf_SpawnItem("AimAssistant", 5);
    gf_SpawnItem("KevlarBodyArmor", 5);
    gf_SpawnItem("APRounds", 7);
    gf_SpawnItem("KineticIntegrator", 7);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponsItemsSurvival_Init () {
    gt_WeaponsItemsSurvival = TriggerCreate("gt_WeaponsItemsSurvival_Func");
    TriggerEnable(gt_WeaponsItemsSurvival, false);
    TriggerAddEventTimeElapsed(gt_WeaponsItemsSurvival, 900.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_WeaponsItemsSurvival, 240.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Weapon Caches
//--------------------------------------------------------------------------------------------------
bool gt_InitWeaponCaches_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    point lv_point;

    // Automatic Variable Declarations
    const int autoEB260071_ae = 5;
    const int autoEB260071_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(50.0, 90.0), c_timeGame);
    gf_MissionText(StringExternal("Param/Value/5C91E12D"));
    gv_weaponcachesfound = 0;
    RegionAddRegion(RegionFromId(62), RegionFromId(63));
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(6)), 20.0);
    gv_rockcache[1] = RegionFromId(293);
    gv_rockcache[2] = RegionFromId(294);
    gv_rockcache[3] = RegionFromId(295);
    gv_rockcache[4] = RegionFromId(296);
    gv_rockcache[5] = RegionFromId(297);
    lv_int = 1;
    for ( ; ( (autoEB260071_ai >= 0 && lv_int <= autoEB260071_ae) || (autoEB260071_ai < 0 && lv_int >= autoEB260071_ae) ) ; lv_int += autoEB260071_ai ) {
        while (true) {
            lv_point = RegionRandomPoint(RegionFromId(62));
            if ((PointPathingPassable(lv_point) == true) && (PointPathingIsConnected(lv_point, PointFromId(1840075581)) == true)) {
                break;
            }

            Wait(0.0625, c_timeGame);
        }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", lv_point, ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
        RegionSetCenter(gv_rockcache[lv_int], lv_point);
        libNtve_gf_CreateModelAtPoint("Rock", RegionGetCenter(gv_rockcache[lv_int]));
        gv_rockModel[lv_int] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "TextureSelectById WeaponsCacheRock");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.400000");
    }
    TriggerEnable(gt_FindWeaponsCache, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitWeaponCaches_Init () {
    gt_InitWeaponCaches = TriggerCreate("gt_InitWeaponCaches_Func");
    TriggerEnable(gt_InitWeaponCaches, false);
    TriggerAddEventGeneric(gt_InitWeaponCaches, "weapon cache init");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Find Weapons Cache
//--------------------------------------------------------------------------------------------------
bool gt_FindWeaponsCache_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    const int auto46E9984F_ae = 5;
    const int auto46E9984F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!(((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true) || (UnitGetType(EventUnit()) == "Vesania30")))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (auto46E9984F_ai >= 0 && lv_loopint <= auto46E9984F_ae) || (auto46E9984F_ai < 0 && lv_loopint >= auto46E9984F_ae) ) ; lv_loopint += auto46E9984F_ai ) {
        if ((EventUnitRegion() == gv_rockcache[lv_loopint]) && (gv_weaponcachefound[lv_loopint] == false)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(gv_rockcache[lv_loopint]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 25.0, 270.0);
            PingSetTooltip(PingLastCreated(), (StringExternal("Param/Value/530E7A8B") + IntToText(lv_loopint)));
            gv_weaponcachesfound += 1;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, libSwaC_gf_FormatTextWithReplacement(StringExternal("Param/Value/97345EB1"), IntToText(gv_weaponcachesfound), null, null, null));
            SoundPlay(SoundLink("UI_ObjectiveUpdate", -1), PlayerGroupAll(), 100.0, 0.0);
            gv_weaponcachefound[lv_loopint] = true;
            ActorSend(gv_rockModel[lv_loopint], "TextureSelectById AGRIARock");
            gf_WeaponCacheSpawnItem("Magazines", RandomInt(2, 4), gv_rockcache[lv_loopint]);
            gf_WeaponCacheSpawnItem("AmmoCase", RandomInt(1, 2), gv_rockcache[lv_loopint]);
            gf_WeaponCacheSpawnItem("QuikClot", RandomInt(0, 1), gv_rockcache[lv_loopint]);
            gf_WeaponCacheSpawnItem("EnergyCell", RandomInt(0, 1), gv_rockcache[lv_loopint]);
            gf_WeaponCacheSpawnItem("FlareGun", RandomInt(0, 1), gv_rockcache[lv_loopint]);
            gf_WeaponCacheSpawnItem("FirstAidKit", RandomInt(0, 1), gv_rockcache[lv_loopint]);
            gf_WeaponCacheSpawnItem("GroundFlare", RandomInt(0, 1), gv_rockcache[lv_loopint]);
            gf_WeaponCacheSpawnItem("ExplosiveCharge", RandomInt(0, 2), gv_rockcache[lv_loopint]);
            if ((lv_loopint == 1)) {
                gf_WeaponCacheSpawnItem("BioSuit", 1, gv_rockcache[lv_loopint]);
                gf_WeaponCacheSpawnItem("SubmachineGun", 1, gv_rockcache[lv_loopint]);
                gf_WeaponCacheSpawnItem("EnergyCell", 1, gv_rockcache[lv_loopint]);
                gf_WeaponCacheSpawnItem("MuscleRelaxant", 1, gv_rockcache[lv_loopint]);
                if ((RandomInt(0, 1) == 1)) {
                    gf_WeaponCacheSpawnItem("MRL", 1, gv_rockcache[lv_loopint]);
                }
                else {
                    gf_WeaponCacheSpawnItem("MGL", 1, gv_rockcache[lv_loopint]);
                }
                if ((gv_flamethrower == true)) {
                    gf_WeaponCacheSpawnItem("M79Flamethrower", 1, gv_rockcache[lv_loopint]);
                }
                if (((gv_commando == true) || (gv_combatEngineer == true) || (gv_enforcer == true) || (gv_platoonLeader == true) || gf_CyborgShotgun())) {
                    gf_WeaponCacheSpawnItem("ISS7", RandomInt(0, 1), gv_rockcache[lv_loopint]);
                }
                gf_WeaponCacheSpawnItem("StynerBR3", RandomInt(0, 1), gv_rockcache[lv_loopint]);
            }

            if ((lv_loopint == 2)) {
                if ((RandomInt(0, 1) == 1)) {
                    gf_WeaponCacheSpawnItem("StynerSPR", RandomInt(0, 1), gv_rockcache[lv_loopint]);
                }
                else {
                    gf_WeaponCacheSpawnItem("USMCR", 1, gv_rockcache[lv_loopint]);
                }
                gf_WeaponCacheSpawnItem("MK44SentryGunPacked", 1, gv_rockcache[lv_loopint]);
                if (((gv_sDM == true) || (gv_platoonLeader == true) || gf_CyborgDMR())) {
                    gf_WeaponCacheSpawnItem("IDMR2", RandomInt(0, 1), gv_rockcache[lv_loopint]);
                }
                gf_WeaponCacheSpawnItem("M5MAR", RandomInt(0, 2), gv_rockcache[lv_loopint]);
            }

            if ((lv_loopint == 3)) {
                gf_WeaponCacheSpawnItem("HK42", 1, gv_rockcache[lv_loopint]);
                gf_WeaponCacheSpawnItem("MRL", 1, gv_rockcache[lv_loopint]);
                if ((RandomInt(0, 1) == 1)) {
                    gf_WeaponCacheSpawnItem("APRounds", 1, gv_rockcache[lv_loopint]);
                }
                else {
                    gf_WeaponCacheSpawnItem("AimAssistant", 1, gv_rockcache[lv_loopint]);
                }
            }

            if ((lv_loopint == 4)) {
                if ((RandomInt(0, 1) == 1)) {
                    gf_WeaponCacheSpawnItem("KineticIntegrator", RandomInt(0, 1), gv_rockcache[lv_loopint]);
                }
                else {
                    gf_WeaponCacheSpawnItem("EnergyCell", 3, gv_rockcache[lv_loopint]);
                }
                gf_WeaponCacheSpawnItem("FragGrenade", 2, gv_rockcache[lv_loopint]);
                if (((gv_cyborgMos == true) || (gv_automaticRifleman == true) || (gv_platoonLeader == true) || gf_CyborgMG())) {
                    if ((RandomInt(0, 1) == 1)) {
                        gf_WeaponCacheSpawnItem("M41SAW", 1, gv_rockcache[lv_loopint]);
                    }
                    else {
                        gf_WeaponCacheSpawnItem("M241MMG", 1, gv_rockcache[lv_loopint]);
                    }
                }
            }

            if ((lv_loopint == 5)) {
                gf_WeaponCacheSpawnItem("KevlarBodyArmor", 1, gv_rockcache[lv_loopint]);
                gf_WeaponCacheSpawnItem("StrafeDesignator", 1, gv_rockcache[lv_loopint]);
                if ((RandomInt(0, 1) == 1)) {
                    gf_WeaponCacheSpawnItem("AimAssistant", 1, gv_rockcache[lv_loopint]);
                }
                else {
                    gf_WeaponCacheSpawnItem("ProjectileAccelerator", 1, gv_rockcache[lv_loopint]);
                }
            }

        }

    }
    if ((gv_weaponcachesfound == 5)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FindWeaponsCache_Init () {
    gt_FindWeaponsCache = TriggerCreate("gt_FindWeaponsCache_Func");
    TriggerEnable(gt_FindWeaponsCache, false);
    TriggerAddEventUnitRegion(gt_FindWeaponsCache, null, RegionFromId(293), true);
    TriggerAddEventUnitRegion(gt_FindWeaponsCache, null, RegionFromId(294), true);
    TriggerAddEventUnitRegion(gt_FindWeaponsCache, null, RegionFromId(295), true);
    TriggerAddEventUnitRegion(gt_FindWeaponsCache, null, RegionFromId(296), true);
    TriggerAddEventUnitRegion(gt_FindWeaponsCache, null, RegionFromId(297), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assaultman Skills
//--------------------------------------------------------------------------------------------------
bool gt_AssaultmanSkills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "AssaultmanSkills") == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "AssaultmanSkills", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "AssaultmanSkills") == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "AssaultmanSkills", 2);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "AssaultmanSkills") == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "AssaultmanSkills", 3);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "AssaultmanSkills") == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "AssaultmanSkills", 4);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "AssaultmanSkills") == 4)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "AssaultmanSkills", 5);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssaultmanSkills_Init () {
    gt_AssaultmanSkills = TriggerCreate("gt_AssaultmanSkills_Func");
    TriggerAddEventUnitAbility(gt_AssaultmanSkills, null, AbilityCommand("LearnAssaultmanSkills", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soldier Skills Upgrade
//--------------------------------------------------------------------------------------------------
bool gt_SoldierSkillsUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "SoldierSkills") == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "EnergyConservation", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "SoldierSkills") == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "CLPUpgrade", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoldierSkillsUpgrade_Init () {
    gt_SoldierSkillsUpgrade = TriggerCreate("gt_SoldierSkillsUpgrade_Func");
    TriggerAddEventUnitAbility(gt_SoldierSkillsUpgrade, null, AbilityCommand("LearnAbilitiesAutomaticRifleman", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Belt Linking
//--------------------------------------------------------------------------------------------------
bool gt_BeltLinking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_magsize[lv_owner] += 100;
    gv_magsused[lv_owner] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeltLinking_Init () {
    gt_BeltLinking = TriggerCreate("gt_BeltLinking_Func");
    TriggerAddEventUnitAbility(gt_BeltLinking, null, AbilityCommand("LearnAbilitiesAutomaticRifleman", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Belt Linking Reload
//--------------------------------------------------------------------------------------------------
bool gt_BeltLinkingReload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_reloading, EventUnit()) == true) || (EventPlayer() != UnitGetOwner(EventUnit()))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeltLinkingReload_Init () {
    gt_BeltLinkingReload = TriggerCreate("gt_BeltLinkingReload_Func");
    TriggerAddEventUnitAbility(gt_BeltLinkingReload, null, AbilityCommand("BeltLinking", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AR Skills
//--------------------------------------------------------------------------------------------------
bool gt_ARSkills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_user;
    int lv_owner;

    // Automatic Variable Declarations
    int auto39D7D083_val;

    // Variable Initialization
    lv_user = EventUnit();
    lv_owner = UnitGetOwner(lv_user);

    // Actions
    if (!runActions) {
        return true;
    }

    auto39D7D083_val = UnitAbilityGetLevel(lv_user, "IncendiaryRounds");
    if (auto39D7D083_val == 0) {
    }
    else if (auto39D7D083_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "IncendiaryRounds1", 1);
    }
    else if (auto39D7D083_val == 2) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "IncendiaryRounds12", 1);
    }
    else if (auto39D7D083_val == 3) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "IncendiaryRounds13", 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaError, StringExternal("Param/Value/135CC785"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ARSkills_Init () {
    gt_ARSkills = TriggerCreate("gt_ARSkills_Func");
    TriggerAddEventUnitAbility(gt_ARSkills, null, AbilityCommand("LearnAbilitiesAutomaticRifleman", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Specialist Skills
//--------------------------------------------------------------------------------------------------
bool gt_SpecialistSkills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "SpecialistSkills") == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SpecialistSkills2", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "SpecialistSkills") == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "UnknownUpgrade", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialistSkills_Init () {
    gt_SpecialistSkills = TriggerCreate("gt_SpecialistSkills_Func");
    TriggerAddEventUnitAbility(gt_SpecialistSkills, null, AbilityCommand("LearnAbilitiesBioSpecialist", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Strength Training
//--------------------------------------------------------------------------------------------------
bool gt_StrengthTraining_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_user;
    int lv_owner;

    // Automatic Variable Declarations
    int auto234CE6D4_val;

    // Variable Initialization
    lv_user = EventUnit();
    lv_owner = UnitGetOwner(lv_user);

    // Actions
    if (!runActions) {
        return true;
    }

    auto234CE6D4_val = UnitAbilityGetLevel(lv_user, "StrengthTraining");
    if (auto234CE6D4_val == 0) {
        gv_playerEncumbrance[lv_owner] += 5;
        TechTreeUpgradeAddLevel(lv_owner, "StrengthTraining", 1);
    }
    else if (auto234CE6D4_val == 1) {
        gv_playerEncumbrance[lv_owner] += 5;
        TechTreeUpgradeAddLevel(lv_owner, "StrengthTraining", 1);
    }
    else if (auto234CE6D4_val == 2) {
        gv_playerEncumbrance[lv_owner] += 5;
        TechTreeUpgradeAddLevel(lv_owner, "StrengthTraining", 1);
    }
    else if (auto234CE6D4_val == 3) {
        gv_playerEncumbrance[lv_owner] += 5;
        TechTreeUpgradeAddLevel(lv_owner, "StrengthTraining", 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaError, StringExternal("Param/Value/17283B34"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StrengthTraining_Init () {
    gt_StrengthTraining = TriggerCreate("gt_StrengthTraining_Func");
    TriggerAddEventUnitAbility(gt_StrengthTraining, null, AbilityCommand("LearnAbilitiesForceRecon2", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_StrengthTraining, null, AbilityCommand("LearnAbilitiesCavalryScout", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_StrengthTraining, null, AbilityCommand("LearnAbilitiesCavalryScout", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Improved Heartbeat Sensor SS4
//--------------------------------------------------------------------------------------------------
bool gt_ImprovedHeartbeatSensorSS4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "SoldierSkills") == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ImprovedHeartbeatSensor", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImprovedHeartbeatSensorSS4_Init () {
    gt_ImprovedHeartbeatSensorSS4 = TriggerCreate("gt_ImprovedHeartbeatSensorSS4_Func");
    TriggerAddEventUnitAbility(gt_ImprovedHeartbeatSensorSS4, null, AbilityCommand("LearnAbilitiesCavalryScout", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Recon Skills
//--------------------------------------------------------------------------------------------------
bool gt_LearnReconSkills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "ReconnaissanceSkills") == 1)) {
        UnitAbilityChangeLevel(EventUnit(), "Camouflage", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "ReconnaissanceSkills") == 2)) {
        UnitAbilityChangeLevel(EventUnit(), "Camouflage", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "ReconnaissanceSkills") == 3)) {
        UnitAbilityChangeLevel(EventUnit(), "Camouflage", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnReconSkills_Init () {
    gt_LearnReconSkills = TriggerCreate("gt_LearnReconSkills_Func");
    TriggerAddEventUnitAbility(gt_LearnReconSkills, null, AbilityCommand("LearnAbilitiesCavalryScout", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_LearnReconSkills, null, AbilityCommand("LearnAbilitiesForceRecon2", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heartbeat
//--------------------------------------------------------------------------------------------------
bool gt_Heartbeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Heartbeat_Init () {
    gt_Heartbeat = TriggerCreate("gt_Heartbeat_Func");
    TriggerAddEventPlayerEffectUsed(gt_Heartbeat, c_playerAny, "HeartbeatTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: M2 Sentry Death Effect
//--------------------------------------------------------------------------------------------------
bool gt_M2SentryDeathEffect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_M2SentryDeathEffect_Init () {
    gt_M2SentryDeathEffect = TriggerCreate("gt_M2SentryDeathEffect_Func");
    TriggerAddEventPlayerEffectUsed(gt_M2SentryDeathEffect, c_playerAny, "CESentryDummyDeathEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive Bonus
//--------------------------------------------------------------------------------------------------
bool gt_ReviveBonus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gamemode != 12))) {
            return false;
        }

        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == gv_mOS[2][0]) || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == gv_mOS[2][1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_tKer[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] == true)) {
        gv_tKer[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] = false;
        return true;
    }
    gv_medicPoints[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] += 5.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReviveBonus_Init () {
    gt_ReviveBonus = TriggerCreate("gt_ReviveBonus_Func");
    TriggerAddEventPlayerEffectUsed(gt_ReviveBonus, c_playerAny, "ReviveModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heal Bonus
//--------------------------------------------------------------------------------------------------
bool gt_HealBonus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gamemode != 12))) {
            return false;
        }

        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == gv_mOS[2][0]) || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == gv_mOS[2][1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) < 100.0) && (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) > 75.0)) {
        gv_medicPoints[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] += 0.5;
    }
    else if ((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) <= 75.0) && (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) > 50.0)) {
        gv_medicPoints[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] += 1.5;
    }
    else if ((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) && (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) > 25.0)) {
        gv_medicPoints[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] += 2.5;
    }
    else if ((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) <= 25.0) && (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) > 0.0)) {
        gv_medicPoints[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] += 3.5;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealBonus_Init () {
    gt_HealBonus = TriggerCreate("gt_HealBonus_Func");
    TriggerAddEventPlayerEffectUsed(gt_HealBonus, c_playerAny, "NanoInjectionHeal");
    TriggerAddEventPlayerEffectUsed(gt_HealBonus, c_playerAny, "ImprovedNanoInjectionHeal");
    TriggerAddEventPlayerEffectUsed(gt_HealBonus, c_playerAny, "IMBloodTransfusionApplyBehavior");
    TriggerAddEventPlayerEffectUsed(gt_HealBonus, c_playerAny, "BloodTransfusionApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Bonus
//--------------------------------------------------------------------------------------------------
bool gt_GiveBonus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gamemode != 12))) {
            return false;
        }

        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == gv_mOS[2][0]) || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == gv_mOS[2][1])))) {
            return false;
        }

        if (!((gv_medicPoints[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] >= (FixedToInt((5.0 * gv_pointLevel[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)])))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AwardPlayerXP((FixedToInt((3.0 * gv_pointMultiplier[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)]))), StringExternal("Param/Value/80EC5EA4"), EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    gv_pointLevel[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] *= 2.0;
    if ((gv_pointMultiplier[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] >= 64.0)) {
        gv_pointMultiplier[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] = 64.0;
    }
    else {
        gv_pointMultiplier[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] *= 2.0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveBonus_Init () {
    gt_GiveBonus = TriggerCreate("gt_GiveBonus_Func");
    TriggerAddEventPlayerEffectUsed(gt_GiveBonus, c_playerAny, "ReviveModifyUnit");
    TriggerAddEventPlayerEffectUsed(gt_GiveBonus, c_playerAny, "NanoInjectionHeal");
    TriggerAddEventPlayerEffectUsed(gt_GiveBonus, c_playerAny, "ImprovedNanoInjectionHeal");
    TriggerAddEventPlayerEffectUsed(gt_GiveBonus, c_playerAny, "BloodTransfusionApplyBehavior");
    TriggerAddEventPlayerEffectUsed(gt_GiveBonus, c_playerAny, "IMBloodTransfusionApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SITREP Display
//--------------------------------------------------------------------------------------------------
bool gt_SITREPDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_temptext;
    text lv_floattext;
    int lv_int;
    string lv_healthicon;

    // Automatic Variable Declarations
    playergroup auto76402A12_g;
    int auto76402A12_var;
    const int auto5A56A9C6_ae = gv_ailmentCount;
    const int auto5A56A9C6_ai = 1;

    // Variable Initialization
    lv_healthicon = "Assets\\Textures\\icon-health-zerg.dds";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_inventory, EventPlayer()) == true)) {
        DialogSetVisible(gv_inventory, PlayerGroupSingle(EventPlayer()), false);
    }
    auto76402A12_g = gv_players;
    auto76402A12_var = -1;
    while (true) {
        auto76402A12_var = PlayerGroupNextPlayer(auto76402A12_g, auto76402A12_var);
        if (auto76402A12_var < 0) { break; }
        if ((gv_playerHeroes[auto76402A12_var] != null) && ((UnitGetPropertyFixed(gv_playerHeroes[auto76402A12_var], c_unitPropLifePercent, c_unitPropCurrent) <= 75.0) || (gf_UnitHighestAilment(gv_playerHeroes[auto76402A12_var]) > 0) || (UnitIsAlive(gv_playerHeroes[auto76402A12_var]) == false))) {
            lv_floattext = StringToText("");
            if ((EventPlayer() == auto76402A12_var)) {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/C81E393B"));
            }
            else {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/9441E2C3"));
            }
            lv_temptext = (lv_temptext + StringExternal("Param/Value/B97E0AFF"));
            lv_temptext = (lv_temptext + TextWithColor(PlayerName(auto76402A12_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto76402A12_var, false))));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/13324CDC"));
            lv_temptext = (lv_temptext + TextWithColor(UnitTypeGetName(UnitGetType(gv_playerHeroes[auto76402A12_var])), Color(0.00, 84.31, 41.96)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/E95A141A"));
            if ((UnitIsAlive(gv_playerHeroes[auto76402A12_var]) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimpleSmall", UnitGetPosition(gv_playerHeroes[auto76402A12_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto76402A12_var, false)), 7.0, 270.0);
                PingSetUnit(PingLastCreated(), gv_playerHeroes[auto76402A12_var]);
                PingSetTooltip(PingLastCreated(), PlayerName(auto76402A12_var));
                SoundPlayOnUnit(SoundLink("RadioChatter", -1), PlayerGroupSingle(EventPlayer()), gv_playerHeroes[auto76402A12_var], 0.0, 100.0, 0.0);
                lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[auto76402A12_var], c_unitPropLifePercent, c_unitPropCurrent), 0), Color((100.0 - UnitGetPropertyFixed(gv_playerHeroes[auto76402A12_var], c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(gv_playerHeroes[auto76402A12_var], c_unitPropLifePercent, c_unitPropCurrent), 0.0)));
                if ((UnitGetPropertyFixed(gv_playerHeroes[auto76402A12_var], c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/C77C0806"));
                    lv_floattext = (lv_floattext + gf_TextImage(lv_healthicon, 22));
                }
                else {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/DD20639E"));
                }
                lv_int = 0;
                for ( ; ( (auto5A56A9C6_ai >= 0 && lv_int <= auto5A56A9C6_ae) || (auto5A56A9C6_ai < 0 && lv_int >= auto5A56A9C6_ae) ) ; lv_int += auto5A56A9C6_ai ) {
                    if ((UnitHasBehavior(gv_playerHeroes[auto76402A12_var], gv_ailments[lv_int]) == true)) {
                        lv_temptext = (lv_temptext + gf_TextImage(gv_ailmentImages[lv_int], 22));
                        lv_floattext = (lv_floattext + gf_TextImage(gv_ailmentImages[lv_int], 22));
                    }

                }
                gf_FloatingTextforPlayer(gv_playerHeroes[auto76402A12_var], lv_floattext, EventPlayer());
                lv_temptext = (lv_temptext + StringExternal("Param/Value/09FA987A"));
            }
            else {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/C93028A3"));
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimpleSmall", UnitGetPosition(gv_playerHeroes[auto76402A12_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto76402A12_var, false)), 7.0, 270.0);
                PingSetUnit(PingLastCreated(), gv_playerHeroes[auto76402A12_var]);
                PingSetTooltip(PingLastCreated(), PlayerName(auto76402A12_var));
                lv_temptext = (lv_temptext + StringExternal("Param/Value/C7DABED7"));
            }
        }
    }
    gf_DisplayVisorTextDialog(lv_temptext, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SITREPDisplay_Init () {
    gt_SITREPDisplay = TriggerCreate("gt_SITREPDisplay_Func");
    TriggerAddEventUnitAbility(gt_SITREPDisplay, null, AbilityCommand("SITREP", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Specialist Skills 2
//--------------------------------------------------------------------------------------------------
bool gt_ExplosivesExpert_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "ExplosivesExpert") == 2)) {
        PlayerCreateEffectUnit(UnitGetOwner(EventUnit()), "CommandoImprovedFragMP", EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExplosivesExpert_Init () {
    gt_ExplosivesExpert = TriggerCreate("gt_ExplosivesExpert_Func");
    TriggerAddEventUnitAbility(gt_ExplosivesExpert, null, AbilityCommand("LearnAbilitiesCommando", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Improved Automatic Mode
//--------------------------------------------------------------------------------------------------
bool gt_ImprovedAutomaticMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "SoldierSkills") == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ImprovedAutomaticMode", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImprovedAutomaticMode_Init () {
    gt_ImprovedAutomaticMode = TriggerCreate("gt_ImprovedAutomaticMode_Func");
    TriggerAddEventUnitAbility(gt_ImprovedAutomaticMode, null, AbilityCommand("LearnAbilitiesCommando", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ImprovedAutomaticMode, null, AbilityCommand("LearnAbilitiesMercenary", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrono Shift
//--------------------------------------------------------------------------------------------------
bool gt_ChronoShift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    unitgroup lv_chronoShift;
    point lv_spawnPointRifleman1;
    point lv_spawnPointRifleman2;
    point lv_spawnPointRifleman3;
    point lv_spawnPointRifleman4;
    point lv_spawnPointCombatMedic;
    point lv_spawnPointAutomaticRifleman;
    point lv_spawnPoint74DFlamer;
    point lv_spawnPointSniper;
    fixed lv_timeRemaining;
    timer lv_timer;
    fixed lv_degrees;
    fixed lv_distance;
    region lv_region;
    point lv_point;
    bool lv_offset;

    // Automatic Variable Declarations
    playergroup auto69246A0E_g;
    int auto69246A0E_var;
    unitgroup autoB45315B1_g;
    int autoB45315B1_u;
    unit autoB45315B1_var;
    unitgroup autoC4F6241A_g;
    int autoC4F6241A_u;
    unit autoC4F6241A_var;
    unitgroup autoE22BF95F_g;
    int autoE22BF95F_u;
    unit autoE22BF95F_var;
    unitgroup autoED7E867C_g;
    int autoED7E867C_u;
    unit autoED7E867C_var;
    unitgroup auto2FED80A7_g;
    int auto2FED80A7_u;
    unit auto2FED80A7_var;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(lv_caster);
    lv_chronoShift = UnitGroupEmpty();
    lv_timeRemaining = 150.0;
    lv_timer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    auto69246A0E_g = gv_players;
    auto69246A0E_var = -1;
    while (true) {
        auto69246A0E_var = PlayerGroupNextPlayer(auto69246A0E_g, auto69246A0E_var);
        if (auto69246A0E_var < 0) { break; }
        if ((libNtve_gf_PlayerIsEnemy(lv_owner, auto69246A0E_var, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(auto69246A0E_var), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 5.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/400B57AE"));
        }

    }
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("Mothership_RecallStart", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_spawnPointRifleman1 = PointWithOffsetPolar(EventUnitTargetPoint(), 4.0, 45.0);
    lv_spawnPointRifleman2 = PointWithOffsetPolar(EventUnitTargetPoint(), 4.0, 135.0);
    lv_spawnPointRifleman3 = PointWithOffsetPolar(EventUnitTargetPoint(), 4.0, 225.0);
    lv_spawnPointRifleman4 = PointWithOffsetPolar(EventUnitTargetPoint(), 4.0, 315.0);
    lv_spawnPointCombatMedic = PointWithOffsetPolar(EventUnitTargetPoint(), 2.0, 0.0);
    lv_spawnPointAutomaticRifleman = PointWithOffsetPolar(EventUnitTargetPoint(), 2.0, 90.0);
    lv_spawnPoint74DFlamer = PointWithOffsetPolar(EventUnitTargetPoint(), 2.0, 180.0);
    lv_spawnPointSniper = PointWithOffsetPolar(EventUnitTargetPoint(), 2.0, 270.0);
    if ((RegionContainsPoint(RegionEntireMap(), lv_spawnPointRifleman1) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, lv_owner, lv_spawnPointRifleman1);
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/98DB8820"), StringExternal("Param/Value/25DFA231"), StringToText(""));
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "BurstFire", UnitLastCreated(), 1);
        }

    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, lv_owner, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit));
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/50B6C350"), StringExternal("Param/Value/E216B231"), StringToText(""));
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "BurstFire", UnitLastCreated(), 1);
        }

    }
    UnitGroupAddUnitGroup(lv_chronoShift, UnitLastCreatedGroup());
    if ((RegionContainsPoint(RegionEntireMap(), lv_spawnPointRifleman2) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, lv_owner, lv_spawnPointRifleman2);
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/39AE12C6"), StringExternal("Param/Value/5F2FCE4B"), StringToText(""));
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "BurstFire", UnitLastCreated(), 1);
        }

    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, lv_owner, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit));
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/724A05AE"), StringExternal("Param/Value/959CA119"), StringToText(""));
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "BurstFire", UnitLastCreated(), 1);
        }

    }
    UnitGroupAddUnitGroup(lv_chronoShift, UnitLastCreatedGroup());
    if ((RegionContainsPoint(RegionEntireMap(), lv_spawnPointRifleman3) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, lv_owner, lv_spawnPointRifleman3);
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/61220F8D"), StringExternal("Param/Value/2BB9E5C1"), StringToText(""));
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "BurstFire", UnitLastCreated(), 1);
        }

    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, lv_owner, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit));
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/76606482"), StringExternal("Param/Value/AAAB13A4"), StringToText(""));
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "BurstFire", UnitLastCreated(), 1);
        }

    }
    UnitGroupAddUnitGroup(lv_chronoShift, UnitLastCreatedGroup());
    if ((RegionContainsPoint(RegionEntireMap(), lv_spawnPointRifleman4) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, lv_owner, lv_spawnPointRifleman4);
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/A9C63D94"), StringExternal("Param/Value/9FFDEEEA"), StringToText(""));
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "BurstFire", UnitLastCreated(), 1);
        }

    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, lv_owner, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit));
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/D771D66E"), StringExternal("Param/Value/BEBAC834"), StringToText(""));
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "BurstFire", UnitLastCreated(), 1);
        }

    }
    UnitGroupAddUnitGroup(lv_chronoShift, UnitLastCreatedGroup());
    if ((RegionContainsPoint(RegionEntireMap(), lv_spawnPointCombatMedic) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Infantry68WCombatMedic", 0, lv_owner, lv_spawnPointCombatMedic);
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/B83D2D5C"), StringExternal("Param/Value/BFD6931D"), StringToText(""));
        UnitBehaviorAdd(UnitLastCreated(), "MedicNanoAI", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MedicBTAI", UnitLastCreated(), 1);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Infantry68WCombatMedic", 0, lv_owner, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit));
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/0614C644"), StringExternal("Param/Value/83EE4FE8"), StringToText(""));
        UnitBehaviorAdd(UnitLastCreated(), "MedicNanoAI", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MedicBTAI", UnitLastCreated(), 1);
    }
    UnitGroupAddUnitGroup(lv_chronoShift, UnitLastCreatedGroup());
    if ((RegionContainsPoint(RegionEntireMap(), lv_spawnPointAutomaticRifleman) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryAutomaticRifleman", 0, lv_owner, lv_spawnPointAutomaticRifleman);
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/6FC3BD74"), StringExternal("Param/Value/FC0991B4"), StringToText(""));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryAutomaticRifleman", 0, lv_owner, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit));
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/148430F8"), StringExternal("Param/Value/91D19623"), StringToText(""));
    }
    UnitGroupAddUnitGroup(lv_chronoShift, UnitLastCreatedGroup());
    if ((RegionContainsPoint(RegionEntireMap(), lv_spawnPoint74DFlamer) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Infantry74DFlamethrower", 0, lv_owner, lv_spawnPoint74DFlamer);
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/41337C84"), StringExternal("Param/Value/5C12F2FF"), StringToText(""));
        UnitBehaviorAdd(UnitLastCreated(), "FuelDischargeAIGroupHero", UnitLastCreated(), 1);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Infantry74DFlamethrower", 0, lv_owner, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit));
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/BBB65937"), StringExternal("Param/Value/DC99D313"), StringToText(""));
        UnitBehaviorAdd(UnitLastCreated(), "FuelDischargeAIGroupHero", UnitLastCreated(), 1);
    }
    UnitGroupAddUnitGroup(lv_chronoShift, UnitLastCreatedGroup());
    if ((RegionContainsPoint(RegionEntireMap(), lv_spawnPointSniper) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantrySniper", 0, lv_owner, lv_spawnPointSniper);
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/658AE22A"), StringExternal("Param/Value/47AD14C1"), StringToText(""));
        UnitBehaviorAdd(UnitLastCreated(), "BinocularAIHero", UnitLastCreated(), 1);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantrySniper", 0, lv_owner, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit));
        UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
        UnitBehaviorAdd(UnitLastCreated(), "SingleRecalled", UnitLastCreated(), 1);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/80B3FCC4"), StringExternal("Param/Value/D1065D45"), StringToText(""));
        UnitBehaviorAdd(UnitLastCreated(), "BinocularAIHero", UnitLastCreated(), 1);
    }
    UnitGroupAddUnitGroup(lv_chronoShift, UnitLastCreatedGroup());
    autoB45315B1_g = lv_chronoShift;
    autoB45315B1_u = UnitGroupCount(autoB45315B1_g, c_unitCountAll);
    for (;; autoB45315B1_u -= 1) {
        autoB45315B1_var = UnitGroupUnitFromEnd(autoB45315B1_g, autoB45315B1_u);
        if (autoB45315B1_var == null) { break; }
        libNtve_gf_MakeUnitUncommandable(autoB45315B1_var, true);
        UnitBehaviorAdd(autoB45315B1_var, "KillsToCaster", lv_caster, 1);
    }
    gv_cS_Escort_Toggled = false;
    TimerStart(lv_timer, lv_timeRemaining, false, c_timeGame);
    lv_timer = TimerLastStarted();
    while ((TimerGetRemaining(lv_timer) > 0.0)) {
        Wait(1.0, c_timeGame);
        if ((gv_cS_Escort == true) && (UnitIsAlive(lv_caster) == true)) {
            lv_degrees = RandomFixed(90.0, -90.0);
            lv_distance = RandomFixed(3.0, 6.5);
            UnitGroupIssueOrder(lv_chronoShift, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(lv_caster), lv_distance, (UnitGetFacing(lv_caster) + lv_degrees))), c_orderQueueReplace);
            if ((UnitHasBehavior2(lv_caster, "Sprint") == true)) {
                autoE22BF95F_g = lv_chronoShift;
                autoE22BF95F_u = UnitGroupCount(autoE22BF95F_g, c_unitCountAll);
                for (;; autoE22BF95F_u -= 1) {
                    autoE22BF95F_var = UnitGroupUnitFromEnd(autoE22BF95F_g, autoE22BF95F_u);
                    if (autoE22BF95F_var == null) { break; }
                    if ((UnitHasBehavior2(autoE22BF95F_var, "Sprint") == false)) {
                        UnitIssueOrder(autoE22BF95F_var, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
                    }
                }
            }
            if ((libNtve_gf_UnitGroupIsDead(lv_chronoShift) == true)) {
                break;
            }
            if ((lv_offset == true)) {
                lv_offset = false;
            }
        }
        else {
            if ((gv_cS_Escort_Toggled == true) && (lv_offset == false)) {
                lv_offset = true;
                autoC4F6241A_g = lv_chronoShift;
                autoC4F6241A_u = UnitGroupCount(autoC4F6241A_g, c_unitCountAll);
                for (;; autoC4F6241A_u -= 1) {
                    autoC4F6241A_var = UnitGroupUnitFromEnd(autoC4F6241A_g, autoC4F6241A_u);
                    if (autoC4F6241A_var == null) { break; }
                    lv_point = PointWithOffsetPolar(UnitGetPosition(UnitGroupRandomUnit(lv_chronoShift, c_unitCountAlive)), RandomFixed(2.5, 3.0), libNtve_gf_RandomAngle());
                    UnitIssueOrder(autoC4F6241A_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
                }
            }
        }
    }
    if ((libNtve_gf_UnitGroupIsDead(lv_chronoShift) == false)) {
        SoundPlay(SoundLink("Mothership_RecallEnd", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        return true;
    }
    autoED7E867C_g = lv_chronoShift;
    autoED7E867C_u = UnitGroupCount(autoED7E867C_g, c_unitCountAll);
    for (;; autoED7E867C_u -= 1) {
        autoED7E867C_var = UnitGroupUnitFromEnd(autoED7E867C_g, autoED7E867C_u);
        if (autoED7E867C_var == null) { break; }
        UnitBehaviorAdd(autoED7E867C_var, "SingleRecalled", autoED7E867C_var, 1);
    }
    Wait(1.4, c_timeGame);
    auto2FED80A7_g = lv_chronoShift;
    auto2FED80A7_u = UnitGroupCount(auto2FED80A7_g, c_unitCountAll);
    for (;; auto2FED80A7_u -= 1) {
        auto2FED80A7_var = UnitGroupUnitFromEnd(auto2FED80A7_g, auto2FED80A7_u);
        if (auto2FED80A7_var == null) { break; }
        UnitRemove(auto2FED80A7_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChronoShift_Init () {
    gt_ChronoShift = TriggerCreate("gt_ChronoShift_Func");
    TriggerAddEventUnitAbility(gt_ChronoShift, null, AbilityCommand("ChronoShift", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrono Shift Escort
//--------------------------------------------------------------------------------------------------
bool gt_ChronoShiftEscort_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("EscortCC", 0))) {
        gv_cS_Escort = true;
        gv_cS_Escort_Toggled = true;
    }
    else {
        gv_cS_Escort = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChronoShiftEscort_Init () {
    gt_ChronoShiftEscort = TriggerCreate("gt_ChronoShiftEscort_Func");
    TriggerAddEventUnitAbility(gt_ChronoShiftEscort, null, AbilityCommand("EscortCC", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ChronoShiftEscort, null, AbilityCommand("EscortCC", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapon Switch 2
//--------------------------------------------------------------------------------------------------
bool gt_WeaponSwapShot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "CommandoHero")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_battleRifleAmmo[UnitGetOwner(EventUnit())] = PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, gv_mandoShotgunAmmo[UnitGetOwner(EventUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponSwapShot_Init () {
    gt_WeaponSwapShot = TriggerCreate("gt_WeaponSwapShot_Func");
    TriggerAddEventUnitAbility(gt_WeaponSwapShot, null, AbilityCommand("MandoWeaponSpecialize", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapon Switch 3
//--------------------------------------------------------------------------------------------------
bool gt_WeaponSwapRifle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "CommandoHero")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_mandoShotgunAmmo[UnitGetOwner(EventUnit())] = PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, gv_battleRifleAmmo[UnitGetOwner(EventUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponSwapRifle_Init () {
    gt_WeaponSwapRifle = TriggerCreate("gt_WeaponSwapRifle_Func");
    TriggerAddEventUnitAbility(gt_WeaponSwapRifle, null, AbilityCommand("MandoWeaponSpecialize", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cyborg Skills
//--------------------------------------------------------------------------------------------------
bool gt_CyborgSkills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "CyborgSkills", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CyborgSkills_Init () {
    gt_CyborgSkills = TriggerCreate("gt_CyborgSkills_Func");
    TriggerAddEventUnitAbility(gt_CyborgSkills, null, AbilityCommand("LearnAbilitiesCyborgMk2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CyborgSkills, null, AbilityCommand("LearnAbilitiesCyborgMk2", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CyborgSkills, null, AbilityCommand("LearnAbilitiesCyborgMk2", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stonewall Texture
//--------------------------------------------------------------------------------------------------
bool gt_StonewallTexture_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnit(SoundLink("Immortal_HardenedShieldImpact", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    while (!((UnitHasBehavior(EventUnit(), "StonewallProtocol") == false))) {
        Wait(0.5, c_timeGame);
    }
    SoundPlayOnUnit(SoundLink("Sentry_GuardianShieldDeath", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StonewallTexture_Init () {
    gt_StonewallTexture = TriggerCreate("gt_StonewallTexture_Func");
    TriggerAddEventUnitAbility(gt_StonewallTexture, null, AbilityCommand("StonewallProtocol", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crowd Control
//--------------------------------------------------------------------------------------------------
bool gt_CrowdControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_user;
    int lv_owner;

    // Automatic Variable Declarations
    int auto8884D484_val;

    // Variable Initialization
    lv_user = EventUnit();
    lv_owner = UnitGetOwner(lv_user);

    // Actions
    if (!runActions) {
        return true;
    }

    auto8884D484_val = UnitAbilityGetLevel(lv_user, "CrowdControlTest");
    if (auto8884D484_val == 0) {
    }
    else if (auto8884D484_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "CrowdControl1", 1);
    }
    else if (auto8884D484_val == 2) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "CrowdControl2", 1);
    }
    else if (auto8884D484_val == 3) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "CrowdControl3", 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaError, StringExternal("Param/Value/9D2E1187"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrowdControl_Init () {
    gt_CrowdControl = TriggerCreate("gt_CrowdControl_Func");
    TriggerAddEventUnitAbility(gt_CrowdControl, null, AbilityCommand("LearnAbilitiesEnforcer", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CrowdControl, null, AbilityCommand("LearnAbilitiesEnforcer", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -a
//--------------------------------------------------------------------------------------------------
bool gt_Commanda_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_a10distro;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "-a")) {
        if ((gv_a10Distro[EventPlayer()] == -1.0)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/2AF7223A"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/0A6FFC24") + FixedToText(gv_a10Distro[EventPlayer()], c_fixedPrecisionAny)));
        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/5E9F4971"));
    }
    else {
        if ((EventChatMessage(false) == "-a d")) {
            gv_a10Distro[EventPlayer()] = -1.0;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/DD21F508"));
        }
        else {
            lv_a10distro = FixedToInt(StringToFixed(StringSub(EventChatMessage(false), 4, StringLength(EventChatMessage(false)))));
            if ((lv_a10distro >= 0.0) && (lv_a10distro <= 360.0)) {
                gv_a10Distro[EventPlayer()] = lv_a10distro;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/D66CF3B5") + FixedToText(gv_a10Distro[EventPlayer()], c_fixedPrecisionAny)));
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/4FF4E348"));
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commanda_Init () {
    gt_Commanda = TriggerCreate("gt_Commanda_Func");
    TriggerAddEventChatMessage(gt_Commanda, c_playerAny, "-a", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -c
//--------------------------------------------------------------------------------------------------
bool gt_Commandc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_caslldrdistro;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringSub(EventChatMessage(false), 1, 3) != "-cc"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "-c")) {
        if ((gv_cASLLDRDistro[EventPlayer()] == -1.0)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/8C1311DA"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/C0145702") + FixedToText(gv_cASLLDRDistro[EventPlayer()], c_fixedPrecisionAny)));
        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/DED74F70"));
    }
    else {
        if ((EventChatMessage(false) == "-c d")) {
            gv_cASLLDRDistro[EventPlayer()] = -1.0;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/D91BD424"));
        }
        else {
            lv_caslldrdistro = FixedToInt(StringToFixed(StringSub(EventChatMessage(false), 4, StringLength(EventChatMessage(false)))));
            if ((lv_caslldrdistro >= 0.0) && (lv_caslldrdistro <= 360.0)) {
                gv_cASLLDRDistro[EventPlayer()] = lv_caslldrdistro;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/1F9526C9") + FixedToText(gv_cASLLDRDistro[EventPlayer()], c_fixedPrecisionAny)));
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/845D456A"));
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commandc_Init () {
    gt_Commandc = TriggerCreate("gt_Commandc_Func");
    TriggerAddEventChatMessage(gt_Commandc, c_playerAny, "-c", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -s
//--------------------------------------------------------------------------------------------------
bool gt_Commands_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_shells;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((TechTreeUpgradeCount(EventPlayer(), "RadioMan", c_techCountCompleteOnly) == 0) && (EventChatMessage(false) == "-s"))) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/9312D7AB") + IntToText(gv_iDFShells[EventPlayer()])));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/0DC65D8B") + IntToText(gv_iDFShellsGlobal)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/6900DD88") + FixedToText(gv_iDFRadius[EventPlayer()], c_fixedPrecisionAny)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/273EA510"));
    }
    else {
        lv_shells = StringToInt(StringSub(EventChatMessage(false), 4, StringLength(EventChatMessage(false))));
        if ((lv_shells >= 1) && (lv_shells <= 10)) {
            gv_iDFShells[EventPlayer()] = lv_shells;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/588555F2") + IntToText(gv_iDFShells[EventPlayer()])));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/EAF6A37F"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commands_Init () {
    gt_Commands = TriggerCreate("gt_Commands_Func");
    TriggerAddEventChatMessage(gt_Commands, c_playerAny, "-s", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -r
//--------------------------------------------------------------------------------------------------
bool gt_Commandr_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_radius;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "RadioMan", c_techCountCompleteOnly) == 0) && (EventChatMessage(false) == "-r")) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/E10D16E1") + IntToText(gv_iDFShells[EventPlayer()])));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/1492DDA9") + IntToText(gv_iDFShellsGlobal)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/C1E65828") + FixedToText(gv_iDFRadius[EventPlayer()], c_fixedPrecisionAny)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/35C3BDE6"));
    }
    else {
        lv_radius = FixedToInt(StringToFixed(StringSub(EventChatMessage(false), 4, StringLength(EventChatMessage(false)))));
        if ((lv_radius >= 2) && (lv_radius <= 10)) {
            gv_iDFRadius[EventPlayer()] = lv_radius;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/BF89A89C") + FixedToText(gv_iDFRadius[EventPlayer()], c_fixedPrecisionAny)));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/C0B72C6F"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commandr_Init () {
    gt_Commandr = TriggerCreate("gt_Commandr_Func");
    TriggerAddEventChatMessage(gt_Commandr, c_playerAny, "-r", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -d
//--------------------------------------------------------------------------------------------------
bool gt_Commandd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distro;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "RadioMan", c_techCountCompleteOnly) == 0) && (EventChatMessage(false) == "-d")) {
        if ((gv_iDFDistro[EventPlayer()] == -1.0)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/C92912D2"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/F2AE1916") + FixedToText(gv_iDFDistro[EventPlayer()], c_fixedPrecisionAny)));
        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/2A796559"));
    }
    else {
        if ((EventChatMessage(false) == "-d c")) {
            gv_iDFDistro[EventPlayer()] = -1.0;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/CED75662"));
        }
        else {
            lv_distro = FixedToInt(StringToFixed(StringSub(EventChatMessage(false), 4, StringLength(EventChatMessage(false)))));
            if ((lv_distro >= 0.0) && (lv_distro <= 360.0)) {
                gv_iDFDistro[EventPlayer()] = lv_distro;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/EFC08090") + FixedToText(gv_iDFDistro[EventPlayer()], c_fixedPrecisionAny)));
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/0639CCFB"));
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commandd_Init () {
    gt_Commandd = TriggerCreate("gt_Commandd_Func");
    TriggerAddEventChatMessage(gt_Commandd, c_playerAny, "-d", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -i
//--------------------------------------------------------------------------------------------------
bool gt_Commandi_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_interval;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 1) != "-item"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "RadioMan", c_techCountCompleteOnly) == 0) && (EventChatMessage(false) == "-i")) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/1A8B9AC2") + FixedToText(gv_iDFInterval[EventPlayer()], c_fixedPrecisionAny)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/784D7762"));
    }
    else {
        lv_interval = StringToFixed(StringWord(EventChatMessage(false), 2));
        if ((lv_interval >= 0.2) && (lv_interval <= 5.0)) {
            gv_iDFInterval[EventPlayer()] = lv_interval;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/48B5F86D") + FixedToText(gv_iDFInterval[EventPlayer()], c_fixedPrecisionAny)));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/94A89AA7"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commandi_Init () {
    gt_Commandi = TriggerCreate("gt_Commandi_Func");
    TriggerAddEventChatMessage(gt_Commandi, c_playerAny, "-i", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CAS
//--------------------------------------------------------------------------------------------------
bool gt_CAS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    unit lv_shocker;
    actor lv_warning;
    point lv_spawnpoint;
    fixed lv_cASDistribution;
    int lv_int;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(lv_caster);
    lv_cASDistribution = gv_cASLLDRDistro[EventPlayer()];

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_jFOAvailable == false)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/741503EF"), SoundLink("UI_GenericError", -1));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        return true;
    }
    if ((lv_cASDistribution == -1.0)) {
        lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), 20.0, (AngleBetweenPoints(UnitGetPosition(lv_caster), EventUnitTargetPoint()) - 90.0));
    }
    else {
        lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), (lv_int - 20.0), lv_cASDistribution);
    }
    libNtve_gf_CreateActorAtPoint("CallForFireWarning", EventUnitTargetPoint());
    lv_warning = libNtve_gf_ActorLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/74637FE4"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBaseAttack", EventUnitTargetPoint(), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EBD5BF18"));
    SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    Wait(2.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("CASImpact", -1), PlayerGroupAll(), EventUnitTargetPoint(), 1.0, 100.0, 0.0);
    Wait(2.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Shocker", c_unitCreateIgnorePlacement, lv_owner, lv_spawnpoint, EventUnitTargetPoint());
    lv_shocker = UnitLastCreated();
    UnitSetHeight(lv_shocker, 20.0, 0.0);
    UnitSetHeight(lv_shocker, 7.0, 1.0);
    UnitBehaviorAdd(lv_shocker, "KillsToCaster", lv_caster, 1);
    UnitSetTeamColorIndex(lv_shocker, 13);
    libNtve_gf_MakeUnitInvulnerable(lv_shocker, true);
    UnitIssueOrder(lv_shocker, OrderTargetingPoint(AbilityCommand("ClusterRocketsShocker", 0), EventUnitTargetPoint()), c_orderQueueReplace);
    lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), 60.0, UnitGetFacing(lv_shocker));
    lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    UnitIssueOrder(lv_shocker, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnpoint), c_orderQueueAddToEnd);
    SoundPlayAtPoint(SoundLink("CASImpact", -1), PlayerGroupAll(), EventUnitTargetPoint(), 1.0, 100.0, 0.0);
    Wait(1.5, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/CA7D063C"));
    gf_PlanePathing(lv_shocker, EventUnitTargetPoint());
    ActorSend(lv_warning, "Destroy");
    Wait(8.5, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(lv_shocker), "SetOpacity 0.000000 2.000000 op");
    UnitSetHeight(lv_shocker, 20.0, 1.0);
    Wait(1.0, c_timeGame);
    UnitRemove(lv_shocker);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CAS_Init () {
    gt_CAS = TriggerCreate("gt_CAS_Func");
    TriggerAddEventUnitAbility(gt_CAS, null, AbilityCommand("CallforCAS", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LLDR
//--------------------------------------------------------------------------------------------------
bool gt_LLDR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    unit lv_shocker;
    actor lv_warning;
    point lv_spawnpoint;
    fixed lv_cASDistribution;
    int lv_int;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = UnitInventoryUnit(EventUnitInventoryItem());
    lv_owner = UnitGetOwner(lv_caster);
    lv_cASDistribution = gv_cASLLDRDistro[EventPlayer()];

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "LLDR"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_cASDistribution == -1.0)) {
        lv_spawnpoint = PointWithOffsetPolar(EventUnitInventoryItemTargetPoint(), 20.0, (AngleBetweenPoints(UnitGetPosition(lv_caster), EventUnitInventoryItemTargetPoint()) - 90.0));
    }
    else {
        lv_spawnpoint = PointWithOffsetPolar(EventUnitInventoryItemTargetPoint(), (lv_int - 20.0), lv_cASDistribution);
    }
    libNtve_gf_CreateActorAtPoint("CallForFireWarning", EventUnitInventoryItemTargetPoint());
    lv_warning = libNtve_gf_ActorLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/45F4DE1A"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBaseAttack", EventUnitInventoryItemTargetPoint(), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E94E087F"));
    SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    Wait(2.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("CASImpact", -1), PlayerGroupAll(), EventUnitInventoryItemTargetPoint(), 1.0, 100.0, 0.0);
    Wait(2.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Shocker", c_unitCreateIgnorePlacement, lv_owner, lv_spawnpoint, EventUnitInventoryItemTargetPoint());
    lv_shocker = UnitLastCreated();
    UnitSetHeight(lv_shocker, 20.0, 0.0);
    UnitSetHeight(lv_shocker, 7.0, 1.0);
    UnitBehaviorAdd(lv_shocker, "KillsToCaster", lv_caster, 1);
    UnitSetTeamColorIndex(lv_shocker, 13);
    libNtve_gf_MakeUnitInvulnerable(lv_shocker, true);
    UnitIssueOrder(lv_shocker, OrderTargetingPoint(AbilityCommand("ClusterRocketsShocker", 0), EventUnitInventoryItemTargetPoint()), c_orderQueueReplace);
    lv_spawnpoint = PointWithOffsetPolar(EventUnitInventoryItemTargetPoint(), 60.0, UnitGetFacing(lv_shocker));
    lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    UnitIssueOrder(lv_shocker, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnpoint), c_orderQueueAddToEnd);
    Wait(1.5, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/B244BF26"));
    gf_PlanePathing(lv_shocker, EventUnitInventoryItemTargetPoint());
    ActorSend(lv_warning, "Destroy");
    Wait(8.5, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(lv_shocker), "SetOpacity 0.000000 2.000000 op");
    UnitSetHeight(lv_shocker, 20.0, 1.0);
    Wait(2.1, c_timeGame);
    UnitRemove(lv_shocker);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LLDR_Init () {
    gt_LLDR = TriggerCreate("gt_LLDR_Func");
    TriggerAddEventUnitInventoryChange(gt_LLDR, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Weapons Team
//--------------------------------------------------------------------------------------------------
bool gt_AttackWeaponsTeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    unit lv_caster;
    unit lv_unit;
    unitgroup lv_aWT;
    point lv_spawnpoint;
    playergroup lv_allies;

    // Automatic Variable Declarations
    const int auto96142BD9_n = 1;
    int auto96142BD9_i;
    playergroup auto0087A508_g;
    int auto0087A508_var;
    const int auto0DD30596_n = 1;
    int auto0DD30596_i;
    playergroup auto8D976E3F_g;
    int auto8D976E3F_var;
    const int auto66FBC070_n = 4;
    int auto66FBC070_i;
    unitgroup auto3C99AF1D_g;
    int auto3C99AF1D_u;
    unit auto3C99AF1D_var;

    // Variable Initialization
    lv_owner = EventPlayer();
    lv_caster = EventUnit();
    lv_aWT = UnitGroupEmpty();
    lv_allies = PlayerGroupAlliance(c_playerGroupAlly, lv_owner);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_jFOAvailable == false)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/22486F7A"), SoundLink("UI_GenericError", -1));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        return true;
    }

    PlayerGroupAdd(lv_allies, lv_owner);
    libNtve_gf_CreatePingFacingAngle(lv_allies, "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 3.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/36E35628"));
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("Banshee_Attack", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), 30.0, 135.0);
    if ((RegionContainsPoint(RegionEntireMap(), lv_spawnpoint) == false)) {
        for (auto0DD30596_i = 1; auto0DD30596_i <= auto0DD30596_n; auto0DD30596_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AH25Hunter", 0, lv_owner, EventUnitTargetPoint());
            lv_unit = UnitLastCreated();
            UnitSetInfoText(lv_unit, StringExternal("Param/Value/EE10C5F4"), StringExternal("Param/Value/428B190D"), StringToText(""));
            UnitGroupAdd(lv_aWT, lv_unit);
            UnitBehaviorAdd(lv_unit, "KillsToCaster", lv_caster, 1);
            UnitBehaviorAdd(lv_unit, "BurstFireFullyAutomatic", lv_caster, 1);
            libNtve_gf_MakeUnitUncommandable(lv_unit, true);
            auto8D976E3F_g = lv_allies;
            auto8D976E3F_var = -1;
            while (true) {
                auto8D976E3F_var = PlayerGroupNextPlayer(auto8D976E3F_g, auto8D976E3F_var);
                if (auto8D976E3F_var < 0) { break; }
                libNtve_gf_ShareVisionofUnit(lv_unit, true, auto8D976E3F_var);
            }
            UnitSetHeight(lv_unit, 20.0, 0.0);
            UnitSetHeight(lv_unit, 7.0, 3.0);
        }
    }
    else {
        for (auto96142BD9_i = 1; auto96142BD9_i <= auto96142BD9_n; auto96142BD9_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "AH25Hunter", 0, lv_owner, lv_spawnpoint, EventUnitTargetPoint());
            lv_unit = UnitLastCreated();
            UnitSetInfoText(lv_unit, StringExternal("Param/Value/767D1C80"), StringExternal("Param/Value/94073070"), StringToText(""));
            UnitGroupAdd(lv_aWT, lv_unit);
            UnitBehaviorAdd(lv_unit, "KillsToCaster", lv_caster, 1);
            UnitBehaviorAdd(lv_unit, "BurstFireFullyAutomatic", lv_caster, 1);
            libNtve_gf_MakeUnitUncommandable(lv_unit, true);
            auto0087A508_g = lv_allies;
            auto0087A508_var = -1;
            while (true) {
                auto0087A508_var = PlayerGroupNextPlayer(auto0087A508_g, auto0087A508_var);
                if (auto0087A508_var < 0) { break; }
                libNtve_gf_ShareVisionofUnit(lv_unit, true, auto0087A508_var);
            }
            UnitSetHeight(lv_unit, 20.0, 0.0);
            UnitSetHeight(lv_unit, 7.0, 3.0);
        }
    }
    for (auto66FBC070_i = 1; auto66FBC070_i <= auto66FBC070_n; auto66FBC070_i += 1) {
        if ((UnitGroupCount(gv_laserDesignatorTarget, c_unitCountAlive) == 1) && (UnitHasBehavior2(UnitGroupRandomUnit(gv_laserDesignatorTarget, c_unitCountAlive), "Invulnerable") == false) && (DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupRandomUnit(gv_laserDesignatorTarget, c_unitCountAlive))) <= 55.0) && (DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(UnitGroupRandomUnit(gv_laserDesignatorTarget, c_unitCountAlive))) != 0.0)) {
            if ((UnitHasBehavior2(lv_unit, "Ah25SpeedBoost") == false)) {
                UnitBehaviorAdd(lv_unit, "Ah25SpeedBoost", lv_unit, 1);
            }
            UnitGroupIssueOrder(lv_aWT, OrderTargetingUnitGroup(AbilityCommand("Attack", 0), gv_laserDesignatorTarget), c_orderQueueReplace);
        }
        else {
            if ((UnitHasBehavior2(lv_unit, "Ah25SpeedBoost") == true)) {
                UnitBehaviorRemove(lv_unit, "Ah25SpeedBoost", 1);
            }
            UnitGroupIssueOrder(lv_aWT, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(EventUnitTargetPoint(), RandomFixed(0.0, 15.0), libNtve_gf_RandomAngle())), c_orderQueueReplace);
        }
        Wait(6.0, c_timeGame);
    }
    UnitGroupIssueOrder(lv_aWT, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    if ((libNtve_gf_UnitGroupIsDead(lv_aWT) == true)) {
        return true;
    }
    SoundPlay(SoundLink("Banshee_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeGame);
    auto3C99AF1D_g = lv_aWT;
    auto3C99AF1D_u = UnitGroupCount(auto3C99AF1D_g, c_unitCountAll);
    for (;; auto3C99AF1D_u -= 1) {
        auto3C99AF1D_var = UnitGroupUnitFromEnd(auto3C99AF1D_g, auto3C99AF1D_u);
        if (auto3C99AF1D_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto3C99AF1D_var), "SetOpacity 0.000000 2.000000 op");
        UnitSetHeight(auto3C99AF1D_var, 20.0, 1.0);
        Wait(1.0, c_timeReal);
        UnitRemove(auto3C99AF1D_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWeaponsTeam_Init () {
    gt_AttackWeaponsTeam = TriggerCreate("gt_AttackWeaponsTeam_Func");
    TriggerAddEventUnitAbility(gt_AttackWeaponsTeam, null, AbilityCommand("AttackWeaponsTeam", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call For Fire
//--------------------------------------------------------------------------------------------------
bool gt_CallForFire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_eapspqblfnexfspf;
    int lv_shells;
    fixed lv_radius;
    actor lv_warning;
    actor lv_notificatontext;
    fixed lv_delaybasetime;
    fixed lv_distribution;
    fixed lv_interval;
    int lv_int;
    int lv_owner;
    point lv_dummypoint;
    int lv_failedshells;
    text lv_pluraltemp;
    int lv_index;

    // Automatic Variable Declarations
    const int autoACAC9782_ae = 3;
    const int autoACAC9782_ai = 1;
    playergroup auto594CF4E2_g;
    int auto594CF4E2_var;
    playergroup autoBE3FBD7C_g;
    int autoBE3FBD7C_var;
    int auto43D462B5_ae;
    const int auto43D462B5_ai = 1;

    // Variable Initialization
    lv_radius = gv_iDFRadius[EventPlayer()];
    lv_delaybasetime = 9.0;
    lv_distribution = gv_iDFDistro[EventPlayer()];
    lv_interval = gv_iDFInterval[EventPlayer()];
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_iDFAvailable == false)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/34016C2D"), SoundLink("UI_GenericError", -1));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        return true;
    }

    if ((gv_iDFShellsGlobal == 0)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/7A55AE6A"), SoundLink("UI_GenericError", -1));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    else {
        if ((gv_iDFShells[EventPlayer()] > gv_iDFShellsGlobal)) {
            lv_shells = gv_iDFShellsGlobal;
        }
        else {
            lv_shells = gv_iDFShells[EventPlayer()];
        }
        gv_iDFShellsGlobal -= lv_shells;
        lv_index = 0;
        for ( ; ( (autoACAC9782_ai >= 0 && lv_index <= autoACAC9782_ae) || (autoACAC9782_ai < 0 && lv_index >= autoACAC9782_ae) ) ; lv_index += autoACAC9782_ai ) {
            CatalogFieldValueSet(c_gameCatalogAbil, "CallForFireFSS", "Cost[" + IntToString(lv_index) + "].Charge.CountMax", EventPlayer(), IntToString(gv_iDFShellsGlobal));
            CatalogFieldValueSet(c_gameCatalogAbil, "CallForFireFSS", "Cost[" + IntToString(lv_index) + "].Charge.CountStart", EventPlayer(), IntToString(gv_iDFShellsGlobal));
        }
        lv_delaybasetime = (lv_delaybasetime - (IntToFixed(TechTreeUpgradeCount(lv_owner, "IDFSupport", c_techCountCompleteOnly)) * 1.5));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/D4F3FFA1") + IntToText(lv_shells)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/4A2E9F6B") + IntToText(gv_iDFShellsGlobal)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/F7C551B3") + FixedToText(lv_radius, c_fixedPrecisionAny)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/A229EE96") + FixedToText(lv_interval, c_fixedPrecisionAny)));
        if ((lv_distribution == -1.0)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/69821AE2"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/32E70F3E") + FixedToText(lv_distribution, c_fixedPrecisionAny)));
        }
        libNtve_gf_CreateActorAtPoint("CallForFireWarning", EventUnitTargetPoint());
        lv_warning = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateActorAtPoint("CallforFireText", EventUnitTargetPoint());
        lv_notificatontext = libNtve_gf_ActorLastCreated();
        while (!((gv_fireMission == false))) {
            Wait(0.2, c_timeGame);
        }
        auto594CF4E2_g = gv_players;
        auto594CF4E2_var = -1;
        while (true) {
            auto594CF4E2_var = PlayerGroupNextPlayer(auto594CF4E2_g, auto594CF4E2_var);
            if (auto594CF4E2_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), auto594CF4E2_var, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(auto594CF4E2_var), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0, 270.0);
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/34D03490"));
            }

        }
        gv_fireMission = true;
        Wait(lv_delaybasetime, c_timeGame);
        while (!((libNtve_gf_UnitIsPaused(EventUnit()) == false))) {
            Wait(1.0, c_timeGame);
        }
        autoBE3FBD7C_g = PlayerGroupAll();
        autoBE3FBD7C_var = -1;
        while (true) {
            autoBE3FBD7C_var = PlayerGroupNextPlayer(autoBE3FBD7C_g, autoBE3FBD7C_var);
            if (autoBE3FBD7C_var < 0) { break; }
            VisRevealArea(autoBE3FBD7C_var, RegionCircle(EventUnitTargetPoint(), 5.0), 8.0, false);
        }
        SoundPlayAtPoint(SoundLink("IDFIncoming", -1), PlayerGroupAll(), EventUnitTargetPoint(), 0.0, 100.0, 0.0);
        Wait(1.0, c_timeGame);
        gf_AIScatterFromPoint(EventUnitTargetPoint(), 5.0);
        ActorSend(lv_warning, "Destroy");
        ActorSend(lv_notificatontext, "Destroy");
        auto43D462B5_ae = lv_shells;
        lv_int = 1;
        for ( ; ( (auto43D462B5_ai >= 0 && lv_int <= auto43D462B5_ae) || (auto43D462B5_ai < 0 && lv_int >= auto43D462B5_ae) ) ; lv_int += auto43D462B5_ai ) {
            if ((lv_distribution == -1.0)) {
                lv_dummypoint = PointWithOffsetPolar(EventUnitTargetPoint(), RandomFixed(0.0, lv_radius), libNtve_gf_RandomAngle());
            }
            else {
                lv_dummypoint = PointWithOffsetPolar(EventUnitTargetPoint(), ((lv_int - 1) * lv_radius), lv_distribution);
            }
            if ((RegionContainsPoint(RegionEntireMap(), lv_dummypoint) == true)) {
                gf_DropShellatTarget(lv_dummypoint, "CallForFirePLLaunch", lv_owner);
                if ((lv_int < lv_shells)) {
                    Wait((lv_interval + RandomFixed(-0.1, 0.1)), c_timeGame);
                }

            }
            else {
                lv_failedshells += 1;
            }
        }
        if ((lv_failedshells > 0)) {
            gv_iDFShellsGlobal += lv_failedshells;
            if ((lv_failedshells == 1)) {
                lv_pluraltemp = StringExternal("Param/Value/7A8BC7BC");
            }
            else {
                lv_pluraltemp = StringExternal("Param/Value/51C8F78A");
            }
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, libSwaC_gf_FormatTextWithReplacement(StringExternal("Param/Value/D0125350"), FormatNumber(lv_failedshells), lv_pluraltemp, null, null));
        }

        gv_fireMission = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CallForFire_Init () {
    gt_CallForFire = TriggerCreate("gt_CallForFire_Func");
    TriggerAddEventUnitAbility(gt_CallForFire, null, AbilityCommand("CallForFirePL", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_CallForFire, null, AbilityCommand("CallForFireCS", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_CallForFire, null, AbilityCommand("CallForFireFSS", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CFF Aspectus
//--------------------------------------------------------------------------------------------------
bool gt_CFFAspectus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC3586A1A_g;
    int autoC3586A1A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC3586A1A_g = PlayerGroupAll();
    autoC3586A1A_var = -1;
    while (true) {
        autoC3586A1A_var = PlayerGroupNextPlayer(autoC3586A1A_g, autoC3586A1A_var);
        if (autoC3586A1A_var < 0) { break; }
        VisRevealArea(autoC3586A1A_var, RegionCircle(UnitGetPosition(EventUnit()), 2.0), 1.0, false);
        SoundPlayAtPoint(SoundLink("FlareTarget2", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CFFAspectus_Init () {
    gt_CFFAspectus = TriggerCreate("gt_CFFAspectus_Func");
    TriggerAddEventUnitAbility(gt_CFFAspectus, null, AbilityCommand("CallForFireAspectus", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Immediate Effects
//--------------------------------------------------------------------------------------------------
bool gt_ImmediateEffects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_shells;
    actor lv_warning;
    actor lv_notificationtext;
    fixed lv_delaybasetime;
    int lv_owner;
    int lv_i;
    int lv_index;

    // Automatic Variable Declarations
    abilcmd autoA23726B2_val;
    const int autoF1368CBB_ae = 3;
    const int autoF1368CBB_ai = 1;
    abilcmd auto24CC13C0_val;
    playergroup auto0CDA8695_g;
    int auto0CDA8695_var;
    abilcmd autoA5D0C46E_val;
    playergroup auto0F49364F_g;
    int auto0F49364F_var;
    abilcmd auto75B187D5_val;

    // Variable Initialization
    lv_shells = 3;
    lv_delaybasetime = 9.0;
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_jFOAvailable == false)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/A30C9E9E"), SoundLink("UI_GenericError", -1));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        return true;
    }

    autoA23726B2_val = EventUnitAbility();
    if (autoA23726B2_val == AbilityCommand("ImmediateFlare", 0)) {
        if ((UnitHasBehavior2(EventUnit(), "RadioMan") == true)) {
            lv_shells = 1;
        }
        else {
            lv_shells = 3;
        }
    }
    else if (autoA23726B2_val == AbilityCommand("immediateSmoke", 0)) {
        if ((UnitHasBehavior2(EventUnit(), "RadioMan") == true)) {
            lv_shells = 1;
        }
        else {
            lv_shells = 2;
        }
    }
    else if (autoA23726B2_val == AbilityCommand("WhitePhosphorous", 0)) {
        if ((UnitHasBehavior2(EventUnit(), "RadioMan") == true)) {
            lv_shells = 3;
        }
        else {
            lv_shells = 4;
        }
    }
    else if (autoA23726B2_val == AbilityCommand("RailGun", 0)) {
        if ((UnitHasBehavior2(EventUnit(), "RadioMan") == true)) {
            lv_shells = 6;
        }
        else {
            lv_shells = 6;
        }
    }
    else {
    }
    if ((gv_iDFShellsGlobal < lv_shells)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/D82B4BB1"), SoundLink("UI_GenericError", -1));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    else {
        gv_iDFShellsGlobal -= lv_shells;
        lv_delaybasetime = (lv_delaybasetime - (IntToFixed(TechTreeUpgradeCount(EventPlayer(), "IDFSupport", c_techCountCompleteOnly)) * 1.5));
        lv_index = 0;
        for ( ; ( (autoF1368CBB_ai >= 0 && lv_index <= autoF1368CBB_ae) || (autoF1368CBB_ai < 0 && lv_index >= autoF1368CBB_ae) ) ; lv_index += autoF1368CBB_ai ) {
            CatalogFieldValueSet(c_gameCatalogAbil, "CallForFireFSS", "Cost[" + IntToString(lv_index) + "].Charge.CountMax", EventPlayer(), IntToString(gv_iDFShellsGlobal));
            CatalogFieldValueSet(c_gameCatalogAbil, "CallForFireFSS", "Cost[" + IntToString(lv_index) + "].Charge.CountStart", EventPlayer(), IntToString(gv_iDFShellsGlobal));
        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/9216D863") + IntToText(lv_shells)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, (StringExternal("Param/Value/F2D2B993") + IntToText(gv_iDFShellsGlobal)));
        auto24CC13C0_val = EventUnitAbility();
        if (auto24CC13C0_val == AbilityCommand("WhitePhosphorous", 0)) {
            libNtve_gf_CreateActorAtPoint("CallForFireWarningColorPings", EventUnitTargetPoint());
            lv_warning = libNtve_gf_ActorLastCreated();
            ActorSend(lv_warning, libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 1.0, 0.0));
            libNtve_gf_CreateActorAtPoint("ImmediateWP", EventUnitTargetPoint());
            lv_notificationtext = libNtve_gf_ActorLastCreated();
        }
        else if (auto24CC13C0_val == AbilityCommand("ImmediateFlare", 0)) {
            libNtve_gf_CreateActorAtPoint("CallForFireWarningColorPings", EventUnitTargetPoint());
            lv_warning = libNtve_gf_ActorLastCreated();
            ActorSend(lv_warning, libNtve_gf_SetTintColor(Color(100.00, 100.00, 0.00), 1.0, 0.0));
            libNtve_gf_CreateActorAtPoint("ImmediateFlare", EventUnitTargetPoint());
            lv_notificationtext = libNtve_gf_ActorLastCreated();
        }
        else if (auto24CC13C0_val == AbilityCommand("immediateSmoke", 0)) {
            libNtve_gf_CreateActorAtPoint("CallForFireWarningColorPings", EventUnitTargetPoint());
            lv_warning = libNtve_gf_ActorLastCreated();
            ActorSend(lv_warning, libNtve_gf_SetTintColor(Color(0.00, 100.00, 0.00), 1.0, 0.0));
            libNtve_gf_CreateActorAtPoint("ImmediateSmoke", EventUnitTargetPoint());
            lv_notificationtext = libNtve_gf_ActorLastCreated();
        }
        else if (auto24CC13C0_val == AbilityCommand("RailGun", 0)) {
            libNtve_gf_CreateActorAtPoint("CallForFireWarning", EventUnitTargetPoint());
            lv_warning = libNtve_gf_ActorLastCreated();
            libNtve_gf_CreateActorAtPoint("Railgun", EventUnitTargetPoint());
            lv_notificationtext = libNtve_gf_ActorLastCreated();
        }
        else {
        }
        while (!((gv_fireMission == false))) {
            Wait(0.2, c_timeGame);
        }
        auto0CDA8695_g = gv_players;
        auto0CDA8695_var = -1;
        while (true) {
            auto0CDA8695_var = PlayerGroupNextPlayer(auto0CDA8695_g, auto0CDA8695_var);
            if (auto0CDA8695_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), auto0CDA8695_var, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                autoA5D0C46E_val = EventUnitAbility();
                if (autoA5D0C46E_val == AbilityCommand("WhitePhosphorous", 0)) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(auto0CDA8695_var), "PingSimple", EventUnitTargetPoint(), Color(100.00, 100.00, 100.00), 8.0, 270.0);
                    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1AA397BA"));
                }
                else if (autoA5D0C46E_val == AbilityCommand("ImmediateFlare", 0)) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(auto0CDA8695_var), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 8.0, 270.0);
                    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/78B3A9D9"));
                }
                else if (autoA5D0C46E_val == AbilityCommand("immediateSmoke", 0)) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(auto0CDA8695_var), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 8.0, 270.0);
                    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/81057A5C"));
                }
                else if (autoA5D0C46E_val == AbilityCommand("RailGun", 0)) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(auto0CDA8695_var), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0, 270.0);
                    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/3434E535"));
                }
                else {
                }
            }

        }
        gv_fireMission = true;
        Wait(lv_delaybasetime, c_timeGame);
        while (!((libNtve_gf_UnitIsPaused(EventUnit()) == false))) {
            Wait(1.0, c_timeGame);
        }
        auto0F49364F_g = PlayerGroupAll();
        auto0F49364F_var = -1;
        while (true) {
            auto0F49364F_var = PlayerGroupNextPlayer(auto0F49364F_g, auto0F49364F_var);
            if (auto0F49364F_var < 0) { break; }
            VisRevealArea(auto0F49364F_var, RegionCircle(EventUnitTargetPoint(), 5.0), 8.0, false);
        }
        SoundPlayAtPoint(SoundLink("IDFIncoming", -1), PlayerGroupAll(), EventUnitTargetPoint(), 0.0, 100.0, 0.0);
        Wait(1.0, c_timeGame);
        gf_AIScatterFromPoint(EventUnitTargetPoint(), 5.0);
        ActorSend(lv_warning, "Destroy");
        ActorSend(lv_notificationtext, "Destroy");
        gv_fireMission = false;
        auto75B187D5_val = EventUnitAbility();
        if (auto75B187D5_val == AbilityCommand("WhitePhosphorous", 0)) {
            gf_DropShellatTarget(EventUnitTargetPoint(), "WhitePhosphorousLaunch", lv_owner);
        }
        else if (auto75B187D5_val == AbilityCommand("ImmediateFlare", 0)) {
            TriggerEnable(gt_ImmediateFlareShareVision, true);
            while ((lv_i < 3)) {
                lv_i += 1;
                gf_DropShellatTarget(EventUnitTargetPoint(), "FlareGunLaunchMissile", lv_owner);
                if ((lv_i == 3)) {
                    break;
                }
                Wait(45.0, c_timeGame);
            }
            Wait(10.0, c_timeGame);
            TriggerEnable(gt_ImmediateFlareShareVision, false);
        }
        else if (auto75B187D5_val == AbilityCommand("immediateSmoke", 0)) {
            gf_DropShellatTarget(EventUnitTargetPoint(), "ImmediateSmokeLaunch", lv_owner);
        }
        else if (auto75B187D5_val == AbilityCommand("RailGun", 0)) {
            gf_DropShellatTarget(EventUnitTargetPoint(), "RailGunLaunch", lv_owner);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImmediateEffects_Init () {
    gt_ImmediateEffects = TriggerCreate("gt_ImmediateEffects_Func");
    TriggerAddEventUnitAbility(gt_ImmediateEffects, null, AbilityCommand("ImmediateFlare", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_ImmediateEffects, null, AbilityCommand("immediateSmoke", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_ImmediateEffects, null, AbilityCommand("WhitePhosphorous", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_ImmediateEffects, null, AbilityCommand("RailGun", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Immediate Flare Share Vision
//--------------------------------------------------------------------------------------------------
bool gt_ImmediateFlareShareVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto82423E91_ae = 15;
    const int auto82423E91_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "FlareGunFlare"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 0;
    for ( ; ( (auto82423E91_ai >= 0 && lv_i <= auto82423E91_ae) || (auto82423E91_ai < 0 && lv_i >= auto82423E91_ae) ) ; lv_i += auto82423E91_ai ) {
        libNtve_gf_ShareVisionofUnit(EventUnit(), true, lv_i);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImmediateFlareShareVision_Init () {
    gt_ImmediateFlareShareVision = TriggerCreate("gt_ImmediateFlareShareVision_Func");
    TriggerEnable(gt_ImmediateFlareShareVision, false);
    TriggerAddEventUnitRegion(gt_ImmediateFlareShareVision, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OSR
//--------------------------------------------------------------------------------------------------
bool gt_OSR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBE0DAEC0_g;
    int autoBE0DAEC0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBE0DAEC0_g = gv_players;
    autoBE0DAEC0_var = -1;
    while (true) {
        autoBE0DAEC0_var = PlayerGroupNextPlayer(autoBE0DAEC0_g, autoBE0DAEC0_var);
        if (autoBE0DAEC0_var < 0) { break; }
        if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), autoBE0DAEC0_var, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
            PlayerCreateEffectPoint(EventPlayer(), "OrbitalSatteliteReconnaissance", EventUnitTargetPoint());
        }
    }
    if (((libNtve_gf_PlayerIsEnemy(EventPlayer(), 0, libNtve_ge_PlayerRelation_Neutral) == true) || (libNtve_gf_PlayerIsEnemy(EventPlayer(), 0, libNtve_ge_PlayerRelation_NeutralMutual) == true))) {
        PlayerCreateEffectPoint(EventPlayer(), "OrbitalSatteliteReconnaissance", EventUnitTargetPoint());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OSR_Init () {
    gt_OSR = TriggerCreate("gt_OSR_Func");
    TriggerAddEventUnitAbility(gt_OSR, null, AbilityCommand("OrbitalSatelliteReconnaissance", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_OSR, null, AbilityCommand("OrbitalSatelliteReconnaissanceOSS", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Strafe Run
//--------------------------------------------------------------------------------------------------
bool gt_StrafeRun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    fixed lv_a10Distribution;
    unit lv_a10;
    point lv_spawnpoint;
    int lv_strafeping;

    // Automatic Variable Declarations
    const int autoFDA6DB3B_n = 13;
    int autoFDA6DB3B_i;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(lv_caster);
    lv_a10Distribution = gv_a10Distro[lv_owner];
    lv_strafeping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_jFOAvailable == false)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/B9B153C2"), SoundLink("UI_GenericError", -1));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/8297C67D"));
    SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((lv_a10Distribution == -1.0)) {
        lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), 35.0, (AngleBetweenPoints(UnitGetPosition(lv_caster), EventUnitTargetPoint()) - 90.0));
    }
    else {
        lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), -30.0, lv_a10Distribution);
    }
    lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    libNtve_gf_UnitCreateFacingPoint(1, "A10", c_unitCreateIgnorePlacement, lv_owner, lv_spawnpoint, EventUnitTargetPoint());
    lv_a10 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_a10, true);
    if ((gv_mod_elitepmc)) {
        libNtve_gf_MakeUnitInvulnerable(lv_a10, false);
    }

    UnitBehaviorAdd(lv_a10, "KillsToCaster", lv_caster, 1);
    UnitSetTeamColorIndex(lv_a10, 13);
    UnitSetHeight(lv_a10, 20.0, 0.0);
    UnitSetHeight(lv_a10, 7.0, 1.0);
    lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), 60.0, UnitGetFacing(lv_a10));
    lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    UnitIssueOrder(lv_a10, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnpoint), c_orderQueueAddToEnd);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", lv_spawnpoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, UnitGetFacing(lv_a10));
    lv_strafeping = PingLastCreated();
    PingSetUnit(PingLastCreated(), lv_a10);
    PingSetScale(PingLastCreated(), 0.4);
    PingSetTooltip(PingLastCreated(), UnitGetName(lv_a10));
    Wait(0.5, c_timeGame);
    gf_PlanePathing(lv_a10, EventUnitTargetPoint());
    for (autoFDA6DB3B_i = 1; autoFDA6DB3B_i <= autoFDA6DB3B_n; autoFDA6DB3B_i += 1) {
        if ((UnitIsAlive(lv_a10) == false)) {
            PingDestroy(lv_strafeping);
            return true;
        }
        Wait(0.65, c_timeGame);
    }
    ActorSend(libNtve_gf_MainActorofUnit(lv_a10), "SetOpacity 0.000000 2.000000 op");
    UnitSetHeight(lv_a10, 20.0, 1.0);
    PingDestroy(lv_strafeping);
    Wait(0.5, c_timeGame);
    UnitRemove(lv_a10);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StrafeRun_Init () {
    gt_StrafeRun = TriggerCreate("gt_StrafeRun_Func");
    TriggerAddEventUnitAbility(gt_StrafeRun, null, AbilityCommand("StrafeRun", 0), c_abilEffectStageCast, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuel Discharge - Fire in yo hole
//--------------------------------------------------------------------------------------------------
bool gt_FuelDischargeFireinyohole_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPoint(SoundLink("TValerian02ATychus00002", -1), PlayerGroupAll(), EventUnitTargetPoint(), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuelDischargeFireinyohole_Init () {
    gt_FuelDischargeFireinyohole = TriggerCreate("gt_FuelDischargeFireinyohole_Func");
    TriggerAddEventUnitAbility(gt_FuelDischargeFireinyohole, null, AbilityCommand("FuelDischarge", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuel Discharge
//--------------------------------------------------------------------------------------------------
bool gt_FuelDischarge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_user;
    int lv_owner;

    // Automatic Variable Declarations
    int auto6A3AEED7_val;

    // Variable Initialization
    lv_user = EventUnit();
    lv_owner = UnitGetOwner(lv_user);

    // Actions
    if (!runActions) {
        return true;
    }

    auto6A3AEED7_val = UnitAbilityGetLevel(lv_user, "FuelDischargeTest");
    if (auto6A3AEED7_val == 0) {
    }
    else if (auto6A3AEED7_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "FuelDischarge1Test", 1);
    }
    else if (auto6A3AEED7_val == 2) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "FuelDischarge2Test", 1);
    }
    else if (auto6A3AEED7_val == 3) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "FuelDischarge3Test", 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaError, StringExternal("Param/Value/EE54D00A"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuelDischarge_Init () {
    gt_FuelDischarge = TriggerCreate("gt_FuelDischarge_Func");
    TriggerAddEventUnitAbility(gt_FuelDischarge, null, AbilityCommand("LearnAbilitiesFlamethrower", 5), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Ghost Skills & ISR
//--------------------------------------------------------------------------------------------------
bool gt_LearnGhostSkillsISR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    playergroup auto8E8FE87A_g;
    int auto8E8FE87A_var;
    unitgroup autoC00503C9_g;
    int autoC00503C9_u;
    unit autoC00503C9_var;
    unitgroup autoE224BA38_g;
    int autoE224BA38_u;
    unit autoE224BA38_var;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetLevel(EventUnit(), "GhostSkills") == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_iSREnabled = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/63783692"));
    auto8E8FE87A_g = PlayerGroupAll();
    auto8E8FE87A_var = -1;
    while (true) {
        auto8E8FE87A_var = PlayerGroupNextPlayer(auto8E8FE87A_g, auto8E8FE87A_var);
        if (auto8E8FE87A_var < 0) { break; }
        VisExploreArea(auto8E8FE87A_var, RegionEntireMap(), true, false);
    }
    while (true) {
        if ((gv_allowISR == true)) {
            autoC00503C9_g = UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            autoC00503C9_u = UnitGroupCount(autoC00503C9_g, c_unitCountAll);
            for (;; autoC00503C9_u -= 1) {
                autoC00503C9_var = UnitGroupUnitFromEnd(autoC00503C9_g, autoC00503C9_u);
                if (autoC00503C9_var == null) { break; }
                if ((UnitGroupHasUnit(gv_pMCBossGroup, autoC00503C9_var) == false) && (UnitHasBehavior2(autoC00503C9_var, "AntiISR") == false)) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(autoC00503C9_var), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, 270.0);
                    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C483CAC5"));
                }
            }
            autoE224BA38_g = UnitGroup(null, 15, RegionEntireMap(), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            autoE224BA38_u = UnitGroupCount(autoE224BA38_g, c_unitCountAll);
            for (;; autoE224BA38_u -= 1) {
                autoE224BA38_var = UnitGroupUnitFromEnd(autoE224BA38_g, autoE224BA38_u);
                if (autoE224BA38_var == null) { break; }
                if ((UnitHasBehavior2(autoE224BA38_var, "AntiISR") == false)) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(autoE224BA38_var), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 3.0, 270.0);
                    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/12B87C9A"));
                }
            }
        }

        Wait(30.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnGhostSkillsISR_Init () {
    gt_LearnGhostSkillsISR = TriggerCreate("gt_LearnGhostSkillsISR_Func");
    TriggerAddEventUnitAbility(gt_LearnGhostSkillsISR, null, AbilityCommand("LearnAbilitiesGhost", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Ghost Skills and Ion Cannon
//--------------------------------------------------------------------------------------------------
bool gt_LearnGhostSkillsandIonCannon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetLevel(EventUnit(), "GhostSkills") == 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/3A5A6954"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnGhostSkillsandIonCannon_Init () {
    gt_LearnGhostSkillsandIonCannon = TriggerCreate("gt_LearnGhostSkillsandIonCannon_Func");
    TriggerAddEventUnitAbility(gt_LearnGhostSkillsandIonCannon, null, AbilityCommand("LearnAbilitiesGhost", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crysis Suit
//--------------------------------------------------------------------------------------------------
bool gt_CrysisSuit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetLevel(EventUnit(), "GhostSkills") > 1))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "CrysisSuit") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "CrysisSuitEnergy", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CrysisSuit_Init () {
    gt_CrysisSuit = TriggerCreate("gt_CrysisSuit_Func");
    TriggerAddEventUnitAbility(gt_CrysisSuit, null, AbilityCommand("LearnAbilitiesGhost", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ion Cannon Selection
//--------------------------------------------------------------------------------------------------
bool gt_IonCannonSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(UnitGetOwner(EventUnitCreatedUnit()));
    UnitSelect(EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()), true);
    UnitControlGroupAddUnit(UnitGetOwner(EventUnitCreatedUnit()), 2, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IonCannonSelection_Init () {
    gt_IonCannonSelection = TriggerCreate("gt_IonCannonSelection_Func");
    TriggerAddEventUnitCreated(gt_IonCannonSelection, null, "IonCannon", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ion Cannon Warning
//--------------------------------------------------------------------------------------------------
bool gt_IonCannonWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    actor lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AIScatterFromPoint(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 5.0);
    libNtve_gf_CreateModelAtPoint("GhostNukeTarget", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_model = libNtve_gf_ActorLastCreated();
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    SoundPlay(SoundLink("NetScan", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == 15)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8F803558"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0131D9BA"));
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", lv_targetPoint, ColorWithAlpha(100.00, 0.00, 50.20, 0.00), 5.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C3B1EC01"));
    Wait(2.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("IonCannonStart", -1), PlayerGroupAll(), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 0.0, 100.0, 0.0);
    Wait(2.0, c_timeGame);
    ActorSend(lv_model, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IonCannonWarning_Init () {
    gt_IonCannonWarning = TriggerCreate("gt_IonCannonWarning_Func");
    TriggerAddEventPlayerEffectUsed(gt_IonCannonWarning, c_playerAny, "IonCannonDelay");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overheat
//--------------------------------------------------------------------------------------------------
bool gt_Overheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attacker;
    int lv_owner;
    int lv_maxCurrent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attacker = EventUnit();
    lv_owner = UnitGetOwner(lv_attacker);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemCurrentValue(gv_overheatProgressBar, UnitBehaviorCount(lv_attacker, "Overheat"), PlayerGroupSingle(lv_owner));
    if ((UnitBehaviorCount(lv_attacker, "Overheat") >= gv_overheatThreshold)) {
        UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaError, StringExternal("Param/Value/CDCDB9FA"));
        UnitIssueOrder(lv_attacker, Order(AbilityCommand("SpinBarrels", 1)), c_orderQueueReplace);
        lv_maxCurrent = gv_overheatThreshold;
        if ((TechTreeUpgradeCount(lv_owner, "SteelBarrels", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_SetDialogItemMaximumValue(gv_overheatProgressBar, 10.0, PlayerGroupSingle(lv_owner));
            libNtve_gf_SetDialogItemCurrentValue(gv_overheatProgressBar, 10.0, PlayerGroupSingle(lv_owner));
        }
        else {
            libNtve_gf_SetDialogItemMaximumValue(gv_overheatProgressBar, 15.0, PlayerGroupSingle(lv_owner));
            libNtve_gf_SetDialogItemCurrentValue(gv_overheatProgressBar, 15.0, PlayerGroupSingle(lv_owner));
        }
        UnitBehaviorAdd(lv_attacker, "Overheated", lv_attacker, 1);
        UnitBehaviorRemove(lv_attacker, "Overheat", gv_overheatThreshold);
        while ((UnitHasBehavior2(lv_attacker, "Overheated") == true)) {
            libNtve_gf_SetDialogItemCurrentValue(gv_overheatProgressBar, UnitBehaviorDuration(lv_attacker, "Overheated"), PlayerGroupSingle(lv_owner));
            Wait(0.1, c_timeGame);
        }
        libNtve_gf_SetDialogItemCurrentValue(gv_overheatProgressBar, 0.0, PlayerGroupSingle(lv_owner));
        libNtve_gf_SetDialogItemMaximumValue(gv_overheatProgressBar, lv_maxCurrent, PlayerGroupSingle(lv_owner));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Overheat_Init () {
    gt_Overheat = TriggerCreate("gt_Overheat_Func");
    TriggerAddEventUnitBehaviorChange(gt_Overheat, null, "Overheat", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overheat Cool Down
//--------------------------------------------------------------------------------------------------
bool gt_OverheatCoolDown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attacker;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attacker = EventUnit();
    lv_owner = UnitGetOwner(lv_attacker);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_attacker, "HVAPRounds") == true))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_attacker, "Overheated") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if ((UnitGroupHasUnit(gv_reloading, lv_attacker) == false) && (UnitBehaviorCount(lv_attacker, "Overheat") > 0)) {
        UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaError, StringExternal("Param/Value/0818D2F0"));
    }
    while ((UnitBehaviorCount(lv_attacker, "Overheat") > 0) && (UnitHasBehavior(lv_attacker, "BarrelsNotSpinning") == true)) {
        UnitBehaviorRemove(lv_attacker, "Overheat", 10);
        libNtve_gf_SetDialogItemCurrentValue(gv_overheatProgressBar, UnitBehaviorCount(lv_attacker, "Overheat"), PlayerGroupSingle(lv_owner));
        Wait(gv_cooldownPeriod, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverheatCoolDown_Init () {
    gt_OverheatCoolDown = TriggerCreate("gt_OverheatCoolDown_Func");
    TriggerAddEventUnitAbility(gt_OverheatCoolDown, null, AbilityCommand("SpinBarrels", 1), c_abilBehaviorStageUntoggled, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Precise Aim
//--------------------------------------------------------------------------------------------------
bool gt_LearnPreciseAim_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(lv_caster, "PreciseAim") == 1)) {
        UnitAbilityChangeLevel(lv_caster, "BulletStorm", 1);
    }
    else if ((UnitAbilityGetLevel(lv_caster, "PreciseAim") == 2)) {
        UnitAbilityChangeLevel(lv_caster, "BulletStorm", 1);
    }
    else if ((UnitAbilityGetLevel(lv_caster, "PreciseAim") == 3)) {
        UnitAbilityChangeLevel(lv_caster, "BulletStorm", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnPreciseAim_Init () {
    gt_LearnPreciseAim = TriggerCreate("gt_LearnPreciseAim_Func");
    TriggerAddEventUnitAbility(gt_LearnPreciseAim, null, AbilityCommand("LearnAbilitiesHeavyGunner", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Belt Linking - HG
//--------------------------------------------------------------------------------------------------
bool gt_LearnBeltLinkingHG_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(lv_caster);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_magsize[lv_owner] += 100;
    gv_magsused[lv_owner] += 1;
    if ((UnitAbilityGetLevel(lv_caster, "BeltLinking") == 0)) {
        gv_overheatThreshold += 15;
        libNtve_gf_SetDialogItemMinimumValue(gv_overheatProgressBar, 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(gv_overheatProgressBar, 80.0, PlayerGroupAll());
    }
    else if ((UnitAbilityGetLevel(lv_caster, "BeltLinking") == 1)) {
        gv_overheatThreshold += 15;
        libNtve_gf_SetDialogItemMinimumValue(gv_overheatProgressBar, 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(gv_overheatProgressBar, 95.0, PlayerGroupAll());
    }
    else if ((UnitAbilityGetLevel(lv_caster, "BeltLinking") == 2)) {
        gv_overheatThreshold += 15;
        libNtve_gf_SetDialogItemMinimumValue(gv_overheatProgressBar, 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(gv_overheatProgressBar, 110.0, PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnBeltLinkingHG_Init () {
    gt_LearnBeltLinkingHG = TriggerCreate("gt_LearnBeltLinkingHG_Func");
    TriggerAddEventUnitAbility(gt_LearnBeltLinkingHG, null, AbilityCommand("LearnAbilitiesHeavyGunner", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn WP - HG
//--------------------------------------------------------------------------------------------------
bool gt_LearnWPHG_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attacker;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attacker = EventUnit();
    lv_owner = UnitGetOwner(lv_attacker);

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(lv_owner, "WPUpgrade", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnWPHG_Init () {
    gt_LearnWPHG = TriggerCreate("gt_LearnWPHG_Func");
    TriggerAddEventUnitAbility(gt_LearnWPHG, null, AbilityCommand("LearnAbilitiesHeavyGunner", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn SS - HG
//--------------------------------------------------------------------------------------------------
bool gt_LearnSSHG_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(lv_caster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(lv_caster, "SoldierSkills") == 3)) {
        gv_cooldownPeriod -= 0.25;
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "SS4Upgrade", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "SleightofHand", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnSSHG_Init () {
    gt_LearnSSHG = TriggerCreate("gt_LearnSSHG_Func");
    TriggerAddEventUnitAbility(gt_LearnSSHG, null, AbilityCommand("LearnAbilitiesHeavyGunner", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Javelin Skills
//--------------------------------------------------------------------------------------------------
bool gt_JavelinSkills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "JavelinSkills") == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "JavSkills1", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "JavelinSkills") == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "JavSkills2", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "JavelinSkills") == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "JavSkills3", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "JavelinSkills") == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "JavSkills4", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JavelinSkills_Init () {
    gt_JavelinSkills = TriggerCreate("gt_JavelinSkills_Func");
    TriggerAddEventUnitAbility(gt_JavelinSkills, null, AbilityCommand("LearnAbilitiesJavelinGunner", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rocket Warning
//--------------------------------------------------------------------------------------------------
bool gt_RocketWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnitAbility() == AbilityCommand("ATRocket", 0)) || (EventUnitAbility() == AbilityCommand("HERocket", 0)))) {
        gf_AIScatterFromPoint(EventUnitTargetPoint(), 5.0);
        VisRevealArea(EventPlayer(), RegionCircle(EventUnitTargetPoint(), 4.0), 8.0, false);
    }
    gf_TextChat(EventUnit(), (TextWithColor(PlayerName(UnitGetOwner(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + StringExternal("Param/Value/C915E6A7")));
    libNtve_gf_CreateModelAtPoint("GhostNukeTarget", EventUnitTargetPoint());
    lv_model = libNtve_gf_ActorLastCreated();
    Wait(1.5, c_timeGame);
    ActorSend(lv_model, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RocketWarning_Init () {
    gt_RocketWarning = TriggerCreate("gt_RocketWarning_Func");
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("ATRocket", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("HERocket", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("GuidedMissile", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("LNMRL", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("MiniMRL", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("MRL", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("RAMRL", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Prism (D20)
//--------------------------------------------------------------------------------------------------
bool gt_LaserPrismD20_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "D20LaserRifle") == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "LaserPrism") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "LaserPrism", 1);
    UnitBehaviorAdd(EventUnit(), "LaserPrismD20", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaserPrismD20_Init () {
    gt_LaserPrismD20 = TriggerCreate("gt_LaserPrismD20_Func");
    TriggerAddEventUnitBehaviorChange(gt_LaserPrismD20, null, "LaserPrism", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Improved Laser Prism (D20)
//--------------------------------------------------------------------------------------------------
bool gt_ImprovedLaserPrismD20_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "D20LaserRifle") == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "ImprovedLaserPrismSkills") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "ImprovedLaserPrismSkills", 1);
    UnitBehaviorAdd(EventUnit(), "ImprovedLaserPrismD20", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImprovedLaserPrismD20_Init () {
    gt_ImprovedLaserPrismD20 = TriggerCreate("gt_ImprovedLaserPrismD20_Func");
    TriggerAddEventUnitBehaviorChange(gt_ImprovedLaserPrismD20, null, "ImprovedLaserPrismSkills", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Max Laser Prism D20
//--------------------------------------------------------------------------------------------------
bool gt_MaxLaserPrismD20_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "D20LaserRifle") == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "LaserPrismSkills") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "LaserPrismSkills", 1);
    UnitBehaviorAdd(EventUnit(), "MaxLaserPrismD20", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MaxLaserPrismD20_Init () {
    gt_MaxLaserPrismD20 = TriggerCreate("gt_MaxLaserPrismD20_Func");
    TriggerAddEventUnitBehaviorChange(gt_MaxLaserPrismD20, null, "LaserPrismSkills", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blue Crystal SS4
//--------------------------------------------------------------------------------------------------
bool gt_BlueCrystalSS4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "SoldierSkills") == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "BlueCrystal", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlueCrystalSS4_Init () {
    gt_BlueCrystalSS4 = TriggerCreate("gt_BlueCrystalSS4_Func");
    TriggerAddEventUnitAbility(gt_BlueCrystalSS4, null, AbilityCommand("LearnAbilitiesDroneOperator", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BlueCrystalSS4, null, AbilityCommand("LearnAbilitiesLaserEnforcer", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Proximity Sensor
//--------------------------------------------------------------------------------------------------
bool gt_ProximitySensor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoAB77F28D_g;
    int autoAB77F28D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoAB77F28D_g = gv_players;
    autoAB77F28D_var = -1;
    while (true) {
        autoAB77F28D_var = PlayerGroupNextPlayer(autoAB77F28D_g, autoAB77F28D_var);
        if (autoAB77F28D_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(EventUnit(), true, autoAB77F28D_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProximitySensor_Init () {
    gt_ProximitySensor = TriggerCreate("gt_ProximitySensor_Func");
    TriggerAddEventUnitAbility(gt_ProximitySensor, null, AbilityCommand("ProximitySensor", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mech Calldown
//--------------------------------------------------------------------------------------------------
bool gt_MechCalldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    unit lv_caster;
    unit lv_unit;
    int lv_owner;
    unit lv_droppod;

    // Automatic Variable Declarations
    abilcmd autoA18793C3_val;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = UnitGetPosition(lv_caster);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lv_point);
    lv_droppod = UnitLastCreated();
    UnitSetScale(UnitLastCreated(), 200.0, 200.0, 200.0);
    Wait(2.0, c_timeGame);
    UnitKill(lv_droppod);
    autoA18793C3_val = EventUnitAbility();
    if (autoA18793C3_val == AbilityCommand("RequestHeavyWalker", 0)) {
        libNtve_gf_UnitCreateFacingPoint(1, "MOCombatWalker", 0, lv_owner, lv_point, UnitGetPosition(EventUnit()));
    }
    else if (autoA18793C3_val == AbilityCommand("RequestMk2LightWalker", 0)) {
        libNtve_gf_UnitCreateFacingPoint(1, "MOBattleWalker", 0, lv_owner, lv_point, UnitGetPosition(EventUnit()));
    }
    else if (autoA18793C3_val == AbilityCommand("MORequestSupport", 0)) {
        libNtve_gf_UnitCreateFacingPoint(1, "MobileSupportWalker", 0, lv_owner, lv_point, UnitGetPosition(EventUnit()));
    }
    else {
    }
    if ((RandomInt(0, 5) == 1)) {
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById CamoParty");
    }
    if ((RandomInt(0, 5) == 2)) {
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById CamoSAS");
    }
    if ((RandomInt(0, 5) == 3)) {
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById CamoSYL");
    }
    if ((RandomInt(0, 5) == 4)) {
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById CamoCyber");
    }
    if ((RandomInt(0, 5) == 5)) {
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById CamoNight");
    }
    lv_unit = UnitLastCreated();
    UnitBehaviorAdd(lv_unit, "KillsToCaster", lv_caster, 1);
    Wait(2.0, c_timeGame);
    UnitRemove(lv_droppod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MechCalldown_Init () {
    gt_MechCalldown = TriggerCreate("gt_MechCalldown_Func");
    TriggerAddEventUnitAbility(gt_MechCalldown, null, AbilityCommand("RequestHeavyWalker", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_MechCalldown, null, AbilityCommand("RequestMk2LightWalker", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_MechCalldown, null, AbilityCommand("MORequestSupport", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mech Adjustments
//--------------------------------------------------------------------------------------------------
bool gt_MechAdjustments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    unit lv_user;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(lv_user);
    lv_user = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesMechOperator", 0))) {
        if ((UnitAbilityGetLevel(EventUnit(), "MechOperatorSkills") == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "MechOperatorSkills", 1);
        }
        else if ((UnitAbilityGetLevel(EventUnit(), "MechOperatorSkills") == 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "MechOperatorSkills", 2);
        }
        else if ((UnitAbilityGetLevel(EventUnit(), "MechOperatorSkills") == 3)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "MechOperatorSkills", 3);
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesMechOperator", 4))) {
        if ((UnitAbilityGetLevel(EventUnit(), "LogisticalAdjustments") == 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "LogisticalAdjustments", 1);
        }
        else if ((UnitAbilityGetLevel(EventUnit(), "LogisticalAdjustments") == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "LogisticalAdjustments", 2);
        }
        else if ((UnitAbilityGetLevel(EventUnit(), "LogisticalAdjustments") == 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "LogisticalAdjustments", 3);
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesMechOperator", 3))) {
        if ((UnitAbilityGetLevel(EventUnit(), "DefensiveAdjustments") == 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "DefensiveAdjustments", 1);
        }
        else if ((UnitAbilityGetLevel(EventUnit(), "DefensiveAdjustments") == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "DefensiveAdjustments", 2);
        }
        else if ((UnitAbilityGetLevel(EventUnit(), "DefensiveAdjustments") == 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "DefensiveAdjustments", 3);
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesMechOperator", 2))) {
        if ((UnitAbilityGetLevel(EventUnit(), "CombatAdjustments") == 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "CombatAdjustments", 1);
        }
        else if ((UnitAbilityGetLevel(EventUnit(), "CombatAdjustments") == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "CombatAdjustments", 2);
        }
        else if ((UnitAbilityGetLevel(EventUnit(), "CombatAdjustments") == 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "CombatAdjustments", 3);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MechAdjustments_Init () {
    gt_MechAdjustments = TriggerCreate("gt_MechAdjustments_Func");
    TriggerAddEventUnitAbility(gt_MechAdjustments, null, AbilityCommand("LearnAbilitiesMechOperator", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_MechAdjustments, null, AbilityCommand("LearnAbilitiesMechOperator", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_MechAdjustments, null, AbilityCommand("LearnAbilitiesMechOperator", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_MechAdjustments, null, AbilityCommand("LearnAbilitiesMechOperator", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_MechAdjustments, null, AbilityCommand("LearnAbilitiesMechOperator", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn EM-25r
//--------------------------------------------------------------------------------------------------
bool gt_LearnEM25r_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "LearnEM25r") == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "EM25rLevel2", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "LearnEM25r") == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "EM25rLevel3", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnEM25r_Init () {
    gt_LearnEM25r = TriggerCreate("gt_LearnEM25r_Func");
    TriggerAddEventUnitAbility(gt_LearnEM25r, null, AbilityCommand("LearnAbilitiesMercenary", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn W34 Python
//--------------------------------------------------------------------------------------------------
bool gt_LearnW34Python_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "LearnW34Python") == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "W34PythonLevel2", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "LearnW34Python") == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "W34PythonLevel3", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnW34Python_Init () {
    gt_LearnW34Python = TriggerCreate("gt_LearnW34Python_Func");
    TriggerAddEventUnitAbility(gt_LearnW34Python, null, AbilityCommand("LearnAbilitiesMercenary", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mercenary Skills
//--------------------------------------------------------------------------------------------------
bool gt_MercenarySkills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "ImprovedAssaultRifle", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MercenarySkills_Init () {
    gt_MercenarySkills = TriggerCreate("gt_MercenarySkills_Func");
    TriggerAddEventUnitAbility(gt_MercenarySkills, null, AbilityCommand("LearnAbilitiesMercenary", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapon Switch
//--------------------------------------------------------------------------------------------------
bool gt_WeaponSwitch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Mercenary2") || (UnitGetType(EventUnit()) == "Mercenary")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_magsize[UnitGetOwner(EventUnit())] == 60)) {
        gv_battleRifleAmmo[UnitGetOwner(EventUnit())] = PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals);
    }
    else if ((gv_magsize[UnitGetOwner(EventUnit())] == 5)) {
        gv_eM25rAmmo[UnitGetOwner(EventUnit())] = PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals);
    }
    else if ((gv_magsize[UnitGetOwner(EventUnit())] == 25)) {
        gv_w34Ammo[UnitGetOwner(EventUnit())] = PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals);
    }
    if ((EventUnitAbility() == AbilityCommand("EquipHighCaliberRailgun", 0))) {
        gv_magsize[UnitGetOwner(EventUnit())] = 5;
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, gv_eM25rAmmo[UnitGetOwner(EventUnit())]);
    }
    else if ((EventUnitAbility() == AbilityCommand("EquipW34Python", 0))) {
        gv_magsize[UnitGetOwner(EventUnit())] = 25;
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, gv_w34Ammo[UnitGetOwner(EventUnit())]);
    }
    else if (((EventUnitAbility() == AbilityCommand("EquipHighCaliberRailgun", 1)) || (EventUnitAbility() == AbilityCommand("EquipW34Python", 1)))) {
        gv_magsize[UnitGetOwner(EventUnit())] = 60;
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, gv_battleRifleAmmo[UnitGetOwner(EventUnit())]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponSwitch_Init () {
    gt_WeaponSwitch = TriggerCreate("gt_WeaponSwitch_Func");
    TriggerAddEventUnitAbility(gt_WeaponSwitch, null, AbilityCommand("EquipHighCaliberRailgun", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_WeaponSwitch, null, AbilityCommand("EquipHighCaliberRailgun", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_WeaponSwitch, null, AbilityCommand("EquipW34Python", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_WeaponSwitch, null, AbilityCommand("EquipW34Python", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Scanner
//--------------------------------------------------------------------------------------------------
bool gt_ItemScanner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    fixed lv_casterenergycurrent;
    fixed lv_abilitycost;
    fixed lv_abilitycost2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_casterenergycurrent = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, c_unitPropCurrent);
    lv_abilitycost = 90.0;
    lv_abilitycost2 = 60.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libE6C8C21C_gf_ForceAbilityToSkipCooldown(lv_caster, AbilityCommand("ItemScanner", 0), c_spendLocationAll);
    if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "EnhancedScanners", c_techCountCompleteOnly) == 1)) {
        UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_abilitycost2));
    }
    else {
        UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_abilitycost));
    }
    if ((DialogIsVisible(gv_itemScannerMenuDialog, EventPlayer()) == false)) {
        DialogSetVisible(gv_itemScannerMenuDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemScanner_Init () {
    gt_ItemScanner = TriggerCreate("gt_ItemScanner_Func");
    TriggerAddEventPlayerEffectUsed(gt_ItemScanner, c_playerAny, "ItemScannerDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tier 1 Scanner
//--------------------------------------------------------------------------------------------------
bool gt_Tier1Scanner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4BBDE22F_g;
    int auto4BBDE22F_u;
    unit auto4BBDE22F_var;
    unitgroup auto1B6FFE97_g;
    int auto1B6FFE97_u;
    unit auto1B6FFE97_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_itemScannerMenuDialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_itemScannerMenuDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/5603BCDC"));
    Wait((gv_scanDelay / 2), c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/AE25988F"));
    Wait((gv_scanDelay / 2), c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/BCA1B380"));
    auto4BBDE22F_g = UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4BBDE22F_u = UnitGroupCount(auto4BBDE22F_g, c_unitCountAll);
    for (;; auto4BBDE22F_u -= 1) {
        auto4BBDE22F_var = UnitGroupUnitFromEnd(auto4BBDE22F_g, auto4BBDE22F_u);
        if (auto4BBDE22F_var == null) { break; }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(auto4BBDE22F_var), ColorWithAlpha(91.76, 91.76, 0.00, 0.00), 3.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/936909AA"));
    }
    Wait(5.0, c_timeGame);
    auto1B6FFE97_g = UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1B6FFE97_u = UnitGroupCount(auto1B6FFE97_g, c_unitCountAll);
    for (;; auto1B6FFE97_u -= 1) {
        auto1B6FFE97_var = UnitGroupUnitFromEnd(auto1B6FFE97_g, auto1B6FFE97_u);
        if (auto1B6FFE97_var == null) { break; }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(auto1B6FFE97_var), ColorWithAlpha(91.76, 91.76, 0.00, 0.00), 3.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/8C16C29D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tier1Scanner_Init () {
    gt_Tier1Scanner = TriggerCreate("gt_Tier1Scanner_Func");
    TriggerAddEventPlayerEffectUsed(gt_Tier1Scanner, c_playerAny, "Tier1ScannerDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbital Bombardment
//--------------------------------------------------------------------------------------------------
bool gt_OrbitalBombardment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_caster;
    fixed lv_currentenergy;
    fixed lv_maximumenergy;
    int lv_failedshells;
    unit lv_dummyunit;
    int lv_int;
    point lv_dummypoint;
    actor lv_warning;
    int lv_orbitalBombardment;

    // Automatic Variable Declarations
    playergroup autoA0136656_g;
    int autoA0136656_var;
    playergroup auto0897EBA7_g;
    int auto0897EBA7_var;
    const int autoC93C857F_ae = 20;
    const int autoC93C857F_ai = 1;

    // Variable Initialization
    lv_caster = UnitGetOwner(EventUnit());
    lv_currentenergy = UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropEnergy, c_unitPropCurrent);
    lv_maximumenergy = UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropEnergyMax, c_unitPropCurrent);
    lv_int = 1;
    lv_orbitalBombardment = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateActorAtPoint("CallForFireWarning", EventUnitTargetPoint());
    lv_warning = libNtve_gf_ActorLastCreated();
    autoA0136656_g = gv_players;
    autoA0136656_var = -1;
    while (true) {
        autoA0136656_var = PlayerGroupNextPlayer(autoA0136656_g, autoA0136656_var);
        if (autoA0136656_var < 0) { break; }
        if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), autoA0136656_var, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(autoA0136656_var), "PingBaseAttack", EventUnitTargetPoint(), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, 270.0);
            lv_orbitalBombardment = PingLastCreated();
            PingSetTooltip(lv_orbitalBombardment, StringExternal("Param/Value/A1B3E94D"));
            SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupSingle(autoA0136656_var), 100.0, 0.0);
        }

    }
    Wait(5.0, c_timeGame);
    while (!((libNtve_gf_UnitIsPaused(EventUnit()) == false))) {
        Wait(1.0, c_timeGame);
    }
    auto0897EBA7_g = gv_players;
    auto0897EBA7_var = -1;
    while (true) {
        auto0897EBA7_var = PlayerGroupNextPlayer(auto0897EBA7_g, auto0897EBA7_var);
        if (auto0897EBA7_var < 0) { break; }
        VisRevealArea(auto0897EBA7_var, RegionCircle(EventUnitTargetPoint(), 6.0), 8.0, false);
    }
    ActorSend(lv_warning, "Destroy");
    lv_int = 1;
    for ( ; ( (autoC93C857F_ai >= 0 && lv_int <= autoC93C857F_ae) || (autoC93C857F_ai < 0 && lv_int >= autoC93C857F_ae) ) ; lv_int += autoC93C857F_ai ) {
        lv_dummypoint = PointWithOffsetPolar(EventUnitTargetPoint(), RandomFixed(0.0, 6.0), libNtve_gf_RandomAngle());
        if ((RegionContainsPoint(RegionEntireMap(), lv_dummypoint) == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "CasterDummy", c_unitCreateIgnorePlacement, lv_caster, PointWithOffsetPolar(lv_dummypoint, 4.0, RandomFixed(35.0, 55.0)), EventUnitTargetPoint());
            lv_dummyunit = UnitLastCreated();
            UnitBehaviorAdd(lv_dummyunit, "KillsToCaster", EventUnitTargetUnit(), 1);
            UnitCreateEffectPoint(lv_dummyunit, "OrbitalBombardmentDamagev2", lv_dummypoint);
            Wait(0.3, c_timeGame);
            UnitRemove(lv_dummyunit);
        }
        else {
            lv_failedshells += 1;
        }
    }
    if ((lv_failedshells > 0)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (lv_currentenergy + (lv_failedshells * 6.7)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrbitalBombardment_Init () {
    gt_OrbitalBombardment = TriggerCreate("gt_OrbitalBombardment_Func");
    TriggerAddEventUnitAbility(gt_OrbitalBombardment, null, AbilityCommand("OrbitalBombardment", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Rays Delay
//--------------------------------------------------------------------------------------------------
bool gt_EnergyRaysDelay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    int lv_energyRaysPing;

    // Automatic Variable Declarations
    playergroup auto3C4505DC_g;
    int auto3C4505DC_var;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());
    lv_energyRaysPing = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3C4505DC_g = gv_players;
    auto3C4505DC_var = -1;
    while (true) {
        auto3C4505DC_var = PlayerGroupNextPlayer(auto3C4505DC_g, auto3C4505DC_var);
        if (auto3C4505DC_var < 0) { break; }
        if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), auto3C4505DC_var, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(auto3C4505DC_var), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(90.20, 0.00, 0.00, 0.00), 6.0, 270.0);
            lv_energyRaysPing = PingLastCreated();
            PingSetTooltip(lv_energyRaysPing, StringExternal("Param/Value/D2742174"));
        }

    }
    Wait(5.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EnergyRays", c_unitCreateIgnorePlacement, lv_owner, EventUnitTargetPoint());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyRaysDelay_Init () {
    gt_EnergyRaysDelay = TriggerCreate("gt_EnergyRaysDelay_Func");
    TriggerAddEventUnitAbility(gt_EnergyRaysDelay, null, AbilityCommand("EnergyRays", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability Use Notification
//--------------------------------------------------------------------------------------------------
bool gt_AbilityUseNotification_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_neutronEmitterPing;
    int lv_shockTrooperPing;
    int lv_supplyDropPing;

    // Automatic Variable Declarations
    abilcmd autoC81DE9DE_val;
    playergroup autoA570B148_g;
    int autoA570B148_var;
    playergroup autoBA1EACDD_g;
    int autoBA1EACDD_var;
    playergroup auto8248C563_g;
    int auto8248C563_var;

    // Variable Initialization
    lv_neutronEmitterPing = c_invalidPingId;
    lv_shockTrooperPing = c_invalidPingId;
    lv_supplyDropPing = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC81DE9DE_val = EventUnitAbility();
    if (autoC81DE9DE_val == AbilityCommand("ShockTroopers", 0)) {
        autoA570B148_g = gv_players;
        autoA570B148_var = -1;
        while (true) {
            autoA570B148_var = PlayerGroupNextPlayer(autoA570B148_g, autoA570B148_var);
            if (autoA570B148_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), autoA570B148_var, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(autoA570B148_var), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(90.20, 0.00, 0.00, 0.00), 6.0, 270.0);
                lv_shockTrooperPing = PingLastCreated();
                PingSetTooltip(lv_shockTrooperPing, StringExternal("Param/Value/7D2B265E"));
            }

        }
    }
    else if (autoC81DE9DE_val == AbilityCommand("SupplyDropOSS", 0)) {
        autoBA1EACDD_g = gv_players;
        autoBA1EACDD_var = -1;
        while (true) {
            autoBA1EACDD_var = PlayerGroupNextPlayer(autoBA1EACDD_g, autoBA1EACDD_var);
            if (autoBA1EACDD_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), autoBA1EACDD_var, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(autoBA1EACDD_var), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(90.20, 0.00, 0.00, 0.00), 6.0, 270.0);
                lv_supplyDropPing = PingLastCreated();
                PingSetTooltip(gv_supplyPing, StringExternal("Param/Value/BCF1C1E4"));
            }

        }
    }
    else if (autoC81DE9DE_val == AbilityCommand("NeutronEmitter", 0)) {
        auto8248C563_g = gv_players;
        auto8248C563_var = -1;
        while (true) {
            auto8248C563_var = PlayerGroupNextPlayer(auto8248C563_g, auto8248C563_var);
            if (auto8248C563_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), auto8248C563_var, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(auto8248C563_var), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(90.20, 0.00, 0.00, 0.00), 6.0, 270.0);
                lv_neutronEmitterPing = PingLastCreated();
                PingSetTooltip(lv_neutronEmitterPing, StringExternal("Param/Value/BC04547D"));
            }

        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbilityUseNotification_Init () {
    gt_AbilityUseNotification = TriggerCreate("gt_AbilityUseNotification_Func");
    TriggerAddEventUnitAbility(gt_AbilityUseNotification, null, AbilityCommand("ShockTroopers", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_AbilityUseNotification, null, AbilityCommand("SupplyDropOSS", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_AbilityUseNotification, null, AbilityCommand("NeutronEmitter", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Orbital Strike
//--------------------------------------------------------------------------------------------------
bool gt_LearnOrbitalStrike_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitAbilityGetLevel(EventUnit(), "OrbitalStrikeHero") == 4))) {
        UnitAbilityChangeLevel(EventUnit(), "OrbitalStrikeEMPHero", 1);
        UnitAbilityChangeLevel(EventUnit(), "OrbitalStrikeIncendiaryHero", 1);
    }
    else {
        if (((UnitAbilityGetLevel(EventUnit(), "OrbitalStrikeHero") == 3))) {
            UnitAbilityChangeLevel(EventUnit(), "OrbitalStrikeEMPHero", 1);
            UnitAbilityChangeLevel(EventUnit(), "OrbitalStrikeIncendiaryHero", 1);
        }
        else {
            if (((UnitAbilityGetLevel(EventUnit(), "OrbitalStrikeHero") == 2))) {
                UnitAbilityChangeLevel(EventUnit(), "OrbitalStrikeEMPHero", 1);
                UnitAbilityChangeLevel(EventUnit(), "OrbitalStrikeIncendiaryHero", 1);
            }
            else {
                if (((UnitAbilityGetLevel(EventUnit(), "OrbitalStrikeHero") == 1))) {
                    UnitAbilityChangeLevel(EventUnit(), "OrbitalStrikeEMPHero", 1);
                    UnitAbilityChangeLevel(EventUnit(), "OrbitalStrikeIncendiaryHero", 1);
                }
                else {
                    if (((UnitAbilityGetLevel(EventUnit(), "OrbitalStrikeHero") == 0))) {
                        UnitAbilityChangeLevel(EventUnit(), "OrbitalStrikeEMPHero", 1);
                        UnitAbilityChangeLevel(EventUnit(), "OrbitalStrikeIncendiaryHero", 1);
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnOrbitalStrike_Init () {
    gt_LearnOrbitalStrike = TriggerCreate("gt_LearnOrbitalStrike_Func");
    TriggerAddEventUnitAbility(gt_LearnOrbitalStrike, null, AbilityCommand("LearnAbilitiesOSS", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Orbital Surveillience
//--------------------------------------------------------------------------------------------------
bool gt_LearnOrbitalSurveillience_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "OrbitalSatelliteReconnaissanceOSS") == 4)) {
        gv_scanDelay -= 2;
        UnitAbilityChangeLevel(EventUnit(), "EnergyRays", 1);
    }
    else {
        if ((UnitAbilityGetLevel(EventUnit(), "OrbitalSatelliteReconnaissanceOSS") == 3)) {
            gv_scanDelay -= 2;
        }
        else {
            if ((UnitAbilityGetLevel(EventUnit(), "OrbitalSatelliteReconnaissanceOSS") == 2)) {
                gv_scanDelay -= 2;
            }
            else {
                if ((UnitAbilityGetLevel(EventUnit(), "OrbitalSatelliteReconnaissanceOSS") == 1)) {
                    gv_scanDelay -= 2;
                }
                else {
                    if ((UnitAbilityGetLevel(EventUnit(), "OrbitalSatelliteReconnaissanceOSS") == 0)) {
                        gv_scanDelay -= 2;
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnOrbitalSurveillience_Init () {
    gt_LearnOrbitalSurveillience = TriggerCreate("gt_LearnOrbitalSurveillience_Func");
    TriggerAddEventUnitAbility(gt_LearnOrbitalSurveillience, null, AbilityCommand("LearnAbilitiesOSS", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Orbital Support
//--------------------------------------------------------------------------------------------------
bool gt_LearnOrbitalSupport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "OrbitalSupport") == 4)) {
        UnitAbilityChangeLevel(EventUnit(), "EnergyRays", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnOrbitalSupport_Init () {
    gt_LearnOrbitalSupport = TriggerCreate("gt_LearnOrbitalSupport_Func");
    TriggerAddEventUnitAbility(gt_LearnOrbitalSupport, null, AbilityCommand("LearnAbilitiesOSS", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Improved Concentration SS4
//--------------------------------------------------------------------------------------------------
bool gt_ImprovedConcentrationSS4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "SoldierSkills") == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ImprovedConcentration", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImprovedConcentrationSS4_Init () {
    gt_ImprovedConcentrationSS4 = TriggerCreate("gt_ImprovedConcentrationSS4_Func");
    TriggerAddEventUnitAbility(gt_ImprovedConcentrationSS4, null, AbilityCommand("LearnAbilitiesPlatoonLeader", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Platoon Leader Skills Level Up
//--------------------------------------------------------------------------------------------------
bool gt_PlatoonLeaderSkillsLevelUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_user;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_user = EventUnit();
    lv_owner = UnitGetOwner(lv_user);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesPlatoonLeader", 4))) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "Training", (TechTreeUpgradeCount(lv_owner, "Training", c_techCountCompleteOnly) + 1));
    }

    if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesPlatoonLeader", 3))) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "LeadershipSkills", (TechTreeUpgradeCount(lv_owner, "LeadershipSkills", c_techCountCompleteOnly) + 1));
    }

    if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesPlatoonLeader", 1))) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "Leadership", (TechTreeUpgradeCount(lv_owner, "Leadership", c_techCountCompleteOnly) + 1));
        if ((TechTreeUpgradeCount(lv_owner, "Leadership", c_techCountCompleteOnly) == 4)) {
            gv_advancedleadership = true;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlatoonLeaderSkillsLevelUp_Init () {
    gt_PlatoonLeaderSkillsLevelUp = TriggerCreate("gt_PlatoonLeaderSkillsLevelUp_Func");
    TriggerAddEventUnitAbility(gt_PlatoonLeaderSkillsLevelUp, null, AbilityCommand("LearnAbilitiesPlatoonLeader", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PlatoonLeaderSkillsLevelUp, null, AbilityCommand("LearnAbilitiesPlatoonLeader", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PlatoonLeaderSkillsLevelUp, null, AbilityCommand("LearnAbilitiesPlatoonLeader", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init LNS
//--------------------------------------------------------------------------------------------------
bool gt_InitLNS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PeriodicLNSpawn, true);
    TriggerEnable(gt_AdvancedLeadershipLNSpawn, true);
    TriggerEnable(gt_PingLNs, true);
    TriggerEnable(gt_LNDeath, true);
    TriggerEnable(gt_LNReport, true);
    TriggerEnable(gt_Leadership, true);
    TriggerEnable(gt_Dismiss, true);
    if ((gv_lNCustomCommandCard == false)) {
        gv_lNtypes[1] = "LNRifleman";
        gv_lNtypes[2] = "LNAutomaticRifleman";
        gv_lNtypes[3] = "LNJavelinGunner";
        gv_lNtypes[4] = "LNCombatEngineer";
        gv_lNtypes[5] = "LNSquadDesignatedMarksman";
        gv_lNtypes[6] = "LN68WCombatMedic";
        gv_lNtypes[7] = "LN74DFlamethrower";
    }
    else {
        gv_lNtypes[1] = "LNRifleman2";
        gv_lNtypes[2] = "LNAutomaticRifleman2";
        gv_lNtypes[3] = "LNJavelinGunner2";
        gv_lNtypes[4] = "LNCombatEngineer2";
        gv_lNtypes[5] = "LNSquadDesignatedMarksman2";
        gv_lNtypes[6] = "LN68WCombatMedic2";
        gv_lNtypes[7] = "LN74DFlamethrower2";
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitLNS_Init () {
    gt_InitLNS = TriggerCreate("gt_InitLNS_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic LN Spawn
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicLNSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_lNsPresent <= 40))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_lNCustomCommandCard == false)) {
        UnitCreate(1, gf_randomLNtype(), 0, 0, RegionRandomPoint(RegionFromId(107)), libNtve_gf_RandomAngle());
    }
    else {
        UnitCreate(1, gf_randomLNtypeCC(), 0, 0, RegionRandomPoint(RegionFromId(107)), libNtve_gf_RandomAngle());
    }
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById CamoLN");
    gf_RandomMiniFlagDecal(UnitLastCreated());
    libE6C8C21C_gf_RegisterUnitDiesEvent(gt_LNDeath, UnitLastCreated());
    UnitGroupAdd(gv_lNavailable, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "LNInvulnerability", UnitLastCreated(), 1);
    gv_lNsPresent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicLNSpawn_Init () {
    gt_PeriodicLNSpawn = TriggerCreate("gt_PeriodicLNSpawn_Func");
    TriggerEnable(gt_PeriodicLNSpawn, false);
    TriggerAddEventTimePeriodic(gt_PeriodicLNSpawn, 120.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_PeriodicLNSpawn, RandomFixed(50.0, 100.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AO Commander
//--------------------------------------------------------------------------------------------------
bool gt_AOCommander_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_lNsPresent <= 40))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_lNCustomCommandCard == false)) {
        UnitCreate(1, gf_randomLNtype(), 0, 0, RegionRandomPoint(RegionFromId(107)), libNtve_gf_RandomAngle());
    }
    else {
        UnitCreate(1, gf_randomLNtypeCC(), 0, 0, RegionRandomPoint(RegionFromId(107)), libNtve_gf_RandomAngle());
    }
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById CamoLN");
    gf_RandomMiniFlagDecal(UnitLastCreated());
    libE6C8C21C_gf_RegisterUnitDiesEvent(gt_LNDeath, UnitLastCreated());
    UnitGroupAdd(gv_lNavailable, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "LNInvulnerability", UnitLastCreated(), 1);
    gv_lNsPresent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AOCommander_Init () {
    gt_AOCommander = TriggerCreate("gt_AOCommander_Func");
    TriggerEnable(gt_AOCommander, false);
    TriggerAddEventTimePeriodic(gt_AOCommander, 60.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_AOCommander, RandomFixed(25.0, 50.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advanced Leadership LN Spawn
//--------------------------------------------------------------------------------------------------
bool gt_AdvancedLeadershipLNSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_lNsPresent <= 40))) {
            return false;
        }

        if (!((gv_advancedleadership == true))) {
            return false;
        }

        if (!((RandomInt(0, 2) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_lNCustomCommandCard == false)) {
        UnitCreate(1, gf_randomLNtype(), 0, 0, RegionRandomPoint(RegionFromId(107)), libNtve_gf_RandomAngle());
    }
    else {
        UnitCreate(1, gf_randomLNtypeCC(), 0, 0, RegionRandomPoint(RegionFromId(107)), libNtve_gf_RandomAngle());
    }
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById CamoLN");
    gf_RandomMiniFlagDecal(UnitLastCreated());
    libE6C8C21C_gf_RegisterUnitDiesEvent(gt_LNDeath, UnitLastCreated());
    UnitGroupAdd(gv_lNavailable, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "LNInvulnerability", UnitLastCreated(), 1);
    gv_lNsPresent += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdvancedLeadershipLNSpawn_Init () {
    gt_AdvancedLeadershipLNSpawn = TriggerCreate("gt_AdvancedLeadershipLNSpawn_Func");
    TriggerEnable(gt_AdvancedLeadershipLNSpawn, false);
    TriggerAddEventTimePeriodic(gt_AdvancedLeadershipLNSpawn, 120.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_AdvancedLeadershipLNSpawn, RandomFixed(50.0, 100.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping LNs
//--------------------------------------------------------------------------------------------------
bool gt_PingLNs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leadershiplevel;

    // Automatic Variable Declarations
    unitgroup auto0F8B170F_g;
    int auto0F8B170F_u;
    unit auto0F8B170F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto0F8B170F_g = gv_lNavailable;
    auto0F8B170F_u = UnitGroupCount(auto0F8B170F_g, c_unitCountAll);
    for (;; auto0F8B170F_u -= 1) {
        auto0F8B170F_var = UnitGroupUnitFromEnd(auto0F8B170F_g, auto0F8B170F_u);
        if (auto0F8B170F_var == null) { break; }
        libNtve_gf_CreatePingFacingAngle(gv_sFAATs, "PingSimple", UnitGetPosition(auto0F8B170F_var), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 5.0, 270.0);
        PingSetTooltip(PingLastCreated(), UnitTypeGetName(UnitGetType(auto0F8B170F_var)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingLNs_Init () {
    gt_PingLNs = TriggerCreate("gt_PingLNs_Func");
    TriggerEnable(gt_PingLNs, false);
    TriggerAddEventTimePeriodic(gt_PingLNs, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN Death
//--------------------------------------------------------------------------------------------------
bool gt_LNDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_playerLNs, EventUnit()) == true) || (UnitGroupHasUnit(gv_lNavailable, EventUnit()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == gv_lNtypes[4])) {
        gv_lNCombatEngineerAvailable -= 1;
        if ((UnitGroupHasUnit(gv_playerLNs, EventUnit()) == true)) {
            gv_lNsRecruited -= 1;
            gv_lNCE -= 1;
        }
        else {
            gv_lNsPresent -= 1;
        }
    }
    else if ((UnitGetType(EventUnit()) == gv_lNtypes[1])) {
        gv_lNRiflemanAvailable -= 1;
        if ((UnitGroupHasUnit(gv_playerLNs, EventUnit()) == true)) {
            gv_lNsRecruited -= 1;
        }
        else {
            gv_lNsPresent -= 1;
        }
    }
    else if ((UnitGetType(EventUnit()) == gv_lNtypes[2])) {
        gv_lNAutomaticRiflemanAvailable -= 1;
        if ((UnitGroupHasUnit(gv_playerLNs, EventUnit()) == true)) {
            gv_lNsRecruited -= 1;
        }
        else {
            gv_lNsPresent -= 1;
        }
    }
    else if ((UnitGetType(EventUnit()) == gv_lNtypes[3])) {
        gv_lNJavelinGunnerAvailable -= 1;
        if ((UnitGroupHasUnit(gv_playerLNs, EventUnit()) == true)) {
            gv_lNsRecruited -= 1;
        }
        else {
            gv_lNsPresent -= 1;
        }
    }
    else if ((UnitGetType(EventUnit()) == gv_lNtypes[5])) {
        gv_lNSquadDesignatedMarksmanAvailable -= 1;
        if ((UnitGroupHasUnit(gv_playerLNs, EventUnit()) == true)) {
            gv_lNsRecruited -= 1;
        }
        else {
            gv_lNsPresent -= 1;
        }
    }
    else if ((UnitGetType(EventUnit()) == gv_lNtypes[6])) {
        gv_lN68WCombatMedicAvailable -= 1;
        if ((UnitGroupHasUnit(gv_playerLNs, EventUnit()) == true)) {
            gv_lNsRecruited -= 1;
        }
        else {
            gv_lNsPresent -= 1;
        }
    }
    else if ((UnitGetType(EventUnit()) == gv_lNtypes[7])) {
        gv_lN74DFlamethrowerAvailable -= 1;
        if ((UnitGroupHasUnit(gv_playerLNs, EventUnit()) == true)) {
            gv_lNsRecruited -= 1;
        }
        else {
            gv_lNsPresent -= 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LNDeath_Init () {
    gt_LNDeath = TriggerCreate("gt_LNDeath_Func");
    TriggerEnable(gt_LNDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leadership
//--------------------------------------------------------------------------------------------------
bool gt_Leadership_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_user;
    int lv_owner;
    int lv_maxLNs;
    int lv_leadershiplevel;
    int lv_traininglevel;
    int lv_leadershipskillslevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_user = EventUnit();
    lv_owner = UnitGetOwner(lv_user);
    lv_leadershiplevel = TechTreeUpgradeCount(lv_owner, "Leadership", c_techCountCompleteOnly);
    lv_traininglevel = TechTreeUpgradeCount(lv_owner, "Training", c_techCountCompleteOnly);
    lv_leadershipskillslevel = TechTreeUpgradeCount(lv_owner, "LeadershipSkills", c_techCountCompleteOnly);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_leadershiplevel >= 4) && (lv_leadershipskillslevel >= 4) && (lv_traininglevel >= 4)) {
        lv_maxLNs = 4;
    }
    else if ((lv_leadershiplevel >= 4) && ((lv_leadershipskillslevel >= 4) || (lv_traininglevel >= 4))) {
        lv_maxLNs = 3;
    }
    else if ((lv_leadershiplevel >= 3)) {
        lv_maxLNs = 2;
    }
    else if ((lv_leadershiplevel >= 1)) {
        lv_maxLNs = 1;
    }
    if ((UnitGroupHasUnit(gv_lNavailable, EventUnitTargetUnit()) == false)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_owner), StringExternal("Param/Value/29140420"), SoundLink("UI_GenericError", -1));
        return true;
    }

    if ((UnitGroupCount(gv_playerLNs, c_unitCountAlive) >= lv_maxLNs)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_owner), StringExternal("Param/Value/2FD3CB26"), SoundLink("UI_GenericError", -1));
        return true;
    }

    if (((((UnitGetType(EventUnitTargetUnit()) == gv_lNtypes[3]) || (UnitGetType(EventUnitTargetUnit()) == gv_lNtypes[4]) || (UnitGetType(EventUnitTargetUnit()) == gv_lNtypes[5]) || (UnitGetType(EventUnitTargetUnit()) == gv_lNtypes[6])) && (lv_leadershiplevel < 4)) || (((UnitGetType(EventUnitTargetUnit()) == gv_lNtypes[2]) || (UnitGetType(EventUnitTargetUnit()) == gv_lNtypes[7])) && (lv_leadershiplevel < 2)))) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_owner), StringExternal("Param/Value/53EAD7FA"), SoundLink("UI_GenericError", -1));
        return true;
    }

    if ((UnitGetType(EventUnitTargetUnit()) != gv_lNtypes[4]) && (gv_lNCE < (TechTreeUnitCount(lv_owner, "LNM1SentryGun", c_techCountQueuedOrBetter) + TechTreeUnitCount(lv_owner, "LNM2SentryGun", c_techCountQueuedOrBetter)))) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_owner), StringExternal("Param/Value/B5E7A768"), SoundLink("UI_GenericError", -1));
        return true;
    }
    gv_lNsPresent = (gv_lNsPresent - 1);
    gv_lNsRecruited += 1;
    UnitBehaviorRemove(EventUnitTargetUnit(), "LNInvulnerability", 1);
    UnitSetOwner(EventUnitTargetUnit(), lv_owner, true);
    UnitGroupAdd(gv_playerLNs, EventUnitTargetUnit());
    UnitGroupRemove(gv_lNavailable, EventUnitTargetUnit());
    UnitSelect(EventUnitTargetUnit(), lv_owner, true);
    UnitSetCustomValue(EventUnitTargetUnit(), 1, 0.0);
    if ((UnitGetType(EventUnitTargetUnit()) == gv_lNtypes[4])) {
        gv_lNCE += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Leadership_Init () {
    gt_Leadership = TriggerCreate("gt_Leadership_Func");
    TriggerEnable(gt_Leadership, false);
    TriggerAddEventUnitAbility(gt_Leadership, null, AbilityCommand("Leadership", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dismiss
//--------------------------------------------------------------------------------------------------
bool gt_Dismiss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_loc;
    unit lv_user;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_user = EventUnit();
    lv_owner = UnitGetOwner(lv_user);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_playerLNs, EventUnitTargetUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lNsPresent = (gv_lNsPresent + 1);
    gv_lNsRecruited -= 1;
    if ((UnitGetType(EventUnitTargetUnit()) == gv_lNtypes[4])) {
        gv_lNCE -= 1;
    }
    gf_DropAllItemsImmediate(EventUnitTargetUnit(), 1.5);
    if ((UnitHasBehavior2(EventUnitTargetUnit(), "Prone") == true)) {
        UnitIssueOrder(EventUnitTargetUnit(), Order(AbilityCommand("Prone", 0)), c_orderQueueAddToFront);
    }
    UnitSetOwner(EventUnitTargetUnit(), 0, true);
    UnitGroupRemove(gv_playerLNs, EventUnitTargetUnit());
    UnitGroupAdd(gv_lNavailable, EventUnitTargetUnit());
    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(107))), c_orderQueueReplace);
    Wait(20.0, c_timeGame);
    if ((UnitGroupHasUnit(gv_playerLNs, EventUnitTargetUnit()) == false)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnitTargetUnit()), lv_loc) > 8.0)) {
            UnitSetPosition(EventUnitTargetUnit(), lv_loc, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dismiss_Init () {
    gt_Dismiss = TriggerCreate("gt_Dismiss_Func");
    TriggerEnable(gt_Dismiss, false);
    TriggerAddEventUnitAbility(gt_Dismiss, null, AbilityCommand("Dismiss", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN Report
//--------------------------------------------------------------------------------------------------
bool gt_LNReport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_temptext;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_temptext = (lv_temptext + StringExternal("Param/Value/B7CB89FE"));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/15B9AA09"));
    lv_temptext = (StringExternal("Param/Value/CC0BAB0D") + IntToText(gv_lNsPresent));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/5C82E6C0"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/7ECE921B") + IntToText(gv_lNsRecruited)));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/3627B693"));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/F28F97F6"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/C31FB09E") + IntToText(gv_lNRiflemanAvailable)));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/5FFB66E7"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/DBF34F55") + IntToText(gv_lNAutomaticRiflemanAvailable)));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/432046CE"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/932B1813") + IntToText(gv_lN68WCombatMedicAvailable)));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/A44479A8"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/29E8C7F3") + IntToText(gv_lN74DFlamethrowerAvailable)));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/AB93819D"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/EC9E0FBF") + IntToText(gv_lNSquadDesignatedMarksmanAvailable)));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/F8E3600F"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/7E07184E") + IntToText(gv_lNCombatEngineerAvailable)));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/6695F27C"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/681AA5F1") + IntToText(gv_lNJavelinGunnerAvailable)));
    gf_DisplayVisorTextDialog(lv_temptext, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LNReport_Init () {
    gt_LNReport = TriggerCreate("gt_LNReport_Func");
    TriggerAddEventUnitAbility(gt_LNReport, null, AbilityCommand("LNReport", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN SITREP Display
//--------------------------------------------------------------------------------------------------
bool gt_LNSITREPDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_temptext;
    text lv_floattext;
    int lv_int;
    string lv_healthicon;

    // Automatic Variable Declarations
    unitgroup auto2D5BFA2D_g;
    int auto2D5BFA2D_u;
    unit auto2D5BFA2D_var;
    const int autoD2A1E07F_ae = gv_ailmentCount;
    const int autoD2A1E07F_ai = 1;
    unitgroup auto1FB179EF_g;
    int auto1FB179EF_u;
    unit auto1FB179EF_var;
    const int autoCBE47F29_ae = gv_ailmentCount;
    const int autoCBE47F29_ai = 1;

    // Variable Initialization
    lv_healthicon = "Assets\\Textures\\icon-health-zerg.dds";

    // Actions
    if (!runActions) {
        return true;
    }

    auto2D5BFA2D_g = gv_playerLNs;
    auto2D5BFA2D_u = UnitGroupCount(auto2D5BFA2D_g, c_unitCountAll);
    for (;; auto2D5BFA2D_u -= 1) {
        auto2D5BFA2D_var = UnitGroupUnitFromEnd(auto2D5BFA2D_g, auto2D5BFA2D_u);
        if (auto2D5BFA2D_var == null) { break; }
        if (((UnitGetPropertyFixed(auto2D5BFA2D_var, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0) || (gf_UnitHighestAilment(auto2D5BFA2D_var) > 0))) {
            lv_floattext = StringToText("");
            lv_temptext = (lv_temptext + StringExternal("Param/Value/5E374B89"));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/E39275CE"));
            lv_temptext = (lv_temptext + TextWithColor(UnitTypeGetName(UnitGetType(auto2D5BFA2D_var)), Color(0.00, 84.31, 41.96)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/33E57895"));
            if ((UnitIsAlive(auto2D5BFA2D_var) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimpleSmall", UnitGetPosition(auto2D5BFA2D_var), Color(0.00, 18.04, 90.20), 7.0, 270.0);
                PingSetUnit(PingLastCreated(), auto2D5BFA2D_var);
                PingSetTooltip(PingLastCreated(), UnitGetName(auto2D5BFA2D_var));
                SoundPlayOnUnit(SoundLink("RadioChatter", -1), PlayerGroupSingle(EventPlayer()), auto2D5BFA2D_var, 0.0, 100.0, 0.0);
                lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(auto2D5BFA2D_var, c_unitPropLifePercent, c_unitPropCurrent), 0), Color((100.0 - UnitGetPropertyFixed(auto2D5BFA2D_var, c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(auto2D5BFA2D_var, c_unitPropLifePercent, c_unitPropCurrent), 0.0)));
                if ((UnitGetPropertyFixed(auto2D5BFA2D_var, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/3E965876"));
                    lv_floattext = (lv_floattext + gf_TextImage(lv_healthicon, 22));
                }
                else {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/CFF33D26"));
                }
                lv_int = 0;
                for ( ; ( (autoD2A1E07F_ai >= 0 && lv_int <= autoD2A1E07F_ae) || (autoD2A1E07F_ai < 0 && lv_int >= autoD2A1E07F_ae) ) ; lv_int += autoD2A1E07F_ai ) {
                    if ((UnitHasBehavior(auto2D5BFA2D_var, gv_ailments[lv_int]) == true)) {
                        lv_temptext = (lv_temptext + gf_TextImage(gv_ailmentImages[lv_int], 22));
                        lv_floattext = (lv_floattext + gf_TextImage(gv_ailmentImages[lv_int], 22));
                    }

                }
                gf_FloatingTextforPlayer(auto2D5BFA2D_var, lv_floattext, EventPlayer());
                lv_temptext = (lv_temptext + StringExternal("Param/Value/6AF1FDD3"));
            }

            gf_DisplayVisorTextDialog(lv_temptext, EventPlayer());
        }

    }
    auto1FB179EF_g = gv_playerminis;
    auto1FB179EF_u = UnitGroupCount(auto1FB179EF_g, c_unitCountAll);
    for (;; auto1FB179EF_u -= 1) {
        auto1FB179EF_var = UnitGroupUnitFromEnd(auto1FB179EF_g, auto1FB179EF_u);
        if (auto1FB179EF_var == null) { break; }
        if ((UnitGetOwner(auto1FB179EF_var) == EventPlayer()) && ((UnitGetPropertyFixed(auto1FB179EF_var, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0) || (gf_UnitHighestAilment(auto1FB179EF_var) > 0))) {
            lv_floattext = StringToText("");
            lv_temptext = (lv_temptext + StringExternal("Param/Value/27F93386"));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/9EFAA617"));
            lv_temptext = (lv_temptext + TextWithColor(UnitTypeGetName(UnitGetType(auto1FB179EF_var)), Color(0.00, 84.31, 41.96)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/E9DDDAD4"));
            if ((UnitIsAlive(auto1FB179EF_var) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimpleSmall", UnitGetPosition(auto1FB179EF_var), Color(0.00, 18.04, 90.20), 7.0, 270.0);
                PingSetUnit(PingLastCreated(), auto1FB179EF_var);
                PingSetTooltip(PingLastCreated(), UnitGetName(auto1FB179EF_var));
                SoundPlayOnUnit(SoundLink("RadioChatter", -1), PlayerGroupSingle(EventPlayer()), auto1FB179EF_var, 0.0, 100.0, 0.0);
                lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(auto1FB179EF_var, c_unitPropLifePercent, c_unitPropCurrent), 0), Color((100.0 - UnitGetPropertyFixed(auto1FB179EF_var, c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(auto1FB179EF_var, c_unitPropLifePercent, c_unitPropCurrent), 0.0)));
                if ((UnitGetPropertyFixed(auto1FB179EF_var, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/8A844EFB"));
                    lv_floattext = (lv_floattext + gf_TextImage(lv_healthicon, 22));
                }
                else {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/D3D96130"));
                }
                lv_int = 0;
                for ( ; ( (autoCBE47F29_ai >= 0 && lv_int <= autoCBE47F29_ae) || (autoCBE47F29_ai < 0 && lv_int >= autoCBE47F29_ae) ) ; lv_int += autoCBE47F29_ai ) {
                    if ((UnitHasBehavior(auto1FB179EF_var, gv_ailments[lv_int]) == true)) {
                        lv_temptext = (lv_temptext + gf_TextImage(gv_ailmentImages[lv_int], 22));
                        lv_floattext = (lv_floattext + gf_TextImage(gv_ailmentImages[lv_int], 22));
                    }

                }
                gf_FloatingTextforPlayer(auto1FB179EF_var, lv_floattext, EventPlayer());
                lv_temptext = (lv_temptext + StringExternal("Param/Value/75912CC2"));
            }

            gf_DisplayVisorTextDialog(lv_temptext, EventPlayer());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LNSITREPDisplay_Init () {
    gt_LNSITREPDisplay = TriggerCreate("gt_LNSITREPDisplay_Func");
    TriggerAddEventUnitAbility(gt_LNSITREPDisplay, null, AbilityCommand("LNSITREP", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frag Level Up
//--------------------------------------------------------------------------------------------------
bool gt_FragLevelUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetLevel(EventUnit(), "FragGrenade") > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityChangeLevel(EventUnit(), "PlasmaGrenadeRifleman", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FragLevelUp_Init () {
    gt_FragLevelUp = TriggerCreate("gt_FragLevelUp_Func");
    TriggerAddEventUnitAbility(gt_FragLevelUp, null, AbilityCommand("LearnAbilitiesRifleman", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_FragLevelUp, null, AbilityCommand("LearnAbilitiesRegendare", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rifleman Skill Level Up
//--------------------------------------------------------------------------------------------------
bool gt_RiflemanSkillLevelUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA7E5FEF7_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA7E5FEF7_val = UnitAbilityGetLevel(EventUnit(), "RiflemanSkills");
    if (autoA7E5FEF7_val == 3) {
        UnitAbilityChangeLevel(EventUnit(), "GroundFlareMGL", 1);
        UnitAbilityChangeLevel(EventUnit(), "GroundFlare", 1);
        UnitAbilityChangeLevel(EventUnit(), "FocusFire", 1);
    }
    else if (autoA7E5FEF7_val == 2) {
        UnitAbilityChangeLevel(EventUnit(), "SmokeGrenadeMGL", 1);
        UnitAbilityChangeLevel(EventUnit(), "SmokeGrenade", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RiflemanSkillLevelUp_Init () {
    gt_RiflemanSkillLevelUp = TriggerCreate("gt_RiflemanSkillLevelUp_Func");
    TriggerAddEventUnitAbility(gt_RiflemanSkillLevelUp, null, AbilityCommand("LearnAbilitiesRifleman", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Charge Refund
//--------------------------------------------------------------------------------------------------
bool gt_LearnChargeRefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetChargeUsed(lv_unit, "Abil/LearnAbilityMOS") != 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddChargeUsed(lv_unit, "Abil/LearnAbilityMOS", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnChargeRefund_Init () {
    gt_LearnChargeRefund = TriggerCreate("gt_LearnChargeRefund_Func");
    TriggerAddEventUnitLearnProgress(gt_LearnChargeRefund, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disarm
//--------------------------------------------------------------------------------------------------
bool gt_Disarm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_satcheltime;
    int lv_satchel;
    unit lv_target;
    unit lv_caster;
    fixed lv_casterenergycurrent;
    fixed lv_sentryenergycost;

    // Automatic Variable Declarations
    string autoB4DA9BC1_val;
    const int auto64389D0E_n = 10;
    int auto64389D0E_i;

    // Variable Initialization
    lv_satcheltime = 10;
    lv_satchel = c_textTagNone;
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_casterenergycurrent = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, c_unitPropCurrent);
    lv_sentryenergycost = 93.0;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB4DA9BC1_val = UnitGetType(lv_target);
    if (autoB4DA9BC1_val == "Claymore2") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Claymore", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lv_target));
        UnitAddChargeUsed(UnitLastCreated(), "ItemCharges", 4.0);
        UnitRemove(lv_target);
    }
    else if (autoB4DA9BC1_val == "M1SentryGun") {
        if ((UnitGetOwner(lv_target) == UnitGetOwner(lv_caster))) {
            gf_DropAllItemsImmediate(lv_target, 1.5);
            UnitRemove(lv_target);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_sentryenergycost));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_caster)), c_messageAreaError, StringExternal("Param/Value/00229C55"));
        }
    }
    else if (autoB4DA9BC1_val == "M2SentryGun") {
        if ((UnitGetOwner(lv_target) == UnitGetOwner(lv_caster))) {
            gf_DropAllItemsImmediate(lv_target, 1.5);
            UnitRemove(lv_target);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_sentryenergycost));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_caster)), c_messageAreaError, StringExternal("Param/Value/228B28EF"));
        }
    }
    else if (autoB4DA9BC1_val == "LNM1SentryGun") {
        if ((UnitGetOwner(lv_target) == UnitGetOwner(lv_caster))) {
            gf_DropAllItemsImmediate(lv_target, 1.5);
            UnitRemove(lv_target);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_caster)), c_messageAreaError, StringExternal("Param/Value/8ADD4E02"));
        }
    }
    else if (autoB4DA9BC1_val == "LNM2SentryGun") {
        if ((UnitGetOwner(lv_target) == UnitGetOwner(lv_caster))) {
            gf_DropAllItemsImmediate(lv_target, 1.5);
            UnitRemove(lv_target);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_caster)), c_messageAreaError, StringExternal("Param/Value/BA770A6C"));
        }
    }
    else if (autoB4DA9BC1_val == "MK44SentryGun") {
        gf_DropAllItemsImmediate(lv_target, 1.5);
        UnitRemove(lv_target);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGunPacked", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lv_target));
    }
    else if (autoB4DA9BC1_val == "MK79SentryGun") {
        gf_DropAllItemsImmediate(lv_target, 1.5);
        UnitRemove(lv_target);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK79SentryGunPacked", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lv_target));
    }
    else if (autoB4DA9BC1_val == "ExplosiveChargeUnit") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ExplosiveCharge", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lv_target));
        UnitAddChargeUsed(UnitLastCreated(), "ItemCharges", 11.0);
        gf_UpdateItemTextChargeDisplay(UnitLastCreated());
        UnitRemove(lv_target);
    }
    else if (autoB4DA9BC1_val == "C4ExplosiveDevice") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "C4Charge", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lv_target));
        UnitRemove(lv_target);
    }
    else if (autoB4DA9BC1_val == "RCXD") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RCXD2", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lv_target));
        UnitAddChargeUsed(UnitLastCreated(), "ItemCharges", 2.0);
        UnitRemove(lv_target);
    }
    else if (autoB4DA9BC1_val == "PlasmaMine2") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlasmaMine", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lv_target));
        UnitRemove(lv_target);
    }
    else if (autoB4DA9BC1_val == "SatchelChargeCE") {
        if ((UnitGetCustomValue(lv_target, 0) != 1)) {
            UnitSetCustomValue(lv_target, 0, 1.0);
            ActorSend(libNtve_gf_MainActorofUnit(lv_target), "AnimBracketStart Work Work,Start Work Work,End");
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBaseAttack", UnitGetPosition(lv_target), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 10.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4A2FB6E3"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A10C5083"));
            SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundPlayOnUnit(SoundLink("NukePack_StandWorkStart", -1), PlayerGroupAll(), lv_target, 0.0, 100.0, 0.0);
            for (auto64389D0E_i = 1; auto64389D0E_i <= auto64389D0E_n; auto64389D0E_i += 1) {
                TextTagDestroy(lv_satchel);
                TextTagCreate((StringExternal("Param/Value/1A9EC23E") + IntToText(lv_satcheltime)), 18, UnitGetPosition(lv_target), 2.5, true, false, PlayerGroupAll());
                lv_satchel = TextTagLastCreated();
                lv_satcheltime -= 1;
                if ((lv_satcheltime == 3)) {
                    ActorSend(libNtve_gf_MainActorofUnit(lv_target), "AnimBracketStop Work 0 4.500000 AsDuration");
                }
                Wait(1.0, c_timeReal);
            }
            TextTagDestroy(lv_satchel);
            UnitCreateEffectPoint(lv_caster, "SatchelExplosionDamageCE", UnitGetPosition(lv_target));
            UnitKill(lv_target);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Disarm_Init () {
    gt_Disarm = TriggerCreate("gt_Disarm_Func");
    TriggerAddEventPlayerEffectUsed(gt_Disarm, c_playerAny, "Disarm");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawned Unit Vision
//--------------------------------------------------------------------------------------------------
bool gt_SpawnedUnitVision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF9FBAE6D_g;
    int autoF9FBAE6D_var;
    playergroup auto5C837893_g;
    int auto5C837893_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, 0);
    if (((UnitGetType(EventUnitCreatedUnit()) == "FieldCamera") || (UnitGetType(EventUnitCreatedUnit()) == "ReconDrone") || (UnitGetType(EventUnitCreatedUnit()) == "MotionSensor") || (UnitGetType(EventUnitCreatedUnit()) == "SpyPlane") || (UnitGetType(EventUnitCreatedUnit()) == "RadarTower") || (UnitGetType(EventUnitCreatedUnit()) == "OrbitalSupportReconnaissance"))) {
        autoF9FBAE6D_g = gv_players;
        autoF9FBAE6D_var = -1;
        while (true) {
            autoF9FBAE6D_var = PlayerGroupNextPlayer(autoF9FBAE6D_g, autoF9FBAE6D_var);
            if (autoF9FBAE6D_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(autoF9FBAE6D_var, UnitGetOwner(EventUnitCreatedUnit()), libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, autoF9FBAE6D_var);
            }

        }
    }
    else {
        libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, 15);
        auto5C837893_g = gv_players;
        auto5C837893_var = -1;
        while (true) {
            auto5C837893_var = PlayerGroupNextPlayer(auto5C837893_g, auto5C837893_var);
            if (auto5C837893_var < 0) { break; }
            libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, auto5C837893_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnedUnitVision_Init () {
    gt_SpawnedUnitVision = TriggerCreate("gt_SpawnedUnitVision_Func");
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "GroundFlareMGL", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "OrbitalSatelliteReconnaissanceViper", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "OrbitalSatelliteReconnaissanceOSS", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "OrbitalSatelliteReconnaissance", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FlareGunMercenary", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "ImprovedGroundFlareMGL", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "GroundFlareItem", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "ImprovedGroundFlare", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "GroundFlare", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "RAGroundFlare", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FlareGun2", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FlareGunCyborg", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FieldCameraBorg2", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FlareGunCombat", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "RAFlareGun", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FlareGunItem", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FlareGunGhost", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FlareGunWO5", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FlareGun", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FieldCamera3", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FieldCameraCyborg", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FieldCameraGhost", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FieldCameraSDM", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FieldCamera", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FieldCamera2", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "IonCannonGhost", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "IonCannon", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "MotionSensorGhost", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "MotionSensorCS", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "MotionSensorBorg", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "SpyPlane", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "ReconDrone2", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "ReconDrone", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jump Fail
//--------------------------------------------------------------------------------------------------
bool gt_JumpFail_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_origin;
    point lv_jumpLoc;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_origin = UnitGetPosition(EventUnit());
    Wait(0.45, c_timeGame);
    lv_jumpLoc = UnitGetPosition(EventUnit());
    if ((lv_jumpLoc == lv_origin)) {
        if ((EventUnitAbility() == AbilityCommand("Jump", 0))) {
            libE6C8C21C_gf_ForceAbilityToSkipCooldown(EventUnit(), AbilityCommand("Jump", 0), c_spendLocationAbility);
        }
        else {
            libE6C8C21C_gf_ForceAbilityToSkipCooldown(EventUnit(), AbilityCommand("Jump2", 0), c_spendLocationAbility);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JumpFail_Init () {
    gt_JumpFail = TriggerCreate("gt_JumpFail_Func");
    TriggerAddEventUnitAbility(gt_JumpFail, null, AbilityCommand("Jump", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_JumpFail, null, AbilityCommand("Jump2", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frag Out Warning
//--------------------------------------------------------------------------------------------------
bool gt_FragOutWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_players, lv_owner) == true) || (lv_owner == 13)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AIScatterFromPoint(EventUnitTargetPoint(), 4.0);
    if ((RandomInt(0, 10) == 1)) {
        TextTagCreate((TextWithColor(PlayerName(lv_owner), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_owner, false))) + StringExternal("Param/Value/B0644F7C")), 18, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
    }
    else {
        TextTagCreate((TextWithColor(PlayerName(lv_owner), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_owner, false))) + StringExternal("Param/Value/05BB1EFE")), 18, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
    }
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 1.0);
    TextTagSetTextShadow(TextTagLastCreated(), false);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 3.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FragOutWarning_Init () {
    gt_FragOutWarning = TriggerCreate("gt_FragOutWarning_Func");
    TriggerAddEventUnitAbility(gt_FragOutWarning, null, AbilityCommand("FragGrenade", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_FragOutWarning, null, AbilityCommand("FragGrenadeMedic", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_FragOutWarning, null, AbilityCommand("FragGrenade2", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_FragOutWarning, null, AbilityCommand("FragGrenade3", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_FragOutWarning, null, AbilityCommand("FragGrenadeLN", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_FragOutWarning, null, AbilityCommand("FragGrenadePMC", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frag Out Warning Item
//--------------------------------------------------------------------------------------------------
bool gt_FragOutWarningItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_player;
    point lv_position;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = UnitInventoryUnit(EventUnitInventoryItem());
    lv_player = UnitGetOwner(lv_caster);
    lv_position = UnitGetPosition(lv_caster);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "FragGrenade"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/53207ABF")), 18, UnitGetPosition(lv_caster), 1.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagAttachToUnit(TextTagLastCreated(), lv_caster, 1.0);
    TextTagSetTextShadow(TextTagLastCreated(), false);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 3.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FragOutWarningItem_Init () {
    gt_FragOutWarningItem = TriggerCreate("gt_FragOutWarningItem_Func");
    TriggerAddEventUnitInventoryChange(gt_FragOutWarningItem, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Shake Small
//--------------------------------------------------------------------------------------------------
bool gt_CameraShakeSmall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_magnitude;
    fixed lv_dist;

    // Automatic Variable Declarations
    unitgroup auto207D017D_g;
    int auto207D017D_u;
    unit auto207D017D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto207D017D_g = gv_heroesGroup;
    auto207D017D_u = UnitGroupCount(auto207D017D_g, c_unitCountAll);
    for (;; auto207D017D_u -= 1) {
        auto207D017D_var = UnitGroupUnitFromEnd(auto207D017D_g, auto207D017D_u);
        if (auto207D017D_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(auto207D017D_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 4.0) && (UnitIsAlive(auto207D017D_var) == true)) {
            lv_magnitude = (2.2 - (DistanceBetweenPoints(UnitGetPosition(auto207D017D_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) / 4.0));
            lv_dist = DistanceBetweenPoints(UnitGetPosition(auto207D017D_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
            CameraShakeStart(UnitGetOwner(auto207D017D_var), c_cameraPositionTarget, c_cameraDirectionXY, lv_magnitude, 11.0, 5.0, 1.5);
            SoundPlay(SoundLink("EarRinging", -1), PlayerGroupSingle(UnitGetOwner(auto207D017D_var)), (80.0 - (lv_dist * 10.0)), 0.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CameraShakeSmall_Init () {
    gt_CameraShakeSmall = TriggerCreate("gt_CameraShakeSmall_Func");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamage1");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamage2");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamage3");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamage4");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "ClusterRocketsDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "HurricaneMissilesDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "CrowdControlDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "RACrowdControlDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "MGLDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "MGLDamage1");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "MGLDamage2");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "MGLDamage3");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "MGLDamage4");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "VesaniaGLDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "M1AbramsFireSet");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "OrbitalStrikeDamage1");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "OrbitalStrikeEMPDamage2");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "CycloneMissileDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "CycloneMissileDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Shake Large
//--------------------------------------------------------------------------------------------------
bool gt_CameraShakeLarge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_magnitude;
    fixed lv_dist;

    // Automatic Variable Declarations
    unitgroup auto7DADBC41_g;
    int auto7DADBC41_u;
    unit auto7DADBC41_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7DADBC41_g = gv_heroesGroup;
    auto7DADBC41_u = UnitGroupCount(auto7DADBC41_g, c_unitCountAll);
    for (;; auto7DADBC41_u -= 1) {
        auto7DADBC41_var = UnitGroupUnitFromEnd(auto7DADBC41_g, auto7DADBC41_u);
        if (auto7DADBC41_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(auto7DADBC41_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 5.0) && (UnitIsAlive(auto7DADBC41_var) == true)) {
            lv_magnitude = (2.9 - (DistanceBetweenPoints(UnitGetPosition(auto7DADBC41_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) / 5.0));
            lv_dist = DistanceBetweenPoints(UnitGetPosition(auto7DADBC41_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
            CameraShakeStart(UnitGetOwner(auto7DADBC41_var), c_cameraPositionTarget, c_cameraDirectionXY, lv_magnitude, 11.0, 2.0, 1.5);
            SoundPlay(SoundLink("EarRinging", -1), PlayerGroupSingle(UnitGetOwner(auto7DADBC41_var)), (100.0 - (lv_dist * 10.0)), 0.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CameraShakeLarge_Init () {
    gt_CameraShakeLarge = TriggerCreate("gt_CameraShakeLarge_Func");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "MRLDamage1");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "ExplosiveChargeDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "C4ChargeExplosionDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "CallforFirePLDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "GuidedMissileDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "HEDamage1");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "HEDamage2");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "HEDamage3");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "HEDamage4");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "ATDamage1");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "ATDamage2");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "ATDamage3");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "ATDamage4");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "M1AbramsDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "TOWDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "SatchelExplosionDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "OrbitalBombardmentDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self Apply First Aid Kit
//--------------------------------------------------------------------------------------------------
bool gt_SelfApplyFirstAidKit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_itemtype;
    fixed lv_difference;
    int lv_inventorySlot;
    unit lv_item;

    // Automatic Variable Declarations
    unitgroup autoF0EC0D47_g;
    int autoF0EC0D47_u;
    unit autoF0EC0D47_var;
    unitgroup auto506EE2AB_g;
    int auto506EE2AB_u;

    // Variable Initialization
    lv_itemtype = "";

    // Actions
    if (!runActions) {
        return true;
    }

    autoF0EC0D47_g = UnitGroupSelected(EventPlayer());
    autoF0EC0D47_u = UnitGroupCount(autoF0EC0D47_g, c_unitCountAll);
    for (;; autoF0EC0D47_u -= 1) {
        autoF0EC0D47_var = UnitGroupUnitFromEnd(autoF0EC0D47_g, autoF0EC0D47_u);
        if (autoF0EC0D47_var == null) { break; }
        lv_unit = autoF0EC0D47_var;
        lv_itemtype = "FirstAidKit";
        if ((UnitGetOwner(autoF0EC0D47_var) == EventPlayer())) {
            auto506EE2AB_g = UnitInventoryGroup(autoF0EC0D47_var);
            auto506EE2AB_u = UnitGroupCount(auto506EE2AB_g, c_unitCountAll);
            for (;; auto506EE2AB_u -= 1) {
                lv_item = UnitGroupUnitFromEnd(auto506EE2AB_g, auto506EE2AB_u);
                if (lv_item == null) { break; }
                if ((gf_CountItemType("FirstAidKit", autoF0EC0D47_var) >= 1) && (UnitHasBehavior2(autoF0EC0D47_var, "FirstAidKit") == false) && (UnitHasBehavior2(autoF0EC0D47_var, "FirstAidKitMedic") == false)) {
                    if ((UnitGetType(lv_item) == "FirstAidKit")) {
                        if (((UnitGetType(autoF0EC0D47_var) == "CombatMedic") || (UnitGetType(autoF0EC0D47_var) == "CombatMedic2"))) {
                            UnitCreateEffectUnit(lv_item, "FirstAidKitBehavior", autoF0EC0D47_var);
                            UnitCreateEffectUnit(lv_item, "FirstAidKitBehaviorMedic", autoF0EC0D47_var);
                        }
                        else {
                            UnitCreateEffectUnit(lv_item, "FirstAidKitBehavior", autoF0EC0D47_var);
                        }
                        UnitAddChargeUsed(lv_item, "ItemCharges", 1.0);
                        if ((gf_chargesremaining(lv_item, "ItemCharges", 5.0) == 0.0)) {
                            UnitRemove(lv_item);
                        }
                        else {
                            gf_CombineItems(lv_item, gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
                        }
                        break;
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelfApplyFirstAidKit_Init () {
    gt_SelfApplyFirstAidKit = TriggerCreate("gt_SelfApplyFirstAidKit_Func");
    TriggerAddEventKeyPressed(gt_SelfApplyFirstAidKit, c_playerAny, c_keyY, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Designator Reveal
//--------------------------------------------------------------------------------------------------
bool gt_LaserDesignatorReveal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetunit;
    unit lv_caster;
    string lv_unittype;
    fixed lv_casterenergycurrent;
    fixed lv_laserenforcerimprovedceldenergycost;
    fixed lv_ldenergycost;

    // Automatic Variable Declarations
    string autoF87373E6_val;

    // Variable Initialization
    lv_targetunit = EventUnitTargetUnit();
    lv_caster = EventUnit();
    lv_unittype = UnitGetType(lv_caster);
    lv_casterenergycurrent = UnitGetPropertyFixed(lv_caster, c_unitPropEnergy, c_unitPropCurrent);
    lv_laserenforcerimprovedceldenergycost = 30.0;
    lv_ldenergycost = 35.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_unittype == "JavelinGunnerRework") || (UnitGroupHasUnit(gv_laserDesignatorTarget, lv_targetunit) == false))) {
        if ((lv_unittype == "JavelinGunnerRework")) {
            UnitBehaviorAdd(lv_targetunit, "LaserDesignator", lv_caster, 1);
        }

        if ((UnitGroupHasUnit(gv_laserDesignatorTarget, lv_targetunit) == false)) {
            gf_LaserDesignateUnit(lv_targetunit);
        }

    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/355F676C"), SoundLink("UI_GenericError", -1));
        autoF87373E6_val = lv_unittype;
        if (autoF87373E6_val == "CavalryScout") {
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "LaserDesignatorCAV", "Abil/LaserDesignatorCAV");
            Wait(0.1, c_timeGame);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_laserenforcerimprovedceldenergycost));
        }
        else if (autoF87373E6_val == "CavalryScout2") {
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "LaserDesignatorCAV", "Abil/LaserDesignatorCAV");
            Wait(0.1, c_timeGame);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_laserenforcerimprovedceldenergycost));
        }
        else if (autoF87373E6_val == "PlatoonLeader") {
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "LaserDesignatorPL", "Abil/LaserDesignatorPL");
            Wait(0.1, c_timeGame);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_ldenergycost));
        }
        else if (autoF87373E6_val == "PlatoonLeader2") {
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "LaserDesignatorPL", "Abil/LaserDesignatorPL");
            Wait(0.1, c_timeGame);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_ldenergycost));
        }
        else if (autoF87373E6_val == "GhostHero") {
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "LaserDesignatorGhost", "Abil/LaserDesignatorPL");
            Wait(0.1, c_timeGame);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_ldenergycost));
        }
        else if (autoF87373E6_val == "GhostHero2") {
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "LaserDesignatorGhost", "Abil/LaserDesignatorPL");
            Wait(0.1, c_timeGame);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_ldenergycost));
        }
        else if (autoF87373E6_val == "FireSupportSpecialist") {
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "LaserDesignatorFSS", "Abil/LaserDesignatorPL");
            Wait(0.1, c_timeGame);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_ldenergycost));
        }
        else if (autoF87373E6_val == "FireSupportSpecialist2") {
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "LaserDesignatorFSS", "Abil/LaserDesignatorPL");
            Wait(0.1, c_timeGame);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_ldenergycost));
        }
        else if (autoF87373E6_val == "LaserEnforcer") {
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "LaserDesignator2", "Abil/LaserDesignatorPL");
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "ImprovedLaserDesignator", "Abil/LaserDesignatorPL");
            Wait(0.1, c_timeGame);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_laserenforcerimprovedceldenergycost));
        }
        else if (autoF87373E6_val == "LaserEnforcer2") {
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "LaserDesignator2", "Abil/LaserDesignatorPL");
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "ImprovedLaserDesignator", "Abil/LaserDesignatorPL");
            Wait(0.1, c_timeGame);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_laserenforcerimprovedceldenergycost));
        }
        else if (autoF87373E6_val == "OrbitalSupportSpecialist") {
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "LaserDesignatorOSS", "Abil/LaserDesignatorOSS");
            Wait(0.1, c_timeGame);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_ldenergycost));
        }
        else if (autoF87373E6_val == "OrbitalSupportSpecialist2") {
            libNtve_gf_UnitAbilityRemoveCooldown(lv_caster, "LaserDesignatorOSS", "Abil/LaserDesignatorOSS");
            Wait(0.1, c_timeGame);
            UnitSetPropertyFixed(lv_caster, c_unitPropEnergy, (lv_casterenergycurrent + lv_ldenergycost));
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaserDesignatorReveal_Init () {
    gt_LaserDesignatorReveal = TriggerCreate("gt_LaserDesignatorReveal_Func");
    TriggerAddEventUnitAbility(gt_LaserDesignatorReveal, null, AbilityCommand("LaserDesignatorCAV", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_LaserDesignatorReveal, null, AbilityCommand("LaserDesignatorPL", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_LaserDesignatorReveal, null, AbilityCommand("LaserDesignatorGhost", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_LaserDesignatorReveal, null, AbilityCommand("LaserDesignatorFSS", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_LaserDesignatorReveal, null, AbilityCommand("LaserDesignator2", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_LaserDesignatorReveal, null, AbilityCommand("ImprovedLaserDesignator", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_LaserDesignatorReveal, null, AbilityCommand("LaserDesignatorOSS", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_LaserDesignatorReveal, null, AbilityCommand("GuidedMissile", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Designator Reveal PMC
//--------------------------------------------------------------------------------------------------
bool gt_LaserDesignatorRevealPMC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetunit;

    // Automatic Variable Declarations
    playergroup auto8918784B_g;
    int auto8918784B_var;

    // Variable Initialization
    lv_targetunit = EventUnitTargetUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_laserDesignatorTarget, lv_targetunit) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_laserDesignatorTarget, lv_targetunit);
    libNtve_gf_ShareVisionofUnit(lv_targetunit, true, 15);
    while (!((UnitHasBehavior(lv_targetunit, "LaserDesignator") == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitGroupRemove(gv_laserDesignatorTarget, lv_targetunit);
    auto8918784B_g = PlayerGroupAll();
    auto8918784B_var = -1;
    while (true) {
        auto8918784B_var = PlayerGroupNextPlayer(auto8918784B_g, auto8918784B_var);
        if (auto8918784B_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(lv_targetunit, false, auto8918784B_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaserDesignatorRevealPMC_Init () {
    gt_LaserDesignatorRevealPMC = TriggerCreate("gt_LaserDesignatorRevealPMC_Func");
    TriggerAddEventUnitAbility(gt_LaserDesignatorRevealPMC, null, AbilityCommand("LaserDesignator", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Strafe Designator
//--------------------------------------------------------------------------------------------------
bool gt_StrafeDesignator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    fixed lv_a10Distribution;
    unit lv_a10;
    point lv_spawnpoint;
    int lv_strafeping;

    // Automatic Variable Declarations
    const int auto9C4596C4_n = 13;
    int auto9C4596C4_i;

    // Variable Initialization
    lv_caster = UnitInventoryUnit(EventUnitInventoryItem());
    lv_owner = UnitGetOwner(lv_caster);
    lv_a10Distribution = gv_a10Distro[EventPlayer()];
    lv_strafeping = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "StrafeDesignator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/EE234628"));
    SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((lv_a10Distribution == -1.0)) {
        lv_spawnpoint = PointWithOffsetPolar(EventUnitInventoryItemTargetPoint(), 35.0, (AngleBetweenPoints(UnitGetPosition(lv_caster), EventUnitInventoryItemTargetPoint()) - 90.0));
    }
    else {
        lv_spawnpoint = PointWithOffsetPolar(EventUnitInventoryItemTargetPoint(), -30.0, lv_a10Distribution);
    }
    lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    libNtve_gf_UnitCreateFacingPoint(1, "A10", c_unitCreateIgnorePlacement, lv_owner, lv_spawnpoint, EventUnitInventoryItemTargetPoint());
    lv_a10 = UnitLastCreated();
    UnitBehaviorAdd(lv_a10, "KillsToCaster", lv_caster, 1);
    UnitSetTeamColorIndex(lv_a10, 13);
    UnitSetHeight(lv_a10, 20.0, 0.0);
    UnitSetHeight(lv_a10, 7.0, 2.0);
    lv_spawnpoint = PointWithOffsetPolar(EventUnitInventoryItemTargetPoint(), 60.0, UnitGetFacing(lv_a10));
    lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    UnitIssueOrder(lv_a10, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnpoint), c_orderQueueAddToEnd);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", lv_spawnpoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, UnitGetFacing(lv_a10));
    lv_strafeping = PingLastCreated();
    PingSetUnit(PingLastCreated(), lv_a10);
    PingSetScale(PingLastCreated(), 0.4);
    PingSetTooltip(PingLastCreated(), UnitGetName(lv_a10));
    Wait(0.5, c_timeGame);
    gf_PlanePathing(lv_a10, EventUnitInventoryItemTargetPoint());
    for (auto9C4596C4_i = 1; auto9C4596C4_i <= auto9C4596C4_n; auto9C4596C4_i += 1) {
        if ((UnitIsAlive(lv_a10) == false)) {
            PingDestroy(lv_strafeping);
            return true;
        }
        Wait(1.0, c_timeGame);
    }
    ActorSend(libNtve_gf_MainActorofUnit(lv_a10), "SetOpacity 0.000000 2.000000 op");
    UnitSetHeight(lv_a10, 20.0, 2.1);
    PingDestroy(lv_strafeping);
    Wait(2.1, c_timeGame);
    UnitRemove(lv_a10);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StrafeDesignator_Init () {
    gt_StrafeDesignator = TriggerCreate("gt_StrafeDesignator_Func");
    TriggerAddEventUnitInventoryChange(gt_StrafeDesignator, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terminal Lance Strafe
//--------------------------------------------------------------------------------------------------
bool gt_TerminalLanceStrafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    fixed lv_a10Distribution;
    unit lv_a10;
    point lv_spawnpoint;
    int lv_strafeping;

    // Automatic Variable Declarations
    const int auto43A2D038_n = 13;
    int auto43A2D038_i;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(lv_caster);
    lv_a10Distribution = gv_a10Distro[lv_owner];
    lv_strafeping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((lv_a10Distribution == -1.0)) {
        lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), 35.0, (AngleBetweenPoints(UnitGetPosition(lv_caster), EventUnitTargetPoint()) - 90.0));
    }
    else {
        lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), -30.0, lv_a10Distribution);
    }
    lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    libNtve_gf_UnitCreateFacingPoint(1, "A10", c_unitCreateIgnorePlacement, lv_owner, lv_spawnpoint, EventUnitTargetPoint());
    lv_a10 = UnitLastCreated();
    UnitBehaviorAdd(lv_a10, "KillsToCaster", lv_caster, 1);
    UnitSetTeamColorIndex(lv_a10, 13);
    UnitSetHeight(lv_a10, 20.0, 0.0);
    UnitSetHeight(lv_a10, 7.0, 2.0);
    lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), 60.0, UnitGetFacing(lv_a10));
    lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    UnitIssueOrder(lv_a10, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnpoint), c_orderQueueAddToEnd);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", lv_spawnpoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, UnitGetFacing(lv_a10));
    lv_strafeping = PingLastCreated();
    PingSetUnit(PingLastCreated(), lv_a10);
    PingSetScale(PingLastCreated(), 0.4);
    PingSetTooltip(PingLastCreated(), UnitGetName(lv_a10));
    Wait(0.5, c_timeGame);
    gf_PlanePathing(lv_a10, EventUnitTargetPoint());
    for (auto43A2D038_i = 1; auto43A2D038_i <= auto43A2D038_n; auto43A2D038_i += 1) {
        if ((UnitIsAlive(lv_a10) == false)) {
            PingDestroy(lv_strafeping);
            return true;
        }
        Wait(1.0, c_timeGame);
    }
    ActorSend(libNtve_gf_MainActorofUnit(lv_a10), "SetOpacity 0.000000 2.000000 op");
    UnitSetHeight(lv_a10, 20.0, 2.1);
    PingDestroy(lv_strafeping);
    Wait(2.1, c_timeGame);
    UnitRemove(lv_a10);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerminalLanceStrafe_Init () {
    gt_TerminalLanceStrafe = TriggerCreate("gt_TerminalLanceStrafe_Func");
    TriggerAddEventUnitAbility(gt_TerminalLanceStrafe, null, AbilityCommand("RegendareStrafe", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Skills Level Up
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeSkillsLevelUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto907E3051_g;
    int auto907E3051_var;
    const int autoB587001A_ae = 3;
    const int autoB587001A_ai = 1;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesCombatEngineer", 2))) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "Security", (TechTreeUpgradeCount(lv_owner, "Security", c_techCountCompleteOnly) + 1));
    }

    if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesCombatEngineer", 3))) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "EngineeringSkills", (TechTreeUpgradeCount(lv_owner, "EngineeringSkills", c_techCountCompleteOnly) + 1));
    }

    if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesFSS", 3))) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "IDFSupport", (TechTreeUpgradeCount(lv_owner, "IDFSupport", c_techCountCompleteOnly) + 1));
    }

    if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesFSS", 1))) {
        auto907E3051_g = gv_players;
        auto907E3051_var = -1;
        while (true) {
            auto907E3051_var = PlayerGroupNextPlayer(auto907E3051_g, auto907E3051_var);
            if (auto907E3051_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto907E3051_var, "CallforFire", (TechTreeUpgradeCount(auto907E3051_var, "CallforFire", c_techCountCompleteOnly) + 1));
        }
        gv_iDFShellsGlobal += 25;
        lv_index = 0;
        for ( ; ( (autoB587001A_ai >= 0 && lv_index <= autoB587001A_ae) || (autoB587001A_ai < 0 && lv_index >= autoB587001A_ae) ) ; lv_index += autoB587001A_ai ) {
            CatalogFieldValueSet(c_gameCatalogAbil, "CallForFireFSS", "Cost[" + IntToString(lv_index) + "].Charge.CountMax", EventPlayer(), IntToString(gv_iDFShellsGlobal));
            CatalogFieldValueSet(c_gameCatalogAbil, "CallForFireFSS", "Cost[" + IntToString(lv_index) + "].Charge.CountStart", EventPlayer(), IntToString(gv_iDFShellsGlobal));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeSkillsLevelUp_Init () {
    gt_UpgradeSkillsLevelUp = TriggerCreate("gt_UpgradeSkillsLevelUp_Func");
    TriggerAddEventUnitAbility(gt_UpgradeSkillsLevelUp, null, AbilityCommand("LearnAbilitiesCombatEngineer", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_UpgradeSkillsLevelUp, null, AbilityCommand("LearnAbilitiesCombatEngineer", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_UpgradeSkillsLevelUp, null, AbilityCommand("LearnAbilitiesFSS", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_UpgradeSkillsLevelUp, null, AbilityCommand("LearnAbilitiesFSS", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Omniscience
//--------------------------------------------------------------------------------------------------
bool gt_Omniscience_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto00568444_g;
    int auto00568444_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto00568444_g = gv_players;
    auto00568444_var = -1;
    while (true) {
        auto00568444_var = PlayerGroupNextPlayer(auto00568444_g, auto00568444_var);
        if (auto00568444_var < 0) { break; }
        VisRevealArea(auto00568444_var, RegionEntireMap(), 15.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Omniscience_Init () {
    gt_Omniscience = TriggerCreate("gt_Omniscience_Func");
    TriggerAddEventUnitAbility(gt_Omniscience, null, AbilityCommand("Omniscience", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jump Injury
//--------------------------------------------------------------------------------------------------
bool gt_JumpInjury_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) != "Cyborg2"))) {
            return false;
        }

        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) != "Cyborg"))) {
            return false;
        }

        if (!((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitSource), "Nimble") != true))) {
            return false;
        }

        if (!((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitSource), "ShockAbsorbers") != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitSource), "Jumped", EventPlayerEffectUsedUnit(c_effectUnitSource), 1);
    if (((WorldHeight(c_heightMapGround, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource))) - WorldHeight(c_heightMapGround, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint))) >= 3.0)) {
        Wait(0.35, c_timeGame);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitSource), "JumpInjury", EventPlayerEffectUsedUnit(c_effectUnitSource), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JumpInjury_Init () {
    gt_JumpInjury = TriggerCreate("gt_JumpInjury_Func");
    TriggerAddEventPlayerEffectUsed(gt_JumpInjury, c_playerAny, "JumpLaunchMissile");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Sentry Decal
//--------------------------------------------------------------------------------------------------
bool gt_ApplySentryDecal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pIndex = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_TextureSelectByID(UserDataGetGameLink("Decals", UserDataInstance("Decals", gv_textureValue[EventPlayer()][0]), "Decals", 1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplySentryDecal_Init () {
    gt_ApplySentryDecal = TriggerCreate("gt_ApplySentryDecal_Func");
    TriggerAddEventUnitCreated(gt_ApplySentryDecal, null, "M1SentryGun", null);
    TriggerAddEventUnitCreated(gt_ApplySentryDecal, null, "M2SentryGun", null);
    TriggerAddEventUnitCreated(gt_ApplySentryDecal, null, "LNM1SentryGun", null);
    TriggerAddEventUnitCreated(gt_ApplySentryDecal, null, "LNM2SentryGun", null);
    TriggerAddEventUnitCreated(gt_ApplySentryDecal, null, "MiniM1SentryGun", null);
    TriggerAddEventUnitCreated(gt_ApplySentryDecal, null, "MK44SentryGun", null);
    TriggerAddEventUnitCreated(gt_ApplySentryDecal, null, "MK79SentryGun", null);
    TriggerAddEventUnitCreated(gt_ApplySentryDecal, null, "RequestMk2LightWalker", null);
    TriggerAddEventUnitCreated(gt_ApplySentryDecal, null, "RequestHeavyWalker", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cyclone Missile Warning
//--------------------------------------------------------------------------------------------------
bool gt_CycloneMissileWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AIScatterFromPoint(EventUnitTargetPoint(), 5.0);
    libNtve_gf_CreateActorAtPoint("CycloneMissilesWarning", EventUnitTargetPoint());
    lv_model = libNtve_gf_ActorLastCreated();
    Wait(1.5, c_timeGame);
    ActorSend(lv_model, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CycloneMissileWarning_Init () {
    gt_CycloneMissileWarning = TriggerCreate("gt_CycloneMissileWarning_Func");
    TriggerAddEventUnitAbility(gt_CycloneMissileWarning, null, AbilityCommand("CycloneMissiles", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SMG/Sniper Toggle
//--------------------------------------------------------------------------------------------------
bool gt_SMGSniperToggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "ScoutSniper")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(EventUnit(), "Prone2") == true) || (UnitHasBehavior2(EventUnit(), "Prone") == true))) {
        if ((UnitHasBehavior2(EventUnit(), "CombatLoad") == true)) {
            gv_smgMAG = PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, gv_sniperMAG);
            gv_magsize[EventPlayer()] = 32;
        }
        else {
            gv_smgMAG = PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, gv_sniperMAG);
            gv_magsize[EventPlayer()] = 25;
        }
    }
    else {
        if ((UnitHasBehavior2(EventUnit(), "CombatLoad") == true)) {
            gv_sniperMAG = PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, gv_smgMAG);
            gv_magsize[EventPlayer()] = 120;
        }
        else {
            gv_sniperMAG = PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, gv_smgMAG);
            gv_magsize[EventPlayer()] = 100;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SMGSniperToggle_Init () {
    gt_SMGSniperToggle = TriggerCreate("gt_SMGSniperToggle_Func");
    TriggerAddEventUnitAbility(gt_SMGSniperToggle, null, AbilityCommand("Prone", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapon Switch Vindicare
//--------------------------------------------------------------------------------------------------
bool gt_WeaponSwitchVindicare_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Vindicare")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_magsize[UnitGetOwner(EventUnit())] == 80)) {
        gv_plasmaCarbineAmmo[UnitGetOwner(EventUnit())] = PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals);
    }
    else if ((gv_magsize[UnitGetOwner(EventUnit())] == 5)) {
        gv_antiMaterielRifleAmmo[UnitGetOwner(EventUnit())] = PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals);
    }
    if ((EventUnitAbility() == AbilityCommand("SwitchWeapon", 0))) {
        gv_magsize[UnitGetOwner(EventUnit())] = 5;
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, gv_antiMaterielRifleAmmo[UnitGetOwner(EventUnit())]);
    }
    else if (((EventUnitAbility() == AbilityCommand("SwitchWeapon", 1)))) {
        gv_magsize[UnitGetOwner(EventUnit())] = 80;
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, gv_plasmaCarbineAmmo[UnitGetOwner(EventUnit())]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponSwitchVindicare_Init () {
    gt_WeaponSwitchVindicare = TriggerCreate("gt_WeaponSwitchVindicare_Func");
    TriggerAddEventUnitAbility(gt_WeaponSwitchVindicare, null, AbilityCommand("SwitchWeapon", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spy Plane 
//--------------------------------------------------------------------------------------------------
bool gt_SpyPlane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    unit lv_spyPlane;
    point lv_spawnpoint;
    point lv_returnpoint;

    // Automatic Variable Declarations
    playergroup autoFE7C00CB_g;
    int autoFE7C00CB_var;
    playergroup auto57A77F3B_g;
    int auto57A77F3B_var;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(lv_caster);

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D3F995F7"));
    SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_iDFDistro[lv_owner] == -1.0)) {
        lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), 35.0, (AngleBetweenPoints(UnitGetPosition(lv_caster), EventUnitTargetPoint()) - 90.0));
        lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
        libNtve_gf_UnitCreateFacingPoint(1, "SpyPlane", c_unitCreateIgnorePlacement, lv_owner, lv_spawnpoint, EventUnitTargetPoint());
        lv_spyPlane = UnitLastCreated();
        UnitSetTeamColorIndex(lv_spyPlane, 13);
        UnitSetHeight(lv_spyPlane, 20.0, 0.0);
        UnitSetHeight(lv_spyPlane, 7.0, 2.0);
        autoFE7C00CB_g = gv_players;
        autoFE7C00CB_var = -1;
        while (true) {
            autoFE7C00CB_var = PlayerGroupNextPlayer(autoFE7C00CB_g, autoFE7C00CB_var);
            if (autoFE7C00CB_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(autoFE7C00CB_var, UnitGetOwner(lv_spyPlane), libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                libNtve_gf_ShareVisionofUnit(lv_spyPlane, true, autoFE7C00CB_var);
            }

        }
        lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), 30.0, UnitGetFacing(lv_spyPlane));
        lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
        UnitIssueOrder(lv_spyPlane, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnpoint), c_orderQueueAddToEnd);
        lv_returnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), 35.0, PointGetFacing(lv_spawnpoint));
        Wait(15.0, c_timeGame);
        UnitIssueOrder(lv_spyPlane, OrderTargetingPoint(AbilityCommand("move", 0), lv_returnpoint), c_orderQueueReplace);
        Wait(12.9, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(lv_spyPlane), "SetOpacity 0.000000 2.000000 op");
        UnitSetHeight(lv_spyPlane, 20.0, 2.1);
        Wait(2.1, c_timeGame);
        UnitRemove(lv_spyPlane);
    }
    else {
        lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), -30.0, gv_iDFDistro[lv_owner]);
        lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
        libNtve_gf_UnitCreateFacingPoint(1, "SpyPlane", c_unitCreateIgnorePlacement, lv_owner, lv_spawnpoint, EventUnitTargetPoint());
        lv_spyPlane = UnitLastCreated();
        UnitSetTeamColorIndex(lv_spyPlane, 13);
        UnitSetHeight(lv_spyPlane, 20.0, 0.0);
        UnitSetHeight(lv_spyPlane, 7.0, 2.0);
        auto57A77F3B_g = gv_players;
        auto57A77F3B_var = -1;
        while (true) {
            auto57A77F3B_var = PlayerGroupNextPlayer(auto57A77F3B_g, auto57A77F3B_var);
            if (auto57A77F3B_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(auto57A77F3B_var, UnitGetOwner(lv_spyPlane), libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                libNtve_gf_ShareVisionofUnit(lv_spyPlane, true, auto57A77F3B_var);
            }

        }
        lv_spawnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), 30.0, UnitGetFacing(lv_spyPlane));
        lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
        UnitIssueOrder(lv_spyPlane, OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnpoint), c_orderQueueAddToEnd);
        lv_returnpoint = PointWithOffsetPolar(EventUnitTargetPoint(), 35.0, PointGetFacing(lv_spawnpoint));
        Wait(15.0, c_timeGame);
        UnitIssueOrder(lv_spyPlane, OrderTargetingPoint(AbilityCommand("move", 0), lv_returnpoint), c_orderQueueReplace);
        Wait(12.9, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(lv_spyPlane), "SetOpacity 0.000000 2.000000 op");
        UnitSetHeight(lv_spyPlane, 20.0, 2.1);
        Wait(2.1, c_timeGame);
        UnitRemove(lv_spyPlane);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpyPlane_Init () {
    gt_SpyPlane = TriggerCreate("gt_SpyPlane_Func");
    TriggerAddEventUnitAbility(gt_SpyPlane, null, AbilityCommand("SpyPlane", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe Critical
//--------------------------------------------------------------------------------------------------
bool gt_SnipeCritical_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() == "SpecterSnipeCriticalDamage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnit(SoundLink("CriticalShot", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_AttachModelToUnit(EventUnit(), "CriticalShotImpact", "Ref_Head");
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    TextTagCreate(TextWithColor(StringExternal("Param/Value/87C17DF0"), Color(100.00, 0.00, 0.00)), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), EventUnitDamageSourceUnit(), 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.25);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.5);
    TextTagSetVelocity(TextTagLastCreated(), 0.75, 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SnipeCritical_Init () {
    gt_SnipeCritical = TriggerCreate("gt_SnipeCritical_Func");
    TriggerAddEventUnitDamaged(gt_SnipeCritical, null, c_unitDamageTypeSpell, c_unitDamageEither, "SpecterSnipeCriticalDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snipe Levelup
//--------------------------------------------------------------------------------------------------
bool gt_SnipeLevelup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetLevel(EventUnit(), "SpecializedRounds") == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SnipeLevelup", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SnipeLevelup_Init () {
    gt_SnipeLevelup = TriggerCreate("gt_SnipeLevelup_Func");
    TriggerAddEventUnitAbility(gt_SnipeLevelup, null, AbilityCommand("LearnAbilitiesSpecter", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Penetrator Round Levelup
//--------------------------------------------------------------------------------------------------
bool gt_PenetratorRoundLevelup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetLevel(EventUnit(), "SpecializedRounds") == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "PenetratorRoundLevelup", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PenetratorRoundLevelup_Init () {
    gt_PenetratorRoundLevelup = TriggerCreate("gt_PenetratorRoundLevelup_Func");
    TriggerAddEventUnitAbility(gt_PenetratorRoundLevelup, null, AbilityCommand("LearnAbilitiesSpecter", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assassin Skills
//--------------------------------------------------------------------------------------------------
bool gt_AssassinSkills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "AssassinSkills") == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "AssassinSkills1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "Snipe1", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "AssassinSkills") == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "AssassinSkills2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "Snipe2", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "AssassinSkills") == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "Snipe3", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "AssassinSkills") == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "Snipe4", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssassinSkills_Init () {
    gt_AssassinSkills = TriggerCreate("gt_AssassinSkills_Func");
    TriggerAddEventUnitAbility(gt_AssassinSkills, null, AbilityCommand("LearnAbilitiesSpecter", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Specter Skills Levelup
//--------------------------------------------------------------------------------------------------
bool gt_SpecterSkillsLevelup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "SpecterSkillsbinodrone", 1);
    if ((UnitAbilityGetLevel(EventUnit(), "SpecterSkills") == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SpecterSkills1", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "SpecterSkills") == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SpecterSkills3", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecterSkillsLevelup_Init () {
    gt_SpecterSkillsLevelup = TriggerCreate("gt_SpecterSkillsLevelup_Func");
    TriggerAddEventUnitAbility(gt_SpecterSkillsLevelup, null, AbilityCommand("LearnAbilitiesSpecter", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Specter Skills Levelup 2
//--------------------------------------------------------------------------------------------------
bool gt_WeaponsTrainingLevelup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SpecterWeaponsTraining", (UnitAbilityGetLevel(EventUnit(), "SpecterWeaponsTraining") + 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponsTrainingLevelup_Init () {
    gt_WeaponsTrainingLevelup = TriggerCreate("gt_WeaponsTrainingLevelup_Func");
    TriggerAddEventUnitAbility(gt_WeaponsTrainingLevelup, null, AbilityCommand("LearnAbilitiesSpecter", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Specter Skills Levelup 3
//--------------------------------------------------------------------------------------------------
bool gt_MunitionsUpgradesLevelup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SpecterMunitionsUpgrades", (UnitAbilityGetLevel(EventUnit(), "SpecterMunitionsUpgrades") + 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MunitionsUpgradesLevelup_Init () {
    gt_MunitionsUpgradesLevelup = TriggerCreate("gt_MunitionsUpgradesLevelup_Func");
    TriggerAddEventUnitAbility(gt_MunitionsUpgradesLevelup, null, AbilityCommand("LearnAbilitiesSpecter", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Marksman Skills
//--------------------------------------------------------------------------------------------------
bool gt_LearnMarksmanSkills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "MarksmanSkills") == 1)) {
        UnitAbilityChangeLevel(EventUnit(), "BinocularsSDM", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "MarksmanSkills") == 2)) {
        UnitAbilityChangeLevel(EventUnit(), "BinocularsSDM", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnMarksmanSkills_Init () {
    gt_LearnMarksmanSkills = TriggerCreate("gt_LearnMarksmanSkills_Func");
    TriggerAddEventUnitAbility(gt_LearnMarksmanSkills, null, AbilityCommand("LearnAbilitiesSDM", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pinpoint Rapid Fire SS4
//--------------------------------------------------------------------------------------------------
bool gt_PinpointRapidFireSS4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "SoldierSkills") == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "PinpointRapidFire", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PinpointRapidFireSS4_Init () {
    gt_PinpointRapidFireSS4 = TriggerCreate("gt_PinpointRapidFireSS4_Func");
    TriggerAddEventUnitAbility(gt_PinpointRapidFireSS4, null, AbilityCommand("LearnAbilitiesSDM", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viper 30 mm Chain Gun
//--------------------------------------------------------------------------------------------------
bool gt_Viper30mmChainGun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attacker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attacker = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_attacker, "BurstFireFullyAutomatic") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_attacker, "BurstFireStacks", lv_attacker, 1);
    UnitBehaviorSetDuration(lv_attacker, "BurstFireStacks", 0.75);
    if ((UnitBehaviorCount(lv_attacker, "BurstFireStacks") >= 6)) {
        UnitBehaviorAdd(lv_attacker, "BurstFire2", lv_attacker, 1);
        UnitBehaviorSetDuration(lv_attacker, "BurstFire2", 1.25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Viper30mmChainGun_Init () {
    gt_Viper30mmChainGun = TriggerCreate("gt_Viper30mmChainGun_Func");
    TriggerAddEventUnitStartedAttack2(gt_Viper30mmChainGun, null, "Viper30mmChainGun");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Air Reconnaissance
//--------------------------------------------------------------------------------------------------
bool gt_LearnAirReconnaissance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(EventUnit(), "AirReconnaissance") == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "OSRViper", 1);
    }

    if ((UnitAbilityGetLevel(EventUnit(), "AirReconnaissance") == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "AirRadar", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnAirReconnaissance_Init () {
    gt_LearnAirReconnaissance = TriggerCreate("gt_LearnAirReconnaissance_Func");
    TriggerAddEventUnitAbility(gt_LearnAirReconnaissance, null, AbilityCommand("LearnAbilitiesAH32Viper", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Akma's Bulldozer
//--------------------------------------------------------------------------------------------------
bool gt_AkmasBulldozer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(UnitGetOwner(EventUnit()), "AkmasBulldozerofVengeance", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/C126F638"), SoundLink("UI_GenericError", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AkmasBulldozer_Init () {
    gt_AkmasBulldozer = TriggerCreate("gt_AkmasBulldozer_Func");
    TriggerAddEventUnitAbility(gt_AkmasBulldozer, null, AbilityCommand("AkmasBulldozer", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jashan's Zulus
//--------------------------------------------------------------------------------------------------
bool gt_JashansZulus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUnitCount(UnitGetOwner(EventUnit()), "RAZulu", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/3B7E9743"), SoundLink("UI_GenericError", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JashansZulus_Init () {
    gt_JashansZulus = TriggerCreate("gt_JashansZulus_Func");
    TriggerAddEventUnitAbility(gt_JashansZulus, null, AbilityCommand("ZuluStormJashan", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frag Out Warning Akma
//--------------------------------------------------------------------------------------------------
bool gt_FragOutWarningAkma_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomDigit;

    // Automatic Variable Declarations
    int auto5E240C98_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AIScatterFromPoint(EventUnitTargetPoint(), 4.0);
    lv_randomDigit = RandomInt(1, 5);
    auto5E240C98_val = lv_randomDigit;
    if (auto5E240C98_val == 1) {
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/627C94FD")), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else if (auto5E240C98_val == 2) {
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/2A9B4DA2")), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else if (auto5E240C98_val == 3) {
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/C351777D")), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else if (auto5E240C98_val == 4) {
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/E3B65A54")), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else if (auto5E240C98_val == 5) {
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/8862CD77")), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else {
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/384859CF")), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 3.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FragOutWarningAkma_Init () {
    gt_FragOutWarningAkma = TriggerCreate("gt_FragOutWarningAkma_Func");
    TriggerAddEventUnitAbility(gt_FragOutWarningAkma, null, AbilityCommand("FragGrenadeAkma", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load Player Bank
//--------------------------------------------------------------------------------------------------
bool gt_LoadPlayerBank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    playergroup auto580E788D_g;

    // Variable Initialization
    lv_int = 1;

    // Conditions
    if (testConds) {
        if (!(((GameIsOnline() == true) || (GameIsTestMap(false) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto580E788D_g = gv_players;
    lv_int = -1;
    while (true) {
        lv_int = PlayerGroupNextPlayer(auto580E788D_g, lv_int);
        if (lv_int < 0) { break; }
        if ((PlayerStatus(lv_int) == c_playerStatusActive)) {
            gf_LoadPlayerProgress(lv_int);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LoadPlayerBank_Init () {
    gt_LoadPlayerBank = TriggerCreate("gt_LoadPlayerBank_Func");
    TriggerAddEventTimeElapsed(gt_LoadPlayerBank, 0.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Player Bank
//--------------------------------------------------------------------------------------------------
bool gt_SavePlayerBank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[1]))) {
            return false;
        }

        if (!(((GameIsOnline() == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SavePlayerProgress(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SavePlayerBank_Init () {
    gt_SavePlayerBank = TriggerCreate("gt_SavePlayerBank_Func");
    TriggerAddEventDialogControl(gt_SavePlayerBank, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Editor Bank
//--------------------------------------------------------------------------------------------------
bool gt_EditorBank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intloop;

    // Automatic Variable Declarations
    playergroup autoB97FAD9A_g;
    int autoB97FAD9A_var;
    const int auto9DA6A7E7_ae = 3;
    const int auto9DA6A7E7_ai = 1;
    const int auto8E534F29_ae = 26;
    const int auto8E534F29_ai = 1;
    const int auto8A0BCC5E_ae = 66;
    const int auto8A0BCC5E_ai = 1;
    const int auto617A740B_ae = gv_camos;
    const int auto617A740B_ai = 1;
    const int auto6CB8B7CB_ae = gv_decals;
    const int auto6CB8B7CB_ai = 1;
    const int autoB5746225_ae = gv_achievementCount;
    const int autoB5746225_ai = 1;
    const int autoCBBA0665_ae = 11;
    const int autoCBBA0665_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB97FAD9A_g = gv_players;
    autoB97FAD9A_var = -1;
    while (true) {
        autoB97FAD9A_var = PlayerGroupNextPlayer(autoB97FAD9A_g, autoB97FAD9A_var);
        if (autoB97FAD9A_var < 0) { break; }
        lv_intloop = 1;
        for ( ; ( (auto9DA6A7E7_ai >= 0 && lv_intloop <= auto9DA6A7E7_ae) || (auto9DA6A7E7_ai < 0 && lv_intloop >= auto9DA6A7E7_ae) ) ; lv_intloop += auto9DA6A7E7_ai ) {
            gv_playerExperience[lv_intloop][autoB97FAD9A_var] = 500000;
        }
        gv_playerStartingXP[autoB97FAD9A_var] = gv_playerExperience[1][autoB97FAD9A_var];
        gv_playerGamesPlayed[autoB97FAD9A_var] = 100;
        gv_playerRevives[autoB97FAD9A_var] = 9999;
        gv_playerAvgGameTime[autoB97FAD9A_var] = 3600;
        lv_intloop = 1;
        for ( ; ( (auto8E534F29_ai >= 0 && lv_intloop <= auto8E534F29_ae) || (auto8E534F29_ai < 0 && lv_intloop >= auto8E534F29_ae) ) ; lv_intloop += auto8E534F29_ai ) {
            gv_sIunlocked[lv_intloop][autoB97FAD9A_var] = true;
        }
        lv_intloop = 31;
        for ( ; ( (auto8A0BCC5E_ai >= 0 && lv_intloop <= auto8A0BCC5E_ae) || (auto8A0BCC5E_ai < 0 && lv_intloop >= auto8A0BCC5E_ae) ) ; lv_intloop += auto8A0BCC5E_ai ) {
            gv_sIunlocked[lv_intloop][autoB97FAD9A_var] = true;
        }
        lv_intloop = 2;
        for ( ; ( (auto617A740B_ai >= 0 && lv_intloop <= auto617A740B_ae) || (auto617A740B_ai < 0 && lv_intloop >= auto617A740B_ae) ) ; lv_intloop += auto617A740B_ai ) {
            gv_playercamounlocked[lv_intloop][autoB97FAD9A_var] = true;
        }
        lv_intloop = 1;
        for ( ; ( (auto6CB8B7CB_ai >= 0 && lv_intloop <= auto6CB8B7CB_ae) || (auto6CB8B7CB_ai < 0 && lv_intloop >= auto6CB8B7CB_ae) ) ; lv_intloop += auto6CB8B7CB_ai ) {
            gv_playerdecalunlocked[lv_intloop][autoB97FAD9A_var] = true;
        }
        lv_intloop = 1;
        for ( ; ( (autoB5746225_ai >= 0 && lv_intloop <= autoB5746225_ae) || (autoB5746225_ai < 0 && lv_intloop >= autoB5746225_ae) ) ; lv_intloop += autoB5746225_ai ) {
            gv_achievementUnlocked[lv_intloop][autoB97FAD9A_var] = true;
        }
        lv_intloop = 1;
        for ( ; ( (autoCBBA0665_ai >= 0 && lv_intloop <= autoCBBA0665_ae) || (autoCBBA0665_ai < 0 && lv_intloop >= autoCBBA0665_ae) ) ; lv_intloop += autoCBBA0665_ai ) {
            gv_gamesWon[lv_intloop][autoB97FAD9A_var] = 5;
        }
        if ((gv_playerExperience[1][autoB97FAD9A_var] >= gv_rankXPMin[1][3])) {
            libNtve_gf_SetUpgradeLevelForPlayer(autoB97FAD9A_var, "PFC", 1);
        }

        if ((gv_playerExperience[1][autoB97FAD9A_var] >= gv_rankXPMin[1][5])) {
            libNtve_gf_SetUpgradeLevelForPlayer(autoB97FAD9A_var, "CPL", 1);
        }

        if ((gv_playerExperience[1][autoB97FAD9A_var] >= gv_rankXPMin[1][6])) {
            libNtve_gf_SetUpgradeLevelForPlayer(autoB97FAD9A_var, "SGT", 1);
        }

        if ((gv_playerExperience[1][autoB97FAD9A_var] >= gv_rankXPMin[1][7])) {
            libNtve_gf_SetUpgradeLevelForPlayer(autoB97FAD9A_var, "SSG", 1);
        }

        if ((gv_playerExperience[1][autoB97FAD9A_var] >= gv_rankXPMin[1][9])) {
            libNtve_gf_SetUpgradeLevelForPlayer(autoB97FAD9A_var, "MSG", 1);
        }

        if ((gv_playerExperience[1][autoB97FAD9A_var] >= gv_rankXPMin[1][10])) {
            libNtve_gf_SetUpgradeLevelForPlayer(autoB97FAD9A_var, "1SG", 1);
        }

        gv_sIunlocked[67][autoB97FAD9A_var] = true;
        gf_SavePlayerProgress(autoB97FAD9A_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EditorBank_Init () {
    gt_EditorBank = TriggerCreate("gt_EditorBank_Func");
    TriggerAddEventChatMessage(gt_EditorBank, c_playerAny, "unlockeverything", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeavesGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    int lv_playingplayers;
    int lv_newowner;
    int lv_fireteam;
    int lv_xP;

    // Automatic Variable Declarations
    unitgroup auto4007BFCA_g;
    int auto4007BFCA_u;
    unit auto4007BFCA_var;
    unitgroup auto7C61A2D1_g;
    int auto7C61A2D1_u;
    unit auto7C61A2D1_var;
    playergroup autoBA07D33F_g;
    int autoBA07D33F_var;
    unitgroup auto75F82173_g;
    int auto75F82173_u;
    unit auto75F82173_var;
    const int auto089B128A_ae = 12;
    const int auto089B128A_ai = 1;
    playergroup auto6D683795_g;
    int auto6D683795_var;

    // Variable Initialization
    lv_newowner = UnitGetOwner(UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive));

    // Conditions
    if (testConds) {
        if (!((gv_playerLeftGame[EventPlayer()] == false))) {
            return false;
        }

        if (!((PlayerGroupCount(gv_players) > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(gv_players, EventPlayer());
    gv_playerLeftGame[EventPlayer()] = true;
    if ((gv_playerHeroes[EventPlayer()] != null)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (StringExternal("Param/Value/2D3F0E8F") + PlayerName(EventPlayer()) + StringExternal("Param/Value/A530C60B") + UnitGetName(gv_playerHeroes[EventPlayer()]) + StringExternal("Param/Value/786CB72B") + StringExternal("Param/Value/CDBB1D68")));
        UnitRevive(gv_playerHeroes[EventPlayer()]);
        auto4007BFCA_g = gv_heroskilledbyplayer[EventPlayer()];
        auto4007BFCA_u = UnitGroupCount(auto4007BFCA_g, c_unitCountAll);
        for (;; auto4007BFCA_u -= 1) {
            auto4007BFCA_var = UnitGroupUnitFromEnd(auto4007BFCA_g, auto4007BFCA_u);
            if (auto4007BFCA_var == null) { break; }
            UnitCreateEffectUnit(auto4007BFCA_var, "ReviveModifyUnit", auto4007BFCA_var);
        }
        UnitGroupRemove(gv_heroesGroup, gv_playerHeroes[EventPlayer()]);
        UnitKill(gv_playerHeroes[EventPlayer()]);
        UnitRemove(gv_playerHeroes[EventPlayer()]);
        UnitRemove(gv_heroselector[EventPlayer()]);
        if ((gv_deadHeroIndicator[EventPlayer()] != null)) {
            libNtve_gf_SendActorMessageToUnit(gv_deadHeroIndicator[EventPlayer()], "SetTintColor 128,0,128");
            libNtve_gf_SendActorMessageToUnit(gv_deadHeroIndicator[EventPlayer()], "SetOpacity 0.500000 0.000000 a");
        }
        libNtve_gf_SetDialogItemText(gv_hUDDialogItems[2][EventPlayer()], TextWithColor(PlayerName(EventPlayer()), Color(63.92, 63.92, 63.92)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_statusDialogItems[2][EventPlayer()], TextWithColor(PlayerName(EventPlayer()), Color(63.92, 63.92, 63.92)), PlayerGroupAll());
        DialogControlSetSize(gv_statusDialogItems[6][EventPlayer()], PlayerGroupAll(), 1, DialogControlGetHeight(gv_statusDialogItems[6][EventPlayer()], EventPlayer()));
        DialogControlSetSize(gv_statusDialogItems[7][EventPlayer()], PlayerGroupAll(), 1, DialogControlGetHeight(gv_statusDialogItems[7][EventPlayer()], EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_hUDDialogItems[4][EventPlayer()], StringExternal("Param/Value/3089F1BF"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_statusDialogItems[5][EventPlayer()], StringExternal("Param/Value/93AA6578"), PlayerGroupAll());
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
        DialogControlSetVisible(gv_statusDialogItems[11][EventPlayer()], PlayerGroupAll(), false);
        auto7C61A2D1_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7C61A2D1_u = UnitGroupCount(auto7C61A2D1_g, c_unitCountAll);
        for (;; auto7C61A2D1_u -= 1) {
            auto7C61A2D1_var = UnitGroupUnitFromEnd(auto7C61A2D1_g, auto7C61A2D1_u);
            if (auto7C61A2D1_var == null) { break; }
            if ((UnitTypeTestAttribute(UnitGetType(auto7C61A2D1_var), c_unitAttributeBiological) == true) && (UnitGroupHasUnit(gv_missionItemPingItems, auto7C61A2D1_var) == true)) {
                UnitSetOwner(auto7C61A2D1_var, lv_newowner, true);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (PlayerName(lv_newowner) + (StringExternal("Param/Value/89074ABE") + UnitTypeGetName(UnitGetType(auto7C61A2D1_var)))));
            }
            else {
                UnitKill(auto7C61A2D1_var);
                if (((UnitGetType(auto7C61A2D1_var) == "M1SentryGun") || (UnitGetType(auto7C61A2D1_var) == "M2SentryGun") || (UnitGetType(auto7C61A2D1_var) == "LNM1SentryGun") || (UnitGetType(auto7C61A2D1_var) == "LNM2SentryGun"))) {
                    UnitKill(auto7C61A2D1_var);
                }
            }
        }
        if ((PlayerGroupHasPlayer(gv_medics, EventPlayer()) == true)) {
            gf_RemoveMedicGroup(EventPlayer());
        }
        if ((gv_playersfireteam[EventPlayer()] != 0)) {
            lv_fireteam = gv_playersfireteam[EventPlayer()];
            gf_AddRemovePlayerFromFireteam(gv_fireteamPlacement[lv_fireteam][EventPlayer()], EventPlayer(), lv_fireteam, ge_Fireteam_Leave);
        }
        autoBA07D33F_g = gv_players;
        autoBA07D33F_var = -1;
        while (true) {
            autoBA07D33F_var = PlayerGroupNextPlayer(autoBA07D33F_g, autoBA07D33F_var);
            if (autoBA07D33F_var < 0) { break; }
            if ((PlayerStatus(autoBA07D33F_var) == c_playerStatusActive)) {
                lv_playingplayers += 1;
            }
        }
        gv_spawnCount = (6 + FixedToInt((IntToFixed(lv_playingplayers) * 0.7)));
        gv_spawnCount = (gv_spawnCount + UserDataGetInt("GameModes", UserDataInstance("GameModes", gv_gamemode), "Spawn Modifier", 1));
        if ((lv_playingplayers <= 5) && ((gv_gamemode == 8) || (gv_gamemode == 11))) {
            auto75F82173_g = gv_heroesGroup;
            auto75F82173_u = UnitGroupCount(auto75F82173_g, c_unitCountAll);
            for (;; auto75F82173_u -= 1) {
                auto75F82173_var = UnitGroupUnitFromEnd(auto75F82173_g, auto75F82173_u);
                if (auto75F82173_var == null) { break; }
                UnitBehaviorAdd(auto75F82173_var, "Evasion10", auto75F82173_var, 1);
            }
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (StringExternal("Param/Value/3483CC6A") + PlayerName(EventPlayer()) + StringExternal("Param/Value/2B7F240D")));
    }
    gv_playerHeroes[EventPlayer()] = null;
    lv_loopint = 1;
    for ( ; ( (auto089B128A_ai >= 0 && lv_loopint <= auto089B128A_ae) || (auto089B128A_ai < 0 && lv_loopint >= auto089B128A_ae) ) ; lv_loopint += auto089B128A_ai ) {
        libNtve_gf_SetAlliance(lv_loopint, EventPlayer(), libNtve_ge_AllianceSetting_Neutral);
    }
    auto6D683795_g = gv_players;
    auto6D683795_var = -1;
    while (true) {
        auto6D683795_var = PlayerGroupNextPlayer(auto6D683795_g, auto6D683795_var);
        if (auto6D683795_var < 0) { break; }
        PlayerModifyPropertyInt(auto6D683795_var, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_infestationLevel);
        lv_xP = (lv_xP + gv_playerExperience[gv_playerRankSet[auto6D683795_var]][auto6D683795_var]);
    }
    lv_xP = (lv_xP / PlayerGroupCount(gv_players));
    gv_averageXP = lv_xP;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeavesGame_Init () {
    gt_PlayerLeavesGame = TriggerCreate("gt_PlayerLeavesGame_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeavesGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheats
//--------------------------------------------------------------------------------------------------
bool gt_Cheats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/54D96B4F"));
    gv_savedisabled = true;
    TriggerEnable(gt_SavePlayerBank, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cheats_Init () {
    gt_Cheats = TriggerCreate("gt_Cheats_Func");
    TriggerAddEventCheatUsed(gt_Cheats, c_playerAny, c_gameCheatAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Games Played
//--------------------------------------------------------------------------------------------------
bool gt_GamesPlayed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lottery;
    text lv_temptext;

    // Automatic Variable Declarations
    playergroup auto2CE46C7B_g;
    int auto2CE46C7B_var;

    // Variable Initialization
    lv_lottery = RandomInt(1, 100);

    // Conditions
    if (testConds) {
        if (!(((gv_gamemode < 12) || (gv_gamemode == 13) || (gv_gamemode >= 18)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gamesPlayer1 = true;
    auto2CE46C7B_g = gv_players;
    auto2CE46C7B_var = -1;
    while (true) {
        auto2CE46C7B_var = PlayerGroupNextPlayer(auto2CE46C7B_g, auto2CE46C7B_var);
        if (auto2CE46C7B_var < 0) { break; }
        gv_playerGamesPlayed[auto2CE46C7B_var] += 1;
        if ((gv_playerGamesPlayed[auto2CE46C7B_var] >= 75) && (gv_playercamounlocked[6][auto2CE46C7B_var] == false)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto2CE46C7B_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto2CE46C7B_var), c_messageAreaError, StringExternal("Param/Value/CE8042E2"));
            gv_playercamounlocked[6][auto2CE46C7B_var] = true;
        }
        gf_UnlockAchievement(auto2CE46C7B_var);
        if ((lv_lottery == 43) && (gv_playercamounlocked[49][auto2CE46C7B_var] == false)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(auto2CE46C7B_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(auto2CE46C7B_var), c_messageAreaError, StringExternal("Param/Value/42F99894"));
            gv_playercamounlocked[49][auto2CE46C7B_var] = true;
        }
        lv_temptext = StringToText("");
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/9A205548") + FormatNumber(gv_playerExperience[1][auto2CE46C7B_var]) + StringExternal("Param/Value/3BF61775") + FormatNumber(gv_playerExperience[2][auto2CE46C7B_var]) + StringExternal("Param/Value/B09A5D47") + FormatNumber(gv_playerExperience[3][auto2CE46C7B_var])));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/9D6396B0") + IntToText(gv_playerAchCnt[auto2CE46C7B_var]) + StringExternal("Param/Value/08439DFF") + StringExternal("Param/Value/5DA59799")));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/85C6F225") + IntToText(gf_GetPointCount(auto2CE46C7B_var))));
        libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[2][auto2CE46C7B_var], lv_temptext, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[2][auto2CE46C7B_var], (StringExternal("Param/Value/BDF3731D") + FormatNumber(gv_playerExperience[gv_playerRankSet[auto2CE46C7B_var]][auto2CE46C7B_var])), PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GamesPlayed_Init () {
    gt_GamesPlayed = TriggerCreate("gt_GamesPlayed_Func");
    TriggerAddEventTimeElapsed(gt_GamesPlayed, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Kills
//--------------------------------------------------------------------------------------------------
bool gt_PlayerKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerType(libNtve_gf_KillingPlayer()) == c_playerTypeUser))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), libNtve_gf_KillingPlayer(), libNtve_ge_PlayerRelation_EnemyMutual) == true)) {
        gv_playerkills[libNtve_gf_KillingPlayer()] += 1;
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) && ((gv_gamemode != 8) || (gv_gamemode != 11))) {
            gv_playermassivekills[libNtve_gf_KillingPlayer()] += 1;
            if ((gv_playermassivekills[libNtve_gf_KillingPlayer()] >= 50)) {
                gf_UnlockAchievement(libNtve_gf_KillingPlayer());
            }
        }
        else if ((UnitGetOwner(EventUnit()) == 15) && ((gv_gamemode == 8) || (gv_gamemode == 11))) {
            gv_playermassivekills[libNtve_gf_KillingPlayer()] += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerKills_Init () {
    gt_PlayerKills = TriggerCreate("gt_PlayerKills_Func");
    TriggerAddEventUnitDied(gt_PlayerKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Heal
//--------------------------------------------------------------------------------------------------
bool gt_PlayerHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == gv_mOS[2][0]) || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == gv_mOS[2][1])))) {
            return false;
        }

        if (!(((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) <= 75.0) || (gf_UnitHighestAilment(EventPlayerEffectUsedUnit(c_effectUnitTarget)) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerheals[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerHeal_Init () {
    gt_PlayerHeal = TriggerCreate("gt_PlayerHeal_Func");
    TriggerAddEventPlayerEffectUsed(gt_PlayerHeal, c_playerAny, "BloodTransfusionApplyBehavior");
    TriggerAddEventPlayerEffectUsed(gt_PlayerHeal, c_playerAny, "IMBloodTransfusionApplyBehavior");
    TriggerAddEventPlayerEffectUsed(gt_PlayerHeal, c_playerAny, "ImprovedNanoInjectionHeal");
    TriggerAddEventPlayerEffectUsed(gt_PlayerHeal, c_playerAny, "NanoInjectionHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Hit
//--------------------------------------------------------------------------------------------------
bool gt_PlayerHit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_damagedPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = EventUnit();
    lv_damagedPlayer = UnitGetOwner(lv_hero);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(lv_damagedPlayer, EventUnitDamageSourcePlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_heroesGroup, lv_hero) == true))) {
            return false;
        }

        if (!((EventUnitDamageAmount() >= 10.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(lv_hero, c_unitPropShields, c_unitPropCurrent) <= 0.5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerhits[lv_damagedPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerHit_Init () {
    gt_PlayerHit = TriggerCreate("gt_PlayerHit_Func");
    TriggerEnable(gt_PlayerHit, false);
    TriggerAddEventUnitDamaged(gt_PlayerHit, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Quits
//--------------------------------------------------------------------------------------------------
bool gt_PlayerQuits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victory == true)) {
        GameOver(EventPlayer(), c_gameOverVictory, false, true);
    }
    else {
        GameOver(EventPlayer(), c_gameOverDefeat, false, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerQuits_Init () {
    gt_PlayerQuits = TriggerCreate("gt_PlayerQuits_Func");
    TriggerAddEventGameMenuItemSelected(gt_PlayerQuits, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Normal & Special SI's 2
//--------------------------------------------------------------------------------------------------
bool gt_BorgWeaponSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    const int auto7E786B91_ae = 5;
    const int auto7E786B91_ai = 1;
    int auto04370066_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_borgWeaponDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (auto7E786B91_ai >= 0 && lv_loopint <= auto7E786B91_ae) || (auto7E786B91_ai < 0 && lv_loopint >= auto7E786B91_ae) ) ; lv_loopint += auto7E786B91_ai ) {
        if ((gv_playerHeroes[EventPlayer()] != null) && (gv_borgWeaponDialogButtons[lv_loopint] == EventDialogControl())) {
            auto04370066_val = lv_loopint;
            if (auto04370066_val == 1) {
                UnitBehaviorRemove(gv_playerHeroes[EventPlayer()], "CyborgPickingWeapon", 1);
                UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "BorgEquipRifle", gv_playerHeroes[EventPlayer()], 1);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 80);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 9);
                libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/07FC5228") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals))), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/72F79106") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene))), PlayerGroupSingle(EventPlayer()));
                DialogSetVisible(gv_borgWeaponDialog, PlayerGroupSingle(EventPlayer()), false);
                break;
            }
            else if (auto04370066_val == 2) {
                UnitBehaviorRemove(gv_playerHeroes[EventPlayer()], "CyborgPickingWeapon", 1);
                UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "BorgEquipMG", gv_playerHeroes[EventPlayer()], 1);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 100);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 10);
                libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/93A5F1E4") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals))), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/857850D7") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene))), PlayerGroupSingle(EventPlayer()));
                DialogSetVisible(gv_borgWeaponDialog, PlayerGroupSingle(EventPlayer()), false);
                break;
            }
            else if (auto04370066_val == 3) {
                UnitBehaviorRemove(gv_playerHeroes[EventPlayer()], "CyborgPickingWeapon", 1);
                UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "BorgEquipDMR", gv_playerHeroes[EventPlayer()], 1);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 35);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 9);
                libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/8B1B328E") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals))), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/5BC62E66") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene))), PlayerGroupSingle(EventPlayer()));
                DialogSetVisible(gv_borgWeaponDialog, PlayerGroupSingle(EventPlayer()), false);
                break;
            }
            else if (auto04370066_val == 4) {
                UnitBehaviorRemove(gv_playerHeroes[EventPlayer()], "CyborgPickingWeapon", 1);
                UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "BorgEquipPlasma", gv_playerHeroes[EventPlayer()], 1);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 80);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 9);
                libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/1359F199") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals))), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/2CDB836F") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene))), PlayerGroupSingle(EventPlayer()));
                DialogSetVisible(gv_borgWeaponDialog, PlayerGroupSingle(EventPlayer()), false);
                break;
            }
            else if (auto04370066_val == 5) {
                UnitBehaviorRemove(gv_playerHeroes[EventPlayer()], "CyborgPickingWeapon", 1);
                UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "BorgEquipShotgun", gv_playerHeroes[EventPlayer()], 1);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 25);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 9);
                libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/C4A2CB05") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals))), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/0B1D86AD") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene))), PlayerGroupSingle(EventPlayer()));
                DialogSetVisible(gv_borgWeaponDialog, PlayerGroupSingle(EventPlayer()), false);
                break;
            }
            else {
                UnitBehaviorRemove(gv_playerHeroes[EventPlayer()], "CyborgPickingWeapon", 1);
                UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "BorgEquipRifle", gv_playerHeroes[EventPlayer()], 1);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 25);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 9);
                libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/0DF4F897") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals))), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/7241E523") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene))), PlayerGroupSingle(EventPlayer()));
                DialogSetVisible(gv_borgWeaponDialog, PlayerGroupSingle(EventPlayer()), false);
                break;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BorgWeaponSelect_Init () {
    gt_BorgWeaponSelect = TriggerCreate("gt_BorgWeaponSelect_Func");
    TriggerAddEventDialogControl(gt_BorgWeaponSelect, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init
//--------------------------------------------------------------------------------------------------
bool gt_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBEDA483D_g;
    int autoBEDA483D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SMCreate();
    autoBEDA483D_g = gv_players;
    autoBEDA483D_var = -1;
    while (true) {
        autoBEDA483D_var = PlayerGroupNextPlayer(autoBEDA483D_g, autoBEDA483D_var);
        if (autoBEDA483D_var < 0) { break; }
        gf_SMIni(autoBEDA483D_var, 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init_Init () {
    gt_Init = TriggerCreate("gt_Init_Func");
    TriggerAddEventTimeElapsed(gt_Init, 4.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SM - Responses
//--------------------------------------------------------------------------------------------------
bool gt_SMResponses_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_udi;
    int lv_index;
    fixed lv_r;
    int lv_p;
    playergroup lv_pg;
    int lv_scrollState;

    // Automatic Variable Declarations
    const int auto1829EFF7_ae = 8;
    const int auto1829EFF7_ai = 1;
    int auto10B393EF_val;

    // Variable Initialization
    lv_udi = EventDialogControl();
    lv_index = gv_eRROR;
    lv_p = EventPlayer();
    lv_pg = PlayerGroupSingle(lv_p);
    lv_scrollState = gv_sM.lv_scrollState[lv_p];

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_sM.lv_dialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_udi != gv_sM.lv_scrollBar))) {
        lv_i = 0;
        for ( ; ( (auto1829EFF7_ai >= 0 && lv_i <= auto1829EFF7_ae) || (auto1829EFF7_ai < 0 && lv_i >= auto1829EFF7_ae) ) ; lv_i += auto1829EFF7_ai ) {
            if (((lv_udi == gv_sM.lv_menuItems[lv_i][0]))) {
                lv_index = lv_i;
                break;
            }

        }
        if ((lv_index == gv_eRROR)) {
            return true;
        }

    }

    gv_sM.lv_scrollEnabled[lv_p] = true;
    auto10B393EF_val = EventDialogControlEventType();
    if (auto10B393EF_val == c_triggerControlEventTypeClick) {
        if ((gv_player[lv_p].lv_shift == true) && (gv_player[lv_p].lv_control == true)) {
            lv_i = 50;
        }
        else if ((gv_player[lv_p].lv_shift == false) && (gv_player[lv_p].lv_control == true)) {
            lv_i = 10;
        }
        else if ((gv_player[lv_p].lv_shift == true) && (gv_player[lv_p].lv_control == false)) {
            lv_i = 5;
        }
        else if ((gv_player[lv_p].lv_shift == false) && (gv_player[lv_p].lv_control == false)) {
            lv_i = 1;
        }
        gf_DisplayAchievement(((lv_index + 1) + lv_scrollState), lv_p, gv_achievementName[((lv_index + 1) + lv_scrollState)][lv_p], gv_achievementDescription[((lv_index + 1) + lv_scrollState)][lv_p], gv_achievementImage[((lv_index + 1) + lv_scrollState)][lv_p], gv_achievementPoint[((lv_index + 1) + lv_scrollState)]);
    }
    else if (auto10B393EF_val == c_triggerControlEventTypeValueChanged) {
        if ((lv_udi == gv_sM.lv_scrollBar)) {
            if (((libNtve_gf_DialogItemValue(lv_udi, lv_p) > lv_scrollState) || (libNtve_gf_DialogItemValue(lv_udi, lv_p) < lv_scrollState))) {
                lv_scrollState = FixedToInt(libNtve_gf_DialogItemValue(lv_udi, lv_p));
                gv_sM.lv_scrollState[lv_p] = lv_scrollState;
                gf_SMIni(lv_p, lv_scrollState);
            }

        }

    }
    else {
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.1, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SMResponses_Init () {
    gt_SMResponses = TriggerCreate("gt_SMResponses_Func");
    TriggerEnable(gt_SMResponses, false);
    TriggerAddEventDialogControl(gt_SMResponses, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_SMResponses, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Accessory Selected
//--------------------------------------------------------------------------------------------------
bool gt_AccessorySelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    bool lv_changed;

    // Automatic Variable Declarations
    int auto3528C057_ae;
    const int auto3528C057_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_accessoryDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3528C057_ae = UserDataInstanceCount("Accessories");
    lv_loopint = 1;
    for ( ; ( (auto3528C057_ai >= 0 && lv_loopint <= auto3528C057_ae) || (auto3528C057_ai < 0 && lv_loopint >= auto3528C057_ae) ) ; lv_loopint += auto3528C057_ai ) {
        if ((gv_accessoryDialogButtons[lv_loopint] == EventDialogControl()) && (gv_playeraccessoryunlocked[lv_loopint][EventPlayer()] == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/34E47804") + StringToText(UserDataGetString("Accessories", UserDataInstance("Accessories", lv_loopint), "Accessory Name", 1))));
            libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[EventPlayer()], libNtve_gf_TextureSelectByID(UserDataGetGameLink("Accessories", UserDataInstance("Accessories", lv_loopint), "Accessories", 1)));
            gv_textureValue[EventPlayer()][2] = lv_loopint;
            BankValueSetFromInt(gv_hotkeyBank[EventPlayer()], "Unlocks", "A", lv_loopint);
            ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[EventPlayer()]), libNtve_gf_TextureSelectByID(UserDataGetGameLink("Accessories", UserDataInstance("Accessories", lv_loopint), "Accessories", 1)));
            gf_RefreshButtons(EventPlayer(), 3, lv_loopint);
            lv_changed = true;
        }

    }
    BankSave(gv_hotkeyBank[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AccessorySelected_Init () {
    gt_AccessorySelected = TriggerCreate("gt_AccessorySelected_Func");
    TriggerAddEventDialogControl(gt_AccessorySelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Vote Kick
//--------------------------------------------------------------------------------------------------
bool gt_InitVoteKick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_y;

    // Automatic Variable Declarations
    int autoF92758AB_ae;
    const int autoF92758AB_ai = 1;

    // Variable Initialization
    lv_y = 0.75;

    // Conditions
    if (testConds) {
        if (!((gv_gamemode != 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PlayerTKKillCount, true);
    gf_CreateVoteKickButton(c_anchorTopLeft, 2, 1, 271);
    DialogCreate(300, 810, c_anchorCenter, -453, -145, true);
    gv_voteKickDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(gv_voteKickDialog), DialogGetHeight(gv_voteKickDialog), c_anchorLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_storymode_subtitle_frame.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTop, 25, 25, StringExternal("Param/Value/1D55D85C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    autoF92758AB_ae = PlayerGroupCount(gv_players);
    lv_i = 1;
    for ( ; ( (autoF92758AB_ai >= 0 && lv_i <= autoF92758AB_ae) || (autoF92758AB_ai < 0 && lv_i >= autoF92758AB_ae) ) ; lv_i += autoF92758AB_ai ) {
        libCamp_gf_CreateDialogItemInGrid(DialogLastCreated(), c_triggerControlTypeButton, c_anchorTop, 0.0, lv_y, 4.0, 1.0, TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
        gv_voteKickPlayers[lv_i] = DialogControlLastCreated();
        lv_y += 1.0;
        if ((gf_DevHandles(PlayerHandle(lv_i)) || (PlayerHandle(lv_i) == "1-S2-1-3799298") || (PlayerHandle(lv_i) == "1-S2-1-375017") || (PlayerHandle(lv_i) == "1-S2-1-6287064"))) {
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
        }

    }
    DialogCreate(500, 300, c_anchorLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_voteKickVoteBoard = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(gv_voteKickVoteBoard), DialogGetHeight(gv_voteKickVoteBoard), c_anchorLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_storymode_subtitle_frame.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorCenter, -100, 0, StringToText(""), StringExternal("Param/Value/59911983"), "");
    gv_voteKickVoteBoardYes = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorCenter, 100, 0, StringToText(""), StringExternal("Param/Value/8CA0FAF2"), "");
    gv_voteKickVoteBoardNo = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorCenter, -60, 60, StringExternal("Param/Value/B734483B"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_voteKickVoteBoardYesLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorCenter, 140, 60, StringExternal("Param/Value/F8B871B8"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_voteKickVoteBoardNoLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorCenter, 30, 120, StringExternal("Param/Value/299E6458"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_voteKickVoteBoardTimerLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitVoteKick_Init () {
    gt_InitVoteKick = TriggerCreate("gt_InitVoteKick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kick Player Pressed
//--------------------------------------------------------------------------------------------------
bool gt_KickPlayerPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto377B5ED1_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_voteKickVoteBoardStarted == false) && ((EventDialogControl() == gv_voteKickPlayers[1]) || (EventDialogControl() == gv_voteKickPlayers[2]) || (EventDialogControl() == gv_voteKickPlayers[3]) || (EventDialogControl() == gv_voteKickPlayers[4]) || (EventDialogControl() == gv_voteKickPlayers[5]) || (EventDialogControl() == gv_voteKickPlayers[6]) || (EventDialogControl() == gv_voteKickPlayers[7]) || (EventDialogControl() == gv_voteKickPlayers[8]) || (EventDialogControl() == gv_voteKickPlayers[9]) || (EventDialogControl() == gv_voteKickPlayers[10]) || (EventDialogControl() == gv_voteKickPlayers[11]) || (EventDialogControl() == gv_voteKickPlayers[12]))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_voteKickVoteBoardStarted = true;
    DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupSingle(EventPlayer()), false);
    TimerStart(gv_kickVoteTimer, 15.0, false, c_timeGame);
    gv_kickTimerTime = 15;
    libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardTimerLabel, (StringExternal("Param/Value/C65674AE") + IntToText(gv_kickTimerTime)), PlayerGroupAll());
    TriggerEnable(gt_KickVoteTimerLabel, true);
    DialogControlSetEnabled(gv_voteKickButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_voteKickDialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_voteKickVoteBoard, PlayerGroupActive(), true);
    auto377B5ED1_val = EventDialogControl();
    if (auto377B5ED1_val == gv_voteKickPlayers[1]) {
        gf_VoteKickFunction(1);
    }
    else if (auto377B5ED1_val == gv_voteKickPlayers[2]) {
        gf_VoteKickFunction(2);
    }
    else if (auto377B5ED1_val == gv_voteKickPlayers[3]) {
        gf_VoteKickFunction(3);
    }
    else if (auto377B5ED1_val == gv_voteKickPlayers[4]) {
        gf_VoteKickFunction(4);
    }
    else if (auto377B5ED1_val == gv_voteKickPlayers[5]) {
        gf_VoteKickFunction(5);
    }
    else if (auto377B5ED1_val == gv_voteKickPlayers[6]) {
        gf_VoteKickFunction(6);
    }
    else if (auto377B5ED1_val == gv_voteKickPlayers[7]) {
        gf_VoteKickFunction(7);
    }
    else if (auto377B5ED1_val == gv_voteKickPlayers[8]) {
        gf_VoteKickFunction(8);
    }
    else if (auto377B5ED1_val == gv_voteKickPlayers[9]) {
        gf_VoteKickFunction(9);
    }
    else if (auto377B5ED1_val == gv_voteKickPlayers[10]) {
        gf_VoteKickFunction(10);
    }
    else if (auto377B5ED1_val == gv_voteKickPlayers[11]) {
        gf_VoteKickFunction(11);
    }
    else if (auto377B5ED1_val == gv_voteKickPlayers[12]) {
        gf_VoteKickFunction(12);
    }
    else {
    }
    if ((gv_voteKickVoteBoardVotedAlready[EventPlayer()] == false)) {
        gf_KickDelay(PlayerGroupSingle(EventPlayer()), 180);
        gv_numberofVotesYes += 1;
        gv_voteKickVoteBoardVotedAlready[EventPlayer()] = true;
        libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, (StringExternal("Param/Value/9F85B9C9") + IntToText(gv_numberofVotesYes)), PlayerGroupAll());
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/B6052E43") + TextWithColor(PlayerName(gv_kickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_kickedPlayer, false))))));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KickPlayerPressed_Init () {
    gt_KickPlayerPressed = TriggerCreate("gt_KickPlayerPressed_Func");
    TriggerEnable(gt_KickPlayerPressed, false);
    TriggerAddEventDialogControl(gt_KickPlayerPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kick Vote Yes No
//--------------------------------------------------------------------------------------------------
bool gt_KickVoteYesNo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto349B24B6_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_voteKickVoteBoardNo) || (EventDialogControl() == gv_voteKickVoteBoardYes)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupSingle(EventPlayer()), false);
    if ((gv_voteKickVoteBoardVotedAlready[EventPlayer()] == false)) {
        auto349B24B6_val = EventDialogControl();
        if (auto349B24B6_val == gv_voteKickVoteBoardNo) {
            gv_numberofVotesNo += 1;
            gv_voteKickVoteBoardVotedAlready[EventPlayer()] = true;
        }
        else if (auto349B24B6_val == gv_voteKickVoteBoardYes) {
            gv_numberofVotesYes += 1;
            gv_voteKickVoteBoardVotedAlready[EventPlayer()] = true;
        }
        else {
        }
        libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, (StringExternal("Param/Value/23E50509") + IntToText(gv_numberofVotesYes)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardNoLabel, (StringExternal("Param/Value/E5918334") + IntToText(gv_numberofVotesNo)), PlayerGroupAll());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KickVoteYesNo_Init () {
    gt_KickVoteYesNo = TriggerCreate("gt_KickVoteYesNo_Func");
    TriggerEnable(gt_KickVoteYesNo, false);
    TriggerAddEventDialogControl(gt_KickVoteYesNo, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kick Vote Timer Label
//--------------------------------------------------------------------------------------------------
bool gt_KickVoteTimerLabel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_kickTimerTime -= 1;
    libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardTimerLabel, (StringExternal("Param/Value/6C337026") + IntToText(gv_kickTimerTime)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KickVoteTimerLabel_Init () {
    gt_KickVoteTimerLabel = TriggerCreate("gt_KickVoteTimerLabel_Func");
    TriggerEnable(gt_KickVoteTimerLabel, false);
    TriggerAddEventTimePeriodic(gt_KickVoteTimerLabel, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player TK Kill Count
//--------------------------------------------------------------------------------------------------
bool gt_PlayerTKKillCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingplayer;
    int lv_killingplayer;
    unit lv_dyingunit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dyingplayer = EventPlayer();
    lv_killingplayer = UnitGetOwner(libNtve_gf_KillingUnit());
    lv_dyingunit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, lv_dyingunit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_killingplayer == lv_dyingplayer)) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(lv_killingplayer, lv_dyingplayer, libNtve_ge_PlayerRelation_AllyMutual) == true) && (PlayerGroupHasPlayer(gv_players, lv_killingplayer) == true)) {
        gv_tKCount[lv_killingplayer] += 1;
    }

    if ((gv_tKCount[libNtve_gf_KillingPlayer()] >= 2)) {
        TimerStart(gv_kickVoteTimer, 15.0, false, c_timeGame);
        gv_kickTimerTime = 15;
        libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardTimerLabel, (StringExternal("Param/Value/352C1EAF") + IntToText(gv_kickTimerTime)), PlayerGroupAll());
        TriggerEnable(gt_KickVoteTimerLabel, true);
        DialogSetVisible(gv_voteKickVoteBoard, PlayerGroupAll(), true);
        gf_VoteKickFunction(lv_killingplayer);
        if ((gv_voteKickVoteBoardVotedAlready[EventPlayer()] == false)) {
            gv_numberofVotesYes += 1;
            gv_voteKickVoteBoardVotedAlready[EventPlayer()] = true;
            libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, (StringExternal("Param/Value/0D6C2F68") + IntToText(gv_numberofVotesYes)), PlayerGroupAll());
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaChat, (TextWithColor(PlayerName(libNtve_gf_KillingPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))) + StringExternal("Param/Value/E19E25F6")));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerTKKillCount_Init () {
    gt_PlayerTKKillCount = TriggerCreate("gt_PlayerTKKillCount_Func");
    TriggerEnable(gt_PlayerTKKillCount, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kick Vote Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_KickVoteTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC8D9A4DC_g;
    int autoC8D9A4DC_u;
    unit autoC8D9A4DC_var;
    const int auto412554E2_ae = 12;
    int auto412554E2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_voteKickVoteBoard, PlayerGroupActive(), false);
    DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_voteKickButton, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, StringExternal("Param/Value/92649111"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardNoLabel, StringExternal("Param/Value/A30A1EA5"), PlayerGroupAll());
    if ((gv_numberofVotesYes > gv_numberofVotesNo)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (TextWithColor(PlayerName(gv_kickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_kickedPlayer, false))) + StringExternal("Param/Value/836E857D")));
        GameOver(gv_kickedPlayer, c_gameOverDefeat, false, true);
        autoC8D9A4DC_g = gv_heroskilledbyplayer[gv_kickedPlayer];
        autoC8D9A4DC_u = UnitGroupCount(autoC8D9A4DC_g, c_unitCountAll);
        for (;; autoC8D9A4DC_u -= 1) {
            autoC8D9A4DC_var = UnitGroupUnitFromEnd(autoC8D9A4DC_g, autoC8D9A4DC_u);
            if (autoC8D9A4DC_var == null) { break; }
            UnitCreateEffectUnit(autoC8D9A4DC_var, "ReviveModifyUnit", autoC8D9A4DC_var);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/FB68BF14"));
    }
    TriggerEnable(gt_KickVoteTimerLabel, false);
    gv_numberofVotesNo = 0;
    gv_numberofVotesYes = 0;
    auto412554E2_var = 1;
    for ( ; auto412554E2_var <= auto412554E2_ae; auto412554E2_var += 1 ) {
        gv_voteKickVoteBoardVotedAlready[auto412554E2_var] = false;
    }
    gv_voteKickVoteBoardStarted = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KickVoteTimerExpires_Init () {
    gt_KickVoteTimerExpires = TriggerCreate("gt_KickVoteTimerExpires_Func");
    TriggerAddEventTimer(gt_KickVoteTimerExpires, gv_kickVoteTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camo Selected
//--------------------------------------------------------------------------------------------------
bool gt_CamoSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    bool lv_changed;

    // Automatic Variable Declarations
    int auto81142D78_ae;
    const int auto81142D78_ai = 1;
    int auto36A7AFC3_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_unlockDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto81142D78_ae = UserDataInstanceCount("Camos");
    lv_loopint = 1;
    for ( ; ( (auto81142D78_ai >= 0 && lv_loopint <= auto81142D78_ae) || (auto81142D78_ai < 0 && lv_loopint >= auto81142D78_ae) ) ; lv_loopint += auto81142D78_ai ) {
        if ((gv_camoDialogButtons[lv_loopint] == EventDialogControl()) && (gv_playercamounlocked[lv_loopint][EventPlayer()] == true) && (UnitHasBehavior(gv_playerHeroes[EventPlayer()], "StonewallProtocol") == false)) {
            UnitGroupRemove(gv_octoCamos, gv_playerHeroes[EventPlayer()]);
            if ((UnitHasBehavior2(gv_playerHeroes[EventPlayer()], "GlazeHellFire") == true)) {
                UnitBehaviorRemove(gv_playerHeroes[EventPlayer()], "GlazeHellFire", 1);
            }
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/2C69FC93") + StringToText(UserDataGetString("Camos", UserDataInstance("Camos", lv_loopint), "Camo Name", 1))));
            libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[EventPlayer()], libNtve_gf_TextureSelectByID(UserDataGetGameLink("Camos", UserDataInstance("Camos", lv_loopint), "Camo", 1)));
            gv_textureValue[EventPlayer()][1] = lv_loopint;
            ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), libNtve_gf_TextureSelectByID(UserDataGetGameLink("Camos", UserDataInstance("Camos", lv_loopint), "Camo", 1)));
            lv_changed = true;
            gv_playerCurrentCamo[EventPlayer()] = lv_loopint;
            BankValueSetFromInt(gv_hotkeyBank[EventPlayer()], "Unlocks", "C", lv_loopint);
            gf_RefreshButtons(EventPlayer(), 1, lv_loopint);
            auto36A7AFC3_val = gv_camoDialogButtons[lv_loopint];
            if (auto36A7AFC3_val == gv_camoDialogButtons[12]) {
                if ((UnitGroupHasUnit(gv_octoCamos, gv_playerHeroes[EventPlayer()]) == false)) {
                    UnitGroupAdd(gv_octoCamos, gv_playerHeroes[EventPlayer()]);
                }
                else {
                    UnitGroupRemove(gv_octoCamos, gv_playerHeroes[EventPlayer()]);
                }
            }
            else if (auto36A7AFC3_val == gv_camoDialogButtons[39]) {
                if ((UnitHasBehavior2(gv_playerHeroes[EventPlayer()], "GlazeHellFire") == false)) {
                    UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "GlazeHellFire", gv_playerHeroes[EventPlayer()], 1);
                }
                else {
                    UnitBehaviorRemove(gv_playerHeroes[EventPlayer()], "GlazeHellFire", 1);
                }
            }
            else if (auto36A7AFC3_val == gv_camoDialogButtons[51]) {
                if ((UnitHasBehavior2(gv_playerHeroes[EventPlayer()], "GlazeGhost") == false)) {
                    UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "GlazeGhost", gv_playerHeroes[EventPlayer()], 1);
                }
                else {
                    UnitBehaviorRemove(gv_playerHeroes[EventPlayer()], "GlazeGhost", 1);
                }
            }
            else {
            }
        }

    }
    BankSave(gv_hotkeyBank[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CamoSelected_Init () {
    gt_CamoSelected = TriggerCreate("gt_CamoSelected_Func");
    TriggerAddEventDialogControl(gt_CamoSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decal Selected
//--------------------------------------------------------------------------------------------------
bool gt_DecalSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    bool lv_changed;

    // Automatic Variable Declarations
    int autoF562B128_ae;
    const int autoF562B128_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_unlockDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_decalDialogButtons[0] == EventDialogControl())) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/8A7D2676") + StringExternal("Param/Value/9259A474")));
        libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[EventPlayer()], gv_rankActorMsg[gv_playerRankSet[EventPlayer()]][gf_GetPlayerRank(EventPlayer())]);
        ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), gv_rankActorMsg[gv_playerRankSet[EventPlayer()]][gf_GetPlayerRank(EventPlayer())]);
        gv_textureValue[EventPlayer()][0] = 0;
        BankValueSetFromInt(gv_hotkeyBank[EventPlayer()], "Unlocks", "D", 0);
        gf_RefreshButtons(EventPlayer(), 2, 0);
        lv_changed = true;
    }
    else {
        autoF562B128_ae = UserDataInstanceCount("Decals");
        lv_loopint = 1;
        for ( ; ( (autoF562B128_ai >= 0 && lv_loopint <= autoF562B128_ae) || (autoF562B128_ai < 0 && lv_loopint >= autoF562B128_ae) ) ; lv_loopint += autoF562B128_ai ) {
            if ((gv_decalDialogButtons[lv_loopint] == EventDialogControl()) && (gv_playerdecalunlocked[lv_loopint][EventPlayer()] == true)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/9A2342F3") + StringToText(UserDataGetString("Decals", UserDataInstance("Decals", lv_loopint), "Decal Name", 1))));
                libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[EventPlayer()], libNtve_gf_TextureSelectByID(UserDataGetGameLink("Decals", UserDataInstance("Decals", lv_loopint), "Decals", 1)));
                gv_textureValue[EventPlayer()][0] = lv_loopint;
                BankValueSetFromInt(gv_hotkeyBank[EventPlayer()], "Unlocks", "D", lv_loopint);
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), libNtve_gf_TextureSelectByID(UserDataGetGameLink("Decals", UserDataInstance("Decals", lv_loopint), "Decals", 1)));
                gf_RefreshButtons(EventPlayer(), 2, lv_loopint);
                lv_changed = true;
            }

        }
    }
    BankSave(gv_hotkeyBank[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecalSelected_Init () {
    gt_DecalSelected = TriggerCreate("gt_DecalSelected_Func");
    TriggerAddEventDialogControl(gt_DecalSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Octo Camo
//--------------------------------------------------------------------------------------------------
bool gt_OctoCamo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_unlockDialog, EventPlayer()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == gv_camoDialogButtons[12]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_OctoCamo();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OctoCamo_Init () {
    gt_OctoCamo = TriggerCreate("gt_OctoCamo_Func");
    TriggerAddEventDialogControl(gt_OctoCamo, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SYL
//--------------------------------------------------------------------------------------------------
bool gt_SYL_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_user;

    // Automatic Variable Declarations
    unitgroup auto575AFB14_g;
    int auto575AFB14_u;
    unit auto575AFB14_var;

    // Variable Initialization
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gf_DevHandles(PlayerHandle(EventPlayer())) || (PlayerHandle(lv_user) == "1-S2-13500828")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto575AFB14_g = UnitGroupSelected(lv_user);
    auto575AFB14_u = UnitGroupCount(auto575AFB14_g, c_unitCountAll);
    for (;; auto575AFB14_u -= 1) {
        auto575AFB14_var = UnitGroupUnitFromEnd(auto575AFB14_g, auto575AFB14_u);
        if (auto575AFB14_var == null) { break; }
        if (((gv_playerdecalunlocked[46][UnitGetOwner(auto575AFB14_var)] == false) || (gv_playercamounlocked[52][UnitGetOwner(auto575AFB14_var)] == false))) {
            gv_playerdecalunlocked[46][UnitGetOwner(auto575AFB14_var)] = true;
            gv_playercamounlocked[52][UnitGetOwner(auto575AFB14_var)] = true;
            gf_SaveBankSimple(UnitGetOwner(auto575AFB14_var));
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/BB8BD5E6"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(auto575AFB14_var)), c_messageAreaSubtitle, StringExternal("Param/Value/EF26F3A2"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/31B8DF27"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SYL_Init () {
    gt_SYL = TriggerCreate("gt_SYL_Func");
    TriggerAddEventChatMessage(gt_SYL, c_playerAny, "-SYL", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZES
//--------------------------------------------------------------------------------------------------
bool gt_ZES_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_user;

    // Automatic Variable Declarations
    unitgroup auto6BA648ED_g;
    int auto6BA648ED_u;
    unit auto6BA648ED_var;

    // Variable Initialization
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerHandle(lv_user) == "1-S2-1-2857622"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6BA648ED_g = UnitGroupSelected(lv_user);
    auto6BA648ED_u = UnitGroupCount(auto6BA648ED_g, c_unitCountAll);
    for (;; auto6BA648ED_u -= 1) {
        auto6BA648ED_var = UnitGroupUnitFromEnd(auto6BA648ED_g, auto6BA648ED_u);
        if (auto6BA648ED_var == null) { break; }
        if (((gv_playercamounlocked[45][UnitGetOwner(auto6BA648ED_var)] == false) || (gv_playerdecalunlocked[8][UnitGetOwner(auto6BA648ED_var)] == false))) {
            gv_playercamounlocked[45][UnitGetOwner(auto6BA648ED_var)] = true;
            gv_playerdecalunlocked[8][UnitGetOwner(auto6BA648ED_var)] = true;
            gf_SaveBankSimple(UnitGetOwner(auto6BA648ED_var));
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/54B81878"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(auto6BA648ED_var)), c_messageAreaSubtitle, StringExternal("Param/Value/4D32A317"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/21A70E53"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZES_Init () {
    gt_ZES = TriggerCreate("gt_ZES_Func");
    TriggerAddEventChatMessage(gt_ZES, c_playerAny, "ZES", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AUC
//--------------------------------------------------------------------------------------------------
bool gt_AUC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;
    int lv_user;

    // Automatic Variable Declarations
    unitgroup auto369D370A_g;
    int auto369D370A_u;
    unit auto369D370A_var;

    // Variable Initialization
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(gf_DevHandles(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto369D370A_g = UnitGroupSelected(lv_user);
    auto369D370A_u = UnitGroupCount(auto369D370A_g, c_unitCountAll);
    for (;; auto369D370A_u -= 1) {
        auto369D370A_var = UnitGroupUnitFromEnd(auto369D370A_g, auto369D370A_u);
        if (auto369D370A_var == null) { break; }
        gv_playercamounlocked[36][UnitGetOwner(auto369D370A_var)] = true;
        gv_playerdecalunlocked[11][UnitGetOwner(auto369D370A_var)] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AUC_Init () {
    gt_AUC = TriggerCreate("gt_AUC_Func");
    TriggerAddEventChatMessage(gt_AUC, c_playerAny, "AUC", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Normal & Special SI's
//--------------------------------------------------------------------------------------------------
bool gt_NormalSpecialSIs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    int lv_changed;
    text lv_text;
    int lv_sIindex;
    string lv_sIbehavior;
    text lv_temptext;
    text lv_temptext2;

    // Automatic Variable Declarations
    const int auto2632D3C9_ae = 30;
    const int auto2632D3C9_ai = 1;
    const int autoE5753CED_ae = 121;
    const int autoE5753CED_ai = 1;
    int auto8DDC41E6_val;
    const int auto87FD890C_n = 3;
    int auto87FD890C_i;

    // Variable Initialization
    lv_text = StringToText("");

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_sIDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_sIDialogButtons[3] == EventDialogControl()) && ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Flamethrower") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Flamethrower2"))) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/0FABA7DE"), SoundLink("UI_GenericError", -1));
        return true;
    }

    if ((gv_sIDialogButtons[11] == EventDialogControl()) && ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Enforcer") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Enforcer2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "GhostHero") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "GhostHero2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "LaserEnforcer") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "LaserEnforcer2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Specter") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Specter2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "OrbitalSupportSpecialist") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "OrbitalSupportSpecialist2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "HeavyGunner") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "HeavyGunner2"))) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/B011D637"), SoundLink("UI_GenericError", -1));
        return true;
    }

    if (((gv_sIDialogButtons[17] == EventDialogControl()) || (gv_sIDialogButtons[21] == EventDialogControl()) || (gv_sIDialogButtons[22] == EventDialogControl())) && ((gv_playerSIsused[1][EventPlayer()] == 17) || (gv_playerSIsused[1][EventPlayer()] == 21) || (gv_playerSIsused[1][EventPlayer()] == 22))) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/0DA8BC3C"), SoundLink("UI_GenericError", -1));
        return true;
    }

    if (((gv_sIDialogButtons[10] == EventDialogControl()) || (gv_sIDialogButtons[12] == EventDialogControl())) && (gv_mosspecificSIsused[1][EventPlayer()] == 47)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/71E512F7"), SoundLink("UI_GenericError", -1));
        return true;
    }

    lv_loopint = 1;
    for ( ; ( (auto2632D3C9_ai >= 0 && lv_loopint <= auto2632D3C9_ae) || (auto2632D3C9_ai < 0 && lv_loopint >= auto2632D3C9_ae) ) ; lv_loopint += auto2632D3C9_ai ) {
        if ((gv_playerHeroes[EventPlayer()] != null) && (gv_sIDialogButtons[lv_loopint] == EventDialogControl()) && (gv_sIunlocked[lv_loopint][EventPlayer()] == true) && (gv_playerSIcount[EventPlayer()] < 2) && (gv_playerSIsused[1][EventPlayer()] != lv_loopint) && (gv_playerSIsused[2][EventPlayer()] == 0) && (gv_sIXPminimum[gv_playerRankSet[EventPlayer()]][lv_loopint] != 0)) {
            if ((gv_playerSIsused[1][EventPlayer()] == 0)) {
                lv_sIindex = 1;
                gv_playerSIsused[1][EventPlayer()] = lv_loopint;
                gv_playerSISelected[lv_loopint][EventPlayer()] = true;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/C0DBF158") + gv_sIname[lv_loopint]));
                libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lv_loopint], true, PlayerGroupSingle(EventPlayer()));
                DialogControlSetVisible(gv_sIBorderFrameHighlightIndex[lv_loopint], PlayerGroupSingle(EventPlayer()), true);
                lv_changed = lv_loopint;
                break;
            }
            else if ((gv_mosspecificSIsused[1][EventPlayer()] == 0) && (gv_playerSIsused[2][EventPlayer()] == 0)) {
                lv_sIindex = 2;
                gv_playerSIsused[2][EventPlayer()] = lv_loopint;
                gv_playerSISelected[lv_loopint][EventPlayer()] = true;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/6BB1E120") + gv_sIname[lv_loopint]));
                libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lv_loopint], true, PlayerGroupSingle(EventPlayer()));
                DialogControlSetVisible(gv_sIBorderFrameHighlightIndex[lv_loopint], PlayerGroupSingle(EventPlayer()), true);
                lv_changed = lv_loopint;
                break;
            }
        }

    }
    lv_loopint = 120;
    for ( ; ( (autoE5753CED_ai >= 0 && lv_loopint <= autoE5753CED_ae) || (autoE5753CED_ai < 0 && lv_loopint >= autoE5753CED_ae) ) ; lv_loopint += autoE5753CED_ai ) {
        if ((gv_playerHeroes[EventPlayer()] != null) && (gv_sIDialogButtons[lv_loopint] == EventDialogControl()) && (gv_sIunlocked[lv_loopint][EventPlayer()] == true) && (gv_playerSIcount[EventPlayer()] < 2) && (gv_playerSIsused[1][EventPlayer()] != lv_loopint) && (gv_playerSIsused[2][EventPlayer()] == 0) && (gv_sIXPminimum[gv_playerRankSet[EventPlayer()]][lv_loopint] != 0)) {
            if ((gv_playerSIsused[1][EventPlayer()] == 0)) {
                lv_sIindex = 1;
                gv_playerSIsused[1][EventPlayer()] = lv_loopint;
                gv_playerSISelected[lv_loopint][EventPlayer()] = true;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/328716D4") + gv_sIname[lv_loopint]));
                libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lv_loopint], true, PlayerGroupSingle(EventPlayer()));
                DialogControlSetVisible(gv_sIBorderFrameHighlightIndex[lv_loopint], PlayerGroupSingle(EventPlayer()), true);
                lv_changed = lv_loopint;
                break;
            }
            else if ((gv_mosspecificSIsused[1][EventPlayer()] == 0) && (gv_playerSIsused[2][EventPlayer()] == 0)) {
                lv_sIindex = 2;
                gv_playerSIsused[2][EventPlayer()] = lv_loopint;
                gv_playerSISelected[lv_loopint][EventPlayer()] = true;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/4F9DF288") + gv_sIname[lv_loopint]));
                libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lv_loopint], true, PlayerGroupSingle(EventPlayer()));
                DialogControlSetVisible(gv_sIBorderFrameHighlightIndex[lv_loopint], PlayerGroupSingle(EventPlayer()), true);
                lv_changed = lv_loopint;
                break;
            }
        }

    }
    auto8DDC41E6_val = lv_changed;
    if (auto8DDC41E6_val == 0) {
        return true;
    }
    else if (auto8DDC41E6_val == 1) {
        lv_sIbehavior = "Synthesizer";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "Synthesizer", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 2) {
        lv_sIbehavior = "ToughAsNails";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "ToughAsNails", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 3) {
        lv_sIbehavior = "QuickThinking";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "QuickThinking", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 4) {
        lv_sIbehavior = "Energetic";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "Energetic", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 5) {
        lv_sIbehavior = "Hawkeye";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "Hawkeye", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 6) {
        lv_sIbehavior = "Generalist";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 7) {
        lv_sIbehavior = "TwinkleToes";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "TwinkleToes", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 8) {
        lv_sIbehavior = "PureBlood";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "PureBlood", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 9) {
        lv_sIbehavior = "Intellectual";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "Intellectual", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 10) {
        lv_sIbehavior = "BornToLead";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "BornToLead", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 11) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Barbaric", 1);
    }
    else if (auto8DDC41E6_val == 12) {
        lv_sIbehavior = "Instructor";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 13) {
        lv_sIbehavior = "Impatient";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 14) {
        lv_sIbehavior = "Nimble";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 15) {
        for (auto87FD890C_i = 1; auto87FD890C_i <= auto87FD890C_n; auto87FD890C_i += 1) {
            UnitInventoryCreate(gv_playerHeroes[EventPlayer()], "EnergyCell");
            UnitSetOwner(UnitInventoryLastCreated(), 0, true);
        }
    }
    else if (auto8DDC41E6_val == 16) {
        lv_sIbehavior = "WhizKid";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 17) {
        lv_sIbehavior = "ReactiveArmor";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 18) {
        lv_sIbehavior = "Lucky";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 19) {
        lv_sIbehavior = "BloodLust";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 20) {
        lv_sIbehavior = "Veteran";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 21) {
        lv_sIbehavior = "LightArmor";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 22) {
        lv_sIbehavior = "HeavyArmor";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 23) {
        lv_sIbehavior = "CombatLoad";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
        if ((((UnitGetType(gv_playerHeroes[EventPlayer()]) == "RiflemanOld") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "TerminalLance") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Regendare") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "RiflemanOld2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "CombatMedic") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "ForceRecon") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "CombatMedic2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "CavalryScout") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "CavalryScout2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "PlatoonLeader") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "PlatoonLeader2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "JavelinGunner") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "JavelinGunner2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "FireSupportSpecialist") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "FireSupportSpecialist2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Rifleman") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Rifleman2")))) {
            gv_magsize[EventPlayer()] = FixedToInt(80.0);
        }
        else if (((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Cyborg") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Cyborg2"))) {
            gv_magsize[EventPlayer()] = FixedToInt(42.0);
        }
        else if (((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Assaultman2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Assaultman") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "MechOperator"))) {
            gv_magsize[EventPlayer()] = FixedToInt(120.0);
        }
        else if ((((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Pointman") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "CommandoHero") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "CommandoHero2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Enforcer") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Enforcer2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "CombatEngineer") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "CombatEngineer2")))) {
            gv_magsize[EventPlayer()] = FixedToInt(32.0);
        }
        else if (((UnitGetType(gv_playerHeroes[EventPlayer()]) == "SquadDesignatedMarksman") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "SquadDesignatedMarksman2"))) {
            gv_magsize[EventPlayer()] = FixedToInt(45.0);
        }
        else if (((UnitGetType(gv_playerHeroes[EventPlayer()]) == "LaserEnforcer") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "LaserEnforcer2"))) {
            gv_magsize[EventPlayer()] = FixedToInt(50.0);
        }
        else if (((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Specter") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Specter2"))) {
            gv_magsize[EventPlayer()] = FixedToInt(100.0);
        }
        else if (((UnitGetType(gv_playerHeroes[EventPlayer()]) == "GhostHero") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "GhostHero2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "OrbitalSupportSpecialist") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "OrbitalSupportSpecialist2"))) {
            gv_magsize[EventPlayer()] = FixedToInt(100.0);
        }
        else if (((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Flamethrower") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Flamethrower2"))) {
            gv_playerEncumbrance[EventPlayer()] = FixedToInt(3001.0);
        }
        else if (((UnitGetType(gv_playerHeroes[EventPlayer()]) == "AutomaticRifleman") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "AutomaticRifleman2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "HeavyGunner") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "HeavyGunner2") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Mercenary") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Mercenary2"))) {
            gv_playerEncumbrance[EventPlayer()] = FixedToInt(30.0);
        }
    }
    else if (auto8DDC41E6_val == 24) {
        lv_sIbehavior = "Marksman";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 25) {
        lv_sIbehavior = "Siphon";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 120) {
        if ((gv_gamemode == 11)) {
            UnitCreateEffectUnit(gv_playerHeroes[EventPlayer()], "WARStartingXP", gv_playerHeroes[EventPlayer()]);
        }
        else {
            UnitCreateEffectUnit(gv_playerHeroes[EventPlayer()], "Discipline", gv_playerHeroes[EventPlayer()]);
        }
        UnitInventoryCreate(gv_playerHeroes[EventPlayer()], "QuikClot");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
        UnitInventoryCreate(gv_playerHeroes[EventPlayer()], "GroundFlare");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
        UnitInventoryCreate(gv_playerHeroes[EventPlayer()], "SmokeGrenade");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
        UnitInventoryCreate(gv_playerHeroes[EventPlayer()], "AmmoCase");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
    }
    else if (auto8DDC41E6_val == 121) {
        lv_sIbehavior = "TriggerDiscipline";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 26) {
        gv_enabledBB[EventPlayer()] = true;
        if ((TriggerIsEnabled(gt_BattleBuddyDies) == false)) {
            TriggerEnable(gt_BattleBuddyDies, true);
        }
    }
    else if (auto8DDC41E6_val == 27) {
        lv_sIbehavior = "BigGameHunter";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 28) {
        UnitInventoryCreate(gv_playerHeroes[EventPlayer()], "AutomatedNaniteResuscitator");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
    }
    else {
    }
    gv_playerSIbehaviors[lv_sIindex][EventPlayer()] = lv_sIbehavior;
    lv_temptext = StringToText("");
    lv_temptext2 = StringToText("");
    if ((gv_playerSIsused[1][EventPlayer()] != 0)) {
        lv_temptext = (lv_temptext + StringToText(StringSub(gv_sIabbreviation[gv_playerSIsused[1][EventPlayer()]], 1, 2)));
        lv_temptext2 = gv_sIname[gv_playerSIsused[1][EventPlayer()]];
    }

    if ((gv_playerSIsused[2][EventPlayer()] != 0)) {
        lv_temptext = (lv_temptext + StringExternal("Param/Value/3B5B6F74"));
        lv_temptext = (lv_temptext + StringToText(StringSub(gv_sIabbreviation[gv_playerSIsused[2][EventPlayer()]], 1, 2)));
        lv_temptext2 = (lv_temptext2 + StringExternal("Param/Value/11285796"));
        lv_temptext2 = (lv_temptext2 + gv_sIname[gv_playerSIsused[2][EventPlayer()]]);
    }

    if ((gv_mosspecificSIsused[1][EventPlayer()] != 0)) {
        if ((gv_mosspecificSIsused[1][EventPlayer()] >= 31)) {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/35780BAC"));
            lv_temptext = (lv_temptext + StringToText(StringSub(gv_sIabbreviation[gv_mosspecificSIsused[1][EventPlayer()]], 1, 2)));
            lv_temptext2 = (lv_temptext2 + StringExternal("Param/Value/F61226AC"));
            lv_temptext2 = (lv_temptext2 + gv_sIname[gv_mosspecificSIsused[1][EventPlayer()]]);
        }
        else {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/17C8DCFB"));
            lv_temptext = (lv_temptext + StringToText(StringSub(gv_SIBetaAbbreviation[gv_mosspecificSIsused[1][EventPlayer()]], 1, 2)));
            lv_temptext2 = (lv_temptext2 + StringExternal("Param/Value/CB01D8D2"));
            lv_temptext2 = (lv_temptext2 + gv_SIBetaName[gv_mosspecificSIsused[1][EventPlayer()]]);
        }
    }

    libNtve_gf_SetDialogItemText(gv_hUDDialogItems[8][EventPlayer()], lv_temptext, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[8][EventPlayer()], lv_temptext2, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NormalSpecialSIs_Init () {
    gt_NormalSpecialSIs = TriggerCreate("gt_NormalSpecialSIs_Func");
    TriggerAddEventDialogControl(gt_NormalSpecialSIs, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MOS Specific SI's
//--------------------------------------------------------------------------------------------------
bool gt_MOSSpecificSIs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pindex;
    unit lv_item;
    int lv_inventorySlot;
    int lv_int2;
    int lv_int;
    int lv_loopint2;
    int lv_changed2;
    text lv_text;
    int lv_sIindex;
    string lv_sIbehavior;
    text lv_temptext;
    text lv_temptext2;
    int lv_index;
    bool lv_BetaSiUsed;

    // Automatic Variable Declarations
    const int autoCE433F12_ae = 110;
    const int autoCE433F12_ai = 1;
    const int auto2B2577E2_ae = gv_SIBetaCount;
    const int auto2B2577E2_ai = 1;
    int auto476DD09F_val;
    unitgroup auto2214B077_g;
    int auto2214B077_u;
    unit auto2214B077_var;
    unitgroup autoFD41C7D0_g;
    int autoFD41C7D0_u;
    unit autoFD41C7D0_var;
    unitgroup auto8D8CF621_g;
    int auto8D8CF621_u;
    unit auto8D8CF621_var;
    unitgroup autoAD5B45BE_g;
    int autoAD5B45BE_u;
    unit autoAD5B45BE_var;
    unitgroup auto90F8E9FB_g;
    int auto90F8E9FB_u;
    unit auto90F8E9FB_var;
    unitgroup autoA580C478_g;
    int autoA580C478_u;
    unit autoA580C478_var;
    unitgroup auto004DAA63_g;
    int auto004DAA63_u;
    unit auto004DAA63_var;
    unitgroup auto382AA8D6_g;
    int auto382AA8D6_u;
    unit auto382AA8D6_var;
    unitgroup autoE2ACD9EE_g;
    int autoE2ACD9EE_u;
    unit autoE2ACD9EE_var;
    unitgroup autoB76F67B3_g;
    int autoB76F67B3_u;
    unit autoB76F67B3_var;
    const int auto7B6F81C4_ae = 3;
    const int auto7B6F81C4_ai = 1;

    // Variable Initialization
    lv_pindex = EventPlayer();
    lv_text = StringToText("");

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_sIDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_sIDialogButtons[32] == EventDialogControl()) || (gv_sIDialogButtons[31] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[1][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[1][1]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != "Rifleman") && (UnitGetType(gv_playerHeroes[EventPlayer()]) != "Rifleman2")) {
        gv_ghost = true;
        return true;
    }
    else if (((gv_sIDialogButtons[33] == EventDialogControl()) || (gv_sIDialogButtons[34] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[2][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[2][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[35] == EventDialogControl()) || (gv_sIDialogButtons[36] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[3][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[3][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[37] == EventDialogControl()) || (gv_sIDialogButtons[38] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[4][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[4][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[39] == EventDialogControl()) || (gv_sIDialogButtons[40] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[5][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[5][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[41] == EventDialogControl()) || (gv_sIDialogButtons[42] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[6][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[6][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[43] == EventDialogControl()) || (gv_sIDialogButtons[44] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[7][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[7][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[45] == EventDialogControl()) || (gv_sIDialogButtons[46] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[8][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[8][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[47] == EventDialogControl()) || (gv_sIDialogButtons[48] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[9][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[9][1])) {
        return true;
    }
    else if ((gv_sIDialogButtons[47] == EventDialogControl()) && ((gv_playerSIsused[1][EventPlayer()] == 10) || (gv_playerSIsused[1][EventPlayer()] == 12))) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/DA26D206"), SoundLink("UI_GenericError", -1));
        return true;
    }
    else if (((gv_sIDialogButtons[49] == EventDialogControl()) || (gv_sIDialogButtons[50] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[10][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[10][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[51] == EventDialogControl()) || (gv_sIDialogButtons[52] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[11][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[11][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[53] == EventDialogControl()) || (gv_sIDialogButtons[54] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[12][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[12][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[55] == EventDialogControl()) || (gv_sIDialogButtons[56] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[13][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[13][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[57] == EventDialogControl()) || (gv_sIDialogButtons[58] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[14][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[14][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[59] == EventDialogControl()) || (gv_sIDialogButtons[60] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[15][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[15][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[61] == EventDialogControl()) || (gv_sIDialogButtons[62] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[16][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[16][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[63] == EventDialogControl()) || (gv_sIDialogButtons[64] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[17][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[17][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[65] == EventDialogControl()) || (gv_sIDialogButtons[66] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[18][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[18][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[67] == EventDialogControl()) || (gv_sIDialogButtons[68] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[0][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[0][1])) {
        return true;
    }
    else if (((gv_sIDialogButtons[71] == EventDialogControl()) || (gv_sIDialogButtons[72] == EventDialogControl())) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[21][0]) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != gv_mOS[21][1])) {
        return true;
    }
    lv_loopint2 = 31;
    for ( ; ( (autoCE433F12_ai >= 0 && lv_loopint2 <= autoCE433F12_ae) || (autoCE433F12_ai < 0 && lv_loopint2 >= autoCE433F12_ae) ) ; lv_loopint2 += autoCE433F12_ai ) {
        if ((gv_playerHeroes[EventPlayer()] != null) && (gv_sIDialogButtons[lv_loopint2] == EventDialogControl()) && (gv_sIunlocked[lv_loopint2][EventPlayer()] == true) && (gv_mosspecificSIsused[1][EventPlayer()] < 1) && (gv_mosspecificSIcount[EventPlayer()] == 0) && (gv_sIXPminimum[gv_playerRankSet[EventPlayer()]][lv_loopint2] != 0) && ((gv_playerSIsused[1][EventPlayer()] == 0) || (gv_playerSIsused[2][EventPlayer()] == 0))) {
            if ((gv_mosspecificSIsused[1][EventPlayer()] == 0)) {
                lv_sIindex = 2;
                gv_mosspecificSIsused[1][EventPlayer()] = lv_loopint2;
                gv_playerSISelected[lv_loopint2][EventPlayer()] = true;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/41D35565") + gv_sIname[lv_loopint2]));
            }

            libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lv_loopint2], true, PlayerGroupSingle(EventPlayer()));
            DialogControlSetVisible(gv_sIBorderFrameHighlightIndex[lv_loopint2], PlayerGroupSingle(EventPlayer()), true);
            lv_changed2 = lv_loopint2;
            break;
        }

    }
    lv_loopint2 = 1;
    for ( ; ( (auto2B2577E2_ai >= 0 && lv_loopint2 <= auto2B2577E2_ae) || (auto2B2577E2_ai < 0 && lv_loopint2 >= auto2B2577E2_ae) ) ; lv_loopint2 += auto2B2577E2_ai ) {
        if ((gv_playerHeroes[EventPlayer()] != null) && (gv_SIBetaDialogButtons[lv_loopint2] == EventDialogControl()) && (gv_SIBetaUnlocked[lv_loopint2][EventPlayer()] == true) && (gv_mosspecificSIsused[1][EventPlayer()] < 1) && (gv_mosspecificSIcount[EventPlayer()] == 0) && (gv_sIXPminimum[gv_playerRankSet[EventPlayer()]][lv_loopint2] != 0) && ((gv_playerSIsused[1][EventPlayer()] == 0) || (gv_playerSIsused[2][EventPlayer()] == 0))) {
            if ((gv_mosspecificSIsused[1][EventPlayer()] == 0)) {
                lv_BetaSiUsed = true;
                lv_sIindex = 2;
                gv_mosspecificSIsused[1][EventPlayer()] = lv_loopint2;
                gv_playerSISelected[lv_loopint2][EventPlayer()] = true;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/323150E7") + gv_SIBetaName[lv_loopint2]));
            }

            libNtve_gf_SetDialogItemDesaturated(gv_SIBetaDialogButtons[lv_loopint2], true, PlayerGroupSingle(EventPlayer()));
            DialogControlSetVisible(gv_SIBetaBorderFrameHighlightIndex[lv_loopint2], PlayerGroupSingle(EventPlayer()), true);
            lv_changed2 = lv_loopint2;
            break;
        }

    }
    auto476DD09F_val = lv_changed2;
    if (auto476DD09F_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Grenadier", 1);
        if (((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Rifleman") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Rifleman2"))) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GrenadierBeta", 1);
        }
    }
    else if (auto476DD09F_val == 31) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Grenadier", 1);
        if (((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Rifleman") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Rifleman2"))) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GrenadierBeta", 1);
        }
    }
    else if (auto476DD09F_val == 32) {
        UnitIssueOrder(gv_playerHeroes[EventPlayer()], Order(AbilityCommand("FiremodeAssaultRifle", 1)), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
        UnitWeaponRemove(gv_playerHeroes[EventPlayer()], "HeroAssaultRifle");
        UnitWeaponAdd(gv_playerHeroes[EventPlayer()], "PlasmaRifle", null);
        lv_sIbehavior = "AdvancedWarfighter";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "AdvancedWarfighter", 1);
        gv_magsize[lv_pindex] = 80;
        gv_ghost = true;
    }
    else if (auto476DD09F_val == 33) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BloodinBloodOut", 1);
    }
    else if (auto476DD09F_val == 35) {
        lv_sIbehavior = "HeavyWeaponsTraining";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HeavyWeaponsTraining", 1);
    }
    else if (auto476DD09F_val == 37) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Barrier", 1);
    }
    else if (auto476DD09F_val == 38) {
        lv_sIbehavior = "Pyromaniac";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Pyromaniac", 1);
    }
    else if (auto476DD09F_val == 39) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Defender", 1);
    }
    else if (auto476DD09F_val == 41) {
        UnitIssueOrder(gv_playerHeroes[EventPlayer()], Order(AbilityCommand("FiremodeCarbine", 1)), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
        UnitWeaponRemove(gv_playerHeroes[EventPlayer()], "Carbine");
        UnitWeaponAdd(gv_playerHeroes[EventPlayer()], "SteelSaberCarbine", null);
        lv_sIbehavior = "SteelSaber";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto476DD09F_val == 43) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Scouter", 1);
    }
    else if (auto476DD09F_val == 45) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HighExplosive", 1);
    }
    else if (auto476DD09F_val == 46) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "AntiTank", 1);
    }
    else if (auto476DD09F_val == 47) {
        lv_sIbehavior = "BornToLead";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
        lv_sIbehavior = "Instructor";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Inspirational", 1);
    }
    else if (auto476DD09F_val == 48) {
        lv_sIbehavior = "SpecialForces";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecialForces", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(0, "SpecialForces", 1);
        auto2214B077_g = UnitGroup("Infantry68WCombatMedic", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2214B077_u = UnitGroupCount(auto2214B077_g, c_unitCountAll);
        for (;; auto2214B077_u -= 1) {
            auto2214B077_var = UnitGroupUnitFromEnd(auto2214B077_g, auto2214B077_u);
            if (auto2214B077_var == null) { break; }
            UnitSetOwner(auto2214B077_var, 13, true);
        }
        autoFD41C7D0_g = UnitGroup("Infantry74DFlamethrower", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFD41C7D0_u = UnitGroupCount(autoFD41C7D0_g, c_unitCountAll);
        for (;; autoFD41C7D0_u -= 1) {
            autoFD41C7D0_var = UnitGroupUnitFromEnd(autoFD41C7D0_g, autoFD41C7D0_u);
            if (autoFD41C7D0_var == null) { break; }
            UnitSetOwner(autoFD41C7D0_var, 13, true);
        }
        auto8D8CF621_g = UnitGroup("InfantryAutomaticRifleman", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8D8CF621_u = UnitGroupCount(auto8D8CF621_g, c_unitCountAll);
        for (;; auto8D8CF621_u -= 1) {
            auto8D8CF621_var = UnitGroupUnitFromEnd(auto8D8CF621_g, auto8D8CF621_u);
            if (auto8D8CF621_var == null) { break; }
            UnitSetOwner(auto8D8CF621_var, 13, true);
        }
        autoAD5B45BE_g = UnitGroup("CombatEngineerMini", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoAD5B45BE_u = UnitGroupCount(autoAD5B45BE_g, c_unitCountAll);
        for (;; autoAD5B45BE_u -= 1) {
            autoAD5B45BE_var = UnitGroupUnitFromEnd(autoAD5B45BE_g, autoAD5B45BE_u);
            if (autoAD5B45BE_var == null) { break; }
            UnitSetOwner(autoAD5B45BE_var, 13, true);
        }
        auto90F8E9FB_g = UnitGroup("InfantryJavelinGunner", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto90F8E9FB_u = UnitGroupCount(auto90F8E9FB_g, c_unitCountAll);
        for (;; auto90F8E9FB_u -= 1) {
            auto90F8E9FB_var = UnitGroupUnitFromEnd(auto90F8E9FB_g, auto90F8E9FB_u);
            if (auto90F8E9FB_var == null) { break; }
            UnitSetOwner(auto90F8E9FB_var, 13, true);
        }
        autoA580C478_g = UnitGroup("InfantryRifleman", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA580C478_u = UnitGroupCount(autoA580C478_g, c_unitCountAll);
        for (;; autoA580C478_u -= 1) {
            autoA580C478_var = UnitGroupUnitFromEnd(autoA580C478_g, autoA580C478_u);
            if (autoA580C478_var == null) { break; }
            UnitSetOwner(autoA580C478_var, 13, true);
        }
        auto004DAA63_g = UnitGroup("InfantrySDM", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto004DAA63_u = UnitGroupCount(auto004DAA63_g, c_unitCountAll);
        for (;; auto004DAA63_u -= 1) {
            auto004DAA63_var = UnitGroupUnitFromEnd(auto004DAA63_g, auto004DAA63_u);
            if (auto004DAA63_var == null) { break; }
            UnitSetOwner(auto004DAA63_var, 13, true);
        }
        auto382AA8D6_g = UnitGroup("MiniM1SentryGun", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto382AA8D6_u = UnitGroupCount(auto382AA8D6_g, c_unitCountAll);
        for (;; auto382AA8D6_u -= 1) {
            auto382AA8D6_var = UnitGroupUnitFromEnd(auto382AA8D6_g, auto382AA8D6_u);
            if (auto382AA8D6_var == null) { break; }
            UnitSetOwner(auto382AA8D6_var, 13, true);
        }
    }
    else if (auto476DD09F_val == 49) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Loadout", 1);
        autoE2ACD9EE_g = UnitGroup("M1SentryGun", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE2ACD9EE_u = UnitGroupCount(autoE2ACD9EE_g, c_unitCountAll);
        for (;; autoE2ACD9EE_u -= 1) {
            autoE2ACD9EE_var = UnitGroupUnitFromEnd(autoE2ACD9EE_g, autoE2ACD9EE_u);
            if (autoE2ACD9EE_var == null) { break; }
            UnitRemove(autoE2ACD9EE_var);
        }
    }
    else if (auto476DD09F_val == 50) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GhostintheMachine", 1);
        autoB76F67B3_g = UnitGroup("M1SentryGun", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB76F67B3_u = UnitGroupCount(autoB76F67B3_g, c_unitCountAll);
        for (;; autoB76F67B3_u -= 1) {
            autoB76F67B3_var = UnitGroupUnitFromEnd(autoB76F67B3_g, autoB76F67B3_u);
            if (autoB76F67B3_var == null) { break; }
            UnitRemove(autoB76F67B3_var);
        }
    }
    else if (auto476DD09F_val == 51) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Overclock", 1);
    }
    else if (auto476DD09F_val == 53) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "EnergyEfficient", 1);
    }
    else if (auto476DD09F_val == 54) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "CrysisSuit", 1);
        lv_sIbehavior = "CrysisSuit";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto476DD09F_val == 55) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HeavyArtillery", 1);
        gv_iDFShellsGlobal += 50;
        lv_index = 0;
        for ( ; ( (auto7B6F81C4_ai >= 0 && lv_index <= auto7B6F81C4_ae) || (auto7B6F81C4_ai < 0 && lv_index >= auto7B6F81C4_ae) ) ; lv_index += auto7B6F81C4_ai ) {
            CatalogFieldValueSet(c_gameCatalogAbil, "CallForFireFSS", "Cost[" + IntToString(lv_index) + "].Charge.CountMax", EventPlayer(), IntToString(gv_iDFShellsGlobal));
            CatalogFieldValueSet(c_gameCatalogAbil, "CallForFireFSS", "Cost[" + IntToString(lv_index) + "].Charge.CountStart", EventPlayer(), IntToString(gv_iDFShellsGlobal));
        }
    }
    else if (auto476DD09F_val == 56) {
        gv_iDFRadius[EventPlayer()] = 10.0;
        gv_iDFShells[EventPlayer()] = 10;
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "RadioMan", 1);
        lv_sIbehavior = "RadioMan";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto476DD09F_val == 57) {
        lv_sIbehavior = "Survivalist";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Survivalist", 1);
    }
    else if (auto476DD09F_val == 59) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "WaveAmplifier", 1);
    }
    else if (auto476DD09F_val == 61) {
        lv_sIbehavior = "Phantasm";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Phantasm", 1);
    }
    else if (auto476DD09F_val == 62) {
        lv_sIbehavior = "WardenElite";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "WardenElite", 1);
    }
    else if (auto476DD09F_val == 63) {
        gv_scanDelay -= 4;
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "EnhancedScanners", 1);
    }
    else if (auto476DD09F_val == 65) {
        gv_cooldownPeriod -= 0.25;
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SteelBarrels", 1);
    }
    else if (auto476DD09F_val == 67) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "FieldTuning", 1);
    }
    else if (auto476DD09F_val == 71) {
        UnitBehaviorRemove(gv_playerHeroes[EventPlayer()], "EnhancedTargetingModuleLevel3", 1);
        lv_sIbehavior = "SpecializationPotential";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecializationPotential", 1);
    }
    else {
    }
    gv_playerSIbehaviors[lv_sIindex][EventPlayer()] = lv_sIbehavior;
    lv_temptext = StringToText("");
    lv_temptext2 = StringToText("");
    if ((gv_playerSIsused[1][EventPlayer()] != 0)) {
        lv_temptext = (lv_temptext + StringToText(StringSub(gv_sIabbreviation[gv_playerSIsused[1][EventPlayer()]], 1, 2)));
        lv_temptext2 = gv_sIname[gv_playerSIsused[1][EventPlayer()]];
    }

    if ((gv_playerSIsused[2][EventPlayer()] != 0)) {
        lv_temptext = (lv_temptext + StringExternal("Param/Value/65A9CA73"));
        lv_temptext = (lv_temptext + StringToText(StringSub(gv_sIabbreviation[gv_playerSIsused[2][EventPlayer()]], 1, 2)));
        lv_temptext2 = (lv_temptext2 + StringExternal("Param/Value/CE8F7A8A"));
        lv_temptext2 = (lv_temptext2 + gv_sIname[gv_playerSIsused[2][EventPlayer()]]);
    }

    if ((gv_mosspecificSIsused[1][EventPlayer()] != 0)) {
        if (((gv_mosspecificSIsused[1][EventPlayer()] <= 30))) {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/3CEFBA12"));
            lv_temptext = (lv_temptext + StringToText(StringSub(gv_SIBetaAbbreviation[gv_mosspecificSIsused[1][EventPlayer()]], 1, 2)));
            lv_temptext2 = (lv_temptext2 + StringExternal("Param/Value/01251E6E"));
            lv_temptext2 = (lv_temptext2 + gv_SIBetaName[gv_mosspecificSIsused[1][EventPlayer()]]);
        }
        else {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/77E11663"));
            lv_temptext = (lv_temptext + StringToText(StringSub(gv_sIabbreviation[gv_mosspecificSIsused[1][EventPlayer()]], 1, 2)));
            lv_temptext2 = (lv_temptext2 + StringExternal("Param/Value/8ACD426C"));
            lv_temptext2 = (lv_temptext2 + gv_sIname[gv_mosspecificSIsused[1][EventPlayer()]]);
        }
    }

    libNtve_gf_SetDialogItemText(gv_hUDDialogItems[8][EventPlayer()], lv_temptext, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[8][EventPlayer()], lv_temptext2, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MOSSpecificSIs_Init () {
    gt_MOSSpecificSIs = TriggerCreate("gt_MOSSpecificSIs_Func");
    TriggerAddEventDialogControl(gt_MOSSpecificSIs, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Buddy Selection
//--------------------------------------------------------------------------------------------------
bool gt_BattleBuddySelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_battleBuddySelectionScreen, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_miniButtons[1] == EventDialogControl()) && (gv_battleBuddySelected[EventPlayer()] == false)) {
        gv_battleBuddySelected[EventPlayer()] = true;
        gv_bBCount[EventPlayer()] += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_minitypes[1], c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(gv_playerHeroes[EventPlayer()]));
        UnitGroupAdd(gv_playerminis, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        UnitGroupAdd(gv_battleBuddy, UnitLastCreated());
        gf_RandomMiniFlagDecal(UnitLastCreated());
        gv_battleBuddyType[EventPlayer()] = 1;
        DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_miniButtons[2] == EventDialogControl()) && (gv_battleBuddySelected[EventPlayer()] == false)) {
        gv_automaticRiflemanBBCount += 1;
        gv_battleBuddySelected[EventPlayer()] = true;
        gv_bBCount[EventPlayer()] += 1;
        if ((gv_automaticRiflemanBBCount < 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_minitypes[2], c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(gv_playerHeroes[EventPlayer()]));
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            UnitGroupAdd(gv_battleBuddy, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
            gv_battleBuddyType[EventPlayer()] = 2;
            DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            gv_battleBuddySelected[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/9284AE89"));
        }
    }
    else if ((gv_miniButtons[3] == EventDialogControl()) && (gv_battleBuddySelected[EventPlayer()] == false)) {
        gv_combatEngineerBBCount += 1;
        gv_battleBuddySelected[EventPlayer()] = true;
        gv_bBCount[EventPlayer()] += 1;
        if ((gv_combatEngineerBBCount < 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_minitypes[3], c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(gv_playerHeroes[EventPlayer()]));
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            UnitGroupAdd(gv_battleBuddy, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
            gv_battleBuddyType[EventPlayer()] = 3;
            DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            gv_battleBuddySelected[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D3C00BF2"));
        }
    }
    else if ((gv_miniButtons[4] == EventDialogControl()) && (gv_battleBuddySelected[EventPlayer()] == false)) {
        gv_javelinGunnerBBCount += 1;
        gv_battleBuddySelected[EventPlayer()] = true;
        gv_bBCount[EventPlayer()] += 1;
        if ((gv_javelinGunnerBBCount < 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_minitypes[4], c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(gv_playerHeroes[EventPlayer()]));
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            UnitGroupAdd(gv_battleBuddy, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
            gv_battleBuddyType[EventPlayer()] = 4;
            DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            gv_battleBuddySelected[EventPlayer()] = false;
        }
    }
    else if ((gv_miniButtons[5] == EventDialogControl()) && (gv_battleBuddySelected[EventPlayer()] == false)) {
        gv__74DFlamethrowerBBCount += 1;
        gv_battleBuddySelected[EventPlayer()] = true;
        gv_bBCount[EventPlayer()] += 1;
        if ((gv__74DFlamethrowerBBCount < 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_minitypes[5], c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(gv_playerHeroes[EventPlayer()]));
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            UnitGroupAdd(gv_battleBuddy, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
            gv_battleBuddyType[EventPlayer()] = 5;
            DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            gv_battleBuddySelected[EventPlayer()] = false;
        }
    }
    else if ((gv_miniButtons[6] == EventDialogControl()) && (gv_battleBuddySelected[EventPlayer()] == false)) {
        gv_infantrySDMBBCount += 1;
        gv_battleBuddySelected[EventPlayer()] = true;
        gv_bBCount[EventPlayer()] += 1;
        if ((gv_infantrySDMBBCount < 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_minitypes[6], c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(gv_playerHeroes[EventPlayer()]));
            UnitGroupAdd(gv_playerminis, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            UnitGroupAdd(gv_battleBuddy, UnitLastCreated());
            gf_RandomMiniFlagDecal(UnitLastCreated());
            gv_battleBuddyType[EventPlayer()] = 6;
            DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            gv_battleBuddySelected[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/C25F72AD"));
        }
    }
    else if ((gv_miniButtons[7] == EventDialogControl()) && (gv_battleBuddySelected[EventPlayer()] == false)) {
        gv_battleBuddySelected[EventPlayer()] = true;
        gv_bBCount[EventPlayer()] += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_minitypes[7], c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(gv_playerHeroes[EventPlayer()]));
        UnitGroupAdd(gv_playerminis, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        UnitGroupAdd(gv_battleBuddy, UnitLastCreated());
        gf_RandomMiniFlagDecal(UnitLastCreated());
        gv_battleBuddyType[EventPlayer()] = 7;
        DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattleBuddySelection_Init () {
    gt_BattleBuddySelection = TriggerCreate("gt_BattleBuddySelection_Func");
    TriggerAddEventDialogControl(gt_BattleBuddySelection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Buddy Dies
//--------------------------------------------------------------------------------------------------
bool gt_BattleBuddyDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingunit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dyingunit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((gv_mod_1life == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_battleBuddy, lv_dyingunit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_battleBuddySelected[UnitGetOwner(lv_dyingunit)] == true)) {
        gv_battleBuddySelected[EventPlayer()] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattleBuddyDies_Init () {
    gt_BattleBuddyDies = TriggerCreate("gt_BattleBuddyDies_Func");
    TriggerEnable(gt_BattleBuddyDies, false);
    TriggerAddEventUnitDied(gt_BattleBuddyDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -beer
//--------------------------------------------------------------------------------------------------
bool gt_beer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;
    int lv_user;

    // Automatic Variable Declarations
    playergroup auto941B918E_g;
    int auto941B918E_var;

    // Variable Initialization
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-931511") || (PlayerHandle(EventPlayer()) == "1-S2-1-2424587") || gf_DevHandles(PlayerHandle(EventPlayer()))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto941B918E_g = gv_players;
    auto941B918E_var = -1;
    while (true) {
        auto941B918E_var = PlayerGroupNextPlayer(auto941B918E_g, auto941B918E_var);
        if (auto941B918E_var < 0) { break; }
        if ((auto941B918E_var == EventPlayer())) {
            UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "TraumaticBrainInjury", gv_playerHeroes[EventPlayer()], 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_beer_Init () {
    gt_beer = TriggerCreate("gt_beer_Func");
    TriggerAddEventChatMessage(gt_beer, c_playerAny, "-beer", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -give Command
//--------------------------------------------------------------------------------------------------
bool gt_giveCommand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;
    int lv_user;

    // Automatic Variable Declarations
    unitgroup autoBF06E754_g;
    int autoBF06E754_u;
    unit autoBF06E754_var;
    unitgroup auto777EBD33_g;
    int auto777EBD33_u;
    unit auto777EBD33_var;

    // Variable Initialization
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringToInt(StringWord(lv_message, 2)) >= 1) && (StringToInt(StringWord(lv_message, 2)) <= 12) && (StringWord(lv_message, 2) != null) && (TechTreeUpgradeCount(StringToInt(StringWord(lv_message, 2)), "SpecialForces", c_techCountCompleteOnly) == 0)) {
        autoBF06E754_g = UnitGroupSelected(lv_user);
        autoBF06E754_u = UnitGroupCount(autoBF06E754_g, c_unitCountAll);
        for (;; autoBF06E754_u -= 1) {
            autoBF06E754_var = UnitGroupUnitFromEnd(autoBF06E754_g, autoBF06E754_u);
            if (autoBF06E754_var == null) { break; }
            if ((UnitGetOwner(autoBF06E754_var) == lv_user) && (PlayerStatus(StringToInt(StringWord(lv_message, 2))) == c_playerStatusActive)) {
                if (((UnitGetType(autoBF06E754_var) == "InfantryAutomaticRifleman") || (UnitGetType(autoBF06E754_var) == "InfantryAutomaticRifleman2") || (UnitGetType(autoBF06E754_var) == "InfantryRifleman") || (UnitGetType(autoBF06E754_var) == "InfantryRifleman2") || (UnitGetType(autoBF06E754_var) == "InfantrySDM") || (UnitGetType(autoBF06E754_var) == "InfantrySDM2") || (UnitGetType(autoBF06E754_var) == "InfantryJavelinGunner") || (UnitGetType(autoBF06E754_var) == "InfantryJavelinGunner2") || (UnitGetType(autoBF06E754_var) == "Infantry68WCombatMedic") || (UnitGetType(autoBF06E754_var) == "Infantry68WCombatMedic2") || (UnitGetType(autoBF06E754_var) == "Infantry74DFlamethrower") || (UnitGetType(autoBF06E754_var) == "Infantry74DFlamethrower2") || (UnitGetType(autoBF06E754_var) == "CombatEngineerMini") || (UnitGetType(autoBF06E754_var) == "CombatEngineerMini2"))) {
                    auto777EBD33_g = UnitGroup("MiniM1SentryGun", UnitGetOwner(auto777EBD33_var), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto777EBD33_u = UnitGroupCount(auto777EBD33_g, c_unitCountAll);
                    for (;; auto777EBD33_u -= 1) {
                        auto777EBD33_var = UnitGroupUnitFromEnd(auto777EBD33_g, auto777EBD33_u);
                        if (auto777EBD33_var == null) { break; }
                        UnitRemove(auto777EBD33_var);
                    }
                    UnitSetOwner(autoBF06E754_var, StringToInt(StringWord(lv_message, 2)), true);
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_giveCommand_Init () {
    gt_giveCommand = TriggerCreate("gt_giveCommand_Func");
    TriggerAddEventChatMessage(gt_giveCommand, c_playerAny, "-give", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Functional Buttons
//--------------------------------------------------------------------------------------------------
bool gt_FunctionalButtons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoD49FD620_g;
    int autoD49FD620_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD49FD620_g = gv_players;
    autoD49FD620_var = -1;
    while (true) {
        autoD49FD620_var = PlayerGroupNextPlayer(autoD49FD620_g, autoD49FD620_var);
        if (autoD49FD620_var < 0) { break; }
        DialogCreate(250, 230, c_anchorBottom, gv_funcdialogoffsets[1][autoD49FD620_var], gv_funcdialogoffsets[2][autoD49FD620_var], true);
        gv_functionaldialog[autoD49FD620_var] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(gv_functionaldialog[autoD49FD620_var], PlayerGroupSingle(autoD49FD620_var), false);
    }
    libNtve_gf_DisplayScreenButton(6, StringExternal("Param/Value/9359374C"), 128, 40, c_anchorBottomRight, 589, 166, null);
    gv_functionaldialogbuttons[1] = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(6, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/26C3D95C"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_DisplayScreenButton(7, StringExternal("Param/Value/D01E0A55"), 128, 40, c_anchorBottomRight, 464, 166, null);
    gv_functionaldialogbuttons[2] = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(7, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed_2.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover_2.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E5F0D9B5"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_DisplayScreenButton(8, StringExternal("Param/Value/E363590C"), 128, 40, c_anchorBottomRight, 589, 119, null);
    gv_functionaldialogbuttons[3] = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(8, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E78DDECE"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_DisplayScreenButton(9, StringExternal("Param/Value/3BA6DAA9"), 128, 40, c_anchorBottomRight, 464, 119, null);
    gv_functionaldialogbuttons[4] = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(9, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed_2.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover_2.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/2FEA32AD"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_DisplayScreenButton(10, StringExternal("Param/Value/72F4F4E4"), 128, 40, c_anchorBottomRight, 589, 72, null);
    gv_functionaldialogbuttons[5] = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(10, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/CDF34A49"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_DisplayScreenButton(11, StringExternal("Param/Value/29B63CFF"), 128, 40, c_anchorBottomRight, 464, 72, null);
    gv_functionaldialogbuttons[6] = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(11, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed_2.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover_2.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/560A2D56"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_DisplayScreenButton(12, StringExternal("Param/Value/0CA87FBE"), 128, 40, c_anchorBottomRight, 589, 25, null);
    gv_functionaldialogbuttons[7] = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(12, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/18E90D84"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_DisplayScreenButton(13, StringExternal("Param/Value/ADE1509B"), 128, 40, c_anchorBottomRight, 464, 25, null);
    gv_functionaldialogbuttons[8] = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(13, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed_2.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover_2.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/8D482922"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_DisplayScreenButton(14, StringExternal("Param/Value/DD894BD2"), 128, 40, c_anchorBottomRight, 714, 25, null);
    gv_functionaldialogbuttons[9] = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(14, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed_2.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover_2.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/D0497483"), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    gf_DisplayUIButtons(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FunctionalButtons_Init () {
    gt_FunctionalButtons = TriggerCreate("gt_FunctionalButtons_Func");
    TriggerAddEventTimeElapsed(gt_FunctionalButtons, 4.2, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command Panel
//--------------------------------------------------------------------------------------------------
bool gt_CommandPanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_currentrank;
    text lv_temptext;
    int lv_loopint;
    bool lv_changed;
    int lv_fireteam;
    int lv_placement;
    int lv_int;
    string lv_image;
    string lv_item;
    int lv_itemcount;
    bool lv_magazine;
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    const int autoC7A52F99_ae = 12;
    const int autoC7A52F99_ai = 1;
    unitgroup auto2B7E3FD2_g;
    int auto2B7E3FD2_u;
    unit auto2B7E3FD2_var;
    unitgroup auto0D7D39A9_g;
    int auto0D7D39A9_u;
    unit auto0D7D39A9_var;
    playergroup autoE85EA4A7_g;
    int autoE85EA4A7_var;
    const int auto2E4356C9_ae = gv_itemCount;
    const int auto2E4356C9_ai = 1;
    const int auto5B159231_ae = 4;
    const int auto5B159231_ai = 1;
    const int auto8F05C02B_ae = 4;
    const int auto8F05C02B_ai = 1;
    playergroup auto12B9BC42_g;
    int auto12B9BC42_var;
    playergroup auto7F2BBAE8_g;
    int auto7F2BBAE8_var;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_currentrank = gf_GetPlayerRank(EventPlayer());
    lv_temptext = StringToText("");
    lv_image = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_functionaldialogbuttons[1]) || (EventDialogControl() == gv_functionaldialogbuttons[2]) || (EventDialogControl() == gv_functionaldialogbuttons[3]) || (EventDialogControl() == gv_functionaldialogbuttons[4]) || (EventDialogControl() == gv_functionaldialogbuttons[5]) || (EventDialogControl() == gv_functionaldialogbuttons[6]) || (EventDialogControl() == gv_functionaldialogbuttons[7]) || (EventDialogControl() == gv_functionaldialogbuttons[8]) || (EventDialogControl() == gv_functionaldialogbuttons[9]) || (EventDialogControl() == gv_statusDialogItems[0][0]) || (EventDialogControl() == gv_fireteamdialogbuttons[0]) || (EventDialogControl() == gv_fireteamdialogbuttons[1]) || (EventDialogControl() == gv_fireteamdialogbuttons[2]) || (EventDialogControl() == gv_fireteamdialogbuttons[3]) || (EventDialogControl() == gv_fireteamdialogbuttons[4]) || (EventDialogControl() == gv_hotkeyDialogButtons[2]) || (EventDialogControl() == gv_hotkeyDialogButtons[0]) || (EventDialogControl() == gv_inventoryButton) || (EventDialogControl() == gv_itemScannerDialogButtons[2]) || (EventDialogControl() == gv_itemScannerBoxes[1]) || (EventDialogControl() == gv_itemScannerBoxes[2]) || (EventDialogControl() == gv_itemScannerBoxes[3]) || (EventDialogControl() == gv_itemScannerDialogButtons[1]) || (EventDialogControl() == gv_hUDDialogItems[10][0]) || (EventDialogControl() == gv_sIDialogButtons[26]) || (EventDialogControl() == gv_voteKickButton) || (EventDialogControl() == gv_cameraButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_voteKickButton)) {
        if ((TriggerIsEnabled(gt_KickPlayerPressed) == false)) {
            TriggerEnable(gt_KickPlayerPressed, true);
            TriggerEnable(gt_KickVoteYesNo, true);
        }
        if ((DialogIsVisible(gv_voteKickDialog, EventPlayer()) == true)) {
            DialogSetVisible(gv_voteKickDialog, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            if ((gf_NumberofPlayers() >= 4)) {
                DialogSetVisible(gv_voteKickDialog, PlayerGroupSingle(EventPlayer()), true);
                lv_i = 1;
                for ( ; ( (autoC7A52F99_ai >= 0 && lv_i <= autoC7A52F99_ae) || (autoC7A52F99_ai < 0 && lv_i >= autoC7A52F99_ae) ) ; lv_i += autoC7A52F99_ai ) {
                    if (((PlayerStatus(lv_i) == c_playerStatusActive) && (PlayerType(lv_i) == c_playerTypeUser) && (lv_i != EventPlayer()))) {
                        DialogControlSetVisible(gv_voteKickPlayers[lv_i], PlayerGroupAll(), true);
                    }
                    else {
                        DialogControlSetVisible(gv_voteKickPlayers[lv_i], PlayerGroupAll(), false);
                    }
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/F7858B45"));
            }
        }
    }
    else if ((EventDialogControl() == gv_sIDialogButtons[26]) && (DialogIsVisible(gv_sIDialog, EventPlayer()) == true) && (gv_enabledBB[EventPlayer()] == true)) {
        if ((gv_battleBuddySelected[EventPlayer()] == false) && (gv_bBCount[EventPlayer()] != 2)) {
            if ((DialogIsVisible(gv_battleBuddySelectionScreen, EventPlayer()) == false)) {
                DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupSingle(EventPlayer()), true);
            }
            else {
                DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupSingle(EventPlayer()), false);
            }
        }
    }
    else if ((EventDialogControl() == gv_hUDDialogItems[10][0])) {
        if ((DialogIsVisible(gv_hUDDialog, EventPlayer()) == false)) {
            SoundPlay(SoundLink("UI_Starmap_Popup", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            DialogSetVisible(gv_hUDDialog, PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            SoundPlay(SoundLink("UI_ScreenWipe", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            DialogSetVisible(gv_hUDDialog, PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else if ((EventDialogControl() == gv_itemScannerDialogButtons[1])) {
        if ((libNtve_gf_DialogItemIsChecked(gv_itemScannerBoxes[1], lv_player) == false) && (libNtve_gf_DialogItemIsChecked(gv_itemScannerBoxes[2], lv_player) == false) && (libNtve_gf_DialogItemIsChecked(gv_itemScannerBoxes[3], lv_player) == false)) {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/AD1A1A79"));
            return true;
        }
        libE6C8C21C_gf_ForceAbilityToCooldown(gv_playerHeroes[lv_player], AbilityCommand("ItemScanner", 0), c_spendLocationAll);
        DialogSetVisible(gv_itemScannerMenuDialog, PlayerGroupSingle(lv_player), false);
        if ((libNtve_gf_DialogItemIsChecked(gv_itemScannerBoxes[1], lv_player) == true)) {
            lv_item = gf_GetArmorType(DialogControlGetSelectedItem(gv_itemScannerPullDownTabs[1], lv_player));
        }
        else if ((libNtve_gf_DialogItemIsChecked(gv_itemScannerBoxes[2], lv_player) == true)) {
            lv_item = gf_GetWeaponType(DialogControlGetSelectedItem(gv_itemScannerPullDownTabs[2], lv_player));
        }
        else if ((libNtve_gf_DialogItemIsChecked(gv_itemScannerBoxes[3], lv_player) == true)) {
            lv_item = gf_GetItemType(DialogControlGetSelectedItem(gv_itemScannerPullDownTabs[3], lv_player));
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (StringExternal("Param/Value/1748CD2B") + UnitTypeGetName(lv_item) + StringExternal("Param/Value/B1B286BE")));
        Wait((gv_scanDelay / 2), c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/6495666B"));
        Wait((gv_scanDelay / 2), c_timeGame);
        auto2B7E3FD2_g = UnitGroup(lv_item, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2B7E3FD2_u = UnitGroupCount(auto2B7E3FD2_g, c_unitCountAll);
        for (;; auto2B7E3FD2_u -= 1) {
            auto2B7E3FD2_var = UnitGroupUnitFromEnd(auto2B7E3FD2_g, auto2B7E3FD2_u);
            if (auto2B7E3FD2_var == null) { break; }
            if ((UnitGetType(auto2B7E3FD2_var) == lv_item)) {
                lv_itemcount += 1;
                if ((UnitGetType(auto2B7E3FD2_var) == "Magazines")) {
                    lv_magazine = true;
                }
            }
        }
        if ((lv_itemcount > 0)) {
            if (((lv_itemcount == 1) || (lv_magazine == true))) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/80F40BDE") + IntToText(lv_itemcount) + StringExternal("Param/Value/31097947") + UnitTypeGetName(lv_item) + StringExternal("Param/Value/EB7E4AE3")));
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/7C87430B") + IntToText(lv_itemcount) + StringExternal("Param/Value/05297263") + UnitTypeGetName(lv_item) + StringExternal("Param/Value/F04E4812")));
            }
            auto0D7D39A9_g = UnitGroup(lv_item, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto0D7D39A9_u = UnitGroupCount(auto0D7D39A9_g, c_unitCountAll);
            for (;; auto0D7D39A9_u -= 1) {
                auto0D7D39A9_var = UnitGroupUnitFromEnd(auto0D7D39A9_g, auto0D7D39A9_u);
                if (auto0D7D39A9_var == null) { break; }
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(auto0D7D39A9_var), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 6.0, 270.0);
                PingSetTooltip(PingLastCreated(), UnitTypeGetName(lv_item));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/72BBB22D") + UnitTypeGetName(lv_item) + StringExternal("Param/Value/98285448")));
        }
    }
    else if ((((EventDialogControl() == gv_itemScannerBoxes[1]) || (EventDialogControl() == gv_itemScannerBoxes[2]) || (EventDialogControl() == gv_itemScannerBoxes[3])) || (DialogIsVisible(gv_itemScannerMenuDialog, EventPlayer()) == true))) {
        if ((EventDialogControl() == gv_itemScannerBoxes[1])) {
            if ((libNtve_gf_DialogItemIsChecked(gv_itemScannerBoxes[1], lv_player) == true)) {
                libNtve_gf_SetDialogItemChecked(gv_itemScannerBoxes[2], false, PlayerGroupSingle(lv_player));
                libNtve_gf_SetDialogItemChecked(gv_itemScannerBoxes[3], false, PlayerGroupSingle(lv_player));
            }
        }
        else if ((EventDialogControl() == gv_itemScannerBoxes[2])) {
            if ((libNtve_gf_DialogItemIsChecked(gv_itemScannerBoxes[2], lv_player) == true)) {
                libNtve_gf_SetDialogItemChecked(gv_itemScannerBoxes[1], false, PlayerGroupSingle(lv_player));
                libNtve_gf_SetDialogItemChecked(gv_itemScannerBoxes[3], false, PlayerGroupSingle(lv_player));
            }
        }
        else if ((EventDialogControl() == gv_itemScannerBoxes[3])) {
            if ((libNtve_gf_DialogItemIsChecked(gv_itemScannerBoxes[3], lv_player) == true)) {
                libNtve_gf_SetDialogItemChecked(gv_itemScannerBoxes[1], false, PlayerGroupSingle(lv_player));
                libNtve_gf_SetDialogItemChecked(gv_itemScannerBoxes[2], false, PlayerGroupSingle(lv_player));
            }
        }
    }
    else if ((EventDialogControl() == gv_itemScannerDialogButtons[2])) {
        if ((DialogIsVisible(gv_itemScannerMenuDialog, EventPlayer()) == true)) {
            DialogSetVisible(gv_itemScannerMenuDialog, PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else if ((EventDialogControl() == gv_inventoryButton)) {
        autoE85EA4A7_g = gv_players;
        autoE85EA4A7_var = -1;
        while (true) {
            autoE85EA4A7_var = PlayerGroupNextPlayer(autoE85EA4A7_g, autoE85EA4A7_var);
            if (autoE85EA4A7_var < 0) { break; }
            if ((EventPlayer() == autoE85EA4A7_var)) {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/26AC043D"));
                lv_temptext = (lv_temptext + gf_TextImage(gf_GetPlayerImage(autoE85EA4A7_var), 35));
            }
            else {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/A5ED654F"));
                lv_temptext = (lv_temptext + gf_TextImage(libNtve_gf_DialogItemImage(gv_statusDialogItems[4][autoE85EA4A7_var], autoE85EA4A7_var), 35));
            }
            lv_temptext = (lv_temptext + StringExternal("Param/Value/4C4B7908"));
            lv_temptext = (lv_temptext + TextWithColor(PlayerName(autoE85EA4A7_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoE85EA4A7_var, false))));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/08D07176"));
            if (((UnitGetType(gv_playerHeroes[autoE85EA4A7_var]) == gv_mOS[4][0]) || (UnitGetType(gv_playerHeroes[autoE85EA4A7_var]) == gv_mOS[4][1]))) {
                lv_temptext = (lv_temptext + (StringExternal("Param/Value/9AAB0E09") + IntToText(PlayerGetPropertyInt(autoE85EA4A7_var, c_playerPropTerrazine)) + StringExternal("Param/Value/84C57A90")));
            }
            else {
                lv_temptext = (lv_temptext + (StringExternal("Param/Value/D21E7800") + IntToText(PlayerGetPropertyInt(autoE85EA4A7_var, c_playerPropVespene)) + StringExternal("Param/Value/F8F38DAC")));
            }
            lv_temptext = (lv_temptext + StringExternal("Param/Value/2A2B349A"));
            lv_int = 1;
            for ( ; ( (auto2E4356C9_ai >= 0 && lv_int <= auto2E4356C9_ae) || (auto2E4356C9_ai < 0 && lv_int >= auto2E4356C9_ae) ) ; lv_int += auto2E4356C9_ai ) {
                if ((gv_itemInInventory[lv_int][autoE85EA4A7_var] == true)) {
                    lv_temptext = (lv_temptext + gf_TextImage(gv_itemImages[lv_int], 35));
                }
            }
            lv_temptext = (lv_temptext + StringExternal("Param/Value/84F30E41"));
        }
        gf_DisplayVisorTextDialog(lv_temptext, EventPlayer());
    }
    else if (((EventDialogControl() == gv_hotkeyDialogButtons[2]) || (EventDialogControl() == gv_hotkeyDialogButtons[0]))) {
        if ((EventDialogControl() == gv_hotkeyDialogButtons[0]) && (gv_customCommandCard[EventPlayer()] == true) && (DialogIsVisible(gv_hotKeyDialog, EventPlayer()) == false)) {
            DialogSetVisible(gv_hotKeyDialog, PlayerGroupSingle(EventPlayer()), true);
        }
        else if ((DialogIsVisible(gv_hotKeyDialog, EventPlayer()) == true) && (EventDialogControl() == gv_hotkeyDialogButtons[2])) {
            DialogSetVisible(gv_hotKeyDialog, PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else if (((EventDialogControl() == gv_fireteamdialogbuttons[1]) || (EventDialogControl() == gv_fireteamdialogbuttons[2]) || (EventDialogControl() == gv_fireteamdialogbuttons[3]) || (EventDialogControl() == gv_fireteamdialogbuttons[4])) && (DialogIsVisible(DialogControlGetDialog(EventDialogControl()), EventPlayer()) == true)) {
        if ((gv_playersfireteam[EventPlayer()] == 0)) {
            lv_fireteam = 1;
            for ( ; ( (auto5B159231_ai >= 0 && lv_fireteam <= auto5B159231_ae) || (auto5B159231_ai < 0 && lv_fireteam >= auto5B159231_ae) ) ; lv_fireteam += auto5B159231_ai ) {
                if ((EventDialogControl() == gv_fireteamdialogbuttons[lv_fireteam])) {
                    if ((PlayerGroupCount(gv_fireteamGroups[lv_fireteam]) == 0)) {
                        PlayerGroupAdd(gv_fireteamGroups[lv_fireteam], EventPlayer());
                        gv_playersfireteam[EventPlayer()] = lv_fireteam;
                        gv_fireteamTLs[lv_fireteam] = EventPlayer();
                        libNtve_gf_SetDialogItemText(gv_fireteamlabels[1][lv_fireteam], (StringExternal("Param/Value/722C38EA") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))), PlayerGroupAll());
                        gv_fireteamPlacement[lv_fireteam][EventPlayer()] = 1;
                        gv_placementOccupied[1][lv_fireteam] = true;
                        break;
                    }
                    else {
                        if ((PlayerGroupCount(gv_fireteamGroups[lv_fireteam]) < 4) && (PlayerGroupCount(gv_fireteamGroups[lv_fireteam]) > 0)) {
                            lv_placement = 1;
                            for ( ; ( (auto8F05C02B_ai >= 0 && lv_placement <= auto8F05C02B_ae) || (auto8F05C02B_ai < 0 && lv_placement >= auto8F05C02B_ae) ) ; lv_placement += auto8F05C02B_ai ) {
                                if ((gv_placementOccupied[lv_placement][lv_fireteam] == false)) {
                                    gf_AddRemovePlayerFromFireteam(lv_placement, EventPlayer(), lv_fireteam, ge_Fireteam_Join);
                                    break;
                                }
                            }
                        }
                        else {
                            libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/6B420A60"), SoundLink("UI_GenericError", -1));
                        }
                    }
                }
            }
        }
        else {
            lv_fireteam = gv_playersfireteam[EventPlayer()];
            gf_AddRemovePlayerFromFireteam(gv_fireteamPlacement[lv_fireteam][EventPlayer()], EventPlayer(), lv_fireteam, ge_Fireteam_Leave);
        }
    }
    else if ((EventDialogControl() == gv_fireteamdialogbuttons[0])) {
        if ((DialogIsVisible(gv_fireteamDialog, EventPlayer()) == true)) {
            DialogSetVisible(gv_fireteamDialog, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            DialogSetVisible(gv_fireteamDialog, PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_sIDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_hUDDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_sM.lv_dialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_accessoryDialog, PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else if ((EventDialogControl() == gv_statusDialogItems[0][0])) {
        if ((DialogIsVisible(gv_statusDialog, EventPlayer()) == false)) {
            DialogSetVisible(gv_statusDialog, PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            DialogSetVisible(gv_statusDialog, PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else if ((EventDialogControl() == gv_functionaldialogbuttons[2])) {
        auto12B9BC42_g = gv_players;
        auto12B9BC42_var = -1;
        while (true) {
            auto12B9BC42_var = PlayerGroupNextPlayer(auto12B9BC42_g, auto12B9BC42_var);
            if (auto12B9BC42_var < 0) { break; }
            if ((UnitIsAlive(gv_playerHeroes[auto12B9BC42_var]) == true) && (libNtve_gf_PlayerIsEnemy(auto12B9BC42_var, EventPlayer(), libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(gv_playerHeroes[auto12B9BC42_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto12B9BC42_var, false)), 7.0, 270.0);
                PingSetUnit(PingLastCreated(), gv_playerHeroes[auto12B9BC42_var]);
                PingSetTooltip(PingLastCreated(), PlayerName(auto12B9BC42_var));
            }

        }
    }
    else if ((EventDialogControl() == gv_functionaldialogbuttons[3])) {
        if ((DialogIsVisible(gv_sIDialog, EventPlayer()) == false)) {
            DialogSetVisible(gv_sIDialog, PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_sM.lv_dialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_fireteamDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_accessoryDialog, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            DialogSetVisible(gv_sIDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else if ((EventDialogControl() == gv_functionaldialogbuttons[4])) {
        auto7F2BBAE8_g = gv_players;
        auto7F2BBAE8_var = -1;
        while (true) {
            auto7F2BBAE8_var = PlayerGroupNextPlayer(auto7F2BBAE8_g, auto7F2BBAE8_var);
            if (auto7F2BBAE8_var < 0) { break; }
            if ((UnitIsAlive(gv_playerHeroes[auto7F2BBAE8_var]) == false) && (gv_playerHeroes[auto7F2BBAE8_var] != null)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(gv_playerHeroes[auto7F2BBAE8_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto7F2BBAE8_var, false)), 7.0, 270.0);
                PingSetUnit(PingLastCreated(), gv_playerHeroes[auto7F2BBAE8_var]);
                PingSetTooltip(PingLastCreated(), PlayerName(auto7F2BBAE8_var));
            }

        }
    }
    else if ((EventDialogControl() == gv_functionaldialogbuttons[5])) {
        if ((DialogIsVisible(gv_unlockDialog, EventPlayer()) == false)) {
            DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_sIDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_sM.lv_dialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_fireteamDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_accessoryDialog, PlayerGroupSingle(EventPlayer()), false);
            if ((gv_playerHeroes[lv_player] != null) && (gv_unitModelWeaponDisplay[lv_player] == false)) {
                gv_unitModelWeaponDisplay[lv_player] = true;
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), libNtve_gf_TextureSelectByID(UserDataGetGameLink("Camos", UserDataInstance("Camos", gv_camo_Set[lv_player]), "Camo", 1)));
                if ((gv_decal_Set[lv_player] == 0)) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), gv_rankActorMsg[gv_playerRankSet[lv_player]][gf_GetPlayerRank(lv_player)]);
                }
                else {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), libNtve_gf_TextureSelectByID(UserDataGetGameLink("Decals", UserDataInstance("Decals", gv_decal_Set[lv_player]), "Decals", 1)));
                }
                if (((UnitGetType(gv_playerHeroes[lv_player]) == "PlatoonLeader") || (UnitGetType(gv_playerHeroes[lv_player]) == "PlatoonLeader2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel ArrayPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel TacticalVisor {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "CavalryScout") || (UnitGetType(gv_playerHeroes[lv_player]) == "CavalryScout2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel CommsPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel ScoutVisor {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "FireSupportSpecialist") || (UnitGetType(gv_playerHeroes[lv_player]) == "FireSupportSpecialist2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel CommsPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel CommsHeadset {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "JavelinGunner") || (UnitGetType(gv_playerHeroes[lv_player]) == "JavelinGunner2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel StandardVisionVisor {} AMFilterHead SOpAttachHardPoint04");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel BackPack {} {Back 0} Back_Attach");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "RiflemanOld") || (UnitGetType(gv_playerHeroes[lv_player]) == "RiflemanOld2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel BackPack {} {Back 0} Back_Attach");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "CombatMedic") || (UnitGetType(gv_playerHeroes[lv_player]) == "CombatMedic2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel BackPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel MedicalScanVisor {} AMFilterHead SOpAttachHardPoint04");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel MedicShield {} {Shield 0} Shield_Armour_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel MedicChemicals {} {Forearm 0} Arm_Left_Attach");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "AutomaticRifleman") || (UnitGetType(gv_playerHeroes[lv_player]) == "AutomaticRifleman2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel AutoRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel AmmoBackPack {} {Back 0} Back_Attach");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "Cyborg") || (UnitGetType(gv_playerHeroes[lv_player]) == "Cyborg2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel AutoRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel AmmoBackPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel MedicalScanVisor {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "CombatEngineer") || (UnitGetType(gv_playerHeroes[lv_player]) == "CombatEngineer2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel ShotgunW {} AMFilterWeapon00 SOpAttachWeapon00");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "Enforcer") || (UnitGetType(gv_playerHeroes[lv_player]) == "Enforcer2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel ShotgunW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel AmmoBackPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel EnforcerShield {} {Shield 0} Shield_Armour_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel PistolRightLeg {} {Hardpoint 9} Leg_Right_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel LegPackLeftLeg {} {Hardpoint 7} Leg_Left_Attach");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "CommandoHero") || (UnitGetType(gv_playerHeroes[lv_player]) == "CommandoHero2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel CommandoAssaultRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel CommsPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel CommsHeadset {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "GhostHero") || (UnitGetType(gv_playerHeroes[lv_player]) == "GhostHero2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel PlasmaRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel Binoculars {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "OrbitalSupportSpecialist") || (UnitGetType(gv_playerHeroes[lv_player]) == "OrbitalSupportSpecialist2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel PlasmaRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel Binoculars {} AMFilterHead SOpAttachHardPoint04");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel CommsPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel CommsHeadset {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "LaserEnforcer") || (UnitGetType(gv_playerHeroes[lv_player]) == "LaserEnforcer2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel D19LaserRifleW {} AMFilterWeapon00 {SOpAttachWeapon00 WeaponOffsetD}");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel LaserEnforcerShield {} {Shield 0} Shield_Armour_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel PistolRightLeg {} {Hardpoint 9} Leg_Right_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel LegPackLeftLeg {} {Hardpoint 7} Leg_Left_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel CommsPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel TacticalVisor {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "Flamethrower") || (UnitGetType(gv_playerHeroes[lv_player]) == "Flamethrower2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel FlamethrowerW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel FlameThrowerMask {} AMFilterHead SOpAttachHardPoint04");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel FlamethrowerTankPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel FlamethrowerWeaponFlame {} AMFilterWeapon00 SOpAttachWeapon00");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "SquadDesignatedMarksman") || (UnitGetType(gv_playerHeroes[lv_player]) == "SquadDesignatedMarksman2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel SDMRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel PistolLeftLeg {} {Hardpoint 7} Leg_Left_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel WaistPack {} {Waist 0} Waist_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel Binoculars {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "Specter") || (UnitGetType(gv_playerHeroes[lv_player]) == "Specter2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel AS50W {} AMFilterWeapon00 {SOpAttachWeapon00 WeaponOffsetA}");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel ScoutVisor {} AMFilterHead Head_Attach");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel WaistPack {} {Waist 0} Waist_Attach");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "HeavyGunner") || (UnitGetType(gv_playerHeroes[lv_player]) == "HeavyGunner2"))) {
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel S41RipSAWW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_player]), "AttachModel AmmoBackPack {} {Back 0} Back_Attach");
                }
            }
        }
        else {
            DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else if ((EventDialogControl() == gv_functionaldialogbuttons[6])) {
        if ((DialogIsVisible(gv_inventory, EventPlayer()) == true)) {
            DialogSetVisible(gv_inventory, PlayerGroupSingle(EventPlayer()), false);
        }
        if (gf_DevHandles(PlayerHandle(EventPlayer()))) {
            if ((TextTagVisible(gv_heroNameTag[EventPlayer()], EventPlayer()) == false)) {
                TextTagShow(gv_heroNameTag[EventPlayer()], PlayerGroupAll(), true);
            }
            else {
                TextTagShow(gv_heroNameTag[EventPlayer()], PlayerGroupAll(), false);
            }
        }
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/CBE96CE9") + gv_rankPrefix[gv_playerRankSet[EventPlayer()]][lv_currentrank]));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/2E629DC1"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/B5164E83") + IntToText(gv_rankXPMin[gv_playerRankSet[EventPlayer()]][(lv_currentrank + 1)]) + StringExternal("Param/Value/A0372216") + gv_rankPrefix[gv_playerRankSet[EventPlayer()]][(lv_currentrank + 1)]));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/8E2FDBF4"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/7B1DABC0") + IntToText(gv_playerExperience[1][EventPlayer()])));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/1CF3294B"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/FB47F456") + IntToText(gv_playerExperience[2][EventPlayer()])));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/81E5FAAF"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/730123DF") + IntToText(gv_playerExperience[3][EventPlayer()])));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/051EC219"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/B091489F") + IntToText(gv_playerGamesPlayed[EventPlayer()])));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/5EA9A7A3"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/81C7899F") + IntToText(gv_playerAvgGameTime[EventPlayer()])));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/8A460B49"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/DFE28A19") + IntToText(gv_playerRevivesGame[EventPlayer()])));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/57AD5C0F"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/E20834ED") + IntToText(gv_playerhits[EventPlayer()])));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/13701C52"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/98E9CD3C") + IntToText(gv_playerkills[EventPlayer()])));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/F9DBA46E"));
        if (((gv_gamemode == 8) || (gv_gamemode == 11))) {
            lv_temptext = (lv_temptext + (StringExternal("Param/Value/F7C92644") + IntToText(gv_playermassivekills[EventPlayer()])));
        }
        else {
            lv_temptext = (lv_temptext + (StringExternal("Param/Value/1796ECBD") + IntToText(gv_playermassivekills[EventPlayer()])));
        }
        lv_temptext = (lv_temptext + StringExternal("Param/Value/04B4CBF1"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/0F24A727") + IntToText(gv_playerDeaths[EventPlayer()])));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/807CF53C"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/F2C664AF") + IntToText(gv_playerRevives[EventPlayer()])));
        if (((UnitGetType(gv_playerHeroes[EventPlayer()]) == "CombatMedic") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "CombatMedic2"))) {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/DB0430C7"));
            lv_temptext = (lv_temptext + (StringExternal("Param/Value/A0F15190") + IntToText(gv_playerheals[EventPlayer()])));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/A421D2E7"));
            lv_temptext = (lv_temptext + (StringExternal("Param/Value/B6AA2B39") + IntToText(gv_playerRevivesGame[EventPlayer()])));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/F2798F1C"));
            lv_temptext = (lv_temptext + (StringExternal("Param/Value/23D86777") + FixedToText(gv_medicPoints[EventPlayer()], c_fixedPrecisionAny) + StringExternal("Param/Value/42C04D8E") + FixedToText((5.0 * gv_pointLevel[EventPlayer()]), c_fixedPrecisionAny)));
        }

        lv_temptext = (lv_temptext + StringExternal("Param/Value/4BEB48EC"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/1A3575E5") + IntToText((gv_playerExperience[gv_playerRankSet[EventPlayer()]][EventPlayer()] - gv_playerStartingXP[EventPlayer()]))));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/8770D309"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/57196CEC") + IntToText(gv_bonusXpGained)));
        gf_DisplayVisorTextDialog(lv_temptext, EventPlayer());
    }
    else if ((EventDialogControl() == gv_functionaldialogbuttons[7])) {
        if ((DialogIsVisible(gv_sM.lv_dialog, EventPlayer()) == false)) {
            DialogSetVisible(gv_sM.lv_dialog, PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_sIDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_fireteamDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_accessoryDialog, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            DialogSetVisible(gv_sM.lv_dialog, PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else if ((EventDialogControl() == gv_functionaldialogbuttons[9])) {
        if ((DialogIsVisible(gv_accessoryDialog, EventPlayer()) == false)) {
            DialogSetVisible(gv_accessoryDialog, PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_sM.lv_dialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_sIDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_fireteamDialog, PlayerGroupSingle(EventPlayer()), false);
            if ((gv_playerHeroes[lv_player] != null) && (gv_unitModelWeaponDisplayAcc[lv_player] == false)) {
                gv_unitModelWeaponDisplayAcc[lv_player] = true;
                ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), libNtve_gf_TextureSelectByID(UserDataGetGameLink("Camos", UserDataInstance("Camos", gv_camo_Set[lv_player]), "Camo", 1)));
                if ((gv_decal_Set[lv_player] == 0)) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), gv_rankActorMsg[gv_playerRankSet[lv_player]][gf_GetPlayerRank(lv_player)]);
                }
                else {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), libNtve_gf_TextureSelectByID(UserDataGetGameLink("Decals", UserDataInstance("Decals", gv_decal_Set[lv_player]), "Decals", 1)));
                }
                if (((UnitGetType(gv_playerHeroes[lv_player]) == "PlatoonLeader") || (UnitGetType(gv_playerHeroes[lv_player]) == "PlatoonLeader2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel ArrayPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel TacticalVisor {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "CavalryScout") || (UnitGetType(gv_playerHeroes[lv_player]) == "CavalryScout2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel CommsPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel ScoutVisor {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "FireSupportSpecialist") || (UnitGetType(gv_playerHeroes[lv_player]) == "FireSupportSpecialist2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel CommsPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel CommsHeadset {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "JavelinGunner") || (UnitGetType(gv_playerHeroes[lv_player]) == "JavelinGunner2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel StandardVisionVisor {} AMFilterHead SOpAttachHardPoint04");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel BackPack {} {Back 0} Back_Attach");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "RiflemanOld") || (UnitGetType(gv_playerHeroes[lv_player]) == "RiflemanOld2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel BackPack {} {Back 0} Back_Attach");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "CombatMedic") || (UnitGetType(gv_playerHeroes[lv_player]) == "CombatMedic2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel BackPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel MedicalScanVisor {} AMFilterHead SOpAttachHardPoint04");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel MedicShield {} {Shield 0} Shield_Armour_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel MedicChemicals {} {Forearm 0} Arm_Left_Attach");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "AutomaticRifleman") || (UnitGetType(gv_playerHeroes[lv_player]) == "AutomaticRifleman2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel AutoRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel AmmoBackPack {} {Back 0} Back_Attach");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "Cyborg") || (UnitGetType(gv_playerHeroes[lv_player]) == "Cyborg2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel AutoRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel AmmoBackPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel MedicalScanVisor {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "CombatEngineer") || (UnitGetType(gv_playerHeroes[lv_player]) == "CombatEngineer2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel ShotgunW {} AMFilterWeapon00 SOpAttachWeapon00");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "Enforcer") || (UnitGetType(gv_playerHeroes[lv_player]) == "Enforcer2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel ShotgunW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel AmmoBackPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel EnforcerShield {} {Shield 0} Shield_Armour_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel PistolRightLeg {} {Hardpoint 9} Leg_Right_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel LegPackLeftLeg {} {Hardpoint 7} Leg_Left_Attach");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "CommandoHero") || (UnitGetType(gv_playerHeroes[lv_player]) == "CommandoHero2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel CommandoAssaultRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel CommsPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel CommsHeadset {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "GhostHero") || (UnitGetType(gv_playerHeroes[lv_player]) == "GhostHero2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel PlasmaRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel Binoculars {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "OrbitalSupportSpecialist") || (UnitGetType(gv_playerHeroes[lv_player]) == "OrbitalSupportSpecialist2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel PlasmaRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel Binoculars {} AMFilterHead SOpAttachHardPoint04");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel CommsPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel CommsHeadset {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "LaserEnforcer") || (UnitGetType(gv_playerHeroes[lv_player]) == "LaserEnforcer2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel D19LaserRifleW {} AMFilterWeapon00 {SOpAttachWeapon00 WeaponOffsetD}");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel LaserEnforcerShield {} {Shield 0} Shield_Armour_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel PistolRightLeg {} {Hardpoint 9} Leg_Right_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel LegPackLeftLeg {} {Hardpoint 7} Leg_Left_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel CommsPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel TacticalVisor {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "Flamethrower") || (UnitGetType(gv_playerHeroes[lv_player]) == "Flamethrower2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel FlamethrowerW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel FlameThrowerMask {} AMFilterHead SOpAttachHardPoint04");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel FlamethrowerTankPack {} {Back 0} Back_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel FlamethrowerWeaponFlame {} AMFilterWeapon00 SOpAttachWeapon00");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "SquadDesignatedMarksman") || (UnitGetType(gv_playerHeroes[lv_player]) == "SquadDesignatedMarksman2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel SDMRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel PistolLeftLeg {} {Hardpoint 7} Leg_Left_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel WaistPack {} {Waist 0} Waist_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel Binoculars {} AMFilterHead SOpAttachHardPoint04");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "Specter") || (UnitGetType(gv_playerHeroes[lv_player]) == "Specter2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel AS50W {} AMFilterWeapon00 {SOpAttachWeapon00 WeaponOffsetA}");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel ScoutVisor {} AMFilterHead Head_Attach");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel WaistPack {} {Waist 0} Waist_Attach");
                }
                else if (((UnitGetType(gv_playerHeroes[lv_player]) == "HeavyGunner") || (UnitGetType(gv_playerHeroes[lv_player]) == "HeavyGunner2"))) {
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel S41RipSAWW {} AMFilterWeapon00 SOpAttachWeapon00");
                    ActorSend(ActorFromDialogControl(gv_accessoryDialogItems[lv_player]), "AttachModel AmmoBackPack {} {Back 0} Back_Attach");
                }
            }
        }
        else {
            DialogSetVisible(gv_accessoryDialog, PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else if ((EventDialogControl() == gv_functionaldialogbuttons[8])) {
        UIClearMessages(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle);
        DialogControlFadeTransparency(gv_visorText[EventPlayer()], PlayerGroupAll(), 0.0, 100.0);
    }
    else if ((EventDialogControl() == gv_cameraButton)) {
        CameraSetValue(lv_player, c_cameraValueDistance, 34.0, 1.25, -1, 10.0);
        CameraSetValue(lv_player, c_cameraValuePitch, 56.0, 1.25, -1, 10.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CommandPanel_Init () {
    gt_CommandPanel = TriggerCreate("gt_CommandPanel_Func");
    TriggerAddEventDialogControl(gt_CommandPanel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Custom Hero Name Tag
//--------------------------------------------------------------------------------------------------
bool gt_CustomHeroNameTag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_message = EventChatMessage(false);

    // Conditions
    if (testConds) {
        if (!((StringEqual(StringWord(lv_message, 1), "-tag", c_stringNoCase) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_playerHeroes[EventPlayer()]) == true))) {
            return false;
        }

        if (!((gf_DevHandles(PlayerHandle(EventPlayer())) || (GameIsTestMap(false) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_heroNameTag[EventPlayer()] == c_textTagNone)) {
        gf_PlayerTags(EventPlayer());
    }
    if ((StringLength(StringWord(lv_message, 2)) < 100)) {
        TextTagSetText(gv_heroNameTag[EventPlayer()], TextWithColor(StringToText(StringWord(lv_message, 2)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/086F998D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CustomHeroNameTag_Init () {
    gt_CustomHeroNameTag = TriggerCreate("gt_CustomHeroNameTag_Func");
    TriggerAddEventChatMessage(gt_CustomHeroNameTag, c_playerAny, "-Tag", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Esc Button
//--------------------------------------------------------------------------------------------------
bool gt_EscButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_sIDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_hUDDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_sM.lv_dialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_fireteamDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_battleBuddySelectionScreen, PlayerGroupSingle(EventPlayer()), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscButton_Init () {
    gt_EscButton = TriggerCreate("gt_EscButton_Func");
    TriggerAddEventKeyPressed(gt_EscButton, c_playerAny, c_keyEscape, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command '
//--------------------------------------------------------------------------------------------------
bool gt_Command_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((StringSub(EventChatMessage(false), 1, 2) == "' "))) {
            return false;
        }

        if (!((UnitIsAlive(gv_playerHeroes[EventPlayer()]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TextChat(gv_playerHeroes[EventPlayer()], (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/54C2FDC8") + StringToText(StringSub(EventChatMessage(false), 3, StringLength(EventChatMessage(false))))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Command_Init () {
    gt_Command = TriggerCreate("gt_Command_Func");
    TriggerAddEventChatMessage(gt_Command, c_playerAny, "' ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init HUD Dialog
//--------------------------------------------------------------------------------------------------
bool gt_InitHUDDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_z;
    int lv_int;
    int lv_int2;
    int lv_xoffset;
    text lv_temptext;
    int lv_yoffset;
    int lv_index;
    fixed[13] lv_wins;
    fixed[13] lv_games;

    // Automatic Variable Declarations
    playergroup autoB72CBE3A_g;
    int autoB72CBE3A_var;
    const int auto0F6B7EFB_ae = 18;
    const int auto0F6B7EFB_ai = 1;

    // Variable Initialization
    lv_z = 1;
    lv_xoffset = 10;
    lv_yoffset = 25;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenButton(4, StringExternal("Param/Value/3F758836"), 130, 40, c_anchorBottomLeft, 415, 119, null);
    gv_inventoryButton = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(4, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/A07BAD03"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_HideScreenButton(false, 4);
    libNtve_gf_DisplayScreenButton(5, StringExternal("Param/Value/6924F0B1"), 130, 40, c_anchorBottomLeft, 415, 166, null);
    gv_hUDDialogItems[10][0] = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(5, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/D56CCB5E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_HideScreenButton(false, 5);
    DialogCreate(995, (100 + (25 * PlayerGroupCount(gv_players))), c_anchorTop, 0, 75, true);
    gv_hUDDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_hUDDialogItems[0][14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 60, lv_yoffset, StringExternal("Param/Value/71281D75"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, 260, lv_yoffset, StringExternal("Param/Value/D507CFBE"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 310, lv_yoffset, StringExternal("Param/Value/493FFADE"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 125, 50, c_anchorTopLeft, 460, lv_yoffset, StringExternal("Param/Value/FE8C404E"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 585, lv_yoffset, StringExternal("Param/Value/3D005323"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/42B62E97"), PlayerGroupAll());
    gv_hUDDialogItems[0][13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 75, 50, c_anchorTopLeft, 785, lv_yoffset, StringExternal("Param/Value/5E2C9FDA"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/44B229A3"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 125, 50, c_anchorTopLeft, 900, lv_yoffset, StringExternal("Param/Value/52B8EE12"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/69AFBFB8"), PlayerGroupAll());
    autoB72CBE3A_g = gv_players;
    autoB72CBE3A_var = -1;
    while (true) {
        autoB72CBE3A_var = PlayerGroupNextPlayer(autoB72CBE3A_g, autoB72CBE3A_var);
        if (autoB72CBE3A_var < 0) { break; }
        lv_yoffset = (65 + (lv_int * 25));
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 27, lv_yoffset, gv_rankPrefix[gv_playerRankSet[autoB72CBE3A_var]][gf_GetPlayerRank(autoB72CBE3A_var)], gv_rankDecal[gv_playerRankSet[autoB72CBE3A_var]][gf_GetPlayerRank(autoB72CBE3A_var)], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_hUDDialogItems[1][autoB72CBE3A_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_rankPrefix[gv_playerRankSet[autoB72CBE3A_var]][gf_GetPlayerRank(autoB72CBE3A_var)], PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 60, lv_yoffset, PlayerName(autoB72CBE3A_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoB72CBE3A_var, false)), false, 2.0);
        gv_hUDDialogItems[2][autoB72CBE3A_var] = DialogControlLastCreated();
        lv_temptext = StringToText("");
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/946BEA4C") + FormatNumber(gv_playerExperience[1][autoB72CBE3A_var]) + StringExternal("Param/Value/9815AE51") + FormatNumber(gv_playerExperience[2][autoB72CBE3A_var]) + StringExternal("Param/Value/DCDDCA92") + FormatNumber(gv_playerExperience[3][autoB72CBE3A_var])));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/EAA0158E") + IntToText(gf_GetAchievementCount(autoB72CBE3A_var)) + StringExternal("Param/Value/865B8B9B") + StringExternal("Param/Value/110780FE")));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/AAD63E6C") + IntToText(gf_GetPointCount(autoB72CBE3A_var))));
        libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[2][autoB72CBE3A_var], lv_temptext, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[2][autoB72CBE3A_var], (StringExternal("Param/Value/434157B3") + FormatNumber(gv_playerExperience[gv_playerRankSet[autoB72CBE3A_var]][autoB72CBE3A_var])), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 25, c_anchorTopLeft, 260, lv_yoffset, IntToText(1), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_hUDDialogItems[3][autoB72CBE3A_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 25, c_anchorTopLeft, 310, lv_yoffset, UnitTypeGetName(UnitGetType(gv_playerHeroes[autoB72CBE3A_var])), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_hUDDialogItems[4][autoB72CBE3A_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 125, 25, c_anchorTopLeft, 460, lv_yoffset, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_hUDDialogItems[5][autoB72CBE3A_var] = DialogControlLastCreated();
        lv_temptext = StringToText("");
        lv_temptext = (lv_temptext + TextWithColor((FormatNumber(gv_playerkills[autoB72CBE3A_var])), Color(79.61, 59.22, 100.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/9BA895F7"));
        lv_temptext = (lv_temptext + TextWithColor((FormatNumber(gv_playerhits[autoB72CBE3A_var])), Color(50.20, 50.20, 100.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/65C758CC"));
        lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[autoB72CBE3A_var], c_unitPropMovementSpeed, c_unitPropCurrent), 2), Color(100.00, 50.20, 25.10)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/15BAB823"));
        lv_temptext = (lv_temptext + TextWithColor((FormatNumber(gv_playerRevivesGame[autoB72CBE3A_var])), Color(100.00, 100.00, 0.00)));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 585, lv_yoffset, lv_temptext, ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_temptext = StringToText("");
        lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/AC17DCAF") + FormatNumber(gv_playerkills[autoB72CBE3A_var])), Color(79.61, 59.22, 100.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/AE1365DE"));
        lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/E04B5B1C") + FormatNumber(gv_playerhits[autoB72CBE3A_var])), Color(50.20, 50.20, 100.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/CBBCACBA"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/C988D65F") + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[autoB72CBE3A_var], c_unitPropMovementSpeedCurrent, c_unitPropCurrent), 2), Color(100.00, 50.20, 25.10))));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/8BE49DDD"));
        lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/921D1925") + FormatNumber(gv_playerRevives[autoB72CBE3A_var])), Color(100.00, 100.00, 0.00)));
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_temptext, PlayerGroupAll());
        gv_hUDDialogItems[6][autoB72CBE3A_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 75, 25, c_anchorTopLeft, 785, lv_yoffset, FormatNumber(gv_playerGamesPlayed[autoB72CBE3A_var]), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_hUDDialogItems[7][autoB72CBE3A_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 125, 25, c_anchorTopLeft, 900, lv_yoffset, StringExternal("Param/Value/0B9ED642"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_temptext = (lv_temptext + StringToText(""));
        gv_hUDDialogItems[8][autoB72CBE3A_var] = DialogControlLastCreated();
        lv_wins[autoB72CBE3A_var] = FixedToInt(gf_GetTotalGamesWon(autoB72CBE3A_var));
        lv_games[autoB72CBE3A_var] = FixedToInt(gv_playerGamesPlayed[autoB72CBE3A_var]);
        lv_temptext = StringExternal("Param/Value/1914779B");
        lv_index = 1;
        for ( ; ( (auto0F6B7EFB_ai >= 0 && lv_index <= auto0F6B7EFB_ae) || (auto0F6B7EFB_ai < 0 && lv_index >= auto0F6B7EFB_ae) ) ; lv_index += auto0F6B7EFB_ai ) {
            if (((lv_index == 6) || (lv_index == 10) || (lv_index == 12) || ((lv_index >= 14) && (lv_index <= 17)))) {
            }
            else {
                lv_temptext = (lv_temptext + (StringExternal("Param/Value/F549FF8D") + UserDataGetText("GameModes", UserDataInstance("GameModes", lv_index), "Name", 1) + StringExternal("Param/Value/67F239EF") + (StringExternal("Param/Value/78623A64") + FormatNumber(gv_gamesWon[lv_index][autoB72CBE3A_var])) + StringExternal("Param/Value/E7EAD2CB")));
            }
        }
        libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[7][autoB72CBE3A_var], lv_temptext, PlayerGroupAll());
        lv_int = (lv_int + 1);
    }
    TriggerEnable(gt_HUDUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitHUDDialog_Init () {
    gt_InitHUDDialog = TriggerCreate("gt_InitHUDDialog_Func");
    TriggerAddEventTimeElapsed(gt_InitHUDDialog, 1.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HUD Update
//--------------------------------------------------------------------------------------------------
bool gt_HUDUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_temptext;
    int lv_int;

    // Automatic Variable Declarations
    playergroup autoB8417E56_g;
    int autoB8417E56_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB8417E56_g = gv_players;
    autoB8417E56_var = -1;
    while (true) {
        autoB8417E56_var = PlayerGroupNextPlayer(autoB8417E56_g, autoB8417E56_var);
        if (autoB8417E56_var < 0) { break; }
        if ((gv_playerHeroes[autoB8417E56_var] != null)) {
            gf_SetHUDBars(autoB8417E56_var);
            if ((UnitIsAlive(gv_playerHeroes[autoB8417E56_var]) == true)) {
                lv_temptext = StringToText("");
                lv_temptext = (StringToText("") + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[autoB8417E56_var], c_unitPropLifePercent, c_unitPropCurrent), 0), Color((100.0 - UnitGetPropertyFixed(gv_playerHeroes[autoB8417E56_var], c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(gv_playerHeroes[autoB8417E56_var], c_unitPropLifePercent, c_unitPropCurrent), 0.0)));
                if ((UnitGetPropertyFixed(gv_playerHeroes[autoB8417E56_var], c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/76B35098"));
                }
                else {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/98E2BC46"));
                }
                if (((UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "MinorLacerations") == true) || (UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "UnidentifiedInfection") == true))) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/A89D85C5"));
                }
                if (((UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "ClassIIIHemmorrhaging") == true) || (UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "FracturedArm") == true) || (UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "FracturedLeg") == true) || (UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "TraumaticBrainInjury") == true) || (UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "EnergyLeak") == true) || (UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "MalignantInfection") == true))) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/8D05CA90"));
                }
                if (((UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "ClassIVHemmorrhaging") == true) || (UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "InfectedBite") == true) || (UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "ParasiticInfection") == true) || (UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "DebilitatingInfection") == true) || (UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "HatchedParasites") == true))) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/C86EAF5D"));
                }
                if (((UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "NecroticVenom") == true) || (UnitHasBehavior2(gv_playerHeroes[autoB8417E56_var], "NeurotoxicVenom") == true))) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/1C35F5A6"));
                }
            }
            else {
                DialogControlSetSize(gv_statusDialogItems[6][autoB8417E56_var], PlayerGroupAll(), 1, DialogControlGetHeight(gv_statusDialogItems[6][autoB8417E56_var], autoB8417E56_var));
                DialogControlSetSize(gv_statusDialogItems[7][autoB8417E56_var], PlayerGroupAll(), 1, DialogControlGetHeight(gv_statusDialogItems[7][autoB8417E56_var], autoB8417E56_var));
                lv_temptext = StringExternal("Param/Value/3BD8DD53");
            }
            libNtve_gf_SetDialogItemText(gv_statusDialogItems[5][autoB8417E56_var], lv_temptext, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_hUDDialogItems[5][autoB8417E56_var], lv_temptext, PlayerGroupAll());
        }
        else {
            if ((gv_playerLeftGame[autoB8417E56_var] == true)) {
                libNtve_gf_SetDialogItemText(gv_hUDDialogItems[2][autoB8417E56_var], TextWithColor(PlayerName(autoB8417E56_var), Color(63.92, 63.92, 63.92)), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_statusDialogItems[2][autoB8417E56_var], TextWithColor(PlayerName(autoB8417E56_var), Color(63.92, 63.92, 63.92)), PlayerGroupAll());
                DialogControlSetSize(gv_statusDialogItems[6][autoB8417E56_var], PlayerGroupAll(), 1, DialogControlGetHeight(gv_statusDialogItems[6][autoB8417E56_var], autoB8417E56_var));
                DialogControlSetSize(gv_statusDialogItems[7][autoB8417E56_var], PlayerGroupAll(), 1, DialogControlGetHeight(gv_statusDialogItems[7][autoB8417E56_var], autoB8417E56_var));
                libNtve_gf_SetDialogItemText(gv_hUDDialogItems[4][autoB8417E56_var], StringExternal("Param/Value/E1F68810"), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_statusDialogItems[5][autoB8417E56_var], StringExternal("Param/Value/5109787E"), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_hUDDialogItems[5][autoB8417E56_var], StringToText(""), PlayerGroupAll());
            }
        }
        lv_temptext = StringToText("");
        lv_temptext = (lv_temptext + TextWithColor((FormatNumber(gv_playerkills[autoB8417E56_var])), Color(79.61, 59.22, 100.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/97F0225D"));
        lv_temptext = (lv_temptext + TextWithColor((FormatNumber(gv_playerhits[autoB8417E56_var])), Color(50.20, 50.20, 100.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/9F24DF21"));
        lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[autoB8417E56_var], c_unitPropMovementSpeed, c_unitPropCurrent), 2), Color(100.00, 50.20, 25.10)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/BE863068"));
        lv_temptext = (lv_temptext + TextWithColor((FormatNumber(gv_playerRevivesGame[autoB8417E56_var])), Color(100.00, 100.00, 0.00)));
        libNtve_gf_SetDialogItemText(gv_hUDDialogItems[6][autoB8417E56_var], lv_temptext, PlayerGroupAll());
        lv_temptext = StringToText("");
        lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/8C8A0DFA") + FormatNumber(gv_playerkills[autoB8417E56_var])), Color(79.61, 59.22, 100.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/F0814E85"));
        if (((gv_gamemode == 8) || (gv_gamemode == 11))) {
            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/FC6A6432") + FormatNumber(gv_playermassivekills[autoB8417E56_var])), Color(0.00, 100.00, 0.00)));
        }
        else {
            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/EF105955") + FormatNumber(gv_playermassivekills[autoB8417E56_var])), Color(0.00, 100.00, 0.00)));
        }
        lv_temptext = (lv_temptext + StringExternal("Param/Value/8D6A2FF9"));
        lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/1621190F") + FormatNumber(gv_playerhits[autoB8417E56_var])), Color(50.20, 50.20, 100.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/449FCD2D"));
        lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/459FAD91") + FormatNumber(gv_playerDeaths[autoB8417E56_var])), Color(100.00, 20.78, 20.78)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/2BBD8E59"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/EED3D400") + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[autoB8417E56_var], c_unitPropMovementSpeed, c_unitPropCurrent), 2), Color(100.00, 50.20, 25.10))));
        if (((UnitGetType(gv_playerHeroes[autoB8417E56_var]) == "CombatMedic") || (UnitGetType(gv_playerHeroes[autoB8417E56_var]) == "CombatMedic2"))) {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/42522B42"));
            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/5F230421") + FormatNumber(gv_playerRevivesGame[autoB8417E56_var])), Color(100.00, 100.00, 0.00)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/08468E79"));
            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/8B8D693A") + FormatNumber(gv_playerRevives[autoB8417E56_var])), Color(76.86, 76.86, 0.00)));
        }
        else {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/8D855368"));
            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/F9F4B1B6") + FormatNumber(gv_playerRevives[autoB8417E56_var])), Color(100.00, 100.00, 0.00)));
        }
        libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[6][autoB8417E56_var], lv_temptext, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[5][autoB8417E56_var], lv_temptext, PlayerGroupAll());
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HUDUpdate_Init () {
    gt_HUDUpdate = TriggerCreate("gt_HUDUpdate_Func");
    TriggerEnable(gt_HUDUpdate, false);
    TriggerAddEventTimePeriodic(gt_HUDUpdate, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show HUD Dialog [/ Button]
//--------------------------------------------------------------------------------------------------
bool gt_ShowHUDDialogButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((DialogIsVisible(gv_hUDDialog, EventPlayer()) == false)) {
        SoundPlay(SoundLink("UI_Starmap_Popup", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        DialogSetVisible(gv_hUDDialog, PlayerGroupSingle(EventPlayer()), true);
        if ((gv_beginning == true) && (gv_playerVoted[EventPlayer()] == false) && (DialogIsVisible(gv_modedialog, EventPlayer()) == true)) {
            DialogSetVisible(gv_modedialog, PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else {
        SoundPlay(SoundLink("UI_ScreenWipe", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        DialogSetVisible(gv_hUDDialog, PlayerGroupSingle(EventPlayer()), false);
        if ((gv_beginning == true) && (gv_playerVoted[EventPlayer()] == false) && (DialogIsVisible(gv_modedialog, EventPlayer()) == false)) {
            DialogSetVisible(gv_modedialog, PlayerGroupSingle(EventPlayer()), true);
        }
    }
    Wait(0.1, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHUDDialogButton_Init () {
    gt_ShowHUDDialogButton = TriggerCreate("gt_ShowHUDDialogButton_Func");
    TriggerAddEventKeyPressed(gt_ShowHUDDialogButton, c_playerAny, c_keyBackSlash, false, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Status Dialog
//--------------------------------------------------------------------------------------------------
bool gt_InitStatusDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_yoffset;
    int lv_yoffset2;

    // Automatic Variable Declarations
    playergroup auto9574F323_g;
    int auto9574F323_var;

    // Variable Initialization
    lv_yoffset = 10;
    lv_yoffset2 = 35;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_DisplayScreenButton(3, StringExternal("Param/Value/558088CA"), 130, 40, c_anchorBottomLeft, 415, 72, null);
    gv_statusDialogItems[0][0] = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(3, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/206167D1"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    DialogCreate(250, (60 + (50 * PlayerGroupCount(gv_players))), c_anchorTopRight, 0, 165, true);
    gv_statusDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(gv_statusDialog), DialogGetHeight(gv_statusDialog), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_HideScreenButton(false, 3);
    auto9574F323_g = gv_players;
    auto9574F323_var = -1;
    while (true) {
        auto9574F323_var = PlayerGroupNextPlayer(auto9574F323_g, auto9574F323_var);
        if (auto9574F323_var < 0) { break; }
        lv_yoffset = (25 + (lv_int * 50));
        lv_yoffset2 = (50 + (lv_int * 50));
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 30, lv_yoffset, gv_rankPrefix[gv_playerRankSet[auto9574F323_var]][gf_GetPlayerRank(auto9574F323_var)], gv_rankDecal[gv_playerRankSet[auto9574F323_var]][gf_GetPlayerRank(auto9574F323_var)], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_statusDialogItems[1][auto9574F323_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_rankPrefix[gv_playerRankSet[auto9574F323_var]][gf_GetPlayerRank(auto9574F323_var)], PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 25, c_anchorTopLeft, 60, lv_yoffset, PlayerName(auto9574F323_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto9574F323_var, false)), false, 2.0);
        gv_statusDialogItems[2][auto9574F323_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 34, 34, c_anchorTopLeft, 191, lv_yoffset2, IntToText(UnitLevel(gv_playerHeroes[auto9574F323_var])), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statusDialogItems[3][auto9574F323_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(gv_statusDialogItems[3][auto9574F323_var], IntToText(1), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[3][auto9574F323_var], StringExternal("Param/Value/4FB6A68E"), PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 25, 25, c_anchorTopLeft, 30, lv_yoffset2, StringExternal("Param/Value/C1C61A6C"), StringToText(""), "");
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
        gv_statusDialogItems[11][auto9574F323_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 55, lv_yoffset2, StringToText(""), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_statusDialogItems[4][auto9574F323_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 125, 25, c_anchorTopLeft, 85, lv_yoffset2, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
        gv_statusDialogItems[5][auto9574F323_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 25, c_anchorTopLeft, 85, lv_yoffset2, StringToText(""), "Assets\\Textures\\ui_ingame_lotv_healthbar.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_statusDialogItems[6][auto9574F323_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 9, c_anchorTopLeft, 85, (lv_yoffset2 + 18), StringToText(""), "Assets\\Textures\\ui_ingame_lotv_energybar.dds", c_triggerImageTypeNormal, false, Color(84*100/255,0,129*100/255), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
        gv_statusDialogItems[7][auto9574F323_var] = DialogControlLastCreated();
        lv_int += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitStatusDialog_Init () {
    gt_InitStatusDialog = TriggerCreate("gt_InitStatusDialog_Func");
    TriggerAddEventTimeElapsed(gt_InitStatusDialog, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Player Location
//--------------------------------------------------------------------------------------------------
bool gt_PingPlayerLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int autoD64B8D1C_ae = 12;
    const int autoD64B8D1C_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_statusDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    lv_player = 1;
    for ( ; ( (autoD64B8D1C_ai >= 0 && lv_player <= autoD64B8D1C_ae) || (autoD64B8D1C_ai < 0 && lv_player >= autoD64B8D1C_ae) ) ; lv_player += autoD64B8D1C_ai ) {
        if ((EventDialogControl() == gv_statusDialogItems[11][lv_player])) {
            if ((gv_playerHeroes[lv_player] != null) && (libNtve_gf_PlayerIsEnemy(lv_player, EventPlayer(), libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(gv_playerHeroes[lv_player]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), 7.0, 270.0);
                PingSetUnit(PingLastCreated(), gv_playerHeroes[lv_player]);
                PingSetTooltip(PingLastCreated(), PlayerName(lv_player));
                gf_FloatingTextforPlayer(gv_playerHeroes[lv_player], (gf_TextImage(gf_GetPlayerImage(lv_player), 25) + StringExternal("Param/Value/28454A65") + TextWithColor(PlayerName(UnitGetOwner(gv_playerHeroes[lv_player])), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(gv_playerHeroes[lv_player]), false)))), EventPlayer());
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingPlayerLocation_Init () {
    gt_PingPlayerLocation = TriggerCreate("gt_PingPlayerLocation_Func");
    TriggerAddEventDialogControl(gt_PingPlayerLocation, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fireteam Dialog Initialize
//--------------------------------------------------------------------------------------------------
bool gt_FireteamDialogInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_placement;
    int lv_fireteams;
    int lv_players;
    int lv_yoffset;
    int lv_yrelativeoffset;
    string[5] lv_ftimages;

    // Automatic Variable Declarations
    const int auto3836C082_ae = 4;
    const int auto3836C082_ai = 1;
    const int auto8866AD76_n = 4;
    int auto8866AD76_i;
    const int auto3AE5D803_n = 4;
    int auto3AE5D803_i;
    const int auto00C9D9F9_n = 4;
    int auto00C9D9F9_i;
    const int autoAA3DEAB1_n = 4;
    int autoAA3DEAB1_i;

    // Variable Initialization
    lv_yoffset = 25;

    // Conditions
    if (testConds) {
        if (!((gv_gamemode != 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_fireteamnames[1] = StringExternal("Param/Value/1AB56B89");
    gv_fireteamnames[2] = StringExternal("Param/Value/B01EA523");
    gv_fireteamnames[3] = StringExternal("Param/Value/44EC094A");
    gv_fireteamnames[4] = StringExternal("Param/Value/2E64EE1D");
    libNtve_gf_DisplayScreenButton(2, StringExternal("Param/Value/9BFD14D7"), 130, 40, c_anchorBottomLeft, 415, 25, null);
    gv_fireteamdialogbuttons[0] = DialogControlLastCreated();
    libNtve_gf_SetScreenButtonBorderImage(2, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover.dds", c_triggerImageTypeEndCap);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/167F83AD"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 50.20), PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_HideScreenButton(false, 2);
    DialogCreate(300, 800, c_anchorTopLeft, 0, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\border-tech.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_fireteamDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 225, 25, StringExternal("Param/Value/FEB63721"), "Assets\\Textures\\ui_glues_icons_infogeneric.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_int = 1;
    for ( ; ( (auto3836C082_ai >= 0 && lv_int <= auto3836C082_ae) || (auto3836C082_ai < 0 && lv_int >= auto3836C082_ae) ) ; lv_int += auto3836C082_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_fireteamDialog, 190, 50, c_anchorTopLeft, 30, lv_yoffset, StringExternal("Param/Value/28D5D7CB"), gv_fireteamnames[lv_int], "");
        gv_fireteamdialogbuttons[lv_int] = DialogControlLastCreated();
        lv_yoffset += 175;
        if ((lv_int == 1)) {
            libNtve_gf_SetDialogItemColor(gv_fireteamdialogbuttons[lv_int], Color(100.00, 0.00, 0.00), gv_players);
            lv_yrelativeoffset = 80;
            lv_placement = 1;
            for (auto8866AD76_i = 1; auto8866AD76_i <= auto8866AD76_n; auto8866AD76_i += 1) {
                libNtve_gf_CreateDialogItemLabel(gv_fireteamDialog, 200, 50, c_anchorTopLeft, 35, lv_yrelativeoffset, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_fireteamlabels[lv_placement][lv_int] = DialogControlLastCreated();
                lv_yrelativeoffset += 30;
                lv_placement += 1;
            }
        }
        else if ((lv_int == 2)) {
            libNtve_gf_SetDialogItemColor(gv_fireteamdialogbuttons[lv_int], Color(20*100/255,134*100/255,107*100/255), gv_players);
            lv_yrelativeoffset = 255;
            lv_placement = 1;
            for (auto3AE5D803_i = 1; auto3AE5D803_i <= auto3AE5D803_n; auto3AE5D803_i += 1) {
                libNtve_gf_CreateDialogItemLabel(gv_fireteamDialog, 200, 50, c_anchorTopLeft, 35, lv_yrelativeoffset, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_fireteamlabels[lv_placement][lv_int] = DialogControlLastCreated();
                lv_yrelativeoffset += 30;
                lv_placement += 1;
            }
        }
        else if ((lv_int == 3)) {
            libNtve_gf_SetDialogItemColor(gv_fireteamdialogbuttons[lv_int], Color(254*100/255,138*100/255,14*100/255), gv_players);
            lv_yrelativeoffset = 430;
            lv_placement = 1;
            for (auto00C9D9F9_i = 1; auto00C9D9F9_i <= auto00C9D9F9_n; auto00C9D9F9_i += 1) {
                libNtve_gf_CreateDialogItemLabel(gv_fireteamDialog, 200, 50, c_anchorTopLeft, 35, lv_yrelativeoffset, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_fireteamlabels[lv_placement][lv_int] = DialogControlLastCreated();
                lv_yrelativeoffset += 30;
                lv_placement += 1;
            }
        }
        else if ((lv_int == 4)) {
            libNtve_gf_SetDialogItemColor(gv_fireteamdialogbuttons[lv_int], Color(0,66*100/255,100), gv_players);
            lv_yrelativeoffset = 605;
            lv_placement = 1;
            for (autoAA3DEAB1_i = 1; autoAA3DEAB1_i <= autoAA3DEAB1_n; autoAA3DEAB1_i += 1) {
                libNtve_gf_CreateDialogItemLabel(gv_fireteamDialog, 200, 50, c_anchorTopLeft, 35, lv_yrelativeoffset, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_fireteamlabels[lv_placement][lv_int] = DialogControlLastCreated();
                lv_yrelativeoffset += 30;
                lv_placement += 1;
            }
        }
    }
    gf_UpdateFireteamVision();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireteamDialogInitialize_Init () {
    gt_FireteamDialogInitialize = TriggerCreate("gt_FireteamDialogInitialize_Func");
    TriggerAddEventTimeElapsed(gt_FireteamDialogInitialize, 4.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fireteam Leader ORP
//--------------------------------------------------------------------------------------------------
bool gt_FireteamLeaderORP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_fireteam;
    point lv_point;
    unitgroup lv_nearbyunits;
    unit lv_target;

    // Automatic Variable Declarations
    playergroup auto42527F08_g;
    int auto42527F08_var;
    playergroup autoF07FD8B7_g;
    int autoF07FD8B7_var;
    playergroup auto1E67A25C_g;
    int auto1E67A25C_var;
    playergroup auto7DD75631_g;
    int auto7DD75631_var;
    playergroup autoB011A0C3_g;
    int autoB011A0C3_var;
    playergroup auto176BAD70_g;
    int auto176BAD70_var;

    // Variable Initialization
    lv_fireteam = gv_playersfireteam[EventPlayer()];
    lv_point = Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld());
    lv_nearbyunits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_fireteamTLs[gv_playersfireteam[EventPlayer()]] == EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_fireteamORP[lv_fireteam] == c_invalidPingId)) {
        auto42527F08_g = gv_fireteamGroups[lv_fireteam];
        auto42527F08_var = -1;
        while (true) {
            auto42527F08_var = PlayerGroupNextPlayer(auto42527F08_g, auto42527F08_var);
            if (auto42527F08_var < 0) { break; }
            UnitRemove(gv_fireteamORPpoints[auto42527F08_var]);
        }
        PingDestroy(gv_fireteamORP[lv_fireteam]);
        lv_nearbyunits = UnitGroupSearch(null, EventPlayer(), lv_point, 1.0, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        libNtve_gf_CreatePingFacingAngle(gv_fireteamGroups[lv_fireteam], "BeaconRallyPing", lv_point, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
        gv_fireteamORP[lv_fireteam] = PingLastCreated();
        if ((UnitGroupCount(lv_nearbyunits, c_unitCountAlive) >= 1)) {
            lv_target = UnitGroupClosestToPoint(lv_nearbyunits, lv_point);
            PingSetUnit(PingLastCreated(), lv_target);
            if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), UnitGetOwner(lv_target), libNtve_ge_PlayerRelation_Enemy) == true)) {
                auto7DD75631_g = gv_fireteamGroups[lv_fireteam];
                auto7DD75631_var = -1;
                while (true) {
                    auto7DD75631_var = PlayerGroupNextPlayer(auto7DD75631_g, auto7DD75631_var);
                    if (auto7DD75631_var < 0) { break; }
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FTAttackPoint", c_unitCreateIgnorePlacement, auto7DD75631_var, lv_point);
                    gv_fireteamORPpoints[auto7DD75631_var] = UnitLastCreated();
                    UnitCreateEffectUnit(UnitLastCreated(), "FTAttack", lv_target);
                }
                UIDisplayMessage(gv_fireteamGroups[lv_fireteam], c_messageAreaSubtitle, (StringExternal("Param/Value/FCC5F8FB") + UnitTypeGetName(UnitGetType(lv_target)) + StringExternal("Param/Value/BB05D334")));
                PingSetModel(PingLastCreated(), "BeaconAssaultPing");
            }
            else {
                auto1E67A25C_g = gv_fireteamGroups[lv_fireteam];
                auto1E67A25C_var = -1;
                while (true) {
                    auto1E67A25C_var = PlayerGroupNextPlayer(auto1E67A25C_g, auto1E67A25C_var);
                    if (auto1E67A25C_var < 0) { break; }
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FTRallyPoint", c_unitCreateIgnorePlacement, auto1E67A25C_var, lv_point);
                    gv_fireteamORPpoints[auto1E67A25C_var] = UnitLastCreated();
                    UnitCreateEffectUnit(UnitLastCreated(), "FTRally", lv_target);
                }
                if ((UnitGetOwner(lv_target) == EventPlayer())) {
                    UIDisplayMessage(gv_fireteamGroups[lv_fireteam], c_messageAreaSubtitle, (StringExternal("Param/Value/ED5AEFF8")));
                }
                else {
                    UIDisplayMessage(gv_fireteamGroups[lv_fireteam], c_messageAreaSubtitle, (StringExternal("Param/Value/68D83DC8") + UnitTypeGetName(UnitGetType(lv_target)) + StringExternal("Param/Value/8F791B6B")));
                }
            }
            autoB011A0C3_g = gv_fireteamGroups[lv_fireteam];
            autoB011A0C3_var = -1;
            while (true) {
                autoB011A0C3_var = PlayerGroupNextPlayer(autoB011A0C3_g, autoB011A0C3_var);
                if (autoB011A0C3_var < 0) { break; }
                UnitIssueOrder(gv_fireteamORPpoints[autoB011A0C3_var], OrderTargetingUnit(AbilityCommand("move", 3), lv_target), c_orderQueueReplace);
            }
        }
        else {
            UIDisplayMessage(gv_fireteamGroups[lv_fireteam], c_messageAreaSubtitle, StringExternal("Param/Value/CE932DCD"));
            autoF07FD8B7_g = gv_fireteamGroups[lv_fireteam];
            autoF07FD8B7_var = -1;
            while (true) {
                autoF07FD8B7_var = PlayerGroupNextPlayer(autoF07FD8B7_g, autoF07FD8B7_var);
                if (autoF07FD8B7_var < 0) { break; }
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "FTRallyPoint", c_unitCreateIgnorePlacement, autoF07FD8B7_var, lv_point);
                gv_fireteamORPpoints[autoF07FD8B7_var] = UnitLastCreated();
                UnitCreateEffectUnit(UnitLastCreated(), "FTRally", UnitLastCreated());
            }
        }
    }
    else {
        auto176BAD70_g = gv_fireteamGroups[lv_fireteam];
        auto176BAD70_var = -1;
        while (true) {
            auto176BAD70_var = PlayerGroupNextPlayer(auto176BAD70_g, auto176BAD70_var);
            if (auto176BAD70_var < 0) { break; }
            UnitRemove(gv_fireteamORPpoints[auto176BAD70_var]);
        }
        PingDestroy(gv_fireteamORP[lv_fireteam]);
        gv_fireteamORP[lv_fireteam] = c_invalidPingId;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireteamLeaderORP_Init () {
    gt_FireteamLeaderORP = TriggerCreate("gt_FireteamLeaderORP_Func");
    TriggerAddEventMouseClicked(gt_FireteamLeaderORP, c_playerAny, c_mouseButtonMiddle, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ammo Bar Rounds
//--------------------------------------------------------------------------------------------------
bool gt_AmmoBarRounds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/14E3A8E8") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals))), PlayerGroupSingle(EventPlayer()));
    if ((UnitGroupHasUnit(gv_reloading, gv_playerHeroes[EventPlayer()]) == false) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1)) {
        UnitIssueOrder(gv_playerHeroes[EventPlayer()], Order(AbilityCommand("ReloadHero", 0)), c_orderQueueReplace);
        UnitIssueOrder(gv_playerHeroes[EventPlayer()], Order(AbilityCommand("BioSpecialistSubAbilities", 1)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmmoBarRounds_Init () {
    gt_AmmoBarRounds = TriggerCreate("gt_AmmoBarRounds_Func");
    TriggerAddEventPlayerPropChange(gt_AmmoBarRounds, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarRounds, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarRounds, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarRounds, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarRounds, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarRounds, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarRounds, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarRounds, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarRounds, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarRounds, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarRounds, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarRounds, 12, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ammo Bar Magazines
//--------------------------------------------------------------------------------------------------
bool gt_AmmoBarMagazines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(gv_playerHeroes[EventPlayer()]) != "Flamethrower"))) {
            return false;
        }

        if (!((UnitGetType(gv_playerHeroes[EventPlayer()]) != "Flamethrower2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) == 0) || (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) > gv_playerEncumbrance[EventPlayer()]))) {
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/C97D6E0A") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene))), PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/AF781C2F") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene))), PlayerGroupSingle(EventPlayer()));
    }
    gf_UpdateAmmoWeight(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene), EventPlayerPropertyChangeInt(), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmmoBarMagazines_Init () {
    gt_AmmoBarMagazines = TriggerCreate("gt_AmmoBarMagazines_Func");
    TriggerAddEventPlayerPropChange(gt_AmmoBarMagazines, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarMagazines, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarMagazines, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarMagazines, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarMagazines, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarMagazines, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarMagazines, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarMagazines, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarMagazines, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarMagazines, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarMagazines, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarMagazines, 12, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flamethrower Ammo Bar
//--------------------------------------------------------------------------------------------------
bool gt_FlamethrowerAmmoBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Flamethrower") || (UnitGetType(gv_playerHeroes[EventPlayer()]) == "Flamethrower2")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) < gv_playerEncumbrance[EventPlayer()])) {
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[8], (StringExternal("Param/Value/A7BAACF2") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine))), PlayerGroupSingle(EventPlayer()));
        if ((UnitHasBehavior2(gv_playerHeroes[EventPlayer()], "Encumbered2") == true)) {
            UnitBehaviorRemove(gv_playerHeroes[EventPlayer()], "Encumbered2", 1);
        }
    }
    else {
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[8], (StringExternal("Param/Value/714087A0") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine))), PlayerGroupSingle(EventPlayer()));
        if ((UnitHasBehavior2(gv_playerHeroes[EventPlayer()], "Encumbered2") == false)) {
            UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "Encumbered2", gv_playerHeroes[EventPlayer()], 1);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/BF361AA6"));
        }
    }
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) < 1)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/DAACF6F4"));
        SoundPlayOnUnit(SoundLink("noammo", -1), PlayerGroupSingle(EventPlayer()), gv_playerHeroes[EventPlayer()], 0.0, 100.0, 0.0);
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[8], (StringExternal("Param/Value/8E0C792C") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine))), PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlamethrowerAmmoBar_Init () {
    gt_FlamethrowerAmmoBar = TriggerCreate("gt_FlamethrowerAmmoBar_Func");
    TriggerAddEventPlayerPropChange(gt_FlamethrowerAmmoBar, 1, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_FlamethrowerAmmoBar, 2, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_FlamethrowerAmmoBar, 3, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_FlamethrowerAmmoBar, 4, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_FlamethrowerAmmoBar, 5, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_FlamethrowerAmmoBar, 6, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_FlamethrowerAmmoBar, 7, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_FlamethrowerAmmoBar, 8, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_FlamethrowerAmmoBar, 9, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_FlamethrowerAmmoBar, 10, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_FlamethrowerAmmoBar, 11, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_FlamethrowerAmmoBar, 12, c_playerPropTerrazine);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sprint
//--------------------------------------------------------------------------------------------------
bool gt_Sprint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_sprinters, EventUnit()) == true)) {
        if ((UnitHasBehavior(EventUnit(), "Sprint") == true)) {
            UnitBehaviorRemove(EventUnit(), "Sprint", -1);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/484E33F4"));
        }
        else {
            if ((UnitGetCustomValue(EventUnit(), 2) >= 3.0)) {
                UnitBehaviorAdd(EventUnit(), "Sprint", EventUnit(), FixedToInt(UnitGetCustomValue(EventUnit(), 2)));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/F39A5901"));
            }
            gf_SprintCheck(EventUnit());
        }
    }
    else {
        UnitSetCustomValue(EventUnit(), 2, 16.0);
        UnitBehaviorAdd(EventUnit(), "Sprint", EventUnit(), 16);
        UnitGroupAdd(gv_sprinters, EventUnit());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/72CF417E"));
        gf_SprintCheck(EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sprint_Init () {
    gt_Sprint = TriggerCreate("gt_Sprint_Func");
    TriggerAddEventUnitAbility(gt_Sprint, null, AbilityCommand("Sprint", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Sprint When Prone
//--------------------------------------------------------------------------------------------------
bool gt_RemoveSprintWhenProne_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "Sprint", -1);
    if (((gv_gamemode == 8) || (gv_gamemode == 11))) {
        if ((UnitHasBehavior2(EventUnit(), "Evasion15") == false)) {
            UnitBehaviorAdd(EventUnit(), "Evasion15", EventUnit(), 1);
        }
        else {
            UnitBehaviorRemove(EventUnit(), "Evasion15", 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveSprintWhenProne_Init () {
    gt_RemoveSprintWhenProne = TriggerCreate("gt_RemoveSprintWhenProne_Func");
    TriggerAddEventUnitAbility(gt_RemoveSprintWhenProne, null, AbilityCommand("Prone", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inventory In/Out
//--------------------------------------------------------------------------------------------------
bool gt_InventoryInOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_triggeringInventoryItem;
    int lv_itemArray;

    // Automatic Variable Declarations
    const int auto7CBA5057_ae = gv_itemCount;
    const int auto7CBA5057_ai = 1;

    // Variable Initialization
    lv_triggeringInventoryItem = "";

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringInventoryItem = (gf_ConvertGamelinkUnitToString(UnitGetType(EventUnitInventoryItem())));
    lv_itemArray = 1;
    for ( ; ( (auto7CBA5057_ai >= 0 && lv_itemArray <= auto7CBA5057_ae) || (auto7CBA5057_ai < 0 && lv_itemArray >= auto7CBA5057_ae) ) ; lv_itemArray += auto7CBA5057_ai ) {
        if ((gv_itemName[lv_itemArray] == (lv_triggeringInventoryItem))) {
            if (((EventUnitInventoryChange() == c_unitInventoryChangePicksUp) || (EventUnitInventoryChange() == c_unitInventoryChangeGains) || (EventUnitInventoryChange() == c_unitInventoryChangeReceives))) {
                gf_ItemInventoryCount(lv_itemArray, 1, UnitGetOwner(EventUnit()));
                break;
            }
            else {
                if (((EventUnitInventoryChange() == c_unitInventoryChangeDrops) || (EventUnitInventoryChange() == c_unitInventoryChangeLoses) || (EventUnitInventoryChange() == c_unitInventoryChangeExhausts) || (EventUnitInventoryChange() == c_unitInventoryChangeGives))) {
                    gf_ItemInventoryCount(lv_itemArray, 2, UnitGetOwner(EventUnit()));
                    break;
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InventoryInOut_Init () {
    gt_InventoryInOut = TriggerCreate("gt_InventoryInOut_Func");
    TriggerAddEventUnitInventoryChange(gt_InventoryInOut, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_InventoryInOut, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(gt_InventoryInOut, null, c_unitInventoryChangeGains, null);
    TriggerAddEventUnitInventoryChange(gt_InventoryInOut, null, c_unitInventoryChangeLoses, null);
    TriggerAddEventUnitInventoryChange(gt_InventoryInOut, null, c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(gt_InventoryInOut, null, c_unitInventoryChangeExhausts, null);
    TriggerAddEventUnitInventoryChange(gt_InventoryInOut, null, c_unitInventoryChangeGives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Player
//--------------------------------------------------------------------------------------------------
bool gt_SelectPlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_selected[EventPlayer()] = EventUnit();
    gv_selectedPlayer[EventPlayer()] = UnitGetOwner(EventUnit());
    if ((PlayerGetAlliance(EventPlayer(), c_allianceIdControl, UnitGetOwner(EventUnit())) != true) && (PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, EventPlayer()) != true) && (gv_selectedPlayer[EventPlayer()] != EventPlayer())) {
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
            gf_UpdateInventoryDialog(EventPlayer(), UnitGetOwner(EventUnit()), 3);
        }
        else if (((UnitAbilityExists(EventUnit(), "MiniInventoryRifle") == true) || (UnitAbilityExists(EventUnit(), "MiniInventoryNoWeapon") == true) || (UnitAbilityExists(EventUnit(), "MiniInventoryMG") == true) || (UnitAbilityExists(EventUnit(), "MiniInventoryShotgun") == true) || (UnitAbilityExists(EventUnit(), "MiniInventoryFlame") == true) || (UnitAbilityExists(EventUnit(), "MiniInventorySDM") == true) || (UnitAbilityExists(EventUnit(), "MiniInventoryPlasma") == true) || (UnitAbilityExists(EventUnit(), "MiniInventorySniper") == true))) {
            gf_UpdateInventoryDialog(EventPlayer(), UnitGetOwner(EventUnit()), 4);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectPlayer_Init () {
    gt_SelectPlayer = TriggerCreate("gt_SelectPlayer_Func");
    TriggerAddEventUnitSelected(gt_SelectPlayer, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deselect Player
//--------------------------------------------------------------------------------------------------
bool gt_DeselectPlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_heroInventoryDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_nPCInventoryDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeselectPlayer_Init () {
    gt_DeselectPlayer = TriggerCreate("gt_DeselectPlayer_Func");
    TriggerAddEventUnitSelected(gt_DeselectPlayer, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Visor Text Timer Expire
//--------------------------------------------------------------------------------------------------
bool gt_VisorTextTimerExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int auto8B9020BD_ae = 12;
    const int auto8B9020BD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_int = 1;
    for ( ; ( (auto8B9020BD_ai >= 0 && lv_int <= auto8B9020BD_ae) || (auto8B9020BD_ai < 0 && lv_int >= auto8B9020BD_ae) ) ; lv_int += auto8B9020BD_ai ) {
        if ((EventTimer() == gv_visorTextTimer[lv_int])) {
            DialogControlFadeTransparency(gv_visorText[lv_int], PlayerGroupSingle(lv_int), 3.0, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VisorTextTimerExpire_Init () {
    gt_VisorTextTimerExpire = TriggerCreate("gt_VisorTextTimerExpire_Func");
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[1]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[2]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[3]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[4]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[5]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[6]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[7]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[8]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[9]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[10]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[11]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[12]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acquire Behavior
//--------------------------------------------------------------------------------------------------
bool gt_AcquireBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;
    int lv__player;
    string lv__behavior;
    gs_Behavior lv__behaviorVAR;
    int lv__lastindex;
    int lv__dialog;
    int lv__panel;
    int lv_i;
    bool lv_ailment;
    int lv__size;
    int lv__offset;
    string lv__alignment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__unit = EventUnit();
    lv__player = UnitGetOwner(EventUnit());
    lv__behavior = EventUnitBehavior();
    lv__behaviorVAR.lv__panel = c_invalidDialogControlId;
    lv__behaviorVAR.lv__duration = c_invalidDialogControlId;
    lv__behaviorVAR.lv__border = c_invalidDialogControlId;
    lv__behaviorVAR.lv__icon = c_invalidDialogControlId;
    lv__lastindex = -1;
    lv__dialog = c_invalidDialogId;
    lv__panel = c_invalidDialogControlId;
    lv__size = 25;
    lv__offset = 3;
    lv__alignment = "";

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, lv__unit) == true))) {
            return false;
        }

        if (!((UnitBehaviorHasFlag(lv__behavior, c_unitBehaviorFlagHidden) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__behaviorVAR.lv__behavior = lv__behavior;
    lv__dialog = gv_uIDialogs.lv_behaviorDialog[lv__player];
    DialogControlCreate(lv__dialog, c_triggerControlTypePanel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupSingle(lv__player), lv__size, lv__size);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 0);
    lv__behaviorVAR.lv__panel = DialogControlLastCreated();
    lv__panel = DialogControlLastCreated();
    DialogControlCreateInPanel(lv__panel, c_triggerControlTypeImage);
    lv__behaviorVAR.lv__duration = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\black.dds", PlayerGroupSingle(lv__player));
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupSingle(lv__player));
    lv__alignment = CatalogFieldValueGet(c_gameCatalogBehavior, lv__behavior, "Alignment", lv__player);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupSingle(lv__player), (lv__size - (lv__offset * 2)), (lv__size - (lv__offset * 2)));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupSingle(lv__player), c_anchorLeft, lv__panel, c_anchorLeft, lv__offset, 0);
    DialogControlCreateInPanel(lv__panel, c_triggerControlTypeImage);
    lv__behaviorVAR.lv__border = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-border-research.dds", PlayerGroupSingle(lv__player));
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 605, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\btn-border-research.dds", PlayerGroupSingle(lv__player));
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 605, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupAll());
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupSingle(lv__player), true);
    DialogControlCreateInPanel(lv__panel, c_triggerControlTypeImage);
    lv__behaviorVAR.lv__icon = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), (CatalogFieldValueGet(c_gameCatalogBehavior, lv__behavior, "InfoIcon", lv__player)), PlayerGroupSingle(lv__player));
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupSingle(lv__player), true);
    lv__lastindex = gf_UIBehaviorsFindLastIndex(lv__player);
    if ((lv__lastindex != -1)) {
        DialogControlSetPositionRelative(lv__panel, PlayerGroupSingle(lv__player), c_anchorTopLeft, gv_playerData[lv__player].lv_behaviors[lv__lastindex].lv__panel, c_anchorTopRight, 0, 0);
    }
    else {
        DialogControlSetPositionRelative(lv__panel, PlayerGroupSingle(lv__player), c_anchorTopLeft, gv_uIDialogs.lv_behaviorPin[lv__player], c_anchorTopRight, 0, 0);
    }
    lv__lastindex = (lv__lastindex + 1);
    gv_playerData[lv__player].lv_behaviors[lv__lastindex].lv__behavior = lv__behaviorVAR.lv__behavior;
    gv_playerData[lv__player].lv_behaviors[lv__lastindex].lv__border = lv__behaviorVAR.lv__border;
    gv_playerData[lv__player].lv_behaviors[lv__lastindex].lv__duration = lv__behaviorVAR.lv__duration;
    gv_playerData[lv__player].lv_behaviors[lv__lastindex].lv__icon = lv__behaviorVAR.lv__icon;
    gv_playerData[lv__player].lv_behaviors[lv__lastindex].lv__panel = lv__behaviorVAR.lv__panel;
    gf_UIBehaviorProcess(lv__unit, lv__lastindex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcquireBehavior_Init () {
    gt_AcquireBehavior = TriggerCreate("gt_AcquireBehavior_Func");
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "NecroticVenom", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "NeurotoxicVenom", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "MinorLacerations", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "UnidentifiedInfection", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "ClassIIIHemmorrhaging", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "FracturedArm", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "FracturedLeg", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "TraumaticBrainInjury", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "EnergyLeak", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "InfectedBite", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "ClassIVHemmorrhaging", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "ParasiticInfection", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "HatchedParasites", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "MalignantInfection", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "DebilitatingInfection", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_AcquireBehavior, null, "JumpInjury", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Behavior
//--------------------------------------------------------------------------------------------------
bool gt_RemoveBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__unit;
    int lv__player;
    string lv__behavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__unit = EventUnit();
    lv__player = UnitGetOwner(EventUnit());
    lv__behavior = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorHasFlag(lv__behavior, c_unitBehaviorFlagHidden) == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_heroesGroup, lv__unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_uIDialogs.lv_behaviorLock[lv__player]) {
        Wait(1.0, c_timeGame);
    }
    gv_uIDialogs.lv_behaviorLock[lv__player] = true;
    gf_UIBehaviorRemove(lv__behavior, lv__player);
    gv_uIDialogs.lv_behaviorLock[lv__player] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveBehavior_Init () {
    gt_RemoveBehavior = TriggerCreate("gt_RemoveBehavior_Func");
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "NecroticVenom", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "NeurotoxicVenom", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "MinorLacerations", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "UnidentifiedInfection", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "ClassIIIHemmorrhaging", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "FracturedArm", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "FracturedLeg", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "TraumaticBrainInjury", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "EnergyLeak", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "InfectedBite", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "ClassIVHemmorrhaging", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "ParasiticInfection", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "HatchedParasites", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "MalignantInfection", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "DebilitatingInfection", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(gt_RemoveBehavior, null, "JumpInjury", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Mos
//--------------------------------------------------------------------------------------------------
bool gt_SelectMos_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_uIDialogs.lv_behaviorDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectMos_Init () {
    gt_SelectMos = TriggerCreate("gt_SelectMos_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deselect Mos
//--------------------------------------------------------------------------------------------------
bool gt_DeselectMos_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_uIDialogs.lv_behaviorDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeselectMos_Init () {
    gt_DeselectMos = TriggerCreate("gt_DeselectMos_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select HG
//--------------------------------------------------------------------------------------------------
bool gt_SelectHG_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_overheatProgressBar, PlayerGroupSingle(UnitGetOwner(EventUnit())), true);
    DialogControlSetVisible(gv_overheatProgressBarBorder, PlayerGroupSingle(UnitGetOwner(EventUnit())), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectHG_Init () {
    gt_SelectHG = TriggerCreate("gt_SelectHG_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deselect HG
//--------------------------------------------------------------------------------------------------
bool gt_DeselectHG_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_overheatProgressBar, PlayerGroupSingle(UnitGetOwner(EventUnit())), false);
    DialogControlSetVisible(gv_overheatProgressBarBorder, PlayerGroupSingle(UnitGetOwner(EventUnit())), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeselectHG_Init () {
    gt_DeselectHG = TriggerCreate("gt_DeselectHG_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Game Button
//--------------------------------------------------------------------------------------------------
bool gt_EndGameButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_endGameButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victory == true)) {
        GameOver(EventPlayer(), c_gameOverVictory, true, true);
    }
    else {
        GameOver(EventPlayer(), c_gameOverDefeat, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndGameButton_Init () {
    gt_EndGameButton = TriggerCreate("gt_EndGameButton_Func");
    TriggerEnable(gt_EndGameButton, false);
    TriggerAddEventDialogControl(gt_EndGameButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rank Menu
//--------------------------------------------------------------------------------------------------
bool gt_RankMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_x;
    int lv_player;
    int lv_hook;
    int lv_hook2;
    int lv_eNXP;
    int lv_wOXP;
    int lv_cOXP;
    int lv_eNXPRankMin;
    int lv_eNXPRankMin1;
    int lv_wOXPRankMin;
    int lv_wOXPRankMin1;
    int lv_cOXPRankMin;
    int lv_cOXPRankMin1;

    // Automatic Variable Declarations
    const int auto5CA5248D_ae = 15;
    const int auto5CA5248D_ai = 1;
    const int auto291EEEDE_ae = 10;
    const int auto291EEEDE_ai = 1;
    const int auto078E6344_ae = 11;
    const int auto078E6344_ai = 1;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_hook = c_invalidDialogControlId;
    lv_hook2 = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_rankMenu))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_eNXP = gv_playerExperience[1][lv_player];
    lv_wOXP = gv_playerExperience[2][lv_player];
    lv_cOXP = gv_playerExperience[3][lv_player];
    lv_eNXPRankMin = gv_rankXPMin[1][gf_GetScoreboardRanks(lv_player, 1)];
    lv_eNXPRankMin1 = gv_rankXPMin[1][(gf_GetScoreboardRanks(lv_player, 1) + 1)];
    lv_wOXPRankMin = gv_rankXPMin[2][gf_GetScoreboardRanks(lv_player, 2)];
    lv_wOXPRankMin1 = gv_rankXPMin[2][(gf_GetScoreboardRanks(lv_player, 2) + 1)];
    lv_cOXPRankMin = gv_rankXPMin[3][gf_GetScoreboardRanks(lv_player, 3)];
    lv_cOXPRankMin1 = gv_rankXPMin[3][(gf_GetScoreboardRanks(lv_player, 3) + 1)];
    lv_i = 1;
    for ( ; ( (auto5CA5248D_ai >= 0 && lv_i <= auto5CA5248D_ae) || (auto5CA5248D_ai < 0 && lv_i >= auto5CA5248D_ae) ) ; lv_i += auto5CA5248D_ai ) {
        lv_x = (lv_i + 1);
        if ((lv_eNXP < gv_rankXPMin[1][lv_x])) {
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/EnlistedBorder" + IntToString(lv_i)));
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lv_player), 0.0, 75.0);
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/Enlisted" + IntToString(lv_i)));
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lv_player), 0.0, 82.0);
        }

    }
    lv_i = 1;
    for ( ; ( (auto291EEEDE_ai >= 0 && lv_i <= auto291EEEDE_ae) || (auto291EEEDE_ai < 0 && lv_i >= auto291EEEDE_ae) ) ; lv_i += auto291EEEDE_ai ) {
        if ((lv_i == 1)) {
            if ((lv_eNXP < 5500)) {
                DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/WOBorder" + IntToString(lv_i)));
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
                DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/WO" + IntToString(lv_i)));
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lv_player), 0.0, 82.0);
            }
        }
        else {
            if ((lv_wOXP < gv_rankXPMin[2][lv_i])) {
                DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/WOBorder" + IntToString(lv_i)));
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lv_player), 0.0, 75.0);
                DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/WO" + IntToString(lv_i)));
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lv_player), 0.0, 82.0);
            }

        }
    }
    lv_i = 1;
    for ( ; ( (auto078E6344_ai >= 0 && lv_i <= auto078E6344_ae) || (auto078E6344_ai < 0 && lv_i >= auto078E6344_ae) ) ; lv_i += auto078E6344_ai ) {
        if ((lv_i == 1)) {
            if ((lv_eNXP < 5500)) {
                DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/COBorder" + IntToString(lv_i)));
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
                DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/CO" + IntToString(lv_i)));
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lv_player), 0.0, 82.0);
            }
        }
        else {
            if ((lv_cOXP < gv_rankXPMin[3][lv_i])) {
                DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/COBorder" + IntToString(lv_i)));
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lv_player), 0.0, 75.0);
                DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/CO" + IntToString(lv_i)));
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lv_player), 0.0, 82.0);
            }

        }
    }
    DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/EnlistedXP"));
    lv_hook = DialogControlLastCreated();
    if ((gf_GetScoreboardRanks(lv_player, 1) < 16)) {
        libNtve_gf_SetDialogItemMinimumValue(lv_hook, lv_eNXPRankMin, PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemMaximumValue(lv_hook, lv_eNXPRankMin1, PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemCurrentValue(lv_hook, lv_eNXP, PlayerGroupSingle(lv_player));
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/EnlistedText"));
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), lv_eNXP, PlayerGroupSingle(lv_player));
        TextExpressionSetToken("Param/Expression/1B43B697", "A", gv_rankPrefix[1][(gf_GetScoreboardRanks(lv_player, 1) + 1)]);
        libNtve_gf_SetDialogItemTooltip(lv_hook, (TextExpressionAssemble("Param/Expression/1B43B697") + FormatNumber((lv_eNXP - lv_eNXPRankMin)) + StringExternal("Param/Value/A61F727E") + FormatNumber((lv_eNXPRankMin1 - lv_eNXPRankMin))), PlayerGroupSingle(lv_player));
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/EnlistedProgressRank"));
        lv_hook2 = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(lv_hook2, gf_GetHDRankImage(lv_player, 1), PlayerGroupSingle(lv_player));
    }
    else {
        libNtve_gf_SetDialogItemMaximumValue(lv_hook, lv_eNXP, PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemCurrentValue(lv_hook, lv_eNXP, PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemTooltip(lv_hook, StringExternal("Param/Value/E316A929"), PlayerGroupSingle(lv_player));
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/EnlistedProgressRank"));
        lv_hook2 = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(lv_hook2, "Assets\\Textures\\HDRanks\\CMA3.dds", PlayerGroupSingle(lv_player));
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/EnlistedText"));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FormatNumber(lv_eNXP), PlayerGroupSingle(lv_player));
    }
    DialogControlDestroy(lv_hook);
    DialogControlDestroy(lv_hook2);
    DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/WarrantXP"));
    lv_hook = DialogControlLastCreated();
    if ((gf_GetScoreboardRanks(lv_player, 2) < 10)) {
        libNtve_gf_SetDialogItemMinimumValue(lv_hook, lv_wOXPRankMin, PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemMaximumValue(lv_hook, lv_wOXPRankMin1, PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemCurrentValue(lv_hook, lv_wOXP, PlayerGroupSingle(lv_player));
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/WarrantText"));
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), lv_wOXP, PlayerGroupSingle(lv_player));
        if ((lv_eNXP >= 5500)) {
            TextExpressionSetToken("Param/Expression/D2F8322F", "A", gv_rankPrefix[2][(gf_GetScoreboardRanks(lv_player, 2) + 1)]);
            libNtve_gf_SetDialogItemTooltip(lv_hook, (TextExpressionAssemble("Param/Expression/D2F8322F") + FormatNumber((lv_wOXP - lv_wOXPRankMin)) + StringExternal("Param/Value/92057D7C") + FormatNumber((lv_wOXPRankMin1 - lv_wOXPRankMin))), PlayerGroupSingle(lv_player));
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/WarrantProgressRank"));
            lv_hook2 = DialogControlLastCreated();
            libNtve_gf_SetDialogItemImage(lv_hook2, gf_GetHDRankImage(lv_player, 2), PlayerGroupSingle(lv_player));
        }
        else {
            libNtve_gf_SetDialogItemTooltip(lv_hook, StringExternal("Param/Value/0CDBB4A0"), PlayerGroupSingle(lv_player));
        }
    }
    else {
        libNtve_gf_SetDialogItemMaximumValue(lv_hook, 1.0, PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemCurrentValue(lv_hook, 1.0, PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemTooltip(lv_hook, StringExternal("Param/Value/0391279F"), PlayerGroupSingle(lv_player));
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/WarrantProgressRank"));
        lv_hook2 = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(lv_hook2, "Assets\\Textures\\HDRanks\\MW5.dds", PlayerGroupSingle(lv_player));
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/WarrantText"));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FormatNumber(lv_wOXP), PlayerGroupSingle(lv_player));
    }
    DialogControlDestroy(lv_hook);
    DialogControlDestroy(lv_hook2);
    DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/CommissionedXP"));
    lv_hook = DialogControlLastCreated();
    if ((gf_GetScoreboardRanks(lv_player, 3) < 11)) {
        libNtve_gf_SetDialogItemMinimumValue(lv_hook, lv_cOXPRankMin, PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemMaximumValue(lv_hook, lv_cOXPRankMin1, PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemCurrentValue(lv_hook, lv_cOXP, PlayerGroupSingle(lv_player));
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/CommissionedText"));
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), lv_cOXP, PlayerGroupSingle(lv_player));
        if ((lv_eNXP >= 5500)) {
            TextExpressionSetToken("Param/Expression/E4D61C85", "A", gv_rankPrefix[3][(gf_GetScoreboardRanks(lv_player, 3) + 1)]);
            libNtve_gf_SetDialogItemTooltip(lv_hook, (TextExpressionAssemble("Param/Expression/E4D61C85") + FormatNumber((lv_cOXP - lv_cOXPRankMin)) + StringExternal("Param/Value/48DDAD5B") + FormatNumber((lv_cOXPRankMin1 - lv_cOXPRankMin))), PlayerGroupSingle(lv_player));
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/COProgressRank"));
            lv_hook2 = DialogControlLastCreated();
            libNtve_gf_SetDialogItemImage(lv_hook2, gf_GetHDRankImage(lv_player, 3), PlayerGroupSingle(lv_player));
        }
        else {
            libNtve_gf_SetDialogItemTooltip(lv_hook, StringExternal("Param/Value/5BF50165"), PlayerGroupSingle(lv_player));
        }
    }
    else {
        libNtve_gf_SetDialogItemMaximumValue(lv_hook, lv_cOXP, PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemCurrentValue(lv_hook, lv_cOXP, PlayerGroupSingle(lv_player));
        libNtve_gf_SetDialogItemTooltip(lv_hook, StringExternal("Param/Value/DF87C306"), PlayerGroupSingle(lv_player));
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/COProgressRank"));
        lv_hook2 = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(lv_hook2, "Assets\\Textures\\HDRanks\\GOA.dds", PlayerGroupSingle(lv_player));
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullScreenUpperContainer/ScoreScreen/PanelsContainer/Panel01/RankFrame/CommissionedText"));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FormatNumber(lv_cOXP), PlayerGroupSingle(lv_player));
    }
    DialogControlDestroy(lv_hook);
    DialogControlDestroy(lv_hook2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RankMenu_Init () {
    gt_RankMenu = TriggerCreate("gt_RankMenu_Func");
    TriggerEnable(gt_RankMenu, false);
    TriggerAddEventDialogControl(gt_RankMenu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blunt Ailments
//--------------------------------------------------------------------------------------------------
bool gt_BluntAilments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_damagedunit;
    int lv_ailments;

    // Automatic Variable Declarations
    int auto6601BC19_ae;
    int auto6601BC19_ai;

    // Variable Initialization
    lv_damagedunit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 15.0))) {
            return false;
        }

        if (!((PlayerType(UnitGetOwner(lv_damagedunit)) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeMechanical) == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaBubble") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShieldMini") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShieldIgnis") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocol") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "NaniteCloudBuff") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "Immunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ImprovedNanoImmunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ImprovedPlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "BluntAilments") == false))) {
            return false;
        }

        if (!((RandomInt(1, gv_ailmentChance) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeBiological) == true)) {
        libEBB916F2_gf_Shuffle("Blunt_Ailments");
        auto6601BC19_ae = (Length("Blunt_Ailments") - 1);
        auto6601BC19_ai = 1;
        lv_ailments = 0;
        for ( ; ( (auto6601BC19_ai >= 0 && lv_ailments <= auto6601BC19_ae) || (auto6601BC19_ai <= 0 && lv_ailments >= auto6601BC19_ae) ) ; lv_ailments += auto6601BC19_ai ) {
            if ((RandomInt(1, gv_ailmentIndividualChance[libEBB916F2_gf_GetArrayValueInteger("Blunt_Ailments", lv_ailments)]) == 1)) {
                if ((libEBB916F2_gf_GetArrayValueInteger("Blunt_Ailments", lv_ailments) == 10)) {
                    UnitBehaviorAdd(lv_damagedunit, gv_ailments[libEBB916F2_gf_GetArrayValueInteger("Blunt_Ailments", lv_ailments)], EventUnitDamageSourceUnit(), 1);
                    break;
                }
                else {
                    if ((UnitHasBehavior(lv_damagedunit, "BioSuit") == true) && ((libEBB916F2_gf_GetArrayValueInteger("Blunt_Ailments", lv_ailments) == 4) || (libEBB916F2_gf_GetArrayValueInteger("Blunt_Ailments", lv_ailments) == 5) || (libEBB916F2_gf_GetArrayValueInteger("Blunt_Ailments", lv_ailments) == 6) || (libEBB916F2_gf_GetArrayValueInteger("Blunt_Ailments", lv_ailments) == 7))) {
                        break;
                    }
                    UnitBehaviorAdd(lv_damagedunit, gv_ailments[libEBB916F2_gf_GetArrayValueInteger("Blunt_Ailments", lv_ailments)], EventUnitDamageSourceUnit(), 1);
                    if ((libEBB916F2_gf_GetArrayValueInteger("Blunt_Ailments", lv_ailments) == 7) && (UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeHeroic) == true)) {
                        break;
                    }
                    if ((libEBB916F2_gf_GetArrayValueInteger("Blunt_Ailments", lv_ailments) == 6)) {
                        UnitBehaviorRemove(lv_damagedunit, "Sprint", -1);
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/4879F38C"));
                    }
                    break;
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BluntAilments_Init () {
    gt_BluntAilments = TriggerCreate("gt_BluntAilments_Func");
    TriggerAddEventUnitDamaged(gt_BluntAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "CacumenSledge");
    TriggerAddEventUnitDamaged(gt_BluntAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "GargantuanSledge");
    TriggerAddEventUnitDamaged(gt_BluntAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "GourmandAttackDamage");
    TriggerAddEventUnitDamaged(gt_BluntAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "GrotesqueDamage");
    TriggerAddEventUnitDamaged(gt_BluntAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "AbominationDamage");
    TriggerAddEventUnitDamaged(gt_BluntAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "GluttonAttackDamage");
    TriggerAddEventUnitDamaged(gt_BluntAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "AresFist");
    TriggerAddEventUnitDamaged(gt_BluntAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "HunterFist");
    TriggerAddEventUnitDamaged(gt_BluntAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "YetiFist");
    TriggerAddEventUnitDamaged(gt_BluntAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "MinervaFist");
    TriggerAddEventUnitDamaged(gt_BluntAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "ArachChargeDamage");
    TriggerAddEventUnitDamaged(gt_BluntAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "BaronFist");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slash Ailments
//--------------------------------------------------------------------------------------------------
bool gt_SlashAilments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ailment;
    unit lv_damagedunit;

    // Automatic Variable Declarations
    int autoD03E0D03_ae;
    int autoD03E0D03_ai;

    // Variable Initialization
    lv_damagedunit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 15.0))) {
            return false;
        }

        if (!((PlayerType(UnitGetOwner(lv_damagedunit)) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeMechanical) == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaBubble") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShieldMini") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShieldIgnis") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocol") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "NaniteCloudBuff") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "Immunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ImprovedNanoImmunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ImprovedPlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "RhinoDermalArmor") == false))) {
            return false;
        }

        if (!((RandomInt(1, gv_ailmentChance) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeBiological) == true)) {
        libEBB916F2_gf_Shuffle("Slash_Ailments");
        autoD03E0D03_ae = (Length("Slash_Ailments") - 1);
        autoD03E0D03_ai = 1;
        lv_ailment = 0;
        for ( ; ( (autoD03E0D03_ai >= 0 && lv_ailment <= autoD03E0D03_ae) || (autoD03E0D03_ai <= 0 && lv_ailment >= autoD03E0D03_ae) ) ; lv_ailment += autoD03E0D03_ai ) {
            if ((RandomInt(1, gv_ailmentIndividualChance[libEBB916F2_gf_GetArrayValueInteger("Slash_Ailments", lv_ailment)]) == 1)) {
                if ((UnitHasBehavior(lv_damagedunit, "PureBlood") == true) && ((libEBB916F2_gf_GetArrayValueInteger("Slash_Ailments", lv_ailment) == 3) || (libEBB916F2_gf_GetArrayValueInteger("Slash_Ailments", lv_ailment) == 9) || (libEBB916F2_gf_GetArrayValueInteger("Slash_Ailments", lv_ailment) == 11))) {
                    break;
                }
                if ((UnitHasBehavior(lv_damagedunit, "BioSuit") == true) && ((libEBB916F2_gf_GetArrayValueInteger("Slash_Ailments", lv_ailment) == 2) || (libEBB916F2_gf_GetArrayValueInteger("Slash_Ailments", lv_ailment) == 3) || (libEBB916F2_gf_GetArrayValueInteger("Slash_Ailments", lv_ailment) == 4))) {
                    break;
                }
                UnitBehaviorAdd(lv_damagedunit, gv_ailments[libEBB916F2_gf_GetArrayValueInteger("Slash_Ailments", lv_ailment)], EventUnitDamageSourceUnit(), 1);
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SlashAilments_Init () {
    gt_SlashAilments = TriggerCreate("gt_SlashAilments_Func");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "ArachnathidClawsDamage");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "ScorpioClawsDamage");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "BruchusClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "ChargerClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "CreeperClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "TurnedClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "LacertiTalonDamage");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "LividClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "GargoyleClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "HopperClawsDamage");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "ImmussilusClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "KingDarreusClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "DarreusClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "Dehaka");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "LeaperClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "LickerClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "MutantClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "RaisuliClawsdamage");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "ShredderClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "SwollenClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "ThanatosClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "UnburiedClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "WraithClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "WraithLordClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "BoomerClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "CursedClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "ClawsDamage");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "RisenClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "CorruptedClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "UnwillingClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "UncleanClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "RottenClaws");
    TriggerAddEventUnitDamaged(gt_SlashAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "BloatedClaws");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pierce Ailments
//--------------------------------------------------------------------------------------------------
bool gt_PierceAilments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ailment;
    unit lv_damagedunit;

    // Automatic Variable Declarations
    int auto82324604_ae;
    int auto82324604_ai;

    // Variable Initialization
    lv_damagedunit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 15.0))) {
            return false;
        }

        if (!((PlayerType(UnitGetOwner(lv_damagedunit)) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeMechanical) == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaBubble") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShieldMini") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShieldIgnis") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocol") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "NaniteCloudBuff") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "Immunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ImprovedNanoImmunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ImprovedPlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "SentinelRXHealthSystem") == false))) {
            return false;
        }

        if (!((RandomInt(1, gv_ailmentChance) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeBiological) == true)) {
        libEBB916F2_gf_Shuffle("Pierce_Ailments");
        auto82324604_ae = (Length("Pierce_Ailments") - 1);
        auto82324604_ai = 1;
        lv_ailment = 0;
        for ( ; ( (auto82324604_ai >= 0 && lv_ailment <= auto82324604_ae) || (auto82324604_ai <= 0 && lv_ailment >= auto82324604_ae) ) ; lv_ailment += auto82324604_ai ) {
            if ((RandomInt(1, gv_ailmentIndividualChance[libEBB916F2_gf_GetArrayValueInteger("Pierce_Ailments", lv_ailment)]) == 1)) {
                if ((UnitHasBehavior2(lv_damagedunit, "BioSuit") == true) && ((libEBB916F2_gf_GetArrayValueInteger("Pierce_Ailments", lv_ailment) == 4) || (libEBB916F2_gf_GetArrayValueInteger("Pierce_Ailments", lv_ailment) == 8))) {
                    break;
                }
                if ((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeHeroic) == false) && (libEBB916F2_gf_GetArrayValueInteger("Pierce_Ailments", lv_ailment) == 8)) {
                    break;
                }
                UnitBehaviorAdd(lv_damagedunit, gv_ailments[libEBB916F2_gf_GetArrayValueInteger("Pierce_Ailments", lv_ailment)], EventUnitDamageSourceUnit(), 1);
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PierceAilments_Init () {
    gt_PierceAilments = TriggerCreate("gt_PierceAilments_Func");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "GenesisAttack");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "MetasisAttack");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "KrillBite");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "PoochBite");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "SpitterDamage");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "EelDamage");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "HorrorDamage");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "StalkerHorn");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "EntanglingWebDamage");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "DilophosaurDamage");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "VileStreamDamage");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "ArchVileFlameBurst");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "AcidSludge2");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "AcidicExplosionDamage");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "MorbusSludgeDamage");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "ApiaryWeapon");
    TriggerAddEventUnitDamaged(gt_PierceAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "KraithSpineVolleyDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Poison Ailments
//--------------------------------------------------------------------------------------------------
bool gt_PoisonAilments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    unit lv_damagedunit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damagedunit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 15.0))) {
            return false;
        }

        if (!((PlayerType(UnitGetOwner(lv_damagedunit)) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeMechanical) == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaBubble") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShieldMini") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShieldIgnis") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocol") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "NaniteCloudBuff") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "Immunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "BioSuit") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ImprovedNanoImmunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ImprovedPlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ChemicalShielding") == false))) {
            return false;
        }

        if (!((RandomInt(1, gv_ailmentChance) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeBiological) == true)) {
        UnitBehaviorAdd(lv_damagedunit, gv_ailments[RandomInt(0, 1)], EventUnitDamageSourceUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PoisonAilments_Init () {
    gt_PoisonAilments = TriggerCreate("gt_PoisonAilments_Func");
    TriggerAddEventUnitDamaged(gt_PoisonAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "MotherFangsDamage");
    TriggerAddEventUnitDamaged(gt_PoisonAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "TarantulaFangsDamage");
    TriggerAddEventUnitDamaged(gt_PoisonAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "CrabStingDamage");
    TriggerAddEventUnitDamaged(gt_PoisonAilments, null, c_unitDamageTypeAny, c_unitDamageEither, "SwollenExplosionDmg");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TBI Camera Shake
//--------------------------------------------------------------------------------------------------
bool gt_TBICameraShake_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStart(EventPlayer(), c_cameraPositionTarget, c_cameraDirectionXY, 0.75, 0.2, 0.0, 105.0);
    while ((UnitHasBehavior2(EventUnit(), "TraumaticBrainInjury") == true) && (UnitIsAlive(EventUnit()) == true)) {
        Wait(1.0, c_timeGame);
    }
    CameraShakeStop(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TBICameraShake_Init () {
    gt_TBICameraShake = TriggerCreate("gt_TBICameraShake_Func");
    TriggerAddEventUnitBehaviorChange(gt_TBICameraShake, null, "TraumaticBrainInjury", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cursed Hit
//--------------------------------------------------------------------------------------------------
bool gt_CursedHit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    unit lv_damagedunit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damagedunit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeBiological) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeMechanical) == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaBubble") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShieldMini") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShieldIgnis") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocol") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "NaniteCloudBuff") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "Immunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ImprovedNanoImmunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ImprovedPlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ChemicalShielding") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(1, 2) == 1)) {
        UnitBehaviorAdd(lv_damagedunit, "NecroticVenom", EventUnitDamageSourceUnit(), 1);
    }
    else {
        UnitBehaviorAdd(lv_damagedunit, "NeurotoxicVenom", EventUnitDamageSourceUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CursedHit_Init () {
    gt_CursedHit = TriggerCreate("gt_CursedHit_Func");
    TriggerAddEventUnitDamaged(gt_CursedHit, null, c_unitDamageTypeAny, c_unitDamageEither, "CursedClaws");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scorpio Hit
//--------------------------------------------------------------------------------------------------
bool gt_ScorpioHit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    unit lv_damagedunit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damagedunit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeBiological) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_damagedunit), c_unitAttributeMechanical) == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShield4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaBubble") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShieldMini") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmaShieldIgnis") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocol") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "StonewallProtocolLevel4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "NaniteCloudBuff") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "Immunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ImprovedNanoImmunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "ImprovedPlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "PlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damagedunit, "SentinelRXHealthSystem") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_damagedunit, "ScorpioVenom", EventUnitDamageSourceUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScorpioHit_Init () {
    gt_ScorpioHit = TriggerCreate("gt_ScorpioHit_Func");
    TriggerAddEventUnitDamaged(gt_ScorpioHit, null, c_unitDamageTypeAny, c_unitDamageEither, "ScorpioClawsDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charon Hit
//--------------------------------------------------------------------------------------------------
bool gt_CharonHit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMechanical) == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaShield1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaShield2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaShield3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaShield4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaBubble") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaShieldMini") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmaShieldIgnis") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "StonewallProtocol") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "StonewallProtocolLevel1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "StonewallProtocolLevel2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "StonewallProtocolLevel3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "StonewallProtocolLevel4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "NaniteCloudBuff") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "RegendareDefensiveTactics3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "HatchedParasites") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Immunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "ImprovedNanoImmunity") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "ImprovedPlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PlasmicShield") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "SentinelRXHealthSystem") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "ParasiticInfection", EventUnitDamageSourceUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CharonHit_Init () {
    gt_CharonHit = TriggerCreate("gt_CharonHit_Func");
    TriggerAddEventUnitDamaged(gt_CharonHit, null, c_unitDamageTypeAny, c_unitDamageEither, "ParasiticInvasionDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cure Ailments
//--------------------------------------------------------------------------------------------------
bool gt_CureAilments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Automatic Variable Declarations
    const int autoC4A1062F_ae = gv_ailmentCount;
    const int autoC4A1062F_ai = 1;
    const int autoAFA9D457_ae = gv_ailmentCount;
    const int autoAFA9D457_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "QuikClot")) {
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MalignantInfection", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DebilitatingInfection", 1);
        lv_loopint = 2;
        for ( ; ( (autoC4A1062F_ai >= 0 && lv_loopint <= autoC4A1062F_ae) || (autoC4A1062F_ai < 0 && lv_loopint >= autoC4A1062F_ae) ) ; lv_loopint += autoC4A1062F_ai ) {
            UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), gv_ailments[lv_loopint], 1);
        }
    }
    else if (((EventPlayerEffectUsed() == "ImprovedNanoInjectionHeal") || (EventPlayerEffectUsed() == "SuperTransfusion") || (EventPlayerEffectUsed() == "SystemReboot"))) {
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "MalignantInfection", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DebilitatingInfection", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ScorpioVenom", 1);
        lv_loopint = 0;
        for ( ; ( (autoAFA9D457_ai >= 0 && lv_loopint <= autoAFA9D457_ae) || (autoAFA9D457_ai < 0 && lv_loopint >= autoAFA9D457_ae) ) ; lv_loopint += autoAFA9D457_ai ) {
            UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_ailments[lv_loopint], 1);
        }
    }
    else if (((EventPlayerEffectUsed() == "SelfAid") || (EventPlayerEffectUsed() == "IMBloodTransfusionApplyBehavior") || (EventPlayerEffectUsed() == "BloodTransfusionApplyBehavior") || (EventPlayerEffectUsed() == "FirstAidKitBehavior") || (EventPlayerEffectUsed() == "FieldAidAB"))) {
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "MinorLacerations", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "UnidentifiedInfection", 1);
    }
    else if (((EventPlayerEffectUsed() == "NanoInjectionHeal") || (EventPlayerEffectUsed() == "ImprovedRegeneratingMutationBuff"))) {
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "MinorLacerations", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "UnidentifiedInfection", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ClassIIIHemmorrhaging", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TraumaticBrainInjury", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FracturedArm", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FracturedLeg", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "EnergyLeak", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "MalignantInfection", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CureAilments_Init () {
    gt_CureAilments = TriggerCreate("gt_CureAilments_Func");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "QuikClot");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "SelfAid");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "NanoInjectionHeal");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "ImprovedNanoInjectionHeal");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "BloodTransfusionApplyBehavior");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "IMBloodTransfusionApplyBehavior");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "FirstAidKitBehavior");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "FieldAidAB");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "SuperTransfusion");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "ImprovedRegeneratingMutationBuff");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "SystemReboot");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ailment Spawn Zombie
//--------------------------------------------------------------------------------------------------
bool gt_AilmentSpawnZombie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Risen", c_unitCreateIgnorePlacement, 14, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    libE6C8C21C_gf_RegisterUnitDiesEvent(gt_PlayerKills, UnitLastCreated());
    libE6C8C21C_gf_RegisterUnitBecomesIdleEvent(gt_UndeadIdles, UnitLastCreated(), true);
    UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifier", UnitLastCreated(), gv_zombieBuffAmount);
    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AilmentSpawnZombie_Init () {
    gt_AilmentSpawnZombie = TriggerCreate("gt_AilmentSpawnZombie_Func");
    TriggerAddEventPlayerEffectUsed(gt_AilmentSpawnZombie, c_playerAny, "InfectedBiteDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ailment Spawn Zombie 2
//--------------------------------------------------------------------------------------------------
bool gt_AilmentSpawnZombie2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Swollen", c_unitCreateIgnorePlacement, 14, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    libE6C8C21C_gf_RegisterUnitDiesEvent(gt_PlayerKills, UnitLastCreated());
    libE6C8C21C_gf_RegisterUnitBecomesIdleEvent(gt_UndeadIdles, UnitLastCreated(), true);
    UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifier", UnitLastCreated(), gv_zombieBuffAmount);
    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AilmentSpawnZombie2_Init () {
    gt_AilmentSpawnZombie2 = TriggerCreate("gt_AilmentSpawnZombie2_Func");
    TriggerAddEventPlayerEffectUsed(gt_AilmentSpawnZombie2, c_playerAny, "DebilitatingInfectionDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Gain Level
//--------------------------------------------------------------------------------------------------
bool gt_HeroGainLevel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_hUDDialogItems[3][UnitGetOwner(EventUnit())], IntToText(UnitLevel(gv_playerHeroes[UnitGetOwner(EventUnit())])), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_statusDialogItems[3][UnitGetOwner(EventUnit())], IntToText(UnitLevel(gv_playerHeroes[UnitGetOwner(EventUnit())])), PlayerGroupAll());
    gf_FlashCCButton(EventPlayer(), "LearnAbilities", 2.5);
    if ((gf_ModHandles(PlayerHandle(EventPlayer())) || gf_DevHandles(PlayerHandle(EventPlayer())))) {
        SoundPlayOnUnit(SoundLink("ToxicCowboyScream", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    }

    if (gf_DevHandles(PlayerHandle(UnitGetOwner(EventUnit()))))
    {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "Create UpgradeEffectRed");
        return true;
    }
    libNtve_gf_AttachModelToUnit(EventUnit(), "LevelUp", "Ref_Center");
    lv_actor = libNtve_gf_ActorLastCreated();
    SoundPlayOnUnit(SoundLink("Purifier_PowerUp", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimation(lv_actor, c_animNameDefault, "Stand", 0, c_animTimeDefault);
    Wait(0.15, c_timeGame);
    libNtve_gf_KillModel(lv_actor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroGainLevel_Init () {
    gt_HeroGainLevel = TriggerCreate("gt_HeroGainLevel_Func");
    TriggerAddEventUnitGainLevel(gt_HeroGainLevel, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Submachine Gun LN/Mini
//--------------------------------------------------------------------------------------------------
bool gt_SubmachineGunLNMini_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attacker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attacker = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitWeaponGet(EventUnit(), 1) != "HeroAssaultRifle"))) {
            return false;
        }

        if (!((UnitWeaponGet(EventUnit(), 1) != "AssaultRifleBurst"))) {
            return false;
        }

        if (!((UnitWeaponGet(EventUnit(), 1) != "Carbine"))) {
            return false;
        }

        if (!((UnitWeaponGet(EventUnit(), 1) != "CarbineBurst"))) {
            return false;
        }

        if (!((UnitWeaponGet(EventUnit(), 1) != "SteelSaberCarbine"))) {
            return false;
        }

        if (!((UnitWeaponGet(EventUnit(), 1) != "SteelSaberCarbineBurst"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "SubmachineGunLNMini", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SubmachineGunLNMini_Init () {
    gt_SubmachineGunLNMini = TriggerCreate("gt_SubmachineGunLNMini_Func");
    TriggerAddEventUnitBehaviorChange(gt_SubmachineGunLNMini, null, "GAM30PDW", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_SubmachineGunLNMini, null, "GAM30PDW", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Magazine
//--------------------------------------------------------------------------------------------------
bool gt_DropMagazine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_charge;
    unit lv_mag;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.11, c_timeGame);
    if ((((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene) >= 3) && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) != "Flamethrower") && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) != "Flamethrower2")) || ((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropTerrazine) >= 200) && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) == "Flamethrower") && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) != "Flamethrower2")) || ((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropTerrazine) >= 200) && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) == "Flamethrower2") && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) != "Flamethrower")))) {
        if ((UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) != "Flamethrower") && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) != "Flamethrower2")) {
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSubtract, 3);
        }
        else {
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropTerrazine, c_playerPropOperSubtract, 200);
        }
        if ((gf_CountItemTypeUsed("Magazines", EventUnit(), "AmmoCharges") >= 1)) {
            UnitAddChargeUsed(gf_FirstAmmoUsed(EventUnit()), "AmmoCharges", -1.0);
        }
        else {
            if ((UnitInventoryCount(EventUnit(), c_unitInventoryCountCarried) == 6)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Magazines", 0, 0, UnitGetPosition(EventUnit()));
                lv_mag = UnitLastCreated();
                lv_charge = gf_chargesremaining(lv_mag, "AmmoCharges", 1.0);
                UnitSetInfoText(lv_mag, StringToText(""), (StringExternal("Param/Value/AA44A36A") + UnitGetName(lv_mag) + StringExternal("Param/Value/F425B6F8") + FixedToText(lv_charge, c_fixedPrecisionAny) + StringExternal("Param/Value/7CF955B5")), StringToText(""));
            }
            else {
                UnitInventoryCreate(EventUnit(), "Magazines");
                UnitSetOwner(UnitInventoryLastCreated(), 0, true);
            }
        }
        SoundPlayOnUnit(SoundLink("AmmoUse", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/6B5F3695"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropMagazine_Init () {
    gt_DropMagazine = TriggerCreate("gt_DropMagazine_Func");
    TriggerAddEventUnitAbility(gt_DropMagazine, null, AbilityCommand("DropMagazine", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_DropMagazine, null, AbilityCommand("BioSpecialistSubAbilities", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Magazine (Shortage)
//--------------------------------------------------------------------------------------------------
bool gt_DropMagazineShortage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_charge;
    unit lv_mag;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.11, c_timeGame);
    if ((((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene) >= 1) && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) != "Flamethrower") && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) != "Flamethrower2")) || ((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropTerrazine) >= 70) && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) == "Flamethrower") && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) != "Flamethrower2")) || ((PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropTerrazine) >= 70) && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) == "Flamethrower2") && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) != "Flamethrower")))) {
        if ((UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) != "Flamethrower") && (UnitGetType(gv_playerHeroes[UnitGetOwner(EventUnit())]) != "Flamethrower2")) {
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSubtract, 1);
        }
        else {
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropTerrazine, c_playerPropOperSubtract, 70);
        }
        if ((gf_CountItemTypeUsed("Magazines", EventUnit(), "AmmoCharges") >= 1)) {
            UnitAddChargeUsed(gf_FirstAmmoUsed(EventUnit()), "AmmoCharges", -1.0);
        }
        else {
            if ((UnitInventoryCount(EventUnit(), c_unitInventoryCountCarried) == 6)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Magazines", 0, 0, UnitGetPosition(EventUnit()));
                lv_mag = UnitLastCreated();
                lv_charge = gf_chargesremaining(lv_mag, "AmmoCharges", 1.0);
                UnitSetInfoText(lv_mag, StringToText(""), (StringExternal("Param/Value/04221356") + UnitGetName(lv_mag) + StringExternal("Param/Value/B540B90C") + FixedToText(lv_charge, c_fixedPrecisionAny) + StringExternal("Param/Value/F5F0A441")), StringToText(""));
            }
            else {
                UnitInventoryCreate(EventUnit(), "Magazines");
                UnitSetOwner(UnitInventoryLastCreated(), 0, true);
            }
        }
        SoundPlayOnUnit(SoundLink("AmmoUse", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/C7472523"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropMagazineShortage_Init () {
    gt_DropMagazineShortage = TriggerCreate("gt_DropMagazineShortage_Func");
    TriggerEnable(gt_DropMagazineShortage, false);
    TriggerAddEventUnitAbility(gt_DropMagazineShortage, null, AbilityCommand("DropMagazine", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect Magazine
//--------------------------------------------------------------------------------------------------
bool gt_EffectMagazine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ReadyMag") == false)) {
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ReadyMag", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EffectMagazine_Init () {
    gt_EffectMagazine = TriggerCreate("gt_EffectMagazine_Func");
    TriggerAddEventPlayerEffectUsed(gt_EffectMagazine, c_playerAny, "Magazines");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick Up Player Dropped Mag
//--------------------------------------------------------------------------------------------------
bool gt_PickUpPlayerDroppedMag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int auto391841C7_ae = 12;
    const int auto391841C7_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_int = 1;
    for ( ; ( (auto391841C7_ai >= 0 && lv_int <= auto391841C7_ae) || (auto391841C7_ai < 0 && lv_int >= auto391841C7_ae) ) ; lv_int += auto391841C7_ai ) {
        if ((UnitGroupHasUnit(gv_playerdroppedammo[lv_int], EventUnitInventoryItem()) == true)) {
            UnitGroupRemove(gv_playerdroppedammo[lv_int], EventUnitInventoryItem());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickUpPlayerDroppedMag_Init () {
    gt_PickUpPlayerDroppedMag = TriggerCreate("gt_PickUpPlayerDroppedMag_Func");
    TriggerAddEventUnitInventoryChange(gt_PickUpPlayerDroppedMag, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Reload
//--------------------------------------------------------------------------------------------------
bool gt_HeroReload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(lv_caster);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_reloading, lv_caster) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ReloadWeapon(lv_owner, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroReload_Init () {
    gt_HeroReload = TriggerCreate("gt_HeroReload_Func");
    TriggerAddEventUnitAbility(gt_HeroReload, null, AbilityCommand("ReloadHero", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_HeroReload, null, AbilityCommand("BioSpecialistSubAbilities", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Reload 2
//--------------------------------------------------------------------------------------------------
bool gt_ReloadClearJam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(lv_caster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_jammed, lv_caster);
    UnitBehaviorRemove(lv_caster, "Jammed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReloadClearJam_Init () {
    gt_ReloadClearJam = TriggerCreate("gt_ReloadClearJam_Func");
    TriggerAddEventUnitAbility(gt_ReloadClearJam, null, AbilityCommand("ReloadNew", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ReloadClearJam, null, AbilityCommand("ReloadNewMedic", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reload Mini
//--------------------------------------------------------------------------------------------------
bool gt_ReloadMini_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_reloader;
    int lv_texttag;
    bool lv_empty;
    fixed lv_reloadbasetime;
    fixed lv_reloadmod;
    point lv_position;
    soundlink lv_magout;
    soundlink lv_magin;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reloader = EventUnit();
    lv_texttag = c_textTagNone;
    lv_empty = (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) == 0.0);
    lv_reloadbasetime = RandomFixed(3.8, 4.2);
    lv_position = UnitGetPosition(lv_reloader);
    lv_magout = SoundLink("magout", -1);
    lv_magin = SoundLink("magin", -1);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(lv_reloader) == "GhostMini") || (UnitGetType(lv_reloader) == "RAGhost"))) {
        lv_magin = SoundLink("maginplasma", -1);
        lv_magout = SoundLink("magoutplasma", -1);
        lv_empty = false;
    }
    if ((UnitBehaviorEnabled(lv_reloader, "Training1") == true)) {
        lv_reloadmod = 0.6;
    }
    if ((UnitBehaviorEnabled(lv_reloader, "Training3") == true)) {
        lv_reloadmod = 1.5;
    }
    if (((UnitHasBehavior(lv_reloader, "USMCR") == true) || (UnitHasBehavior(lv_reloader, "SOFAR") == true) || (UnitHasBehavior(lv_reloader, "AA12") == true) || (UnitHasBehavior(lv_reloader, "IDMR2") == true))) {
        lv_reloadbasetime = (lv_reloadbasetime * 0.85);
    }
    if ((UnitHasBehavior(lv_reloader, "FastReload") == true)) {
        lv_reloadbasetime = (lv_reloadbasetime * 0.7);
    }
    if ((UnitHasBehavior(lv_reloader, "SimpleCartridge") == true)) {
        lv_reloadbasetime = (lv_reloadbasetime * 0.5);
    }
    if ((UnitHasBehavior(lv_reloader, "InstructorTarget") == true)) {
        lv_reloadbasetime = (lv_reloadbasetime * 0.8);
    }
    if ((UnitHasBehavior(lv_reloader, "Leadership4T") == true)) {
        lv_reloadbasetime = (lv_reloadbasetime * 0.8);
    }
    else {
        if ((UnitHasBehavior(lv_reloader, "Leadership3T") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.85);
        }
        else {
            if ((UnitHasBehavior(lv_reloader, "Leadership2T") == true)) {
                lv_reloadbasetime = (lv_reloadbasetime * 0.9);
            }
            else {
                if ((UnitHasBehavior(lv_reloader, "Leadership1T") == true)) {
                    lv_reloadbasetime = (lv_reloadbasetime * 0.95);
                }
            }
        }
    }
    UnitSetPropertyFixed(lv_reloader, c_unitPropEnergy, 0.0);
    if ((lv_position != null)) {
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/67DB99EA")), 16, UnitGetPosition(lv_reloader), 1.0, true, false, PlayerGroupAll());
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        lv_texttag = TextTagLastCreated();
        TextTagSetTextShadow(lv_texttag, false);
        TextTagSetTime(lv_texttag, c_textTagTimeDuration, 4.0);
        TextTagAttachToUnit(lv_texttag, lv_reloader, 1.0);
    }
    if ((lv_position != null)) {
        SoundPlayAtPoint(lv_magout, PlayerGroupAll(), lv_position, 0.0, 100.0, 0.0);
    }
    Wait((RandomFixed((lv_reloadbasetime - 0.2), (lv_reloadbasetime + 0.2)) - lv_reloadmod), c_timeGame);
    if ((lv_position != null)) {
        SoundPlayAtPoint(lv_magin, PlayerGroupAll(), lv_position, 0.0, 100.0, 0.0);
    }
    if ((lv_empty == true)) {
        Wait(1.0, c_timeGame);
        SoundPlayAtPoint(SoundLink("charginghandle", -1), PlayerGroupAll(), lv_position, 0.0, 100.0, 0.0);
    }
    UnitSetPropertyFixed(lv_reloader, c_unitPropEnergyPercent, 100.0);
    TextTagDestroy(lv_texttag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReloadMini_Init () {
    gt_ReloadMini = TriggerCreate("gt_ReloadMini_Func");
    TriggerAddEventUnitAbility(gt_ReloadMini, null, AbilityCommand("ReloadNPC", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automatic Reload Mini
//--------------------------------------------------------------------------------------------------
bool gt_AutomaticReloadMini_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attacker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attacker = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(lv_attacker, c_unitPropEnergy, c_unitPropCurrent) < 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_attacker, Order(AbilityCommand("ReloadNPC", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomaticReloadMini_Init () {
    gt_AutomaticReloadMini = TriggerCreate("gt_AutomaticReloadMini_Func");
    TriggerEnable(gt_AutomaticReloadMini, false);
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "SubmachineGun");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "PoliceRifle");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "PoliceOfficerRifle");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "PoliceOfficerShotgun");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "GhostPlasmaRifleMini");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "LNAssaultRifle");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "AssaultRifleJav");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "SquadAutomaticWeaponLN");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "AssaultRifleMedic");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "DMRLN");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "LNShotgun");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "IncendiaryRoundsLN");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "InfantryRiflemanRifle");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "AssaultRifle3");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "Carbine2");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "SquadAutomaticWeapon");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "SniperRifle");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "DMR");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "AssaultRifleSLMini");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "HK43Carbine");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "Shotgun");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "S40Ripsaw");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RABattleRifle");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RAM22BurstShotgun");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RACommandoRifle");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RASquadAutomaticWeapon");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RAP70CompactSMG");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RACombatShotgun");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RAM200Minigun");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RACyborgMachineGun");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RADMR");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RARangerCarbine");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RASniperRifle");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RASFRifle");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RAV2RamjetRifle");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "RAOppressorShotgun");
    TriggerAddEventUnitStartedAttack2(gt_AutomaticReloadMini, null, "PEWMkII");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automatic Reload Mini From Effect
//--------------------------------------------------------------------------------------------------
bool gt_AutomaticReloadMiniFromEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attacker;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(lv_attacker, c_unitPropEnergy, c_unitPropCurrent) < 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_attacker, Order(AbilityCommand("ReloadNPC", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomaticReloadMiniFromEffect_Init () {
    gt_AutomaticReloadMiniFromEffect = TriggerCreate("gt_AutomaticReloadMiniFromEffect_Func");
    TriggerAddEventPlayerEffectUsed(gt_AutomaticReloadMiniFromEffect, c_playerAny, "BurstEnergySubtract");
    TriggerAddEventPlayerEffectUsed(gt_AutomaticReloadMiniFromEffect, c_playerAny, "DumbSetEffectToFixOurProblemsMini");
    TriggerAddEventPlayerEffectUsed(gt_AutomaticReloadMiniFromEffect, c_playerAny, "DumbSetEffectToFixOurProblemsLN");
    TriggerAddEventPlayerEffectUsed(gt_AutomaticReloadMiniFromEffect, c_playerAny, "DumbSetEffectToFixOurProblemsRA");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jam
//--------------------------------------------------------------------------------------------------
bool gt_Jam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attacker;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attacker = EventUnit();
    lv_owner = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(lv_owner, c_playerPropMinerals) > 0))) {
            return false;
        }

        if (!((RandomInt(0, 80) == 1))) {
            return false;
        }

        if (!((RandomInt(0, 20) == 1))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_reloading, lv_attacker) == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_jammed, lv_attacker) == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_attacker, "CombatLoad") != true))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_attacker, "M135Minigun") != true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_attacker), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((gf_UnitCanJam(lv_attacker)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_playerEvents, (PlayerName(lv_owner) + StringToText(" has jammed.") + UnitGetName(lv_attacker)), false);
    if ((UnitGetType(lv_attacker) == "HeavyGunner")) {
        UnitIssueOrder(lv_attacker, Order(AbilityCommand("SpinBarrels", 1)), c_orderQueueReplace);
    }
    UnitGroupAdd(gv_jammed, lv_attacker);
    PlayerModifyPropertyInt(lv_owner, c_playerPropCustom, c_playerPropOperSetTo, 0);
    UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaSubtitle, StringExternal("Param/Value/DF2671B7"));
    SoundPlayOnUnit(SoundLink("noammo", -1), PlayerGroupAll(), lv_attacker, 0.0, 100.0, 0.0);
    UnitBehaviorAdd(lv_attacker, "Jammed", lv_attacker, 1);
    libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/E16F5078") + IntToText(PlayerGetPropertyInt(lv_owner, c_playerPropMinerals))), PlayerGroupSingle(lv_owner));
    TextTagCreate((TextWithColor(PlayerName(UnitGetOwner(lv_attacker)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lv_attacker), false))) + StringExternal("Param/Value/2ADD45E9")), 16, UnitGetPosition(lv_attacker), 1.0, true, true, PlayerGroupAll());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    gv_jammedtext[lv_owner] = TextTagLastCreated();
    TextTagSetTextShadow(gv_jammedtext[lv_owner], false);
    TextTagAttachToUnit(gv_jammedtext[lv_owner], lv_attacker, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Jam_Init () {
    gt_Jam = TriggerCreate("gt_Jam_Func");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "BattleRifleMk2");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "PDW");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "HeroAssaultRifle");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "AssaultRifleBurst");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "MachineGun");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "IncendiaryRounds");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "DesignatedMarksmanRifle");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "Carbine");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "CarbineBurst");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "SteelSaberCarbine");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "SteelSaberCarbineBurst");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "MachineGunCyborg");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "CommandoAssaultRifle");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "AntiMaterielRifle");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unjam
//--------------------------------------------------------------------------------------------------
bool gt_Unjam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    fixed lv_reloadmod;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(lv_caster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_caster, "Jammed") == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_immediateAction, lv_caster) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_reloadmod = (lv_reloadmod + (0.15 * IntToFixed(UnitAbilityGetLevel(lv_caster, "SoldierSkills"))));
    if ((UnitHasBehavior(lv_caster, "QuickThinking") == true)) {
        lv_reloadmod = (lv_reloadmod + 0.4);
    }

    if ((UnitHasBehavior(lv_caster, "IDMR2") == true)) {
        lv_reloadmod = (lv_reloadmod + 0.15);
    }

    if ((UnitHasBehavior(lv_caster, "SpecterSkills2") == true)) {
        lv_reloadmod = (lv_reloadmod + 0.2);
    }

    if ((UnitHasBehavior(lv_caster, "HeavyWeaponsTraining") == true)) {
        lv_reloadmod = (lv_reloadmod + 0.3);
    }

    if (((UnitHasBehavior(lv_caster, "USMCR") == true) || (UnitHasBehavior(lv_caster, "AA12") == true) || (UnitHasBehavior(lv_caster, "IDMR2") == true))) {
        lv_reloadmod = (lv_reloadmod + 0.15);
    }

    if ((UnitHasBehavior(lv_caster, "InstructorTarget") == true)) {
        lv_reloadmod = (lv_reloadmod + 0.3);
    }

    if ((UnitHasBehavior(lv_caster, "WeaponProficiency4") == true)) {
        lv_reloadmod = (lv_reloadmod + 0.4);
    }
    else {
        if ((UnitHasBehavior(lv_caster, "WeaponProficiency3") == true)) {
            lv_reloadmod = (lv_reloadmod + 0.3);
        }
        else {
            if ((UnitHasBehavior(lv_caster, "WeaponProficiency2") == true)) {
                lv_reloadmod = (lv_reloadmod + 0.2);
            }
            else {
                if ((UnitHasBehavior(lv_caster, "WeaponProficiency1") == true)) {
                    lv_reloadmod = (lv_reloadmod + 0.1);
                }

            }
        }
    }
    UnitGroupAdd(gv_immediateAction, lv_caster);
    if ((RandomInt(1, 6) == 1)) {
        SoundPlayOnUnit(SoundLink("magin", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait((RandomFixed(1.3, 1.7) - lv_reloadmod), c_timeGame);
        SoundPlayOnUnit(SoundLink("charginghandle", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait((RandomFixed(1.3, 1.7) - lv_reloadmod), c_timeGame);
        SoundPlayOnUnit(SoundLink("magout", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait((RandomFixed(3.8, 4.2) - lv_reloadmod), c_timeGame);
        SoundPlayOnUnit(SoundLink("magin", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait((RandomFixed(1.3, 1.7) - lv_reloadmod), c_timeGame);
        SoundPlayOnUnit(SoundLink("charginghandle", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait(0.4, c_timeGame);
    }
    else {
        SoundPlayOnUnit(SoundLink("magin", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait((RandomFixed(1.3, 1.7) - lv_reloadmod), c_timeGame);
        SoundPlayOnUnit(SoundLink("charginghandle", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait(0.4, c_timeGame);
    }
    PlayerModifyPropertyInt(lv_owner, c_playerPropCustom, c_playerPropOperSetTo, 99999);
    TextTagDestroy(gv_jammedtext[lv_owner]);
    libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/2057A9D0") + IntToText(PlayerGetPropertyInt(lv_owner, c_playerPropMinerals))), PlayerGroupSingle(lv_owner));
    UnitGroupRemove(gv_jammed, lv_caster);
    UnitBehaviorRemove(lv_caster, "Jammed", 1);
    UnitGroupRemove(gv_immediateAction, lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Unjam_Init () {
    gt_Unjam = TriggerCreate("gt_Unjam_Func");
    TriggerAddEventUnitAbility(gt_Unjam, null, AbilityCommand("ImmediateRemedialAction", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death
//--------------------------------------------------------------------------------------------------
bool gt_HeroDeath_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[13] lv_deathTimer;
    int[13] lv_tKCount;
    int lv_killingplayer;
    unit lv_deadHero;
    int lv_heroKilled;
    int lv_loopint;
    unit lv_item;
    int lv_lz;
    fixed lv_chargeCount;

    // Automatic Variable Declarations
    string auto45836E83_val;
    playergroup auto81969776_g;
    int auto81969776_var;
    playergroup auto9068EC53_g;
    int auto9068EC53_var;
    unitgroup autoC98279CE_g;
    int autoC98279CE_u;
    unit autoC98279CE_var;
    unitgroup auto0ABA1D25_g;
    int auto0ABA1D25_u;
    unit auto0ABA1D25_var;
    int auto226D8A26_n;
    int auto226D8A26_i;

    // Variable Initialization
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_deathTimer[init_i] = TimerCreate();
    }
    lv_killingplayer = UnitGetOwner(libNtve_gf_KillingUnit());
    lv_deadHero = EventUnit();
    lv_heroKilled = UnitGetOwner(lv_deadHero);
    lv_lz = RandomInt(1, 5);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, lv_deadHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_deadHero) == "AH32Viper")) {
        gf_AH32ViperDeath(lv_deadHero);
        return true;
    }

    if ((gf_DevHandles(PlayerHandle(lv_heroKilled)) || gf_ModHandles(PlayerHandle(lv_heroKilled)))) {
        SoundPlayOnUnit(SoundLink("DevDeath", -1), PlayerGroupAll(), lv_deadHero, 0.0, 100.0, 0.0);
    }
    else {
        SoundPlayOnUnit(SoundLink("diebuzz", -1), PlayerGroupAll(), lv_deadHero, 0.0, 100.0, 0.0);
    }
    if (gf_DevHandles(PlayerHandle(lv_heroKilled))) {
        auto45836E83_val = PlayerHandle(lv_heroKilled);
        if (auto45836E83_val == "1-S2-1-375017") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadHeroIndicatorXempest", 0, lv_heroKilled, UnitGetPosition(lv_deadHero));
        }
        else if (auto45836E83_val == "1-S2-1-3681588") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadHeroIndicatorAscantha", 0, lv_heroKilled, UnitGetPosition(lv_deadHero));
        }
        else if (auto45836E83_val == "1-S2-1-2424587") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadHeroIndicatorMalikav", 0, lv_heroKilled, UnitGetPosition(lv_deadHero));
        }
        else if (auto45836E83_val == "1-S2-1-375017") {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadHeroIndicatorRegendare", 0, lv_heroKilled, UnitGetPosition(lv_deadHero));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadHeroIndicatorDev", 0, lv_heroKilled, UnitGetPosition(lv_deadHero));
        }
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadHeroIndicator", 0, lv_heroKilled, UnitGetPosition(lv_deadHero));
    }
    gv_deadHeroIndicator[lv_heroKilled] = UnitLastCreated();
    auto81969776_g = gv_players;
    auto81969776_var = -1;
    while (true) {
        auto81969776_var = PlayerGroupNextPlayer(auto81969776_g, auto81969776_var);
        if (auto81969776_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, auto81969776_var);
    }
    gv_playerDeaths[lv_heroKilled] += 1;
    gv_teamDeathTotal += 1;
    gv_playerhits[lv_heroKilled] += 1;
    gv_playersHeroisDead[lv_heroKilled] = true;
    if ((gv_combatMedic == true) && (gv_shockPaddlesAllowed == true) && ((UnitGetType(lv_deadHero) == gv_mOS[2][0]) || (UnitGetType(lv_deadHero) == gv_mOS[2][1]))) {
        gv_medicKilled[lv_heroKilled] = true;
        gv_combatMedics -= 1;
        if ((gv_gameOver == false) && (gv_allselectors == true) && (gv_gamemode != 5) && (gv_gamemode != 11) && (gv_gamemode != 12) && (gv_mod_1life == false) && (gv_startingplayers > 4) && (gv_shockPaddlesAllowed == true) && (gv_combatMedics == 0) && (PlayerGroupCount(gv_medics) != 0)) {
            gv_shockPaddlesAllowed = false;
            gf_MissionText(StringExternal("Param/Value/A56D69C3"));
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(gv_lZs[lv_lz]), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 8.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/90DBF489"));
            gf_AirDropItemLoc("ShockPaddles", RegionGetCenter(gv_lZs[lv_lz]), 1);
        }
    }
    TextTagDestroy(gv_jammedtext[lv_heroKilled]);
    gf_RemoveAilments(lv_deadHero);
    auto9068EC53_g = gv_players;
    auto9068EC53_var = -1;
    while (true) {
        auto9068EC53_var = PlayerGroupNextPlayer(auto9068EC53_g, auto9068EC53_var);
        if (auto9068EC53_var < 0) { break; }
        if ((PlayerStatus(auto9068EC53_var) == c_playerStatusActive)) {
            PlayerSetAlliance(auto9068EC53_var, c_allianceIdVision, EventPlayer(), true);
        }

    }
    if ((PlayerGetPropertyInt(lv_heroKilled, c_playerPropVespene) >= 3) && (UnitGetType(lv_deadHero) != "Flamethrower") && (UnitGetType(lv_deadHero) != "Flamethrower2")) {
        if ((gv_mod_NoAmmo == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing((PlayerGetPropertyInt(lv_heroKilled, c_playerPropVespene) / 3), "Magazines", 0, 0, PointWithOffset(UnitGetPosition(lv_deadHero), RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)));
            UnitGroupAddUnitGroup(gv_playerdroppedammo[EventPlayer()], UnitLastCreatedGroup());
            auto0ABA1D25_g = gv_playerdroppedammo[EventPlayer()];
            auto0ABA1D25_u = UnitGroupCount(auto0ABA1D25_g, c_unitCountAll);
            for (;; auto0ABA1D25_u -= 1) {
                auto0ABA1D25_var = UnitGroupUnitFromEnd(auto0ABA1D25_g, auto0ABA1D25_u);
                if (auto0ABA1D25_var == null) { break; }
                lv_chargeCount = gf_chargesremaining(auto0ABA1D25_var, "AmmoCharges", 1.0);
                UnitSetInfoText(auto0ABA1D25_var, StringToText(""), (StringExternal("Param/Value/0A4AD4FC") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/751E92A7") + FixedToText(lv_chargeCount, c_fixedPrecisionAny) + StringExternal("Param/Value/D20CEE23")), StringToText(""));
            }
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing((PlayerGetPropertyInt(lv_heroKilled, c_playerPropVespene) / 3), "Magazines", 0, 0, PointWithOffset(UnitGetPosition(lv_deadHero), RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)));
            UnitGroupAddUnitGroup(gv_playerdroppedammo[EventPlayer()], UnitLastCreatedGroup());
            autoC98279CE_g = gv_playerdroppedammo[EventPlayer()];
            autoC98279CE_u = UnitGroupCount(autoC98279CE_g, c_unitCountAll);
            for (;; autoC98279CE_u -= 1) {
                autoC98279CE_var = UnitGroupUnitFromEnd(autoC98279CE_g, autoC98279CE_u);
                if (autoC98279CE_var == null) { break; }
                UnitAddChargeUsed(autoC98279CE_var, "AmmoCharges", -2.0);
                lv_chargeCount = gf_chargesremaining(autoC98279CE_var, "AmmoCharges", 3.0);
                UnitSetInfoText(autoC98279CE_var, StringToText(""), (StringExternal("Param/Value/D399C387") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/E102FE03") + FixedToText(lv_chargeCount, c_fixedPrecisionAny) + StringExternal("Param/Value/B30546B3")), StringToText(""));
            }
        }
        if ((ModI(PlayerGetPropertyInt(lv_heroKilled, c_playerPropVespene), 3) == 0)) {
            PlayerModifyPropertyInt(lv_heroKilled, c_playerPropVespene, c_playerPropOperSetTo, 0);
        }
        else if ((ModI(PlayerGetPropertyInt(lv_heroKilled, c_playerPropVespene), 3) == 1)) {
            PlayerModifyPropertyInt(lv_heroKilled, c_playerPropVespene, c_playerPropOperSetTo, 1);
        }
        else if ((ModI(PlayerGetPropertyInt(lv_heroKilled, c_playerPropVespene), 3) == 2)) {
            PlayerModifyPropertyInt(lv_heroKilled, c_playerPropVespene, c_playerPropOperSetTo, 2);
        }
    }

    if ((gv_playerLeftGame[lv_heroKilled] == true)) {
        return true;
    }
    if ((lv_heroKilled == libNtve_gf_KillingPlayer())) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/7D0A7069") + UnitGetName(lv_deadHero) + StringExternal("Param/Value/0DA4478F") + StringExternal("Param/Value/AD518587")));
    }
    else {
        if ((PlayerGroupHasPlayer(gv_players, lv_killingplayer) == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/6E77B414") + UnitGetName(lv_deadHero) + StringExternal("Param/Value/CD66CF80") + StringExternal("Param/Value/77C5DC0C") + TextWithColor(PlayerName(lv_killingplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingplayer, false)))));
            if ((libNtve_gf_PlayerIsEnemy(lv_killingplayer, lv_heroKilled, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                gv_playerkickable[lv_killingplayer] = true;
                gv_tKer[libNtve_gf_KillingPlayer()] = true;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/08B2E040") + TextWithColor(PlayerName(lv_killingplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingplayer, false))) + StringExternal("Param/Value/73191CD5") + UnitGetName(gv_playerHeroes[lv_killingplayer]) + StringExternal("Param/Value/93321181")));
                UnitGroupAdd(gv_heroskilledbyplayer[lv_killingplayer], lv_deadHero);
            }

        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/D8408C4E") + UnitGetName(lv_deadHero) + StringExternal("Param/Value/DDEFA237") + StringExternal("Param/Value/D627753C")));
        }
    }
    if ((DialogIsVisible(gv_itemScannerMenuDialog, lv_heroKilled) == true)) {
        DialogSetVisible(gv_itemScannerMenuDialog, PlayerGroupSingle(lv_heroKilled), false);
    }
    if ((gv_playersHeroisDead[lv_heroKilled] == true) && ((gv_gamemode == 7) || (gv_gamemode == 8) || (gv_gamemode == 9))) {
        TimerStart(lv_deathTimer[lv_heroKilled], gv_deathDuration[lv_heroKilled], false, c_timeGame);
        auto226D8A26_n = FixedToInt((gv_deathDuration[lv_heroKilled] / gv_deathInterval[lv_heroKilled]));
        for (auto226D8A26_i = 1; auto226D8A26_i <= auto226D8A26_n; auto226D8A26_i += 1) {
            if ((gv_playersHeroisDead[lv_heroKilled] == false)) {
                break;
            }

            Wait(gv_deathInterval[lv_heroKilled], c_timeGame);
        }
        if ((gv_playersHeroisDead[lv_heroKilled] == false)) {
            gv_deadPlayerMini[lv_heroKilled] = false;
        }
        else {
            gv_deadPlayerMini[lv_heroKilled] = true;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroDeath_Init () {
    gt_HeroDeath = TriggerCreate("gt_HeroDeath_Func");
    TriggerAddEventUnitDied(gt_HeroDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive
//--------------------------------------------------------------------------------------------------
bool gt_Revive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    int lv_targetplayer;
    int lv_i;
    fixed lv_charge;

    // Automatic Variable Declarations
    const int auto3DE6E79C_ae = 12;
    const int auto3DE6E79C_ai = 1;
    int autoAB0E85D2_n;
    int autoAB0E85D2_i;
    int auto5232DA8D_n;
    int auto5232DA8D_i;
    unitgroup auto8AFFBA8E_g;
    int auto8AFFBA8E_u;
    unit auto8AFFBA8E_var;
    playergroup autoBF4195B5_g;
    int autoBF4195B5_var;
    playergroup auto1BE15484_g;
    int auto1BE15484_var;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetplayer = UnitGetOwner(lv_target);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playersHeroisDead[lv_targetplayer] = false;
    gv_deadPlayerMini[lv_targetplayer] = false;
    gv_playerRevivedPlayer[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] = true;
    UnitRevive(lv_target);
    SoundPlayOnUnit(SoundLink("Wololo", -1), PlayerGroupAll(), lv_target, 0.0, 100.0, 0.0);
    UnitSetPropertyFixed(lv_target, c_unitPropLifePercent, 70.0);
    UnitSetPropertyFixed(lv_target, c_unitPropEnergyPercent, 50.0);
    UnitGroupAdd(gv_undeadTargetGroup, lv_target);
    libNtve_gf_SendActorMessageToUnit(lv_target, gv_rankActorMsg[gv_playerRankSet[lv_targetplayer]][gf_GetPlayerRank(lv_targetplayer)]);
    UnitRemove(gv_deadHeroIndicator[lv_targetplayer]);
    libNtve_gf_ShowHideUnit(lv_target, false);
    Wait(0.625, c_timeGame);
    libNtve_gf_ShowHideUnit(lv_target, true);
    PlayerModifyPropertyInt(lv_targetplayer, c_playerPropCustom, c_playerPropOperSetTo, 99999);
    UnitGroupRemove(gv_jammed, lv_target);
    UnitBehaviorRemove(lv_target, "Jammed", 1);
    UnitGroupRemove(gv_immediateAction, lv_target);
    lv_i = 1;
    for ( ; ( (auto3DE6E79C_ai >= 0 && lv_i <= auto3DE6E79C_ae) || (auto3DE6E79C_ai < 0 && lv_i >= auto3DE6E79C_ae) ) ; lv_i += auto3DE6E79C_ai ) {
        UnitGroupRemove(gv_heroskilledbyplayer[lv_i], lv_target);
    }
    gf_RemoveAilments(lv_target);
    if ((gv_mod_NoAmmo == false)) {
        auto5232DA8D_n = UnitGroupCount(gv_playerdroppedammo[lv_targetplayer], c_unitCountAlive);
        for (auto5232DA8D_i = 1; auto5232DA8D_i <= auto5232DA8D_n; auto5232DA8D_i += 1) {
            if ((UnitInventoryCount(lv_target, c_unitInventoryCountCarried) == 6)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Magazines", 0, 0, UnitGetPosition(lv_target));
                lv_charge = gf_chargesremaining(UnitLastCreated(), "AmmoCharges", 1.0);
                UnitSetInfoText(UnitLastCreated(), StringToText(""), (StringExternal("Param/Value/43AE3DF2") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/447F58FF") + FixedToText(lv_charge, c_fixedPrecisionAny) + StringExternal("Param/Value/622FD932")), StringToText(""));
            }
            else {
                UnitInventoryCreate(lv_target, "Magazines");
            }
        }
    }
    else {
        autoAB0E85D2_n = UnitGroupCount(gv_playerdroppedammo[lv_targetplayer], c_unitCountAlive);
        for (autoAB0E85D2_i = 1; autoAB0E85D2_i <= autoAB0E85D2_n; autoAB0E85D2_i += 1) {
            if ((UnitInventoryCount(lv_target, c_unitInventoryCountCarried) == 6)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Magazines", 0, 0, UnitGetPosition(lv_target));
                UnitAddChargeUsed(UnitLastCreated(), "AmmoCharges", -2.0);
                lv_charge = gf_chargesremaining(UnitLastCreated(), "AmmoCharges", 3.0);
                UnitSetInfoText(UnitLastCreated(), StringToText(""), (StringExternal("Param/Value/C6D0ACF6") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/47E85CCA") + FixedToText(lv_charge, c_fixedPrecisionAny) + StringExternal("Param/Value/1D64682D")), StringToText(""));
            }
            else {
                UnitInventoryCreate(lv_target, "Magazines");
                UnitAddChargeUsed(UnitInventoryLastCreated(), "AmmoCharges", -2.0);
            }
        }
    }
    auto8AFFBA8E_g = gv_playerdroppedammo[lv_targetplayer];
    auto8AFFBA8E_u = UnitGroupCount(auto8AFFBA8E_g, c_unitCountAll);
    for (;; auto8AFFBA8E_u -= 1) {
        auto8AFFBA8E_var = UnitGroupUnitFromEnd(auto8AFFBA8E_g, auto8AFFBA8E_u);
        if (auto8AFFBA8E_var == null) { break; }
        UnitRemove(auto8AFFBA8E_var);
    }
    if ((gv_pauseSpawning == false)) {
        CameraPan(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), UnitGetPosition(lv_target), 0.0, -1, 10, false);
    }

    UnitSelect(lv_target, UnitGetOwner(lv_target), true);
    if ((PlayerHandle(lv_targetplayer) == "1-S2-1-3378891")) {
        UnitBehaviorAdd(lv_target, "EdinWoofWoof", lv_target, 1);
    }

    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_target)), c_messageAreaSubtitle, StringExternal("Param/Value/2D95B0DD"));
    autoBF4195B5_g = gv_players;
    autoBF4195B5_var = -1;
    while (true) {
        autoBF4195B5_var = PlayerGroupNextPlayer(autoBF4195B5_g, autoBF4195B5_var);
        if (autoBF4195B5_var < 0) { break; }
        if ((autoBF4195B5_var != lv_targetplayer)) {
            UIDisplayMessage(PlayerGroupSingle(autoBF4195B5_var), c_messageAreaError, (gf_TextImage(gf_GetPlayerImage(lv_targetplayer), 25) + StringExternal("Param/Value/5468A4D6") + PlayerName(lv_targetplayer) + StringExternal("Param/Value/98B82342") + UnitGetName(gv_playerHeroes[lv_targetplayer]) + StringExternal("Param/Value/94BA5051") + StringExternal("Param/Value/F25BD535")));
        }
    }
    libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lv_targetplayer], libNtve_gf_TextureSelectByID(UserDataGetGameLink("Camos", UserDataInstance("Camos", gv_textureValue[lv_targetplayer][1]), "Camo", 1)));
    if ((gv_textureValue[lv_targetplayer][0] >= 1)) {
        libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lv_targetplayer], libNtve_gf_TextureSelectByID(UserDataGetGameLink("Decals", UserDataInstance("Decals", gv_textureValue[lv_targetplayer][0]), "Decals", 1)));
    }
    auto1BE15484_g = gv_players;
    auto1BE15484_var = -1;
    while (true) {
        auto1BE15484_var = PlayerGroupNextPlayer(auto1BE15484_g, auto1BE15484_var);
        if (auto1BE15484_var < 0) { break; }
        if ((PlayerStatus(auto1BE15484_var) == c_playerStatusActive) && (auto1BE15484_var != EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) {
            PlayerSetAlliance(auto1BE15484_var, c_allianceIdVision, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), false);
        }

    }
    if ((gv_shockPaddlesAllowed == true) && ((UnitGetType(lv_target) == gv_mOS[2][0]) || (UnitGetType(lv_target) == gv_mOS[2][1]))) {
        gv_medicKilled[lv_targetplayer] = false;
        gv_combatMedics += 1;
    }
    if ((EventPlayerEffectUsedUnitOwner(c_effectPlayerSource) != EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) {
        gv_playerRevives[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] += 1;
        gv_playerRevivesGame[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] += 1;
        gv_playerRevivedPlayer[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] = true;
        gf_UnlockAchievement(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    }

    if ((GameIsOnline() == true) && (gv_playerdecalunlocked[7][EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] == false) && (gv_playerRevives[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] >= 40)) {
        SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00119", 0), PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), c_messageAreaSubtitle, StringExternal("Param/Value/EB2D39D4"));
        gv_playerdecalunlocked[7][EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Revive_Init () {
    gt_Revive = TriggerCreate("gt_Revive_Func");
    TriggerAddEventPlayerEffectUsed(gt_Revive, c_playerAny, "ReviveModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over
//--------------------------------------------------------------------------------------------------
bool gt_GameOver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto75A11BB5_g;
    int auto75A11BB5_var;
    unitgroup autoD823C037_g;
    int autoD823C037_u;
    unit autoD823C037_var;
    unitgroup auto9070169E_g;
    int auto9070169E_u;
    unit auto9070169E_var;
    playergroup auto440E6270_g;
    int auto440E6270_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(gv_heroesGroup) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("LOTV_Music_Defeat", 0), PlayerGroupAll(), 100.0, 0.0);
    gv_gameOver = true;
    gv_pauseSpawning = true;
    GameSetMissionTimePaused(true);
    TimerPause(gv_missiontimer, true);
    TimerPause(gv_missiontimer2, true);
    TimerPause(gv_pMCAlertTimer, true);
    TimerPause(gv_bossTimer, true);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    TimerWindowShow(gv_missiontimerwindow2, PlayerGroupAll(), false);
    TimerWindowShow(gv_bossTimerWindow, PlayerGroupAll(), false);
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00084", 0), PlayerGroupAll(), 100.0, 0.0);
    auto75A11BB5_g = gv_players;
    auto75A11BB5_var = -1;
    while (true) {
        auto75A11BB5_var = PlayerGroupNextPlayer(auto75A11BB5_g, auto75A11BB5_var);
        if (auto75A11BB5_var < 0) { break; }
        gv_playerAvgGameTime[auto75A11BB5_var] = ((FixedToInt(GameGetMissionTime()) + gv_playerAvgGameTime[auto75A11BB5_var]) / 2);
    }
    UnitPauseAll(true);
    autoD823C037_g = gv_undeadGroup;
    autoD823C037_u = UnitGroupCount(autoD823C037_g, c_unitCountAll);
    for (;; autoD823C037_u -= 1) {
        autoD823C037_var = UnitGroupUnitFromEnd(autoD823C037_g, autoD823C037_u);
        if (autoD823C037_var == null) { break; }
        UnitRemove(autoD823C037_var);
    }
    auto9070169E_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9070169E_u = UnitGroupCount(auto9070169E_g, c_unitCountAll);
    for (;; auto9070169E_u -= 1) {
        auto9070169E_var = UnitGroupUnitFromEnd(auto9070169E_g, auto9070169E_u);
        if (auto9070169E_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto9070169E_var, true);
    }
    gf_DisplayScoreScreen();
    auto440E6270_g = gv_players;
    auto440E6270_var = -1;
    while (true) {
        auto440E6270_var = PlayerGroupNextPlayer(auto440E6270_g, auto440E6270_var);
        if (auto440E6270_var < 0) { break; }
        gf_SaveBankSimple(auto440E6270_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameOver_Init () {
    gt_GameOver = TriggerCreate("gt_GameOver_Func");
    TriggerEnable(gt_GameOver, false);
    TriggerAddEventUnitDied(gt_GameOver, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Prologue
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningPrologue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto84C1BC88_n = 8;
    int auto84C1BC88_i;
    const int auto4A93C3C1_n = 4;
    int auto4A93C3C1_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    for (auto84C1BC88_i = 1; auto84C1BC88_i <= auto84C1BC88_n; auto84C1BC88_i += 1) {
        gf_SpawnUndead((gv_spawnCount / 2), "Zombie", 1);
    }
    for (auto4A93C3C1_i = 1; auto4A93C3C1_i <= auto4A93C3C1_n; auto4A93C3C1_i += 1) {
        gf_SpawnUndead((gv_spawnCount / 3), "Zombie", 1);
    }
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    if ((gv_gamemode >= 1)) {
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Unburied", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    }
    else {
        gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    }
    if (((gv_gamemode == 5) || (gv_gamemode == 11))) {
        gf_SpawnUndead((gv_spawnCount / 2), "Risen", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningPrologue_Init () {
    gt_UndeadSpawningPrologue = TriggerCreate("gt_UndeadSpawningPrologue_Func");
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningPrologue, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningPrologue, 60.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning 1
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawning1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(1, "ZombieImpaler", 5);
        gf_SpawnUndead(RandomInt(1, 3), "Spitter", 7);
        gf_SpawnUndead(gv_spawnCount, "Risen", 2);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
    }
    else {
        gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    }
    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead(RandomInt(1, 3), "Spitter", 9);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    }

    gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
    gf_SpawnUndead(gv_spawnCount, "Swarmer", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 2);
    gf_SpawnUndead((gv_spawnCount / 2), "Pooch", 3);
    gf_SpawnUndead((gv_spawnCount * 2), "InfestedCivilian", 5);
    gf_SpawnUndead((gv_spawnCount * 2), "Zombie", 4);
    gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 4);
    gf_SpawnUndead((gv_spawnCount / 3), "Shredder", 5);
    gf_SpawnUndead(RandomInt(1, 3), "Leaper", 3);
    gf_SpawnUndead(RandomInt(1, 3), "Leaper", 4);
    gf_SpawnUndead(1, "ZombieWraith", 7);
    gf_SpawnUndead(FixedToInt((IntToFixed(gv_spawnCount) * 1.3)), "Tarantula", 6);
    gf_SpawnUndead(1, "ArachnidMother", 6);
    gf_SpawnUndead(1, "Gourmand", 20);
    gf_SpawnUndead(1, "Morbus", 7);
    gf_SpawnUndead(1, "ZombieCarrier", 6);
    gf_SpawnUndead(1, "Horror", 8);
    gf_SpawnUndead(1, "Dilophosaur", 12);
    gf_SpawnUndead(1, "ArchVile", 18);
    if ((gv_averageXP >= 30000)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 4);
        gf_SpawnUndead(gv_spawnCount, "Glutton", 10);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 7);
        gf_SpawnUndead(RandomInt(1, 5), "Leaper", 3);
    }

    if ((gv_averageXP >= 50000)) {
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
    }

    if ((gv_averageXP >= 80000)) {
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
        gf_SpawnUndead(RandomInt(2, 5), "Leaper", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
        gf_SpawnUndead(1, "Horror", 12);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Turned", 3);
        gf_SpawnUndead(RandomInt(1, 3), "Licker", 3);
        gf_SpawnUndead(gv_spawnCount, "Glutton", 10);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 4);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 7);
        Wait(RandomFixed(0.5, 1.5), c_timeGame);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 4);
        gf_SpawnUndead((gv_spawnCount / 3), "Krill", 12);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 7);
        gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 3);
    }

    if ((gv_infestationLevel >= 40)) {
        gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead(gv_spawnCount, "Glutton", 6);
        gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Unburied", 1);
        gf_SpawnUndead(1, "Gourmand", 11);
    }
    else {
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
    }
    if (((gv_gamemode == 5) || (gv_gamemode == 11))) {
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead(gv_spawnCount, "Glutton", 6);
        gf_SpawnUndead(1, "Gourmand", 12);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawning1_Init () {
    gt_UndeadSpawning1 = TriggerCreate("gt_UndeadSpawning1_Func");
    TriggerEnable(gt_UndeadSpawning1, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawning1, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawning1, 80.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning 2
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawning2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
    gf_SpawnUndead(gv_spawnCount, "Boomer", 6);
    gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
    gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 5);
    gf_SpawnUndead((gv_spawnCount / 3), "Shredder", 5);
    gf_SpawnUndead(1, "Gargantuan", 20);
    gf_SpawnUndead(RandomInt(1, 3), "Leaper", 3);
    gf_SpawnUndead(RandomInt(1, 3), "Leaper", 3);
    gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 3);
    gf_SpawnUndead(RandomInt(1, 2), "ZombieWraith", 6);
    gf_SpawnUndead(1, "Gourmand", 10);
    gf_SpawnUndead(1, "Horror", 8);
    gf_SpawnUndead(1, "Dilophosaur", 12);
    gf_SpawnUndead(1, "ArchVile", 12);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(RandomInt(1, 3), "ZombieImpaler", 4);
        gf_SpawnUndead(1, "Morbus", 6);
        gf_SpawnUndead(RandomInt(1, 3), "Spitter", 5);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Turned", 3);
        gf_SpawnUndead(3, "Hunter", 9);
        gf_SpawnUndead(RandomInt(1, 3), "Licker", 3);
    }

    if ((gv_averageXP >= 20000)) {
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Turned", 3);
    }

    if ((gv_averageXP >= 45000)) {
        gf_SpawnUndead(1, "Gourmand", 15);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
        gf_SpawnUndead(1, "ZombieWraith", 4);
    }

    if ((gv_averageXP >= 65000)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Krill", 5);
        gf_SpawnUndead(1, "Horror", 15);
        gf_SpawnUndead(1, "ZombieCarrier", 6);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
        gf_SpawnUndead(2, "ZombieYeti", 9);
        gf_SpawnUndeadMixed(3, "Parasite", "Eel", "Tarantula", 2, 8, 12);
    }

    if ((gv_infestationLevel >= 40)) {
        gf_SpawnUndead(gv_spawnCount, "Boomer", 6);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 3);
        gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Turned", 1);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 5);
        gf_SpawnUndead(1, "Morbus", 5);
        gf_SpawnUndead(1, "ZombieCarrier", 6);
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 5);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 5);
        gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 7);
        gf_SpawnUndead((gv_spawnCount / 3), "Shredder", 7);
        gf_SpawnUndead((gv_spawnCount / 3), "Krill", 12);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead(1, "Morbus", 5);
        gf_SpawnUndead((gv_spawnCount * 3), "Hopper", 4);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(1, "Gourmand", 50);
        gf_SpawnUndead(3, "Hunter", 5);
        gf_SpawnUndead(1, "Dilophosaur", 7);
        gf_SpawnUndeadMixed(3, "Parasite", "Eel", "Tarantula", 3, 10, 15);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawning2_Init () {
    gt_UndeadSpawning2 = TriggerCreate("gt_UndeadSpawning2_Func");
    TriggerEnable(gt_UndeadSpawning2, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawning2, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawning2, 120.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning 3
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawning3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Krill", 4);
    gf_SpawnUndead((gv_spawnCount / 2), "Shredder", 5);
    gf_SpawnUndead(3, "Hunter", 8);
    gf_SpawnUndead(2, "ZombieYeti", 8);
    gf_SpawnUndead(1, "Gourmand", 20);
    gf_SpawnUndead(1, "Gargantuan", 18);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 8);
    gf_SpawnUndead(RandomInt(1, 6), "Leaper", 3);
    gf_SpawnUndead(RandomInt(1, 2), "ZombieWraith", 4);
    gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 3);
    gf_SpawnUndead(1, "Morbus", 7);
    gf_SpawnUndead(1, "ZombieCarrier", 5);
    gf_SpawnUndead(1, "Horror", 8);
    gf_SpawnUndead(1, "Dilophosaur", 12);
    gf_SpawnUndead(RandomInt(1, 3), "Spitter", 6);
    gf_SpawnUndead(1, "ArchVile", 9);
    if ((gv_averageXP >= 25000)) {
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
        gf_SpawnUndead(1, "Horror", 8);
    }

    if ((gv_averageXP >= 60000)) {
        gf_SpawnUndead(1, "Immussilus", 25);
        gf_SpawnUndead(1, "Gourmand", 20);
        gf_SpawnUndead(1, "ZombieWraith", 3);
        gf_SpawnUndead(1, "Dilophosaur", 7);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
    }

    if ((gv_averageXP >= 95000)) {
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
        gf_SpawnUndead(1, "ArchVile", 20);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Cursed", 3);
        gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Drake", 3);
        gf_SpawnUndead(1, "ZombieCarrier", 8);
        gf_SpawnUndead(RandomInt(1, 3), "Licker", 3);
    }

    if ((gv_infestationLevel >= 40)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Krill", 4);
        gf_SpawnUndead((gv_spawnCount / 3), "Shredder", 5);
        gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead((gv_spawnCount / 3), "Unburied", 1);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 3);
        gf_SpawnUndead(3, "Hunter", 4);
        gf_SpawnUndead(2, "ZombieYeti", 4);
        gf_SpawnUndead(gv_spawnCount, "Turned", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Unburied", 1);
        gf_SpawnUndead(1, "Morbus", 5);
        gf_SpawnUndead((gv_spawnCount * 3), "Hopper", 5);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(1, "Gourmand", 20);
        gf_SpawnUndead((gv_spawnCount / 2), "Krill", 4);
        gf_SpawnUndead((gv_spawnCount / 3), "Unburied", 1);
        gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 3);
        gf_SpawnUndead(1, "Dilophosaur", 4);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawning3_Init () {
    gt_UndeadSpawning3 = TriggerCreate("gt_UndeadSpawning3_Func");
    TriggerEnable(gt_UndeadSpawning3, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawning3, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawning3, 180.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Outbreak 1
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningOutbreak1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndeadImmediate((gv_spawnCount * 3), "InfestedCivilian", 1);
    gf_SpawnUndeadImmediate((gv_spawnCount * 4), "Zombie", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Pooch", 4);
    gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 3);
    gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
    Wait(8.0, c_timeGame);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Boomer", 2);
    gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Drake", 2);
    gf_SpawnUndeadImmediate((gv_spawnCount * 4), "Zombie", 1);
    gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(RandomInt(1, 3), "Leaper", 3);
    gf_SpawnUndead(RandomInt(1, 3), "Licker", 3);
    Wait(8.0, c_timeGame);
    gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Tarantula", 5);
    gf_SpawnUndead(1, "ZombieWraith", 3);
    gf_SpawnUndeadImmediate((gv_spawnCount / 3), "Unburied", 1);
    if ((gv_averageXP >= 250000)) {
        gf_SpawnUndeadImmediate((gv_spawnCount / 3), "Unburied", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 2);
        gf_SpawnUndead(2, "Swollen", 2);
        gf_SpawnUndead(1, "ZombieWraith", 3);
    }

    if ((gv_averageXP >= 500000)) {
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Unburied", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "InfestedCivilian", 2);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 2);
        gf_SpawnUndead(RandomInt(1, 2), "ZombieWraith", 3);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndeadImmediate(gv_spawnCount, "Risen", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "InfestedCivilian", 2);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 2);
        gf_SpawnUndeadImmediate(gv_spawnCount, "InfestedCivilian", 1);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndeadImmediate(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Unburied", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "InfestedCivilian", 1);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Turned", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Risen", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Drake", 2);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(RandomInt(1, 2), "ZombieWraith", 3);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Turned", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Boomer", 3);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningOutbreak1_Init () {
    gt_UndeadSpawningOutbreak1 = TriggerCreate("gt_UndeadSpawningOutbreak1_Func");
    TriggerEnable(gt_UndeadSpawningOutbreak1, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningOutbreak1, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningOutbreak1, 80.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Outbreak 2
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningOutbreak2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndead((gv_spawnCount * 3), "Eel", 4);
    gf_SpawnUndeadImmediate((gv_spawnCount * 3), "InfestedCivilian", 1);
    gf_SpawnUndeadImmediate((gv_spawnCount * 4), "Zombie", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Pooch", 4);
    gf_SpawnUndead(gv_spawnCount, "Boomer", 3);
    gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
    Wait(8.0, c_timeGame);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Boomer", 2);
    gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Drake", 2);
    gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Eel", 2);
    gf_SpawnUndeadImmediate((gv_spawnCount * 4), "Zombie", 1);
    gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
    gf_SpawnUndead(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Hopper", 1);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Parasite", 2);
    gf_SpawnUndead((gv_spawnCount / 2), "Parasite", 4);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(RandomInt(2, 3), "Leaper", 3);
    gf_SpawnUndead(RandomInt(2, 3), "Licker", 3);
    Wait(8.0, c_timeGame);
    gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Creeper", 1);
    gf_SpawnUndead((gv_spawnCount * 3), "Tarantula", 5);
    gf_SpawnUndead(1, "ZombieWraith", 2);
    gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Unburied", 1);
    gf_SpawnUndead(2, "ZombieWraith", 3);
    if ((gv_averageXP >= 250000)) {
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Unburied", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 2);
        gf_SpawnUndead(3, "Swollen", 2);
        gf_SpawnUndead(1, "ZombieWraith", 2);
    }

    if ((gv_averageXP >= 500000)) {
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "InfestedCivilian", 2);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Zombie", 2);
        gf_SpawnUndead(RandomInt(1, 2), "ZombieWraith", 2);
        gf_SpawnUndead(gv_spawnCount, "Drake", 2);
        gf_SpawnUndead(gv_spawnCount, "Eel", 2);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "InfestedCivilian", 2);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 2);
        gf_SpawnUndeadImmediate(gv_spawnCount, "InfestedCivilian", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Unburied", 1);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndeadImmediate(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Leaper", 2);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Unburied", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount * 3), "InfestedCivilian", 1);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Turned", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Risen", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Drake", 2);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(2, "ZombieWraith", 2);
        gf_SpawnUndead(2, "ZombieWraith", 3);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Turned", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Boomer", 3);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningOutbreak2_Init () {
    gt_UndeadSpawningOutbreak2 = TriggerCreate("gt_UndeadSpawningOutbreak2_Func");
    TriggerEnable(gt_UndeadSpawningOutbreak2, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningOutbreak2, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningOutbreak2, 120.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Outbreak 3
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningOutbreak3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndead(4, "ZombieWraith", 5);
    gf_SpawnUndead((gv_spawnCount * 4), "Eel", 3);
    gf_SpawnUndead((gv_spawnCount * 4), "Tarantula", 3);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndead((gv_spawnCount - 1), "Pooch", 4);
    gf_SpawnUndead(gv_spawnCount, "Boomer", 3);
    gf_SpawnUndead(2, "ArachnidMother", 3);
    Wait(8.0, c_timeGame);
    gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
    gf_SpawnUndead(2, "ZombieWraith", 2);
    gf_SpawnUndeadImmediate((gv_spawnCount + 2), "Boomer", 2);
    gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Drake", 2);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Eel", 2);
    gf_SpawnUndead(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Hopper", 1);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead((gv_spawnCount * 2), "Hopper", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Parasite", 2);
    gf_SpawnUndead(gv_spawnCount, "Parasite", 4);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(RandomInt(2, 3), "Leaper", 2);
    gf_SpawnUndead(RandomInt(2, 3), "Licker", 2);
    gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Creeper", 1);
    gf_SpawnUndead((gv_spawnCount * 3), "Tarantula", 5);
    gf_SpawnUndead(1, "ZombieWraith", 1);
    gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Unburied", 1);
    gf_SpawnUndead(2, "ZombieWraith", 3);
    gf_SpawnUndead(2, "ZombieWraith", 3);
    gf_SpawnUndead(4, "Licker", 1);
    gf_SpawnUndead(4, "Leaper", 1);
    if ((gv_averageXP >= 250000)) {
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Unburied", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Turned", 2);
        gf_SpawnUndead(4, "Swollen", 2);
        gf_SpawnUndead(2, "ZombieWraith", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Hopper", 3);
    }

    if ((gv_averageXP >= 500000)) {
        gf_SpawnUndead(3, "ZombieWraith", 1);
        gf_SpawnUndead((gv_spawnCount + 1), "Drake", 1);
        gf_SpawnUndead((gv_spawnCount + 2), "Drake", 2);
        gf_SpawnUndead((gv_spawnCount * 3), "Eel", 1);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 2);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Unburied", 1);
        gf_SpawnUndead(3, "Swollen", 2);
        gf_SpawnUndead(gv_spawnCount, "Unburied", 2);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndeadImmediate(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
        gf_SpawnUndead(gv_spawnCount, "Creeper", 1);
        gf_SpawnUndead(gv_spawnCount, "Leaper", 2);
        gf_SpawnUndeadImmediate((gv_spawnCount * 3), "Unburied", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Unburied", 2);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndeadImmediate((gv_spawnCount * 3), "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Turned", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Risen", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount + 2), "Boomer", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Drake", 1);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Parasite", 1);
        gf_SpawnUndead(2, "ZombieWraith", 1);
        gf_SpawnUndead(3, "ZombieWraith", 1);
        gf_SpawnUndead(4, "ZombieWraith", 2);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Turned", 2);
        gf_SpawnUndead((gv_spawnCount + 2), "Creeper", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Boomer", 3);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningOutbreak3_Init () {
    gt_UndeadSpawningOutbreak3 = TriggerCreate("gt_UndeadSpawningOutbreak3_Func");
    TriggerEnable(gt_UndeadSpawningOutbreak3, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningOutbreak3, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningOutbreak3, 120.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Onslaught 1
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningOnslaught1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndead(gv_spawnCount, "Charger", 1);
    gf_SpawnUndead(gv_spawnCount, "Glutton", 1);
    gf_SpawnUndead(1, "Morbus", 3);
    gf_SpawnUndead(2, "ZombieImpaler", 3);
    gf_SpawnUndead(2, "Spitter", 4);
    gf_SpawnUndead(2, "Deceiver", 5);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 2);
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 2);
    gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 2);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 3);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 3);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead((gv_spawnCount / 2), "Swarmer", 1);
    gf_SpawnUndead(gv_spawnCount, "Swarmer", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
    gf_SpawnUndead(1, "Bruchus", 3);
    gf_SpawnUndead(2, "Deceiver", 5);
    gf_SpawnUndead(1, "ZombieCarrier", 4);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead(1, "Morbus", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 2);
    gf_SpawnUndead(1, "Horror", 5);
    gf_SpawnUndead(1, "ArchVile", 5);
    if ((gv_averageXP >= 250000)) {
        gf_SpawnUndead(2, "Spitter", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "Swarmer", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Deceiver", 1);
    }

    if ((gv_averageXP >= 500000)) {
        gf_SpawnUndead(1, "Bruchus", 3);
        gf_SpawnUndead(1, "ZombieImpaler", 3);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 2);
        gf_SpawnUndead(1, "ArchVile", 7);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Deceiver", 3);
        gf_SpawnUndead(1, "Morbus", 3);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(gv_spawnCount, "Charger", 3);
        gf_SpawnUndead(1, "Bruchus", 4);
        gf_SpawnUndead(1, "Horror", 12);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead(gv_spawnCount, "Shredder", 4);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 3);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(1, "ArchVile", 10);
        gf_SpawnUndead(1, "AcidVore", 10);
        gf_SpawnUndead((gv_spawnCount / 2), "Krill", 6);
        gf_SpawnUndead(1, "Horror", 20);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningOnslaught1_Init () {
    gt_UndeadSpawningOnslaught1 = TriggerCreate("gt_UndeadSpawningOnslaught1_Func");
    TriggerEnable(gt_UndeadSpawningOnslaught1, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningOnslaught1, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningOnslaught1, 90.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Onslaught 2
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningOnslaught2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndead(gv_spawnCount, "Charger", 3);
    gf_SpawnUndead(gv_spawnCount, "Glutton", 3);
    gf_SpawnUndead(1, "Morbus", 2);
    gf_SpawnUndead(2, "ZombieImpaler", 2);
    gf_SpawnUndead(3, "Spitter", 4);
    gf_SpawnUndead(3, "Deceiver", 5);
    gf_SpawnUndead(1, "StalkerZombie", 4);
    gf_SpawnUndead(1, "AcidVore", 5);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead(1, "Deceiver", 4);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 4);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 5);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
    gf_SpawnUndead(2, "Morbus", 4);
    gf_SpawnUndead((gv_spawnCount / 2), "Krill", 2);
    gf_SpawnUndead((gv_spawnCount / 2), "Krill", 3);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Swarmer", 1);
    gf_SpawnUndead(gv_spawnCount, "Swarmer", 3);
    gf_SpawnUndead(gv_spawnCount, "Glutton", 3);
    gf_SpawnUndead(1, "StalkerZombie", 4);
    gf_SpawnUndead(2, "Bruchus", 3);
    gf_SpawnUndead(3, "Deceiver", 5);
    gf_SpawnUndead(1, "ZombieCarrier", 3);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead(1, "AcidVore", 5);
    gf_SpawnUndead(2, "ZombieCarrier", 5);
    gf_SpawnUndead(1, "Morbus", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Deceiver", 2);
    gf_SpawnUndead(1, "Horror", 4);
    gf_SpawnUndead(1, "ArchVile", 4);
    gf_SpawnUndead(2, "StalkerZombie", 6);
    if ((gv_averageXP >= 250000)) {
        gf_SpawnUndead(3, "Spitter", 5);
        gf_SpawnUndead(gv_spawnCount, "Charger", 3);
        gf_SpawnUndead((gv_spawnCount * 2), "Swarmer", 1);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    if ((gv_averageXP >= 500000)) {
        gf_SpawnUndead(2, "Bruchus", 3);
        gf_SpawnUndead(2, "ZombieImpaler", 3);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 2);
        gf_SpawnUndead(1, "ArchVile", 5);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead(1, "Morbus", 3);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Krill", 3);
        gf_SpawnUndead(2, "Bruchus", 4);
        gf_SpawnUndead(1, "Horror", 10);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead(1, "StalkerZombie", 4);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 4);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(2, "StalkerZombie", 7);
        gf_SpawnUndead(1, "ArchVile", 7);
        gf_SpawnUndead(1, "AcidVore", 7);
        gf_SpawnUndead(gv_spawnCount, "Krill", 6);
        gf_SpawnUndead(2, "Horror", 25);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningOnslaught2_Init () {
    gt_UndeadSpawningOnslaught2 = TriggerCreate("gt_UndeadSpawningOnslaught2_Func");
    TriggerEnable(gt_UndeadSpawningOnslaught2, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningOnslaught2, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningOnslaught2, 135.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Onslaught 3
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningOnslaught3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndead((gv_spawnCount * 2), "Charger", 3);
    gf_SpawnUndead((gv_spawnCount * 2), "Glutton", 3);
    gf_SpawnUndead(2, "Morbus", 2);
    gf_SpawnUndead(3, "ZombieImpaler", 2);
    gf_SpawnUndead(3, "Spitter", 3);
    gf_SpawnUndead(3, "Deceiver", 1);
    gf_SpawnUndead(1, "StalkerZombie", 1);
    gf_SpawnUndead(1, "AcidVore", 1);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead(2, "ZombieCarrier", 4);
    gf_SpawnUndead((gv_spawnCount * 2), "Shredder", 4);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 5);
    gf_SpawnUndead((gv_spawnCount * 2), "Gargoyle", 5);
    gf_SpawnUndead(2, "Morbus", 3);
    gf_SpawnUndead(gv_spawnCount, "Krill", 2);
    gf_SpawnUndead(gv_spawnCount, "Krill", 3);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Swarmer", 1);
    gf_SpawnUndead(gv_spawnCount, "Swarmer", 3);
    gf_SpawnUndead(gv_spawnCount, "Glutton", 3);
    gf_SpawnUndead(2, "StalkerZombie", 3);
    gf_SpawnUndead(3, "Bruchus", 3);
    gf_SpawnUndead(3, "Deceiver", 1);
    gf_SpawnUndead(2, "ZombieCarrier", 3);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead(2, "AcidVore", 5);
    gf_SpawnUndead(2, "ZombieCarrier", 5);
    gf_SpawnUndead(3, "Morbus", 6);
    gf_SpawnUndead(3, "Deceiver", 1);
    gf_SpawnUndead(1, "Horror", 3);
    gf_SpawnUndead(1, "ArchVile", 1);
    gf_SpawnUndead(2, "StalkerZombie", 4);
    if ((gv_averageXP >= 250000)) {
        gf_SpawnUndead(3, "Spitter", 4);
        gf_SpawnUndead(gv_spawnCount, "Charger", 3);
        gf_SpawnUndead((gv_spawnCount * 2), "Swarmer", 1);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    if ((gv_averageXP >= 500000)) {
        gf_SpawnUndead(3, "Bruchus", 3);
        gf_SpawnUndead(3, "ZombieImpaler", 3);
        gf_SpawnUndead(2, "ArchVile", 5);
        gf_SpawnUndead(2, "AcidVore", 5);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead(1, "Morbus", 3);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(gv_spawnCount, "Krill", 3);
        gf_SpawnUndead(3, "Bruchus", 4);
        gf_SpawnUndead(3, "Deceiver", 1);
        gf_SpawnUndead(1, "Horror", 9);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead(2, "StalkerZombie", 4);
        gf_SpawnUndead((gv_spawnCount * 2), "Shredder", 4);
        gf_SpawnUndead(3, "Deceiver", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Gargoyle", 5);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(3, "StalkerZombie", 5);
        gf_SpawnUndead(2, "ArchVile", 5);
        gf_SpawnUndead(2, "AcidVore", 5);
        gf_SpawnUndead((gv_spawnCount * 2), "Krill", 6);
        gf_SpawnUndead(2, "Horror", 20);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningOnslaught3_Init () {
    gt_UndeadSpawningOnslaught3 = TriggerCreate("gt_UndeadSpawningOnslaught3_Func");
    TriggerEnable(gt_UndeadSpawningOnslaught3, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningOnslaught3, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningOnslaught3, 205.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Genesis Spawning 1
//--------------------------------------------------------------------------------------------------
bool gt_GenesisSpawning1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
    gf_SpawnUndead((gv_spawnCount * 2), "Zombie", 3);
    gf_SpawnUndead(gv_spawnCount, "Corrupted", 2);
    gf_SpawnUndead(gv_spawnCount, "Unclean", 2);
    gf_SpawnUndead((gv_spawnCount * 2), "Corrupted", 3);
    gf_SpawnUndeadMixed(1, "Zombie", "Corrupted", null, (gv_spawnCount / 2), (gv_spawnCount / 2), 0);
    gf_SpawnUndeadMixed(3, "Zombie", "Corrupted", null, (gv_spawnCount / 2), (gv_spawnCount / 2), 0);
    gf_SpawnUndeadMixed(1, "Zombie", "Corrupted", "InfestedCivilian", (gv_spawnCount / 2), (gv_spawnCount / 3), (gv_spawnCount / 2));
    gf_SpawnUndeadMixed(4, "Shredder", "Gargoyle", null, (gv_spawnCount / 2), (gv_spawnCount / 2), 0);
    Wait(1.0, c_timeGame);
    gf_SpawnUndeadMixed(4, "Charger", "Boomer", null, (gv_spawnCount / 2), (gv_spawnCount / 2), 0);
    gf_SpawnUndeadMixed(5, "Swollen", "Pooch", "Bloated", (gv_spawnCount / 3), (gv_spawnCount / 3), 1);
    gf_SpawnUndeadMixed(3, "Licker", "Leaper", "Creeper", 2, 3, 4);
    gf_SpawnUndeadMixed(6, "ZombieImpaler", "ZombieWraith", "Creeper", 1, 1, 5);
    gf_SpawnUndeadMixed(2, "Risen", "Corrupted", "InfestedCivilian", (gv_spawnCount / 2), (gv_spawnCount / 3), (gv_spawnCount / 2));
    gf_SpawnUndeadMixed(3, "Unclean", "Corrupted", "Unwilling", (gv_spawnCount / 2), (gv_spawnCount / 3), (gv_spawnCount / 2));
    gf_SpawnUndeadMixed(4, "Risen", "Glutton", "Swarmer", (gv_spawnCount / 2), (gv_spawnCount / 3), (gv_spawnCount / 2));
    gf_SpawnUndeadMixed(3, "ArachnidMother", "Tarantula", null, RandomInt(1, 2), (gv_spawnCount * 2), 0);
    gf_SpawnUndeadMixed(6, "Spitter", "Morbus", null, RandomInt(1, 2), 1, 0);
    gf_SpawnUndeadMixed(15, "ArchVile", "ZombieWraith", "Corrupted", 1, RandomInt(1, 2), gv_spawnCount);
    gf_SpawnUndeadMixed(9, "Weaver", "ZombieCarrier", null, RandomInt(2, 4), 1, 0);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Corrupted", 1);
    Wait(1.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "InfestedCivilian", 5);
    gf_SpawnUndead((gv_spawnCount * 2), "Zombie", 4);
    gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 2);
    gf_SpawnUndead((gv_spawnCount / 2), "Unclean", 2);
    gf_SpawnUndead(RandomInt(1, 3), "Leaper", 4);
    gf_SpawnUndead(1, "ZombieWraith", 8);
    gf_SpawnUndead(FixedToInt((IntToFixed(gv_spawnCount) * 1.3)), "Tarantula", 6);
    gf_SpawnUndead(1, "ArachnidMother", 6);
    gf_SpawnUndead(1, "Gourmand", 20);
    gf_SpawnUndead(1, "ZombieCarrier", 6);
    gf_SpawnUndead(1, "Horror", 8);
    gf_SpawnUndead(1, "Dilophosaur", 12);
    gf_SpawnUndead(1, "ArchVile", 5);
    Wait(1.0, c_timeGame);
    if ((gv_averageXP >= 75000)) {
        gf_SpawnUndeadMixed(2, "Zombie", "Corrupted", null, (gv_spawnCount / 2), (gv_spawnCount / 2), 0);
        gf_SpawnUndead(3, "Charger", 2);
        gf_SpawnUndead(5, "Glutton", 2);
    }

    if ((gv_averageXP >= 125000)) {
        gf_SpawnUndeadMixed(3, "Shredder", "Gargoyle", null, (gv_spawnCount / 2), (gv_spawnCount / 2), 0);
        gf_SpawnUndeadMixed(2, "Bruchus", "Risen", null, 2, (gv_spawnCount / 2), 0);
        gf_SpawnUndead(gv_spawnCount, "Corrupted", 3);
        gf_SpawnUndead(gv_spawnCount, "Corrupted", 3);
        gf_SpawnUndead(gv_spawnCount, "Risen", 2);
        gf_SpawnUndead(1, "ZombieCarrier", 5);
    }

    if ((gv_averageXP >= 200000)) {
        gf_SpawnUndeadMixed(8, "Shredder", "Weaver", "Horror", (gv_spawnCount / 2), (gv_spawnCount / 3), 1);
        gf_SpawnUndeadMixed(3, "Bruchus", "Risen", null, 2, (gv_spawnCount / 2), 0);
        gf_SpawnUndead(1, "Gourmand", 19);
        gf_SpawnUndead(1, "Raisuli", 14);
    }

    if ((gv_averageXP >= 250000)) {
        gf_SpawnUndead(2, "Spitter", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "Swarmer", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Deceiver", 1);
    }

    if ((gv_averageXP >= 500000)) {
        gf_SpawnUndead(1, "Bruchus", 3);
        gf_SpawnUndead(1, "ZombieImpaler", 3);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 2);
        gf_SpawnUndead(1, "ArchVile", 7);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Deceiver", 3);
        gf_SpawnUndead(1, "Morbus", 3);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(gv_spawnCount, "Charger", 3);
        gf_SpawnUndead(1, "Bruchus", 4);
        gf_SpawnUndead(1, "Horror", 12);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead(gv_spawnCount, "Shredder", 4);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 3);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(1, "ArchVile", 10);
        gf_SpawnUndead(1, "AcidVore", 10);
        gf_SpawnUndead((gv_spawnCount / 2), "Krill", 6);
        gf_SpawnUndead(1, "Horror", 20);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GenesisSpawning1_Init () {
    gt_GenesisSpawning1 = TriggerCreate("gt_GenesisSpawning1_Func");
    TriggerEnable(gt_GenesisSpawning1, false);
    TriggerAddEventTimeElapsed(gt_GenesisSpawning1, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_GenesisSpawning1, 80.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Genesis Spawning 2
//--------------------------------------------------------------------------------------------------
bool gt_GenesisSpawning2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndead(gv_spawnCount, "Risen", 2);
    gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
    gf_SpawnUndead((gv_spawnCount * 2), "Corrupted", 2);
    gf_SpawnUndead((gv_spawnCount * 2), "Corrupted", 3);
    gf_SpawnUndead(2, "Parasite", 2);
    gf_SpawnUndeadMixed(3, "Zombie", "Corrupted", null, (gv_spawnCount / 2), (gv_spawnCount / 2), 0);
    gf_SpawnUndeadMixed(3, "Zombie", "Corrupted", null, (gv_spawnCount / 2), (gv_spawnCount / 2), 0);
    gf_SpawnUndeadMixed(5, "Swollen", "Pooch", "Bloated", (gv_spawnCount / 3), (gv_spawnCount / 2), 2);
    gf_SpawnUndeadMixed(3, "Unburied", "Rotten", null, 6, 4, 0);
    gf_SpawnUndeadMixed(3, "Charger", "Boomer", "Bloated", (gv_spawnCount / 2), (gv_spawnCount / 2), 1);
    Wait(1.0, c_timeGame);
    gf_SpawnUndeadMixed(3, "Licker", "Leaper", "Creeper", 2, 3, 4);
    gf_SpawnUndeadMixed(5, "ZombieImpaler", "ZombieWraith", "Creeper", 1, 1, 5);
    gf_SpawnUndeadMixed(3, "ArachnidMother", "Tarantula", null, RandomInt(1, 2), (gv_spawnCount * 2), 0);
    gf_SpawnUndeadMixed(6, "Weaver", "ZombieCarrier", null, RandomInt(3, 5), 1, 0);
    gf_SpawnUndeadMixed(3, "Shredder", "Gargoyle", null, (gv_spawnCount / 2), (gv_spawnCount / 2), 0);
    gf_SpawnUndeadMixed(6, "Shredder", "Gargoyle", null, gv_spawnCount, gv_spawnCount, 0);
    gf_SpawnUndeadMixed(3, "Risen", "Glutton", "Swarmer", gv_spawnCount, (gv_spawnCount / 2), gv_spawnCount);
    gf_SpawnUndeadMixed(5, "Glutton", "Abomination", "Bloated", 6, 2, 1);
    Wait(1.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Weaver", 5);
    gf_SpawnUndead(gv_spawnCount, "Unclean", 3);
    gf_SpawnUndead(gv_spawnCount, "Boomer", 6);
    gf_SpawnUndead(5, "Rotten", 3);
    gf_SpawnUndead((gv_spawnCount * 2), "Unwilling", 5);
    gf_SpawnUndead(gv_spawnCount, "Unwilling", 4);
    gf_SpawnUndead(1, "Gargantuan", 20);
    gf_SpawnUndead(1, "Gourmand", 10);
    gf_SpawnUndead(1, "Horror", 8);
    gf_SpawnUndead(1, "Dilophosaur", 12);
    gf_SpawnUndead(1, "ArchVile", 12);
    gf_SpawnUndead(1, "Scorpio", 12);
    Wait(1.0, c_timeGame);
    if ((gv_averageXP >= 75000)) {
        gf_SpawnUndeadMixed(2, "Unburied", "Rotten", null, 6, 4, 0);
        gf_SpawnUndeadMixed(2, "Shredder", "Gargoyle", null, (gv_spawnCount / 2), (gv_spawnCount / 2), 0);
        gf_SpawnUndeadMixed(9, "BloodHunter", "Baron", null, 2, 1, 0);
        gf_SpawnUndead(RandomInt(1, 3), "ZombieImpaler", 4);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Unclean", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Turned", 3);
    }

    if ((gv_averageXP >= 125000)) {
        gf_SpawnUndead(1, "Gourmand", 15);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
        gf_SpawnUndead(1, "ZombieWraith", 4);
        gf_SpawnUndead((gv_spawnCount / 2), "Krill", 5);
        gf_SpawnUndeadMixed(4, "Parasite", "Eel", "Tarantula", 2, 8, 12);
        gf_SpawnUndeadMixed(3, "Unburied", "Rotten", null, 6, 4, 0);
        gf_SpawnUndeadMixed(2, "InfestedCivilian", "Unwilling", null, (gv_spawnCount * 2), gv_spawnCount, 0);
    }

    if ((gv_averageXP >= 200000)) {
        gf_SpawnUndeadMixed(8, "ZombieYeti", "Abomination", null, 2, 5, 0);
        gf_SpawnUndeadMixed(15, "Glutton", "Abomination", "Gourmand", 6, 3, 1);
        gf_SpawnUndead(1, "Horror", 15);
        gf_SpawnUndead(1, "Scorpio", 9);
        gf_SpawnUndead(1, "ZombieCarrier", 6);
        gf_SpawnUndead((gv_spawnCount / 2), "Bloated", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
        gf_SpawnUndead(2, "IrradiatedYeti", 9);
    }

    if ((gv_averageXP >= 250000)) {
        gf_SpawnUndead(3, "Spitter", 5);
        gf_SpawnUndead(gv_spawnCount, "Charger", 3);
        gf_SpawnUndead((gv_spawnCount * 2), "Swarmer", 1);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    if ((gv_averageXP >= 500000)) {
        gf_SpawnUndead(2, "Bruchus", 3);
        gf_SpawnUndead(2, "ZombieImpaler", 3);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 2);
        gf_SpawnUndead(1, "ArchVile", 5);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead(1, "Morbus", 3);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Krill", 3);
        gf_SpawnUndead(2, "Bruchus", 4);
        gf_SpawnUndead(1, "Horror", 10);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead(1, "StalkerZombie", 4);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 4);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(2, "StalkerZombie", 7);
        gf_SpawnUndead(1, "ArchVile", 7);
        gf_SpawnUndead(1, "AcidVore", 7);
        gf_SpawnUndead(gv_spawnCount, "Krill", 6);
        gf_SpawnUndead(2, "Horror", 25);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GenesisSpawning2_Init () {
    gt_GenesisSpawning2 = TriggerCreate("gt_GenesisSpawning2_Func");
    TriggerEnable(gt_GenesisSpawning2, false);
    TriggerAddEventTimeElapsed(gt_GenesisSpawning2, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_GenesisSpawning2, 120.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Genesis Spawning 3
//--------------------------------------------------------------------------------------------------
bool gt_GenesisSpawning3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndead(gv_spawnCount, "Unclean", 2);
    gf_SpawnUndead(gv_spawnCount, "Unclean", 3);
    gf_SpawnUndead(gv_spawnCount, "Unclean", 4);
    gf_SpawnUndead(gv_spawnCount, "Rotten", 4);
    gf_SpawnUndead((gv_spawnCount / 3), "Bloated", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Krill", 4);
    gf_SpawnUndead((gv_spawnCount / 2), "Shredder", 5);
    gf_SpawnUndead(4, "Parasite", 3);
    gf_SpawnUndead(3, "BloodHunter", 8);
    gf_SpawnUndead(2, "IrradiatedYeti", 8);
    Wait(1.0, c_timeGame);
    gf_SpawnUndeadMixed(9, "BloodHunter", "Charger", null, 3, gv_spawnCount, 0);
    gf_SpawnUndeadMixed(10, "Gourmand", "Abomination", null, 2, (gv_spawnCount * 2), 0);
    gf_SpawnUndeadMixed(12, "Gargantuan", "Abomination", null, 1, (gv_spawnCount * 2), 0);
    gf_SpawnUndeadMixed(3, "Unburied", "Rotten", null, (gv_spawnCount * 2), gv_spawnCount, 0);
    gf_SpawnUndeadMixed(2, "Unburied", "Rotten", null, (gv_spawnCount * 2), gv_spawnCount, 0);
    gf_SpawnUndeadMixed(4, "ZombieImpaler", "ZombieWraith", "Creeper", 1, 2, gv_spawnCount);
    gf_SpawnUndeadMixed(4, "Shredder", "Gargoyle", "Krill", gv_spawnCount, gv_spawnCount, (gv_spawnCount / 2));
    gf_SpawnUndeadMixed(6, "Weaver", "ZombieCarrier", null, RandomInt(4, 6), RandomInt(1, 2), 0);
    gf_SpawnUndeadMixed(3, "Charger", "Boomer", "Bloated", gv_spawnCount, gv_spawnCount, 3);
    gf_SpawnUndeadMixed(16, "Immussilus", "Gargoyle", null, 1, 8, 0);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 8);
    gf_SpawnUndead(gv_spawnCount, "Weaver", 8);
    Wait(1.0, c_timeGame);
    gf_SpawnUndead(1, "Baron", 8);
    gf_SpawnUndead(1, "Scorpio", 8);
    gf_SpawnUndead(RandomInt(1, 6), "Leaper", 3);
    gf_SpawnUndead(RandomInt(1, 2), "ZombieWraith", 4);
    gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 4);
    gf_SpawnUndeadMixed(5, "Morbus", "Spitter", null, 2, 4, 0);
    gf_SpawnUndeadMixed(11, "ArchVile", "Cursed", null, 1, 3, 0);
    gf_SpawnUndead(1, "Morbus", 7);
    gf_SpawnUndead(1, "ZombieCarrier", 5);
    gf_SpawnUndead(1, "Horror", 8);
    gf_SpawnUndead(1, "Dilophosaur", 12);
    gf_SpawnUndead(1, "ArchVile", 9);
    gf_SpawnUndead(2, "Raisuli", 9);
    Wait(1.0, c_timeGame);
    if ((gv_averageXP >= 75000)) {
        gf_SpawnUndead(3, "BloodHunter", 4);
        gf_SpawnUndead(2, "IrradiatedYeti", 4);
        gf_SpawnUndeadMixed(6, "Weaver", "Shredder", null, RandomInt(3, 6), (gv_spawnCount + 3), 0);
        gf_SpawnUndead(gv_spawnCount, "Unclean", 2);
        gf_SpawnUndead(gv_spawnCount, "Unwilling", 2);
        gf_SpawnUndead((gv_spawnCount * 2), "Unwilling", 2);
    }

    if ((gv_averageXP >= 125000)) {
        gf_SpawnUndead(1, "Baron", 12);
        gf_SpawnUndead(1, "Scorpio", 12);
        gf_SpawnUndead(1, "Immussilus", 20);
        gf_SpawnUndead(1, "ZombieWraith", 3);
        gf_SpawnUndead(1, "Dilophosaur", 7);
        gf_SpawnUndead(4, "Bloated", 4);
        gf_SpawnUndead((gv_spawnCount * 2), "Unwilling", 2);
        gf_SpawnUndead((gv_spawnCount * 3), "Unwilling", 2);
    }

    if ((gv_averageXP >= 200000)) {
        gf_SpawnUndead(2, "Baron", 15);
        gf_SpawnUndead(2, "Scorpio", 15);
        gf_SpawnUndead(gv_spawnCount, "Cursed", 5);
        gf_SpawnUndeadMixed(6, "Drake", "Eel", null, 6, (gv_spawnCount * 2), 0);
        gf_SpawnUndead(RandomInt(1, 3), "Licker", 3);
        gf_SpawnUndeadMixed(40, "Ares", "Baron", null, 1, 2, 0);
        gf_SpawnUndeadMixed(40, "Arachnathid", "Scorpio", null, 1, 2, 0);
    }

    if ((gv_averageXP >= 250000)) {
        gf_SpawnUndead(3, "Spitter", 4);
        gf_SpawnUndead(gv_spawnCount, "Charger", 3);
        gf_SpawnUndead((gv_spawnCount * 2), "Swarmer", 1);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    if ((gv_averageXP >= 500000)) {
        gf_SpawnUndead(3, "Bruchus", 3);
        gf_SpawnUndead(3, "ZombieImpaler", 3);
        gf_SpawnUndead(2, "ArchVile", 5);
        gf_SpawnUndead(2, "AcidVore", 5);
        gf_SpawnUndead(3, "Deceiver", 1);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead(1, "Morbus", 3);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(gv_spawnCount, "Krill", 3);
        gf_SpawnUndead(3, "Bruchus", 4);
        gf_SpawnUndead(3, "Deceiver", 1);
        gf_SpawnUndead(1, "Horror", 9);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead(2, "StalkerZombie", 4);
        gf_SpawnUndead((gv_spawnCount * 2), "Shredder", 4);
        gf_SpawnUndead(3, "Deceiver", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Gargoyle", 5);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(3, "StalkerZombie", 5);
        gf_SpawnUndead(2, "ArchVile", 5);
        gf_SpawnUndead(2, "AcidVore", 5);
        gf_SpawnUndead((gv_spawnCount * 2), "Krill", 6);
        gf_SpawnUndead(2, "Horror", 20);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GenesisSpawning3_Init () {
    gt_GenesisSpawning3 = TriggerCreate("gt_GenesisSpawning3_Func");
    TriggerEnable(gt_GenesisSpawning3, false);
    TriggerAddEventTimeElapsed(gt_GenesisSpawning3, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_GenesisSpawning3, 180.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Burrowed
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningBurrowed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 1);
    gf_SpawnUndead((gv_spawnCount / 4), "Bruchus", 1);
    gf_SpawnUndead((gv_spawnCount / 4), "Bruchus", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Spitter", 1);
    gf_SpawnUndead(2, "ArachnidMother", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Tarantula", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Tarantula", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Eel", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Eel", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Eel", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(1, "Morbus", 4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningBurrowed_Init () {
    gt_UndeadSpawningBurrowed = TriggerCreate("gt_UndeadSpawningBurrowed_Func");
    TriggerEnable(gt_UndeadSpawningBurrowed, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningBurrowed, 50.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningBurrowed, 130.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Tier 1
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningTier1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    gf_SpawnUndeadImmediate(gv_spawnCount, "InfestedCivilian", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "InfestedCivilian", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Risen", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 3);
    gf_SpawnUndead(1, "Raisuli", 3);
    gf_SpawnUndead(2, "StalkerZombie", 2);
    gf_SpawnUndead(3, "Charger", 2);
    gf_SpawnUndead(gv_spawnCount, "Risen", 2);
    gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 2);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
    gf_SpawnUndead(2, "Cursed", 4);
    gf_SpawnUndead(1, "Lacerti", 4);
    gf_SpawnUndead(1, "Raisuli", 2);
    gf_SpawnUndead(3, "Hunter", 3);
    gf_SpawnUndead(2, "ZombieYeti", 5);
    gf_SpawnUndead(RandomInt(2, 5), "Bruchus", 2);
    gf_SpawnUndead(1, "Minerva", 12);
    gf_SpawnUndead(1, "Ares", 12);
    gf_SpawnUndead(1, "Dilophosaur", 7);
    gf_SpawnUndead(1, "Dilophosaur", 10);
    gf_SpawnUndead(1, "Livid", 16);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(1, "Raisuli", 5);
        gf_SpawnUndead(1, "Lacerti", 5);
        gf_SpawnUndead(3, "Hunter", 2);
        gf_SpawnUndead(2, "Cursed", 4);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Gourmand", 4);
        gf_SpawnUndead(1, "Raisuli", 3);
        gf_SpawnUndead(2, "ZombieYeti", 2);
        gf_SpawnUndead(1, "Gargantuan", 5);
        gf_SpawnUndead(1, "Immussilus", 8);
        gf_SpawnUndead(2, "Cursed", 5);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Darreus", 12);
        gf_SpawnUndead(1, "Gargantuan", 7);
        gf_SpawnUndead(1, "Raisuli", 3);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(1, "Raisuli", 4);
        gf_SpawnUndead(1, "Darreus", 16);
        gf_SpawnUndead(1, "Metasis", 8);
        gf_SpawnUndead(1, "ThresherMaw", 30);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningTier1_Init () {
    gt_UndeadSpawningTier1 = TriggerCreate("gt_UndeadSpawningTier1_Func");
    TriggerEnable(gt_UndeadSpawningTier1, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningTier1, 90.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningTier1, 280.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Zulu
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningZulu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto974E7875_n = 4;
    int auto974E7875_i;
    const int auto8177AA84_n = 8;
    int auto8177AA84_i;
    const int autoA7BE9642_n = 4;
    int autoA7BE9642_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_pauseSpawning == true)) {
        return true;
    }
    for (auto974E7875_i = 1; auto974E7875_i <= auto974E7875_n; auto974E7875_i += 1) {
        gf_SpawnUndead(1, "RAZulu", 1);
    }
    gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    for (auto8177AA84_i = 1; auto8177AA84_i <= auto8177AA84_n; auto8177AA84_i += 1) {
        gf_SpawnUndead((gv_spawnCount / 2), "Zombie", 1);
    }
    for (autoA7BE9642_i = 1; autoA7BE9642_i <= autoA7BE9642_n; autoA7BE9642_i += 1) {
        gf_SpawnUndead((gv_spawnCount / 3), "Zombie", 1);
    }
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningZulu_Init () {
    gt_UndeadSpawningZulu = TriggerCreate("gt_UndeadSpawningZulu_Func");
    TriggerEnable(gt_UndeadSpawningZulu, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningZulu, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningZulu, 60.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Orders
//--------------------------------------------------------------------------------------------------
bool gt_UndeadOrders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_waitmax;

    // Automatic Variable Declarations
    unitgroup auto163741CA_g;
    int auto163741CA_u;
    unit auto163741CA_var;

    // Variable Initialization
    lv_waitmax = 0.02;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_undeadGroup, c_unitCountAlive) >= 1)) {
        lv_waitmax = (18.0 / IntToFixed(UnitGroupCount(gv_undeadGroup, c_unitCountAlive)));
        auto163741CA_g = gv_undeadGroup;
        auto163741CA_u = UnitGroupCount(auto163741CA_g, c_unitCountAll);
        for (;; auto163741CA_u -= 1) {
            auto163741CA_var = UnitGroupUnitFromEnd(auto163741CA_g, auto163741CA_u);
            if (auto163741CA_var == null) { break; }
            if ((libNtve_gf_UnitIsHidden(auto163741CA_var) == false) && (UnitIsAlive(auto163741CA_var) == true)) {
                if ((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(auto163741CA_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
                }
                else {
                    break;
                }
                Wait(RandomFixed(0.0625, lv_waitmax), c_timeGame);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadOrders_Init () {
    gt_UndeadOrders = TriggerCreate("gt_UndeadOrders_Func");
    TriggerEnable(gt_UndeadOrders, false);
    TriggerAddEventTimePeriodic(gt_UndeadOrders, 22.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Idles
//--------------------------------------------------------------------------------------------------
bool gt_UndeadIdles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadIdles_Init () {
    gt_UndeadIdles = TriggerCreate("gt_UndeadIdles_Func");
    TriggerEnable(gt_UndeadIdles, false);
    TriggerAddEventUnitBecomesIdle(gt_UndeadIdles, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Massive Infestation Level
//--------------------------------------------------------------------------------------------------
bool gt_UndeadMassiveInfestationLevel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_temptext;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "InfestationLevel22")) {
        gv_infestationLevel += 2;
        UnitGroupAdd(gv_massiveGroup, EventPlayerEffectUsedUnit(c_effectUnitSource));
    }
    else if ((EventPlayerEffectUsed() == "InfestationLevel12")) {
        gv_infestationLevel += 1;
        UnitGroupAdd(gv_massiveGroup, EventPlayerEffectUsedUnit(c_effectUnitSource));
    }
    else if ((EventPlayerEffectUsed() == "InfestationLevel2")) {
        gv_infestationLevel -= 2;
    }
    else if ((EventPlayerEffectUsed() == "InfestationLevel1")) {
        gv_infestationLevel -= 1;
    }
    if ((gv_infestationLevel < 30)) {
        lv_temptext = StringExternal("Param/Value/0D3C83A2");
        if ((gv_infestationLevel < 1)) {
            gv_infestationLevel = 1;
        }
    }
    else {
        if ((gv_infestationLevel < 35)) {
            lv_temptext = StringExternal("Param/Value/7C4A618F");
        }
        else {
            if ((gv_infestationLevel < 40)) {
                lv_temptext = StringExternal("Param/Value/F845DCEA");
            }
            else {
                lv_temptext = StringExternal("Param/Value/0CBC54D9");
            }
        }
    }
    if ((gv_infestationLevel >= gv_ILAllow) && (gv_heartbeatplaying == false)) {
        SoundPlay(SoundLink("Heartbeat", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_heartbeat = SoundLastPlayed();
        gv_heartbeatplaying = true;
        if ((gv_undeadMutations == false)) {
            gv_undeadMutations = true;
            gf_MutateUndead();
        }
    }
    else {
        SoundStop(gv_heartbeat, true);
        gv_heartbeatplaying = false;
        gv_undeadMutations = false;
    }
    if (TriggerIsEnabled(gt_AdvancedInfestationLevelDisplay)) { return true; }
    libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[6], (StringExternal("Param/Value/B7BA1E26") + lv_temptext + IntToText(gv_infestationLevel) + StringExternal("Param/Value/0B1E60EB")), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadMassiveInfestationLevel_Init () {
    gt_UndeadMassiveInfestationLevel = TriggerCreate("gt_UndeadMassiveInfestationLevel_Func");
    TriggerAddEventPlayerEffectUsed(gt_UndeadMassiveInfestationLevel, 14, "InfestationLevel22");
    TriggerAddEventPlayerEffectUsed(gt_UndeadMassiveInfestationLevel, 14, "InfestationLevel12");
    TriggerAddEventPlayerEffectUsed(gt_UndeadMassiveInfestationLevel, 14, "InfestationLevel2");
    TriggerAddEventPlayerEffectUsed(gt_UndeadMassiveInfestationLevel, 14, "InfestationLevel1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Parasite Spawn
//--------------------------------------------------------------------------------------------------
bool gt_ParasiteSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_undeadGroup, EventUnitCreatedUnit());
    if ((gv_gamemode > 1) && (gv_gamemode <= 10)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "DifficultyModifier", EventUnitCreatedUnit(), gv_zombieBuffAmount);
    }
    else if ((gv_gamemode == 12)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "DifficultyModifier", EventUnitCreatedUnit(), gv_sandboxDifficultyModifier);
    }
    if ((PlayerGroupCount(gv_players) <= 3)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "PlayerHandicap", EventUnitCreatedUnit(), (4 - PlayerGroupCount(gv_players)));
    }
    else {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "PlayerModifier", EventUnitCreatedUnit(), PlayerGroupCount(gv_players));
    }
    UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ParasiteSpawn_Init () {
    gt_ParasiteSpawn = TriggerCreate("gt_ParasiteSpawn_Func");
    TriggerAddEventUnitCreated(gt_ParasiteSpawn, null, "ParasiteMorph", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Parasite Morph
//--------------------------------------------------------------------------------------------------
bool gt_ParasiteMorph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_undeadUnit;
    int lv_randomDigit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_undeadUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_undeadUnit) == "Parasite"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(lv_undeadUnit, c_unitPropEnergy, c_unitPropCurrent) == 20.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_randomDigit = gf_ParasiteRandomizerFunction();
    if ((lv_randomDigit == 1)) {
        UnitIssueOrder(lv_undeadUnit, Order(AbilityCommand("ParasiteMorph", 0)), c_orderQueueReplace);
    }
    else if ((lv_randomDigit == 2)) {
        UnitIssueOrder(lv_undeadUnit, Order(AbilityCommand("ParasiteMorph", 1)), c_orderQueueReplace);
    }
    else if ((lv_randomDigit == 3)) {
        UnitIssueOrder(lv_undeadUnit, Order(AbilityCommand("ParasiteMorph", 2)), c_orderQueueReplace);
    }
    else if ((lv_randomDigit == 4)) {
        UnitIssueOrder(lv_undeadUnit, Order(AbilityCommand("ParasiteMorph", 3)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ParasiteMorph_Init () {
    gt_ParasiteMorph = TriggerCreate("gt_ParasiteMorph_Func");
    TriggerAddEventPlayerEffectUsed(gt_ParasiteMorph, 14, "ParasiteEnergyGain");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thanatos Loop
//--------------------------------------------------------------------------------------------------
bool gt_ThanatosLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    region lv_movementregion;
    int lv_rand;

    // Automatic Variable Declarations
    unitgroup auto5509A1EF_g;
    int auto5509A1EF_u;
    unit auto5509A1EF_var;

    // Variable Initialization
    lv_movementregion = RegionEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitSource)) == true)) {
        lv_movementregion = RegionEmpty();
        auto5509A1EF_g = gv_undeadTargetGroup;
        auto5509A1EF_u = UnitGroupCount(auto5509A1EF_g, c_unitCountAll);
        for (;; auto5509A1EF_u -= 1) {
            auto5509A1EF_var = UnitGroupUnitFromEnd(auto5509A1EF_g, auto5509A1EF_u);
            if (auto5509A1EF_var == null) { break; }
            RegionAddCircle(lv_movementregion, true, UnitGetPosition(auto5509A1EF_var), 40.0);
            RegionAddCircle(lv_movementregion, false, UnitGetPosition(auto5509A1EF_var), 25.0);
        }
        lv_point = RegionRandomPoint(lv_movementregion);
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitSource), OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        Wait(20.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThanatosLoop_Init () {
    gt_ThanatosLoop = TriggerCreate("gt_ThanatosLoop_Func");
    TriggerAddEventPlayerEffectUsed(gt_ThanatosLoop, 14, "ThanatosAI");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tyrant Pull
//--------------------------------------------------------------------------------------------------
bool gt_TyrantPull_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_sourceUnit;
    int lv_loopint;
    fixed lv_angle;
    point lv_target;
    point lv_origin;
    fixed lv_interval;

    // Automatic Variable Declarations
    int autoAD743DDB_ae;
    const int autoAD743DDB_ai = 1;

    // Variable Initialization
    lv_targetUnit = EventUnitTargetUnit();
    lv_sourceUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(UnitGetPosition(lv_targetUnit), UnitGetPosition(lv_sourceUnit));
    lv_target = UnitGetPosition(lv_sourceUnit);
    lv_origin = UnitGetPosition(lv_targetUnit);
    lv_interval = (DistanceBetweenPoints(lv_target, lv_origin) / 1.5);
    SoundPlayOnUnit(SoundLink("Overlord_Load", -1), PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
    SoundPlayOnUnit(SoundLink("Nydus_ConstructionFinish", -1), PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
    SoundPlayOnUnit(SoundLink("Ultralisk_AttackImpact", -1), PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
    autoAD743DDB_ae = FixedToInt(lv_interval);
    lv_loopint = 1;
    for ( ; ( (autoAD743DDB_ai >= 0 && lv_loopint <= autoAD743DDB_ae) || (autoAD743DDB_ai < 0 && lv_loopint >= autoAD743DDB_ae) ) ; lv_loopint += autoAD743DDB_ai ) {
        UnitSetPosition(lv_targetUnit, PointWithOffsetPolar(UnitGetPosition(lv_targetUnit), 1.5, lv_angle), true);
        Wait(0.05, c_timeGame);
    }
    gf_ChokeABitch(lv_sourceUnit, lv_targetUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TyrantPull_Init () {
    gt_TyrantPull = TriggerCreate("gt_TyrantPull_Func");
    TriggerAddEventUnitAbility(gt_TyrantPull, null, AbilityCommand("TyrantPull", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thanatos Pull
//--------------------------------------------------------------------------------------------------
bool gt_ThanatosPull_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    fixed lv_angle;
    point lv_target;
    point lv_origin;
    fixed lv_interval;

    // Automatic Variable Declarations
    int auto602A26A1_ae;
    const int auto602A26A1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(UnitGetPosition(EventUnitTargetUnit()), UnitGetPosition(EventUnit()));
    lv_target = UnitGetPosition(EventUnit());
    lv_origin = UnitGetPosition(EventUnitTargetUnit());
    lv_interval = (DistanceBetweenPoints(lv_target, lv_origin) / 1.5);
    SoundPlayOnUnit(SoundLink("Overlord_Load", -1), PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
    SoundPlayOnUnit(SoundLink("Nydus_ConstructionFinish", -1), PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
    SoundPlayOnUnit(SoundLink("Ultralisk_AttackImpact", -1), PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
    auto602A26A1_ae = FixedToInt(lv_interval);
    lv_loopint = 1;
    for ( ; ( (auto602A26A1_ai >= 0 && lv_loopint <= auto602A26A1_ae) || (auto602A26A1_ai < 0 && lv_loopint >= auto602A26A1_ae) ) ; lv_loopint += auto602A26A1_ai ) {
        UnitSetPosition(EventUnitTargetUnit(), PointWithOffsetPolar(UnitGetPosition(EventUnitTargetUnit()), 1.5, lv_angle), true);
        Wait(0.05, c_timeGame);
    }
    UnitBehaviorRemove(EventUnitTargetUnit(), "Pulled", 1);
    if ((gv_gamemode >= 2) && (gv_gamemode <= 5)) {
        UnitBehaviorAdd(EventUnitTargetUnit(), "Disoriented", EventUnit(), 1);
    }
    Wait(5.0, c_timeGame);
    AICastFlee(EventUnit(), EventUnitTargetUnit(), 25, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThanatosPull_Init () {
    gt_ThanatosPull = TriggerCreate("gt_ThanatosPull_Func");
    TriggerAddEventUnitAbility(gt_ThanatosPull, null, AbilityCommand("ThanatosPull", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dev Trigger Command Executing
//--------------------------------------------------------------------------------------------------
bool gt_DevTriggerCommandExecuting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intloop;
    int lv_dyingplayer;
    int lv_loopint;
    string lv_message;
    int lv_user;
    bool lv_success;

    // Automatic Variable Declarations
    string auto67814315_val;
    string auto693F0221_val;
    string auto78F5ACD2_val;
    string auto81DF9EAC_val;
    string auto4786120E_val;
    string autoF25E5DDE_val;
    string auto540835FC_val;
    string autoE88131B8_val;
    string auto03D28D1E_val;
    string auto9289B139_val;
    string auto75A42768_val;

    // Variable Initialization
    lv_dyingplayer = EventPlayer();
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((StringEqual(StringWord(lv_message, 1), "trig", c_stringNoCase) == true))) {
            return false;
        }

        if (!(gf_DevHandles(PlayerHandle(lv_user)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto67814315_val = StringCase(StringWord(lv_message, 2), true);
    if (auto67814315_val == "DEBUG") {
        TriggerDebugWindowOpen(true);
    }
    else if (auto67814315_val == "AUTOSTART") {
        auto693F0221_val = StringCase(StringWord(lv_message, 3), true);
        if (auto693F0221_val == "OFF") {
            gv_missionAutostart = false;
        }
        else if (auto693F0221_val == "ON") {
            gv_missionAutostart = true;
        }
        else {
        }
    }
    else if (auto67814315_val == "KILL") {
        auto78F5ACD2_val = StringCase(StringWord(lv_message, 3), true);
        if (auto78F5ACD2_val == "ALL") {
        }
        else {
        }
    }
    else if (auto67814315_val == "EXEC") {
        auto81DF9EAC_val = StringCase(StringWord(lv_message, 3), true);
        if (auto81DF9EAC_val == "LUNATIC") {
            auto4786120E_val = StringCase(StringWord(lv_message, 4), true);
            if (auto4786120E_val == "END") {
                TriggerExecute(gt_LUNATICEnd, true, false);
            }
            else {
            }
        }
        else if (auto81DF9EAC_val == "TEST") {
            autoF25E5DDE_val = StringCase(StringWord(lv_message, 4), true);
            if (autoF25E5DDE_val == "CINEMATIC") {
                TriggerSendEvent("New Story Cinematic");
            }
            else {
            }
        }
        else if (auto81DF9EAC_val == "BM") {
            auto540835FC_val = StringCase(StringWord(lv_message, 4), true);
            if (auto540835FC_val == "5SPAWN") {
                TriggerExecute(gt_NewBossMode5Min, true, false);
            }
            else if (auto540835FC_val == "10SPAWN") {
                TriggerExecute(gt_NewBossMode10Min, true, false);
            }
            else if (auto540835FC_val == "15SPAWN") {
                TriggerExecute(gt_NewBossMode15Min, true, false);
            }
            else if (auto540835FC_val == "20SPAWN") {
                TriggerExecute(gt_NewBossMode20Min, true, false);
            }
            else if (auto540835FC_val == "25SPAWN") {
                TriggerExecute(gt_NewBossMode25Min, true, false);
            }
            else if (auto540835FC_val == "30SPAWN") {
                TriggerExecute(gt_NewBossMode30Min, true, false);
            }
            else if (auto540835FC_val == "35SPAWN") {
                TriggerExecute(gt_NewBossMode35Min, true, false);
            }
            else if (auto540835FC_val == "40SPAWN") {
                TriggerExecute(gt_NewBossMode40Min, true, false);
            }
            else if (auto540835FC_val == "45SPAWN") {
                TriggerExecute(gt_NewBossMode45Min, true, false);
            }
            else if (auto540835FC_val == "50SPAWN") {
                TriggerExecute(gt_NewBossMode50Min, true, false);
            }
            else if (auto540835FC_val == "WIN") {
                TriggerExecute(gt_NewBossModeEnd, true, false);
            }
            else {
            }
        }
        else if (auto81DF9EAC_val == "STORYCHAPTER3") {
            autoE88131B8_val = StringCase(StringWord(lv_message, 4), true);
            if (autoE88131B8_val == "T1ARRIVAL") {
                gf_T1Arrival();
            }
            else if (autoE88131B8_val == "ESCORTCE") {
                gf_EscortEngineers();
            }
            else if (autoE88131B8_val == "AIRTHREATS") {
                gf_AirThreats();
            }
            else if (autoE88131B8_val == "SECURELZ") {
                gf_SecureLZs();
            }
            else if (autoE88131B8_val == "INFERNUS") {
                gf_FungusCores();
            }
            else if (autoE88131B8_val == "MAWS") {
                gf_ThresherMaws();
            }
            else if (autoE88131B8_val == "SATCHELS") {
                gf_SeismicDisturbance();
            }
            else if (autoE88131B8_val == "DSPROTECT") {
                gf_ProtectBioResonator();
            }
            else if (autoE88131B8_val == "DSESCORT") {
                gf_EscortDarkSky();
            }
            else if (autoE88131B8_val == "DSKECS") {
                gf_FindKineticEnergyCapacitors();
            }
            else if (autoE88131B8_val == "DSKEYCARD") {
                gf_FindKeyCard();
            }
            else if (autoE88131B8_val == "DSSEARCHTHALIM") {
                gf_SearchThalimHomes();
            }
            else if (autoE88131B8_val == "DSVOTE") {
                gf_DarkSky();
            }
            else if (autoE88131B8_val == "HELIPORT") {
                gf_Heliport();
            }
            else {
            }
        }
        else if (auto81DF9EAC_val == "STORYCHAPTER2") {
            auto03D28D1E_val = StringCase(StringWord(lv_message, 4), true);
            if (auto03D28D1E_val == "REFUGEES") {
                gf_DasdanRetreats();
            }
            else if (auto03D28D1E_val == "RECONDRONE") {
                gf_ReconnaissanceDrone();
            }
            else if (auto03D28D1E_val == "VIPS") {
                gf_ExtractVIPs();
            }
            else if (auto03D28D1E_val == "BIOSPHERESILOS") {
                gf_BiosphereSilos();
            }
            else if (auto03D28D1E_val == "GENERATORS") {
                gf_RechargeGenerators();
            }
            else if (auto03D28D1E_val == "APIARIES") {
                gf_Apiaries();
            }
            else if (auto03D28D1E_val == "TITAN") {
                gf_MarchOfTheDead();
            }
            else if (auto03D28D1E_val == "THANATOS") {
                gf_IntoTheDarkness();
            }
            else if (auto03D28D1E_val == "TITANOS") {
                gf_IntoTheDarkMarch();
            }
            else {
            }
        }
        else if (auto81DF9EAC_val == "STORYCHAPTER1") {
            auto9289B139_val = StringCase(StringWord(lv_message, 4), true);
            if (auto9289B139_val == "PROTECTHELICOPTERS") {
                gf_ProtectAH25Hunters();
            }
            else if (auto9289B139_val == "ESCORTCONVOY") {
                gf_EscortReinforcements();
            }
            else if (auto9289B139_val == "ESCORTROSEN") {
                gf_EscortLabAssistant();
            }
            else if (auto9289B139_val == "IFF") {
                gf_WanderingSoldier();
            }
            else if (auto9289B139_val == "ESCORTCIVS") {
                gf_EscortCivilians();
            }
            else if (auto9289B139_val == "KILLT1S") {
                gf_KillIntrudingT1s();
            }
            else {
            }
        }
        else if (auto81DF9EAC_val == "STORYPROLOGUE") {
            auto75A42768_val = StringCase(StringWord(lv_message, 4), true);
            if (auto75A42768_val == "DEFENDBALAAD") {
                gf_DefendBalaad();
            }
            else if (auto75A42768_val == "QUARANTINECIVS") {
                gf_QuarantineCivilians();
            }
            else if (auto75A42768_val == "SENTRYGUNS") {
                gf_SentryGuns();
            }
            else if (auto75A42768_val == "SPORES") {
                gf_SporeColonies();
            }
            else if (auto75A42768_val == "BMDD") {
                gf_BMDDTowerNetwork();
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DevTriggerCommandExecuting_Init () {
    gt_DevTriggerCommandExecuting = TriggerCreate("gt_DevTriggerCommandExecuting_Func");
    TriggerAddEventChatMessage(gt_DevTriggerCommandExecuting, c_playerAny, "trig", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beta Testing Unlocks
//--------------------------------------------------------------------------------------------------
bool gt_BetaTestingUnlocks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto54CDF569_g;
    int auto54CDF569_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto54CDF569_g = gv_players;
    auto54CDF569_var = -1;
    while (true) {
        auto54CDF569_var = PlayerGroupNextPlayer(auto54CDF569_g, auto54CDF569_var);
        if (auto54CDF569_var < 0) { break; }
        if (gf_BetaHandles(PlayerHandle(auto54CDF569_var)) && (gv_sIunlocked[38][auto54CDF569_var] == false)) {
            gv_sIunlocked[38][auto54CDF569_var] = true;
        }
        if (gf_BetaHandles(PlayerHandle(auto54CDF569_var)) && (gv_sIunlocked[46][auto54CDF569_var] == false)) {
            gv_sIunlocked[46][auto54CDF569_var] = true;
        }
        if (gf_BetaHandles(PlayerHandle(auto54CDF569_var)) && (gv_sIunlocked[48][auto54CDF569_var] == false)) {
            gv_sIunlocked[48][auto54CDF569_var] = true;
        }
        if (gf_BetaHandles(PlayerHandle(auto54CDF569_var)) && (gv_sIunlocked[54][auto54CDF569_var] == false)) {
            gv_sIunlocked[54][auto54CDF569_var] = true;
        }
        if (gf_BetaHandles(PlayerHandle(auto54CDF569_var)) && (gv_sIunlocked[56][auto54CDF569_var] == false)) {
            gv_sIunlocked[56][auto54CDF569_var] = true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BetaTestingUnlocks_Init () {
    gt_BetaTestingUnlocks = TriggerCreate("gt_BetaTestingUnlocks_Func");
    TriggerAddEventTimeElapsed(gt_BetaTestingUnlocks, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dev Command Display
//--------------------------------------------------------------------------------------------------
bool gt_DevCommandDisplay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_DevHandles(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/B94BDFAC"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/525AA488"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/8F925B70"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/80767894"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/9AAC0F32"));
    Wait(2.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/B231CA56"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/B30CF2BA"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/313DE7F5"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/1017F2F0"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/FEC83059"));
    Wait(2.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/B8595770"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/7691DBAD"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/30463E65"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/D1A1EA88"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/BFB258BA"));
    Wait(2.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/9642145D"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/CB9AFCEC"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/F57834AF"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/DDEA3397"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/FA309389"));
    Wait(2.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/EC4323F1"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/4A635207"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/5B135554"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/B191F322"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/5682333F"));
    Wait(2.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/CD78FEC3"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/6FF4981B"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/E9EC67D6"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/F7AB0283"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/3B2FE166"));
    Wait(2.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/ADA1F2FB"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/215824A5"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/D2730937"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/11352F2C"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/5845BFEA"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/1AEAC48A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DevCommandDisplay_Init () {
    gt_DevCommandDisplay = TriggerCreate("gt_DevCommandDisplay_Func");
    TriggerAddEventChatMessage(gt_DevCommandDisplay, c_playerAny, "-list", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dev Commands
//--------------------------------------------------------------------------------------------------
bool gt_DevCommands_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_oldhero;
    int lv_intloop;
    int lv_dyingplayer;
    int lv_loopint;
    string lv_message;
    int lv_user;
    bool lv_success;
    int lv_selectedPlayer;
    region lv_tmpregion;
    unit lv_tmpunit;

    // Automatic Variable Declarations
    string autoCC687575_val;
    unitgroup auto2D60EC28_g;
    int auto2D60EC28_u;
    unit auto2D60EC28_var;
    playergroup auto9522850E_g;
    int auto9522850E_var;
    unitgroup auto88F170E7_g;
    int auto88F170E7_u;
    unit auto88F170E7_var;
    unitgroup auto00EE31FE_g;
    int auto00EE31FE_u;
    unit auto00EE31FE_var;
    unitgroup auto69D262D5_g;
    int auto69D262D5_u;
    unit auto69D262D5_var;
    unitgroup auto93FB3A48_g;
    int auto93FB3A48_u;
    unit auto93FB3A48_var;
    unitgroup auto76F0AA6F_g;
    int auto76F0AA6F_u;
    unit auto76F0AA6F_var;
    unitgroup autoEBFE7B2E_g;
    int autoEBFE7B2E_u;
    unit autoEBFE7B2E_var;
    unitgroup autoE039824A_g;
    int autoE039824A_u;
    unit autoE039824A_var;
    unitgroup auto046F8515_g;
    int auto046F8515_u;
    unit auto046F8515_var;
    unitgroup auto05442F28_g;
    int auto05442F28_u;
    unit auto05442F28_var;
    unitgroup auto9F18D86E_g;
    int auto9F18D86E_u;
    unit auto9F18D86E_var;
    unitgroup autoCD288E7B_g;
    int autoCD288E7B_u;
    unit autoCD288E7B_var;
    unitgroup autoB7125C6F_g;
    int autoB7125C6F_u;
    unit autoB7125C6F_var;
    unitgroup auto62B025D4_g;
    int auto62B025D4_u;
    unit auto62B025D4_var;
    unitgroup auto45E8CA68_g;
    int auto45E8CA68_u;
    unit auto45E8CA68_var;
    const int auto2291459F_ae = 12;
    const int auto2291459F_ai = 1;
    unitgroup autoFE9648B3_g;
    int autoFE9648B3_u;
    unit autoFE9648B3_var;
    unitgroup auto3988DA23_g;
    int auto3988DA23_u;
    unit auto3988DA23_var;
    playergroup auto83ACB244_g;
    int auto83ACB244_var;
    playergroup auto7F4C9233_g;
    int auto7F4C9233_var;
    playergroup autoA6DA63DB_g;
    int autoA6DA63DB_var;
    unitgroup auto1F946C51_g;
    int auto1F946C51_u;
    unit auto1F946C51_var;
    unitgroup autoD8651607_g;
    int autoD8651607_u;
    unit autoD8651607_var;
    unitgroup autoC8644BD4_g;
    int autoC8644BD4_u;
    unit autoC8644BD4_var;
    unitgroup autoB8C21DD0_g;
    int autoB8C21DD0_u;
    unit autoB8C21DD0_var;
    unitgroup auto6C30399D_g;
    int auto6C30399D_u;
    unit auto6C30399D_var;
    unitgroup autoA56E610E_g;
    int autoA56E610E_u;
    unit autoA56E610E_var;
    const int auto0F94B070_ae = gv_ailmentCount;
    const int auto0F94B070_ai = 1;
    const int auto765B9651_n = 40;
    int auto765B9651_i;
    unitgroup autoCDF52CFB_g;
    int autoCDF52CFB_u;
    unit autoCDF52CFB_var;
    unitgroup autoE206505A_g;
    int autoE206505A_u;
    unit autoE206505A_var;
    unitgroup auto427DB29C_g;
    int auto427DB29C_u;
    unit auto427DB29C_var;
    string autoE795E4FC_val;
    unitgroup auto252A735B_g;
    int auto252A735B_u;
    unit auto252A735B_var;
    unitgroup auto9D02314C_g;
    int auto9D02314C_u;
    unit auto9D02314C_var;
    const int auto50FEFB49_ae = 20;
    const int auto50FEFB49_ai = 1;
    unitgroup auto9135C1CC_g;
    int auto9135C1CC_u;
    unit auto9135C1CC_var;
    unitgroup auto61ECECB3_g;
    int auto61ECECB3_u;
    unit auto61ECECB3_var;
    unitgroup auto6ABA1710_g;
    int auto6ABA1710_u;
    unit auto6ABA1710_var;
    unitgroup auto4F303A85_g;
    int auto4F303A85_u;
    unit auto4F303A85_var;
    unitgroup auto0E5817F2_g;
    int auto0E5817F2_u;
    unit auto0E5817F2_var;
    unitgroup autoB3CB3380_g;
    int autoB3CB3380_u;
    unit autoB3CB3380_var;

    // Variable Initialization
    lv_dyingplayer = EventPlayer();
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();
    lv_selectedPlayer = UnitGetOwner(UnitGroupUnit(UnitGroupSelected(lv_user), 1));

    // Conditions
    if (testConds) {
        if (!((StringEqual(StringWord(lv_message, 1), "dev", c_stringNoCase) == true))) {
            return false;
        }

        if (!(gf_DevHandles(PlayerHandle(lv_user)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCC687575_val = StringCase(StringWord(lv_message, 2), true);
    if (autoCC687575_val == "BM") {
        TriggerEnable(gt_NewBossMode5Min, true);
        TriggerEnable(gt_NewBossMode10Min, true);
        TriggerEnable(gt_NewBossMode15Min, true);
        TriggerEnable(gt_NewBossMode20Min, true);
        TriggerEnable(gt_NewBossMode25Min, true);
        TriggerEnable(gt_NewBossMode30Min, true);
        TriggerEnable(gt_NewBossMode35Min, true);
        TriggerEnable(gt_NewBossMode40Min, true);
        TriggerEnable(gt_NewBossMode45Min, true);
        TriggerEnable(gt_NewBossMode50Min, true);
    }
    else if (autoCC687575_val == "PLZNO") {
        TriggerEnable(gt_NewBossMode5Min, false);
        TriggerEnable(gt_NewBossMode10Min, false);
        TriggerEnable(gt_NewBossMode15Min, false);
        TriggerEnable(gt_NewBossMode20Min, false);
        TriggerEnable(gt_NewBossMode25Min, false);
        TriggerEnable(gt_NewBossMode30Min, false);
        TriggerEnable(gt_NewBossMode35Min, false);
        TriggerEnable(gt_NewBossMode40Min, false);
        TriggerEnable(gt_NewBossMode45Min, false);
        TriggerEnable(gt_NewBossMode50Min, false);
    }
    else if (autoCC687575_val == "EXTERMINO") {
        TriggerStop(gt_Exterminatus);
    }
    else if (autoCC687575_val == "EXTERMINATUS") {
        TriggerExecute(gt_Exterminatus, true, false);
    }
    else if (autoCC687575_val == "CRITFIXOFF") {
        gv_criticalShotReal5X = false;
    }
    else if (autoCC687575_val == "CRITFIXON") {
        gv_criticalShotReal5X = true;
    }
    else if (autoCC687575_val == "RCDDOFF") {
        TriggerEnable(gt_rCDD, false);
    }
    else if (autoCC687575_val == "RCDDON") {
        TriggerEnable(gt_rCDD, true);
    }
    else if (autoCC687575_val == "ILA") {
        if ((StringWord(lv_message, 3) != null))
        {
            gv_ILAllow = StringToInt(StringWord(lv_message, 3));
            TriggerExecute(gt_AdvancedInfestationLevelDisplay, false, false);
            TriggerEnable(gt_AdvancedInfestationLevelDisplay, true);
        }
    }
    else if (autoCC687575_val == "RUNTRIGGER") {
        TriggerExecute(TriggerCreate(StringWord(lv_message, 3)), false, false);
    }
    else if (autoCC687575_val == "STOPTRIGGER") {
        TriggerStop(TriggerFind(StringWord(lv_message, 3)));
    }
    else if (autoCC687575_val == "ACTORSEND") {
        UnitGroupLoopBegin(UnitGroupSelected(lv_user));
        for (; !UnitGroupLoopDone(); UnitGroupLoopStep())
        {
            ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), StringSub(lv_message, 15, StringLength(lv_message)));
        }
        UnitGroupLoopEnd();
    }
    else if (autoCC687575_val == "DISABLETRIGGER") {
        TriggerEnable(TriggerFind(StringWord(lv_message, 3)), false);
    }
    else if (autoCC687575_val == "ENABLETRIGGER") {
        TriggerEnable(TriggerFind(StringWord(lv_message, 3)), true);
    }
    else if (autoCC687575_val == "GETDATA") {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringToText(CatalogFieldValueGet(StringToInt(StringWord(lv_message, 3)), StringWord(lv_message, 4), StringWord(lv_message, 5), StringToInt(StringWord(lv_message, 6)))));
    }
    else if (autoCC687575_val == "FIXDATA") {
        if (StringToInt(StringWord(lv_message, 6)) != -1)
        {
            CatalogFieldValueSet(StringToInt(StringWord(lv_message, 3)), StringWord(lv_message, 4), StringWord(lv_message, 5), StringToInt(StringWord(lv_message, 6)), StringWord(lv_message, 7));
        }
        else
        {
            PlayerGroupLoopBegin(PlayerGroupAll());
            for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep())
            {
                CatalogFieldValueSet(StringToInt(StringWord(lv_message, 3)), StringWord(lv_message, 4), StringWord(lv_message, 5), PlayerGroupLoopCurrent(), StringWord(lv_message, 7));
            }
            PlayerGroupLoopEnd();
        }
    }
    else if (autoCC687575_val == "PLUZON") {
        gv_nightMarePLUZM5C2M1Enable = true;
    }
    else if (autoCC687575_val == "PLUZOFF") {
        gv_nightMarePLUZM5C2M1Enable = false;
    }
    else if (autoCC687575_val == "CREATE") {
        if ((StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 13) && (UnitTypeFromString(StringWord(lv_message, 4)) != null)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(StringToInt(StringWord(lv_message, 3)), UnitTypeFromString(StringWord(lv_message, 4)), c_unitCreateIgnorePlacement, lv_user, CameraGetTarget(lv_user));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/7184AD65"));
        }
    }
    else if (autoCC687575_val == "TIMESCALE") {
        if ((StringToFixed(StringWord(lv_message, 3)) > 0)) {
            GameSetGlobalTimeScale(StringToFixed(StringWord(lv_message, 3)));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/4EC76622"));
        }
    }
    else if (autoCC687575_val == "MISSIONINC") {
        gv_missionCompleted += StringToInt(StringWord(lv_message, 3));
        gv_objective_Mission_Tracker_Max = gv_totalMissions;
    }
    else if (autoCC687575_val == "ENEMYLEVEL") {
        if ((StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 7)) {
            gv_sandboxDifficultyModifier = StringToInt(StringWord(EventChatMessage(false), 3));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/67B200F4"));
        }
    }
    else if (autoCC687575_val == "LEVEL") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0)) {
            auto2D60EC28_g = UnitGroupSelected(lv_user);
            auto2D60EC28_u = UnitGroupCount(auto2D60EC28_g, c_unitCountAll);
            for (;; auto2D60EC28_u -= 1) {
                auto2D60EC28_var = UnitGroupUnitFromEnd(auto2D60EC28_g, auto2D60EC28_u);
                if (auto2D60EC28_var == null) { break; }
                UnitSetPropertyFixed(auto2D60EC28_var, c_unitPropLevel, StringToFixed(StringWord(lv_message, 3)));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/37FF1717"));
        }
    }
    else if (autoCC687575_val == "SPAWN") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) <= 6) && (UnitTypeFromString(StringWord(lv_message, 4)) != null)) {
            gf_SpawnUndead(StringToInt(StringWord(lv_message, 3)), UnitTypeFromString(StringWord(lv_message, 4)), 1);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/776DC93B"));
        }
    }
    else if (autoCC687575_val == "MUTATE") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) <= 6) && (UnitTypeFromString(StringWord(lv_message, 4)) != null)) {
            gf_SpawnUndeadMutated(StringToInt(StringWord(lv_message, 3)), UnitTypeFromString(StringWord(lv_message, 4)), 1, "Mutation", 1);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/7A72656E"));
        }
    }
    else if (autoCC687575_val == "PMC") {
        if ((gv_pmcset == false)) {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/B61A22D3"));
            gv_pmcset = true;
            gv_pmcon = true;
            gv_allowISR = true;
            TriggerEnable(gt_SquadContact, true);
            TriggerEnable(gt_SquadLoop, true);
            TriggerEnable(gt_PMCAlertExpire, true);
            auto9522850E_g = gv_players;
            auto9522850E_var = -1;
            while (true) {
                auto9522850E_var = PlayerGroupNextPlayer(auto9522850E_g, auto9522850E_var);
                if (auto9522850E_var < 0) { break; }
                libNtve_gf_SetAlliance(auto9522850E_var, 15, libNtve_ge_AllianceSetting_Enemy);
            }
            libNtve_gf_SetAlliance(13, 15, libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/2DE056F7"));
        }
    }
    else if (autoCC687575_val == "PMCSQUAD") {
        if ((gv_pmcon == true)) {
            if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0)) {
                gf_SpawnPMCSquad(StringToInt(StringWord(lv_message, 3)), 0);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/265B2CAA"));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/51B6080E"));
        }
    }
    else if (autoCC687575_val == "TSQUAD") {
        if ((gv_pmcon == true)) {
            if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0)) {
                gf_SpawnTerminatorSquad(StringToInt(StringWord(lv_message, 3)), 0);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/5844793A"));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/AFCB211B"));
        }
    }
    else if (autoCC687575_val == "BUFF") {
        if (((StringWord(lv_message, 3)) != null)) {
            auto88F170E7_g = UnitGroupSelected(lv_user);
            auto88F170E7_u = UnitGroupCount(auto88F170E7_g, c_unitCountAll);
            for (;; auto88F170E7_u -= 1) {
                auto88F170E7_var = UnitGroupUnitFromEnd(auto88F170E7_g, auto88F170E7_u);
                if (auto88F170E7_var == null) { break; }
                UnitBehaviorAdd(auto88F170E7_var, (StringWord(lv_message, 3)), auto88F170E7_var, 1);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/15BB0A83"));
        }
    }
    else if (autoCC687575_val == "UNBUFF") {
        if (((StringWord(lv_message, 3)) != null)) {
            auto00EE31FE_g = UnitGroupSelected(lv_user);
            auto00EE31FE_u = UnitGroupCount(auto00EE31FE_g, c_unitCountAll);
            for (;; auto00EE31FE_u -= 1) {
                auto00EE31FE_var = UnitGroupUnitFromEnd(auto00EE31FE_g, auto00EE31FE_u);
                if (auto00EE31FE_var == null) { break; }
                UnitBehaviorRemove(auto00EE31FE_var, (StringWord(lv_message, 3)), 1);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/9431EC8A"));
        }
    }
    else if (autoCC687575_val == "CAMO") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 1)) {
            if ((StringToInt(StringWord(lv_message, 3)) != 52)) {
                auto69D262D5_g = UnitGroupSelected(lv_user);
                auto69D262D5_u = UnitGroupCount(auto69D262D5_g, c_unitCountAll);
                for (;; auto69D262D5_u -= 1) {
                    auto69D262D5_var = UnitGroupUnitFromEnd(auto69D262D5_g, auto69D262D5_u);
                    if (auto69D262D5_var == null) { break; }
                    gv_playercamounlocked[StringToInt(StringWord(lv_message, 3))][UnitGetOwner(auto69D262D5_var)] = true;
                }
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/2280913F"));
        }
    }
    else if (autoCC687575_val == "UNCAMO") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 1)) {
            auto93FB3A48_g = UnitGroupSelected(lv_user);
            auto93FB3A48_u = UnitGroupCount(auto93FB3A48_g, c_unitCountAll);
            for (;; auto93FB3A48_u -= 1) {
                auto93FB3A48_var = UnitGroupUnitFromEnd(auto93FB3A48_g, auto93FB3A48_u);
                if (auto93FB3A48_var == null) { break; }
                gv_playercamounlocked[StringToInt(StringWord(lv_message, 3))][UnitGetOwner(auto93FB3A48_var)] = false;
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/5579EA83"));
        }
    }
    else if (autoCC687575_val == "DECAL") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0)) {
            auto76F0AA6F_g = UnitGroupSelected(lv_user);
            auto76F0AA6F_u = UnitGroupCount(auto76F0AA6F_g, c_unitCountAll);
            for (;; auto76F0AA6F_u -= 1) {
                auto76F0AA6F_var = UnitGroupUnitFromEnd(auto76F0AA6F_g, auto76F0AA6F_u);
                if (auto76F0AA6F_var == null) { break; }
                gv_playerdecalunlocked[StringToInt(StringWord(lv_message, 3))][UnitGetOwner(auto76F0AA6F_var)] = true;
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/7715A135"));
        }
    }
    else if (autoCC687575_val == "UNDECAL") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0)) {
            autoEBFE7B2E_g = UnitGroupSelected(lv_user);
            autoEBFE7B2E_u = UnitGroupCount(autoEBFE7B2E_g, c_unitCountAll);
            for (;; autoEBFE7B2E_u -= 1) {
                autoEBFE7B2E_var = UnitGroupUnitFromEnd(autoEBFE7B2E_g, autoEBFE7B2E_u);
                if (autoEBFE7B2E_var == null) { break; }
                gv_playerdecalunlocked[StringToInt(StringWord(lv_message, 3))][UnitGetOwner(autoEBFE7B2E_var)] = false;
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/CBD50743"));
        }
    }
    else if (autoCC687575_val == "SI") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0)) {
            autoE039824A_g = UnitGroupSelected(lv_user);
            autoE039824A_u = UnitGroupCount(autoE039824A_g, c_unitCountAll);
            for (;; autoE039824A_u -= 1) {
                autoE039824A_var = UnitGroupUnitFromEnd(autoE039824A_g, autoE039824A_u);
                if (autoE039824A_var == null) { break; }
                gv_sIunlocked[StringToInt(StringWord(lv_message, 3))][UnitGetOwner(autoE039824A_var)] = true;
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/BABD26F6"));
        }
    }
    else if (autoCC687575_val == "UNSI") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0)) {
            auto046F8515_g = UnitGroupSelected(lv_user);
            auto046F8515_u = UnitGroupCount(auto046F8515_g, c_unitCountAll);
            for (;; auto046F8515_u -= 1) {
                auto046F8515_var = UnitGroupUnitFromEnd(auto046F8515_g, auto046F8515_u);
                if (auto046F8515_var == null) { break; }
                gv_sIunlocked[StringToInt(StringWord(lv_message, 3))][UnitGetOwner(auto046F8515_var)] = false;
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/BC37F621"));
        }
    }
    else if (autoCC687575_val == "ACCESSORY") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0)) {
            auto05442F28_g = UnitGroupSelected(lv_user);
            auto05442F28_u = UnitGroupCount(auto05442F28_g, c_unitCountAll);
            for (;; auto05442F28_u -= 1) {
                auto05442F28_var = UnitGroupUnitFromEnd(auto05442F28_g, auto05442F28_u);
                if (auto05442F28_var == null) { break; }
                gv_playeraccessoryunlocked[StringToInt(StringWord(lv_message, 3))][UnitGetOwner(auto05442F28_var)] = true;
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/817EEDF5"));
        }
    }
    else if (autoCC687575_val == "UNACCESSORY") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0)) {
            auto9F18D86E_g = UnitGroupSelected(lv_user);
            auto9F18D86E_u = UnitGroupCount(auto9F18D86E_g, c_unitCountAll);
            for (;; auto9F18D86E_u -= 1) {
                auto9F18D86E_var = UnitGroupUnitFromEnd(auto9F18D86E_g, auto9F18D86E_u);
                if (auto9F18D86E_var == null) { break; }
                gv_playeraccessoryunlocked[StringToInt(StringWord(lv_message, 3))][UnitGetOwner(auto9F18D86E_var)] = false;
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/CF042788"));
        }
    }
    else if (autoCC687575_val == "SIREPICK") {
        gf_RepickSis(lv_user);
    }
    else if (autoCC687575_val == "COOLDOWN") {
        autoCD288E7B_g = UnitGroupSelected(lv_user);
        autoCD288E7B_u = UnitGroupCount(autoCD288E7B_g, c_unitCountAll);
        for (;; autoCD288E7B_u -= 1) {
            autoCD288E7B_var = UnitGroupUnitFromEnd(autoCD288E7B_g, autoCD288E7B_u);
            if (autoCD288E7B_var == null) { break; }
            gf_ResetAllAbilityCooldownsForUnit(autoCD288E7B_var);
        }
        lv_success = true;
    }
    else if (autoCC687575_val == "GOD") {
        autoB7125C6F_g = UnitGroupSelected(lv_user);
        autoB7125C6F_u = UnitGroupCount(autoB7125C6F_g, c_unitCountAll);
        for (;; autoB7125C6F_u -= 1) {
            autoB7125C6F_var = UnitGroupUnitFromEnd(autoB7125C6F_g, autoB7125C6F_u);
            if (autoB7125C6F_var == null) { break; }
            UnitBehaviorAdd(autoB7125C6F_var, "Unstoppable", autoB7125C6F_var, 1);
        }
    }
    else if (autoCC687575_val == "BOOM") {
        auto62B025D4_g = UnitGroupSelected(lv_user);
        auto62B025D4_u = UnitGroupCount(auto62B025D4_g, c_unitCountAll);
        for (;; auto62B025D4_u -= 1) {
            auto62B025D4_var = UnitGroupUnitFromEnd(auto62B025D4_g, auto62B025D4_u);
            if (auto62B025D4_var == null) { break; }
            PlayerCreateEffectUnit(lv_user, "OdinNukeDamage", auto62B025D4_var);
        }
    }
    else if (autoCC687575_val == "KICK") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 13)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (TextWithColor(PlayerName(StringToInt(StringWord(lv_message, 3))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(StringToInt(StringWord(lv_message, 3)), false))) + StringExternal("Param/Value/BBB72D1B")));
            GameOver(StringToInt(StringWord(lv_message, 3)), c_gameOverDefeat, false, true);
            auto45E8CA68_g = gv_heroskilledbyplayer[StringToInt(StringWord(lv_message, 3))];
            auto45E8CA68_u = UnitGroupCount(auto45E8CA68_g, c_unitCountAll);
            for (;; auto45E8CA68_u -= 1) {
                auto45E8CA68_var = UnitGroupUnitFromEnd(auto45E8CA68_g, auto45E8CA68_u);
                if (auto45E8CA68_var == null) { break; }
                UnitCreateEffectUnit(auto45E8CA68_var, "ReviveModifyUnit", auto45E8CA68_var);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/BF37A98B"));
        }
    }
    else if (autoCC687575_val == "REV") {
        if ((StringWord(lv_message, 3) != null)) {
            if ((StringCase(StringWord(lv_message, 3), false) == "all")) {
                lv_loopint = 1;
                for ( ; ( (auto2291459F_ai >= 0 && lv_loopint <= auto2291459F_ae) || (auto2291459F_ai < 0 && lv_loopint >= auto2291459F_ae) ) ; lv_loopint += auto2291459F_ai ) {
                    if ((gv_playersHeroisDead[lv_loopint] == true)) {
                        UnitCreateEffectUnit(gv_playerHeroes[lv_loopint], "ReviveModifyUnit", gv_playerHeroes[lv_loopint]);
                    }
                }
            }
            else {
                if ((StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 13)) {
                    if ((gv_playersHeroisDead[StringToInt(StringWord(lv_message, 3))] == true)) {
                        UnitCreateEffectUnit(gv_playerHeroes[StringToInt(StringWord(lv_message, 3))], "ReviveModifyUnit", gv_playerHeroes[StringToInt(StringWord(lv_message, 3))]);
                    }
                }

            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/E27180B2"));
        }
    }
    else if (autoCC687575_val == "REMOVE") {
        autoFE9648B3_g = UnitGroupSelected(lv_user);
        autoFE9648B3_u = UnitGroupCount(autoFE9648B3_g, c_unitCountAll);
        for (;; autoFE9648B3_u -= 1) {
            autoFE9648B3_var = UnitGroupUnitFromEnd(autoFE9648B3_g, autoFE9648B3_u);
            if (autoFE9648B3_var == null) { break; }
            if ((UnitGetType(autoFE9648B3_var) != "HeroSelector")) {
                UnitKill(autoFE9648B3_var);
            }
        }
    }
    else if (autoCC687575_val == "REVIVE") {
        if ((gv_playersHeroisDead[lv_dyingplayer] == true)) {
            UnitCreateEffectUnit(gv_playerHeroes[lv_dyingplayer], "ReviveModifyUnit", gv_playerHeroes[lv_dyingplayer]);
        }

    }
    else if (autoCC687575_val == "GIVE") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) >= 0) && (StringToInt(StringWord(lv_message, 3)) <= 15)) {
            auto3988DA23_g = UnitGroupSelected(lv_user);
            auto3988DA23_u = UnitGroupCount(auto3988DA23_g, c_unitCountAll);
            for (;; auto3988DA23_u -= 1) {
                auto3988DA23_var = UnitGroupUnitFromEnd(auto3988DA23_g, auto3988DA23_u);
                if (auto3988DA23_var == null) { break; }
                UnitSetOwner(auto3988DA23_var, StringToInt(StringWord(lv_message, 3)), true);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/7E1D8006"));
        }
    }
    else if (autoCC687575_val == "REVEAL") {
        if ((gv_devRevealersCreated == false)) {
            auto83ACB244_g = gv_players;
            auto83ACB244_var = -1;
            while (true) {
                auto83ACB244_var = PlayerGroupNextPlayer(auto83ACB244_g, auto83ACB244_var);
                if (auto83ACB244_var < 0) { break; }
                VisRevealerCreate(auto83ACB244_var, RegionEntireMap());
                gv_devRevealer[auto83ACB244_var] = VisRevealerLastCreated();
                gv_devRevealersCreated = true;
            }
        }
        auto7F4C9233_g = gv_players;
        auto7F4C9233_var = -1;
        while (true) {
            auto7F4C9233_var = PlayerGroupNextPlayer(auto7F4C9233_g, auto7F4C9233_var);
            if (auto7F4C9233_var < 0) { break; }
            VisRevealerEnable(gv_devRevealer[auto7F4C9233_var], true);
        }
    }
    else if (autoCC687575_val == "HIDE") {
        autoA6DA63DB_g = gv_players;
        autoA6DA63DB_var = -1;
        while (true) {
            autoA6DA63DB_var = PlayerGroupNextPlayer(autoA6DA63DB_g, autoA6DA63DB_var);
            if (autoA6DA63DB_var < 0) { break; }
            VisRevealerEnable(gv_devRevealer[autoA6DA63DB_var], false);
        }
    }
    else if (autoCC687575_val == "MAP") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) <= 5)) {
            gf_PlayableMapAreaTest(StringToInt(StringWord(lv_message, 3)));
        }

    }
    else if (autoCC687575_val == "XP") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 4) != null) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 4)) {
            auto1F946C51_g = UnitGroupSelected(lv_user);
            auto1F946C51_u = UnitGroupCount(auto1F946C51_g, c_unitCountAll);
            for (;; auto1F946C51_u -= 1) {
                auto1F946C51_var = UnitGroupUnitFromEnd(auto1F946C51_g, auto1F946C51_u);
                if (auto1F946C51_var == null) { break; }
                gv_playerExperience[StringToInt(StringWord(lv_message, 3))][lv_selectedPlayer] += StringToInt(StringWord(lv_message, 4));
            }
        }

    }
    else if (autoCC687575_val == "WON") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringWord(lv_message, 4) != null) && (StringToInt(StringWord(lv_message, 4)) > 0)) {
            autoD8651607_g = UnitGroupSelected(lv_user);
            autoD8651607_u = UnitGroupCount(autoD8651607_g, c_unitCountAll);
            for (;; autoD8651607_u -= 1) {
                autoD8651607_var = UnitGroupUnitFromEnd(autoD8651607_g, autoD8651607_u);
                if (autoD8651607_var == null) { break; }
                gv_gamesWon[StringToInt(StringWord(lv_message, 3))][lv_selectedPlayer] = StringToInt(StringWord(lv_message, 4));
            }
        }

    }
    else if (autoCC687575_val == "GAMES") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0)) {
            autoC8644BD4_g = UnitGroupSelected(lv_user);
            autoC8644BD4_u = UnitGroupCount(autoC8644BD4_g, c_unitCountAll);
            for (;; autoC8644BD4_u -= 1) {
                autoC8644BD4_var = UnitGroupUnitFromEnd(autoC8644BD4_g, autoC8644BD4_u);
                if (autoC8644BD4_var == null) { break; }
                gv_playerGamesPlayed[lv_selectedPlayer] = StringToInt(StringWord(lv_message, 3));
            }
        }

    }
    else if (autoCC687575_val == "SETREV") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0)) {
            gv_playerRevives[lv_selectedPlayer] = StringToInt(StringWord(lv_message, 3));
        }

    }
    else if (autoCC687575_val == "PAUSE") {
        autoB8C21DD0_g = UnitGroupSelected(lv_user);
        autoB8C21DD0_u = UnitGroupCount(autoB8C21DD0_g, c_unitCountAll);
        for (;; autoB8C21DD0_u -= 1) {
            autoB8C21DD0_var = UnitGroupUnitFromEnd(autoB8C21DD0_g, autoB8C21DD0_u);
            if (autoB8C21DD0_var == null) { break; }
            libNtve_gf_PauseUnit(autoB8C21DD0_var, true);
        }
    }
    else if (autoCC687575_val == "UNPAUSE") {
        auto6C30399D_g = UnitGroupSelected(lv_user);
        auto6C30399D_u = UnitGroupCount(auto6C30399D_g, c_unitCountAll);
        for (;; auto6C30399D_u -= 1) {
            auto6C30399D_var = UnitGroupUnitFromEnd(auto6C30399D_g, auto6C30399D_u);
            if (auto6C30399D_var == null) { break; }
            libNtve_gf_PauseUnit(auto6C30399D_var, false);
        }
    }
    else if (autoCC687575_val == "HEAL") {
        autoA56E610E_g = UnitGroupSelected(lv_user);
        autoA56E610E_u = UnitGroupCount(autoA56E610E_g, c_unitCountAll);
        for (;; autoA56E610E_u -= 1) {
            autoA56E610E_var = UnitGroupUnitFromEnd(autoA56E610E_g, autoA56E610E_u);
            if (autoA56E610E_var == null) { break; }
            UnitSetPropertyFixed(autoA56E610E_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(autoA56E610E_var, c_unitPropEnergyPercent, 100.0);
            lv_loopint = 1;
            for ( ; ( (auto0F94B070_ai >= 0 && lv_loopint <= auto0F94B070_ae) || (auto0F94B070_ai < 0 && lv_loopint >= auto0F94B070_ae) ) ; lv_loopint += auto0F94B070_ai ) {
                if ((UnitHasBehavior(autoA56E610E_var, gv_ailments[lv_loopint]) == true)) {
                    UnitBehaviorRemove(autoA56E610E_var, gv_ailments[lv_loopint], 1);
                }

            }
        }
    }
    else if (autoCC687575_val == "IL") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0)) {
            gv_infestationLevel = StringToInt(StringWord(lv_message, 3));
        }
    }
    else if (autoCC687575_val == "SANDBOXOFF") {
        if ((gv_gamemode == 12)) {
            TriggerEnable(gt_SandBoxCommands, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/970454C2"));
        }
    }
    else if (autoCC687575_val == "SANDBOXON") {
        if ((gv_gamemode == 12)) {
            TriggerEnable(gt_SandBoxCommands, true);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/5747B5EB"));
        }
    }
    else if (autoCC687575_val == "LN") {
        for (auto765B9651_i = 1; auto765B9651_i <= auto765B9651_n; auto765B9651_i += 1) {
            TriggerExecute(gt_PeriodicLNSpawn, true, false);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/1B636FF4"));
    }
    else if (autoCC687575_val == "NOTARGET") {
        autoCDF52CFB_g = UnitGroupSelected(lv_user);
        autoCDF52CFB_u = UnitGroupCount(autoCDF52CFB_g, c_unitCountAll);
        for (;; autoCDF52CFB_u -= 1) {
            autoCDF52CFB_var = UnitGroupUnitFromEnd(autoCDF52CFB_g, autoCDF52CFB_u);
            if (autoCDF52CFB_var == null) { break; }
            UnitGroupRemove(gv_undeadTargetGroup, autoCDF52CFB_var);
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/A72DFDC0"));
        }
    }
    else if (autoCC687575_val == "TARGET") {
        autoE206505A_g = UnitGroupSelected(lv_user);
        autoE206505A_u = UnitGroupCount(autoE206505A_g, c_unitCountAll);
        for (;; autoE206505A_u -= 1) {
            autoE206505A_var = UnitGroupUnitFromEnd(autoE206505A_g, autoE206505A_u);
            if (autoE206505A_var == null) { break; }
            UnitGroupAdd(gv_undeadTargetGroup, autoE206505A_var);
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/24A2118A"));
        }
    }
    else if (autoCC687575_val == "XP-") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 4) != null) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 4)) {
            gv_playerExperience[StringToInt(StringWord(lv_message, 3))][lv_selectedPlayer] -= StringToInt(StringWord(lv_message, 4));
        }

    }
    else if (autoCC687575_val == "GENESISON") {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/F1304434"));
        TriggerEnable(gt_GenesisSpawning1, true);
        TriggerEnable(gt_GenesisSpawning2, true);
        TriggerEnable(gt_GenesisSpawning3, true);
    }
    else if (autoCC687575_val == "GENESISOFF") {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/76C1F129"));
        TriggerEnable(gt_GenesisSpawning1, false);
        TriggerEnable(gt_GenesisSpawning2, false);
        TriggerEnable(gt_GenesisSpawning3, false);
    }
    else if (autoCC687575_val == "PMCON") {
        if ((gv_pmcset == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/D9D6A50A"));
            TriggerEnable(gt_PMCPeriodicSpawn, true);
            TriggerEnable(gt_PMCSurvival5Min, true);
            TriggerEnable(gt_PMCSurvival10Min, true);
            TriggerEnable(gt_PMCSurvival15Min, true);
            TriggerEnable(gt_PMCSurvival20Min, true);
            TriggerEnable(gt_PMCSurvival25Min, true);
            TriggerEnable(gt_PMCSurvival30Min, true);
            TriggerEnable(gt_PMCSurvival35Min, true);
            TriggerEnable(gt_PMCSurvival40Min, true);
            TriggerEnable(gt_PMCSurvival45Min, true);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/401F0745"));
        }
    }
    else if (autoCC687575_val == "PMCOFF") {
        if ((gv_pmcset == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/FF1AD0CB"));
            TriggerEnable(gt_PMCPeriodicSpawn, false);
            TriggerEnable(gt_PMCSurvival5Min, false);
            TriggerEnable(gt_PMCSurvival10Min, false);
            TriggerEnable(gt_PMCSurvival15Min, false);
            TriggerEnable(gt_PMCSurvival20Min, false);
            TriggerEnable(gt_PMCSurvival25Min, false);
            TriggerEnable(gt_PMCSurvival30Min, false);
            TriggerEnable(gt_PMCSurvival35Min, false);
            TriggerEnable(gt_PMCSurvival40Min, false);
            TriggerEnable(gt_PMCSurvival45Min, false);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/92AE5477"));
        }
    }
    else if (autoCC687575_val == "PARTY") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 13)) {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/F4E254DD"));
            TechTreeUpgradeAddLevel(StringToInt(StringWord(lv_message, 3)), "Party", 1);
        }
        else {
            if ((StringWord(lv_message, 3) == "all")) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/67D047F3"));
                TechTreeUpgradeAddLevel(1, "Party", 1);
                TechTreeUpgradeAddLevel(2, "Party", 1);
                TechTreeUpgradeAddLevel(3, "Party", 1);
                TechTreeUpgradeAddLevel(4, "Party", 1);
                TechTreeUpgradeAddLevel(5, "Party", 1);
                TechTreeUpgradeAddLevel(5, "Party", 1);
                TechTreeUpgradeAddLevel(6, "Party", 1);
                TechTreeUpgradeAddLevel(7, "Party", 1);
                TechTreeUpgradeAddLevel(8, "Party", 1);
                TechTreeUpgradeAddLevel(9, "Party", 1);
                TechTreeUpgradeAddLevel(10, "Party", 1);
                TechTreeUpgradeAddLevel(11, "Party", 1);
                TechTreeUpgradeAddLevel(12, "Party", 1);
            }
        }
    }
    else if (autoCC687575_val == "BETA") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 13)) {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/37886CE2"));
            TechTreeUpgradeAddLevel(StringToInt(StringWord(lv_message, 3)), "BetaTesterOnly", 1);
        }
        else {
            if ((StringWord(lv_message, 3) == "all")) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/70BF1A46"));
                TechTreeUpgradeAddLevel(1, "BetaTesterOnly", 1);
                TechTreeUpgradeAddLevel(2, "BetaTesterOnly", 1);
                TechTreeUpgradeAddLevel(3, "BetaTesterOnly", 1);
                TechTreeUpgradeAddLevel(4, "BetaTesterOnly", 1);
                TechTreeUpgradeAddLevel(5, "BetaTesterOnly", 1);
                TechTreeUpgradeAddLevel(5, "BetaTesterOnly", 1);
                TechTreeUpgradeAddLevel(6, "BetaTesterOnly", 1);
                TechTreeUpgradeAddLevel(7, "BetaTesterOnly", 1);
                TechTreeUpgradeAddLevel(8, "BetaTesterOnly", 1);
                TechTreeUpgradeAddLevel(9, "BetaTesterOnly", 1);
                TechTreeUpgradeAddLevel(10, "BetaTesterOnly", 1);
                TechTreeUpgradeAddLevel(11, "BetaTesterOnly", 1);
                TechTreeUpgradeAddLevel(12, "BetaTesterOnly", 1);
            }
        }
    }
    else if (autoCC687575_val == "SETCAMO") {
        auto427DB29C_g = UnitGroupSelected(lv_user);
        auto427DB29C_u = UnitGroupCount(auto427DB29C_g, c_unitCountAll);
        for (;; auto427DB29C_u -= 1) {
            auto427DB29C_var = UnitGroupUnitFromEnd(auto427DB29C_g, auto427DB29C_u);
            if (auto427DB29C_var == null) { break; }
            autoE795E4FC_val = StringWord(lv_message, 3);
            if (autoE795E4FC_val == "sheriff") {
                ActorSend(libNtve_gf_MainActorofUnit(auto427DB29C_var), "TextureSelectById CamoSherif");
            }
            else if (autoE795E4FC_val == "white") {
                ActorSend(libNtve_gf_MainActorofUnit(auto427DB29C_var), "TextureSelectById CamoWhite");
            }
            else if (autoE795E4FC_val == "ln") {
                ActorSend(libNtve_gf_MainActorofUnit(auto427DB29C_var), "TextureSelectById CamoLN");
            }
            else if (autoE795E4FC_val == "christmas") {
                ActorSend(libNtve_gf_MainActorofUnit(auto427DB29C_var), "TextureSelectById CamoChristmas");
            }
            else if (autoE795E4FC_val == "whitetiger") {
                ActorSend(libNtve_gf_MainActorofUnit(auto427DB29C_var), "TextureSelectById CamoWhiteTiger");
            }
            else if (autoE795E4FC_val == "scarlet") {
                ActorSend(libNtve_gf_MainActorofUnit(auto427DB29C_var), "TextureSelectById CamoScarlet");
            }
            else if (autoE795E4FC_val == "multicam") {
                ActorSend(libNtve_gf_MainActorofUnit(auto427DB29C_var), "TextureSelectById CamoMulticam");
            }
            else if (autoE795E4FC_val == "inferno") {
                ActorSend(libNtve_gf_MainActorofUnit(auto427DB29C_var), "TextureSelectById CamoInferno");
            }
            else if (autoE795E4FC_val == "darksky") {
                ActorSend(libNtve_gf_MainActorofUnit(auto427DB29C_var), "TextureSelectById CamoDarkSky");
            }
            else if (autoE795E4FC_val == "breeze") {
                ActorSend(libNtve_gf_MainActorofUnit(auto427DB29C_var), "TextureSelectById CamoBreeze");
            }
            else {
            }
        }
    }
    else if (autoCC687575_val == "SUPERBANK") {
        if ((GameIsTestMap(false) == false) && (StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 13)) {
            gf_SuperBank(StringToInt(StringWord(lv_message, 3)));
        }
    }
    else if (autoCC687575_val == "SMITHYTEST") {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/FCEC9136"));
        auto252A735B_g = UnitGroupSelected(lv_user);
        auto252A735B_u = UnitGroupCount(auto252A735B_g, c_unitCountAll);
        for (;; auto252A735B_u -= 1) {
            auto252A735B_var = UnitGroupUnitFromEnd(auto252A735B_g, auto252A735B_u);
            if (auto252A735B_var == null) { break; }
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/C22D3E91"));
            UnitAbilitySpendExplicit(auto252A735B_var, AbilityCommand("InfestedNuclearStrike", 0), c_spendLocationAll, 1.0, 1.0, 3.0, 1.0);
        }
    }
    else if (autoCC687575_val == "ARTILLERYTEST") {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/C68D0399"));
        auto9D02314C_g = UnitGroupSelected(lv_user);
        auto9D02314C_u = UnitGroupCount(auto9D02314C_g, c_unitCountAll);
        for (;; auto9D02314C_u -= 1) {
            auto9D02314C_var = UnitGroupUnitFromEnd(auto9D02314C_g, auto9D02314C_u);
            if (auto9D02314C_var == null) { break; }
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/8194DD89"));
            lv_tmpunit = UnitGroupRandomUnit(gv_heroesGroup, c_unitCountAlive);
            lv_tmpregion = RegionCircle(UnitGetPosition(lv_tmpunit), 10.0);
            lv_loopint = 1;
            for ( ; ( (auto50FEFB49_ai >= 0 && lv_loopint <= auto50FEFB49_ae) || (auto50FEFB49_ai < 0 && lv_loopint >= auto50FEFB49_ae) ) ; lv_loopint += auto50FEFB49_ai ) {
                UnitCreateEffectPoint(auto9D02314C_var, "TitanMechMissileShot", RegionRandomPoint(lv_tmpregion));
            }
        }
    }
    else if (autoCC687575_val == "STRAFETEST") {
        gv_f15eastRegions[1] = RegionFromId(87);
        gv_f15eastRegions[2] = RegionFromId(88);
        gv_f15eastRegions[3] = RegionFromId(91);
        gv_f15eastRegions[4] = RegionFromId(93);
        gv_f15eastRegions[5] = RegionFromId(94);
        gv_f15eastRegions[6] = RegionFromId(111);
        gv_f15eastRegions[7] = RegionFromId(113);
        gv_f15eastRegions[8] = RegionFromId(122);
        gv_f15eastRegions[9] = RegionFromId(127);
        gv_f15eastRegions[10] = RegionFromId(129);
        gv_f15westRegions[1] = RegionFromId(95);
        gv_f15westRegions[2] = RegionFromId(96);
        gv_f15westRegions[3] = RegionFromId(97);
        gv_f15westRegions[4] = RegionFromId(98);
        gv_f15westRegions[5] = RegionFromId(101);
        gv_f15westRegions[6] = RegionFromId(102);
        gv_f15westRegions[7] = RegionFromId(103);
        gv_f15westRegions[8] = RegionFromId(108);
        gv_f15westRegions[9] = RegionFromId(109);
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/56900F8C"));
        gf_ElitePMCFlyover();
    }
    else if (autoCC687575_val == "INCINERATE") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 13)) {
            UnitBehaviorAdd(gv_playerHeroes[StringToInt(StringWord(lv_message, 3))], "NapalmBurn1", gv_playerHeroes[StringToInt(StringWord(lv_message, 3))], 10);
            UnitBehaviorAdd(gv_playerHeroes[StringToInt(StringWord(lv_message, 3))], "NapalmBurn2", gv_playerHeroes[StringToInt(StringWord(lv_message, 3))], 10);
            UnitBehaviorAdd(gv_playerHeroes[StringToInt(StringWord(lv_message, 3))], "NapalmBurn3", gv_playerHeroes[StringToInt(StringWord(lv_message, 3))], 10);
            UnitBehaviorAdd(gv_playerHeroes[StringToInt(StringWord(lv_message, 3))], "NapalmBurn4", gv_playerHeroes[StringToInt(StringWord(lv_message, 3))], 10);
            UnitBehaviorAdd(gv_playerHeroes[StringToInt(StringWord(lv_message, 3))], "NapalmBurnBorg", gv_playerHeroes[StringToInt(StringWord(lv_message, 3))], 10);
        }
        else {
            auto9135C1CC_g = UnitGroupSelected(lv_user);
            auto9135C1CC_u = UnitGroupCount(auto9135C1CC_g, c_unitCountAll);
            for (;; auto9135C1CC_u -= 1) {
                auto9135C1CC_var = UnitGroupUnitFromEnd(auto9135C1CC_g, auto9135C1CC_u);
                if (auto9135C1CC_var == null) { break; }
                UnitBehaviorAdd(auto9135C1CC_var, "NapalmBurn1", auto9135C1CC_var, 10);
                UnitBehaviorAdd(auto9135C1CC_var, "NapalmBurn2", auto9135C1CC_var, 10);
                UnitBehaviorAdd(auto9135C1CC_var, "NapalmBurn3", auto9135C1CC_var, 10);
                UnitBehaviorAdd(auto9135C1CC_var, "NapalmBurn4", auto9135C1CC_var, 10);
                UnitBehaviorAdd(auto9135C1CC_var, "NapalmBurnBorg", auto9135C1CC_var, 10);
            }
        }
    }
    else if (autoCC687575_val == "VTMEDTEST") {
        auto61ECECB3_g = UnitGroupSelected(lv_user);
        auto61ECECB3_u = UnitGroupCount(auto61ECECB3_g, c_unitCountAll);
        for (;; auto61ECECB3_u -= 1) {
            auto61ECECB3_var = UnitGroupUnitFromEnd(auto61ECECB3_g, auto61ECECB3_u);
            if (auto61ECECB3_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(auto61ECECB3_var), "TextureSelectById CamoVTMed");
        }
    }
    else if (autoCC687575_val == "VTRNEDTEST") {
        auto6ABA1710_g = UnitGroupSelected(lv_user);
        auto6ABA1710_u = UnitGroupCount(auto6ABA1710_g, c_unitCountAll);
        for (;; auto6ABA1710_u -= 1) {
            auto6ABA1710_var = UnitGroupUnitFromEnd(auto6ABA1710_g, auto6ABA1710_u);
            if (auto6ABA1710_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(auto6ABA1710_var), "TextureSelectById CamoVTrned");
        }
    }
    else if (autoCC687575_val == "KIWITEST") {
        auto4F303A85_g = UnitGroupSelected(lv_user);
        auto4F303A85_u = UnitGroupCount(auto4F303A85_g, c_unitCountAll);
        for (;; auto4F303A85_u -= 1) {
            auto4F303A85_var = UnitGroupUnitFromEnd(auto4F303A85_g, auto4F303A85_u);
            if (auto4F303A85_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(auto4F303A85_var), "TextureSelectById CamoKiwi");
        }
    }
    else if (autoCC687575_val == "YUGEIFY") {
        auto0E5817F2_g = UnitGroupSelected(lv_user);
        auto0E5817F2_u = UnitGroupCount(auto0E5817F2_g, c_unitCountAll);
        for (;; auto0E5817F2_u -= 1) {
            auto0E5817F2_var = UnitGroupUnitFromEnd(auto0E5817F2_g, auto0E5817F2_u);
            if (auto0E5817F2_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(auto0E5817F2_var), "SetScale 5.000000 1.000000");
        }
    }
    else if (autoCC687575_val == "UNYUGE") {
        autoB3CB3380_g = UnitGroupSelected(lv_user);
        autoB3CB3380_u = UnitGroupCount(autoB3CB3380_g, c_unitCountAll);
        for (;; autoB3CB3380_u -= 1) {
            autoB3CB3380_var = UnitGroupUnitFromEnd(autoB3CB3380_g, autoB3CB3380_u);
            if (autoB3CB3380_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoB3CB3380_var), "SetScale 1.000000 1.000000");
        }
    }
    else if (autoCC687575_val == "PMCENDTEST") {
        TriggerExecute(gt_PMCSurvivalModeTimeout, true, false);
    }
    else if (autoCC687575_val == "HEROSWAP") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 13)) {
            if ((StringWord(lv_message, 4) != null)) {
                lv_oldhero = gv_playerHeroes[StringToInt(StringWord(lv_message, 3))];
                gv_playerHeroes[StringToInt(StringWord(lv_message, 3))] = null;
                UnitGroupRemove(gv_heroesGroup, lv_oldhero);
                UnitGroupRemove(gv_undeadTargetGroup, lv_oldhero);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitTypeFromString(StringWord(lv_message, 4)), c_unitCreateIgnorePlacement, StringToInt(StringWord(lv_message, 3)), UnitGetPosition(lv_oldhero));
                gf_HeroSetup(StringToInt(StringWord(lv_message, 3)), UnitLastCreated());
                UnitRemove(lv_oldhero);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/82DB52D9"));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/43D5C98C"));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/17D0C11F"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DevCommands_Init () {
    gt_DevCommands = TriggerCreate("gt_DevCommands_Func");
    TriggerAddEventChatMessage(gt_DevCommands, c_playerAny, "dev", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Exterminatus
//--------------------------------------------------------------------------------------------------
bool gt_Exterminatus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    const int autoD29E777F_n = 80;
    int autoD29E777F_i;

    // Variable Initialization
    lv_point = RegionRandomPoint(RegionEntireMap());

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitCount(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) != 0)) {
        Wait(0.5, c_timeGame);
        for (autoD29E777F_i = 1; autoD29E777F_i <= autoD29E777F_n; autoD29E777F_i += 1) {
            lv_point = RegionRandomPoint(RegionEntireMap());
            libNtve_gf_CreateActorAtPoint("OdinNukeIndicator", lv_point);
            PlayerCreateEffectPoint(0, "SpectreNukeDetonate", lv_point);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Exterminatus_Init () {
    gt_Exterminatus = TriggerCreate("gt_Exterminatus_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mod Commands
//--------------------------------------------------------------------------------------------------
bool gt_ModCommands_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intloop;
    int lv_dyingplayer;
    int lv_loopint;
    string lv_message;
    int lv_user;
    bool lv_success;

    // Automatic Variable Declarations
    string auto9B6A726B_val;
    unitgroup auto27918084_g;
    int auto27918084_u;
    unit auto27918084_var;
    const int auto251E2CF7_ae = 12;
    const int auto251E2CF7_ai = 1;

    // Variable Initialization
    lv_dyingplayer = EventPlayer();
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(gf_ModHandles(PlayerHandle(EventPlayer())))) {
            return false;
        }

        if (!((StringEqual(StringWord(lv_message, 1), "mod", c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9B6A726B_val = StringCase(StringWord(lv_message, 2), true);
    if (auto9B6A726B_val == "KICK") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 13)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (TextWithColor(PlayerName(StringToInt(StringWord(lv_message, 3))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(StringToInt(StringWord(lv_message, 3)), false))) + StringExternal("Param/Value/5999C512")));
            GameOver(StringToInt(StringWord(lv_message, 3)), c_gameOverDefeat, false, true);
            auto27918084_g = gv_heroskilledbyplayer[StringToInt(StringWord(lv_message, 3))];
            auto27918084_u = UnitGroupCount(auto27918084_g, c_unitCountAll);
            for (;; auto27918084_u -= 1) {
                auto27918084_var = UnitGroupUnitFromEnd(auto27918084_g, auto27918084_u);
                if (auto27918084_var == null) { break; }
                UnitCreateEffectUnit(auto27918084_var, "ReviveModifyUnit", auto27918084_var);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/994DC78A"));
        }
    }
    else if (auto9B6A726B_val == "REV") {
        if ((StringWord(lv_message, 3) != null)) {
            if ((StringCase(StringWord(lv_message, 3), false) == "all")) {
                lv_loopint = 1;
                for ( ; ( (auto251E2CF7_ai >= 0 && lv_loopint <= auto251E2CF7_ae) || (auto251E2CF7_ai < 0 && lv_loopint >= auto251E2CF7_ae) ) ; lv_loopint += auto251E2CF7_ai ) {
                    if ((gv_playersHeroisDead[lv_loopint] == true)) {
                        UnitCreateEffectUnit(gv_playerHeroes[lv_loopint], "ReviveModifyUnit", gv_playerHeroes[lv_loopint]);
                    }
                }
            }
            else {
                if ((StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 13)) {
                    if ((gv_playersHeroisDead[StringToInt(StringWord(lv_message, 3))] == true)) {
                        UnitCreateEffectUnit(gv_playerHeroes[StringToInt(StringWord(lv_message, 3))], "ReviveModifyUnit", gv_playerHeroes[StringToInt(StringWord(lv_message, 3))]);
                    }
                }

            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/51A99579"));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/5BA07FDF"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModCommands_Init () {
    gt_ModCommands = TriggerCreate("gt_ModCommands_Func");
    TriggerAddEventChatMessage(gt_ModCommands, c_playerAny, "mod", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mod Commands 2
//--------------------------------------------------------------------------------------------------
bool gt_BetaCommands_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intloop;
    int lv_dyingplayer;
    int lv_loopint;
    string lv_message;
    int lv_user;
    bool lv_success;

    // Automatic Variable Declarations
    string autoE4D0D390_val;
    unitgroup auto53731B0B_g;
    int auto53731B0B_u;
    unit auto53731B0B_var;

    // Variable Initialization
    lv_dyingplayer = EventPlayer();
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(gf_BetaHandles(PlayerHandle(EventPlayer())))) {
            return false;
        }

        if (!((StringEqual(StringWord(lv_message, 1), "beta", c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE4D0D390_val = StringCase(StringWord(lv_message, 2), true);
    if (autoE4D0D390_val == "COLOR") {
        if ((StringWord(lv_message, 3) != null)) {
            PlayerSetColorIndex(EventPlayer(), gf_GetColor(StringWord(lv_message, 3), 0), true);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/A978C851"));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/4C43CAF8"));
        auto53731B0B_g = gv_heroesGroup;
        auto53731B0B_u = UnitGroupCount(auto53731B0B_g, c_unitCountAll);
        for (;; auto53731B0B_u -= 1) {
            auto53731B0B_var = UnitGroupUnitFromEnd(auto53731B0B_g, auto53731B0B_u);
            if (auto53731B0B_var == null) { break; }
            PingCreate(PlayerGroupSingle(UnitGetOwner(auto53731B0B_var)), "PingSimple", UnitGetPosition(auto53731B0B_var), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BetaCommands_Init () {
    gt_BetaCommands = TriggerCreate("gt_BetaCommands_Func");
    TriggerAddEventChatMessage(gt_BetaCommands, c_playerAny, "beta", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mod Commands 3
//--------------------------------------------------------------------------------------------------
bool gt_ColorCommands_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intloop;
    int lv_dyingplayer;
    int lv_loopint;
    string lv_message;
    int lv_user;
    bool lv_success;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dyingplayer = EventPlayer();
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((StringEqual(StringWord(lv_message, 1), "color", c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(lv_message, 2) != null)) {
        if ((PlayerHandle(EventPlayer()) == "1-S2-1-3378891") && (StringWord(lv_message, 3) != null)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/70FA2E98"));
        }
        else {
            PlayerSetColorIndex(EventPlayer(), gf_GetColor(StringWord(lv_message, 2), EventPlayer()), true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/B049148E"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColorCommands_Init () {
    gt_ColorCommands = TriggerCreate("gt_ColorCommands_Func");
    TriggerAddEventChatMessage(gt_ColorCommands, c_playerAny, "color", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tournament Reward Unlocks
//--------------------------------------------------------------------------------------------------
bool gt_TournamentRewardUnlocks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoEF663ED8_g;
    int autoEF663ED8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEF663ED8_g = PlayerGroupActive();
    autoEF663ED8_var = -1;
    while (true) {
        autoEF663ED8_var = PlayerGroupNextPlayer(autoEF663ED8_g, autoEF663ED8_var);
        if (autoEF663ED8_var < 0) { break; }
        if ((autoEF663ED8_var > 12)) {
            continue;
        }
        else {
            if ((gf_TournamentWinners(PlayerHandle(autoEF663ED8_var)) || gf_DevHandles(PlayerHandle(autoEF663ED8_var)))) {
                if ((gv_playercamounlocked[50][autoEF663ED8_var] == false)) {
                    UIDisplayMessage(PlayerGroupSingle(autoEF663ED8_var), c_messageAreaSubtitle, StringExternal("Param/Value/9E1AF27C"));
                    gv_playercamounlocked[50][autoEF663ED8_var] = true;
                }
                if ((gv_playerdecalunlocked[31][autoEF663ED8_var] == false)) {
                    gv_playerdecalunlocked[31][autoEF663ED8_var] = true;
                }
            }
            else {
                gv_playercamounlocked[50][autoEF663ED8_var] = false;
                gv_playerdecalunlocked[31][autoEF663ED8_var] = false;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TournamentRewardUnlocks_Init () {
    gt_TournamentRewardUnlocks = TriggerCreate("gt_TournamentRewardUnlocks_Func");
    TriggerAddEventTimeElapsed(gt_TournamentRewardUnlocks, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VIP/Donator Trigger
//--------------------------------------------------------------------------------------------------
bool gt_VIPDonatorTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto358CD3A2_g;
    int auto358CD3A2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto358CD3A2_g = gv_players;
    auto358CD3A2_var = -1;
    while (true) {
        auto358CD3A2_var = PlayerGroupNextPlayer(auto358CD3A2_g, auto358CD3A2_var);
        if (auto358CD3A2_var < 0) { break; }
        if (gf_VIPDonatorHandles(PlayerHandle(auto358CD3A2_var))) {
            GameOver(auto358CD3A2_var, c_gameOverDefeat, false, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VIPDonatorTrigger_Init () {
    gt_VIPDonatorTrigger = TriggerCreate("gt_VIPDonatorTrigger_Func");
    TriggerAddEventTimeElapsed(gt_VIPDonatorTrigger, 11.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dev SI's
//--------------------------------------------------------------------------------------------------
bool gt_DevSIs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5FE194CE_g;
    int auto5FE194CE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5FE194CE_g = PlayerGroupActive();
    auto5FE194CE_var = -1;
    while (true) {
        auto5FE194CE_var = PlayerGroupNextPlayer(auto5FE194CE_g, auto5FE194CE_var);
        if (auto5FE194CE_var < 0) { break; }
        if ((auto5FE194CE_var > 12)) {
            continue;
        }
        else {
            if ((gf_DevHandles(PlayerHandle(auto5FE194CE_var)))) {
                if ((gv_sIunlocked[27][auto5FE194CE_var] == false)) {
                    gv_sIunlocked[27][auto5FE194CE_var] = true;
                }
                if ((gv_sIunlocked[38][auto5FE194CE_var] == false)) {
                    gv_sIunlocked[38][auto5FE194CE_var] = true;
                }
                if ((gv_sIunlocked[46][auto5FE194CE_var] == false)) {
                    gv_sIunlocked[46][auto5FE194CE_var] = true;
                }
                if ((gv_sIunlocked[48][auto5FE194CE_var] == false)) {
                    gv_sIunlocked[48][auto5FE194CE_var] = true;
                }
                if ((gv_sIunlocked[54][auto5FE194CE_var] == false)) {
                    gv_sIunlocked[54][auto5FE194CE_var] = true;
                }
                if ((gv_sIunlocked[56][auto5FE194CE_var] == false)) {
                    gv_sIunlocked[56][auto5FE194CE_var] = true;
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DevSIs_Init () {
    gt_DevSIs = TriggerCreate("gt_DevSIs_Func");
    TriggerAddEventTimeElapsed(gt_DevSIs, 11.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dev/Mod Trigger
//--------------------------------------------------------------------------------------------------
bool gt_DevModTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto06252E29_g;
    int auto06252E29_var;
    playergroup autoDC360F99_g;
    int autoDC360F99_var;
    playergroup autoA71C4B90_g;
    int autoA71C4B90_var;
    playergroup autoCA782957_g;
    int autoCA782957_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto06252E29_g = gv_players;
    auto06252E29_var = -1;
    while (true) {
        auto06252E29_var = PlayerGroupNextPlayer(auto06252E29_g, auto06252E29_var);
        if (auto06252E29_var < 0) { break; }
        if (gf_DevHandles(PlayerHandle(auto06252E29_var))) {
            gv_devingame = true;
            libNtve_gf_SetUpgradeLevelForPlayer(auto06252E29_var, "DevOnly", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto06252E29_var, "BetaTesterOnly", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto06252E29_var, "Spectator", 1);
            if (((GameIsTestMap(false) == true) || (PlayerHandle(auto06252E29_var) == "1-S2-1-7030064"))) {
                libNtve_gf_SetUpgradeLevelForPlayer(auto06252E29_var, "RegendareOnly", 1);
            }
            if ((gv_playercamounlocked[52][auto06252E29_var] == false)) {
                gv_playercamounlocked[52][auto06252E29_var] = true;
            }
        }

    }
    autoDC360F99_g = gv_players;
    autoDC360F99_var = -1;
    while (true) {
        autoDC360F99_var = PlayerGroupNextPlayer(autoDC360F99_g, autoDC360F99_var);
        if (autoDC360F99_var < 0) { break; }
        if (gf_ModHandles(PlayerHandle(autoDC360F99_var))) {
            gv_modingame = true;
            libNtve_gf_SetUpgradeLevelForPlayer(autoDC360F99_var, "ModOnly", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(autoDC360F99_var, "BetaTesterOnly", 1);
        }

    }
    autoA71C4B90_g = gv_players;
    autoA71C4B90_var = -1;
    while (true) {
        autoA71C4B90_var = PlayerGroupNextPlayer(autoA71C4B90_g, autoA71C4B90_var);
        if (autoA71C4B90_var < 0) { break; }
        if (gf_BetaHandles(PlayerHandle(autoA71C4B90_var))) {
            libNtve_gf_SetUpgradeLevelForPlayer(autoA71C4B90_var, "BetaTesterOnly", 1);
        }

    }
    autoCA782957_g = gv_players;
    autoCA782957_var = -1;
    while (true) {
        autoCA782957_var = PlayerGroupNextPlayer(autoCA782957_g, autoCA782957_var);
        if (autoCA782957_var < 0) { break; }
        if (gf_EventsTeamHandles(PlayerHandle(autoCA782957_var))) {
            libNtve_gf_SetUpgradeLevelForPlayer(autoCA782957_var, "Spectator", 1);
        }

    }
    Wait(130.0, c_timeGame);
    if (gv_gamemode == 7 && !gv_LUNATICEnable)
    {
        gv_HyperPulseVoteEnable = true;
        if (gv_mod_tier1)
        {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1230-ffccff\">" + "To activate HyperPulse Mode: -HyperPulse"));
        }
        else
        {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"b8edff-f0ffff\">" + "To activate HyperPulse Mode: -HyperPulse"));
        }
    } else if (gv_gamemode == 8)
    {
        gv_HyperPMCVoteEnabled = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("<c val=\"ff1230-ffccff\">" + "To activate HyperPMC Mode: -HyperPMC"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DevModTrigger_Init () {
    gt_DevModTrigger = TriggerCreate("gt_DevModTrigger_Func");
    TriggerAddEventTimeElapsed(gt_DevModTrigger, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Make Editor Generated Connection to LibWH
//--------------------------------------------------------------------------------------------------
bool gt_ForceMakeEditorGeneratedConnectiontoLibWH_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    LibWH_FUNC_UICS_UIScrollBarPanelSetScrollValue(DialogControlLastCreated(), 1, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceMakeEditorGeneratedConnectiontoLibWH_Init () {
    gt_ForceMakeEditorGeneratedConnectiontoLibWH = TriggerCreate("gt_ForceMakeEditorGeneratedConnectiontoLibWH_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_InitializeModeDialog_Init();
    gt_ModeSelect_Init();
    gt_ModeTimerEnd_Init();
    gt_InitializeRankModifiersDialog_Init();
    gt_RankSelected_Init();
    gt_ModifierChecked_Init();
    gt_RankModifierSubmit_Init();
    gt_RankTimerEnd_Init();
    gt_StartGameModesTrainingSurvPMCSurvBossMode_Init();
    gt_GameStartCheckforAllMOS_Init();
    gt_HeroSelection_Init();
    gt_AutoselectHero_Init();
    gt_SelectHeroSelector_Init();
    gt_RandomHeroSelect_Init();
    gt_SetupStory_Init();
    gt_BeginStory_Init();
    gt_ConductKLE_Init();
    gt_YetiSpawnLoop_Init();
    gt_ApproachTower_Init();
    gt_PickUpSentryGuns_Init();
    gt_SentryGunPlacementArea_Init();
    gt_PlaceSentryGuns_Init();
    gt_SentryGunTimeEnd_Init();
    gt_InspectCivilians_Init();
    gt_ContactInfectedCivilian_Init();
    gt_InfectedCivilianDies_Init();
    gt_InfectedCivilianEntersFacility_Init();
    gt_InfectedCivilianTimeEnd_Init();
    gt_DefendBalaadBunkerCount_Init();
    gt_DefendBalaadTimeEnd_Init();
    gt_UndeadSpawningPrologue2_Init();
    gt_ContactCivilian_Init();
    gt_CivilianEntersThalim_Init();
    gt_CivilianDies_Init();
    gt_EscortCiviliansTimeEnd_Init();
    gt_SoldierLocated_Init();
    gt_MeetLabAssistant_Init();
    gt_LabAssistantSiteLoop_Init();
    gt_LabAssistantDies_Init();
    gt_EscortReinforcmentsLoop_Init();
    gt_ReinforcementsLeave_Init();
    gt_ReinforcementVehicleDies_Init();
    gt_EscortReinforcementsEnd_Init();
    gt_HeliUndeadSpawns_Init();
    gt_HelicopterKilled_Init();
    gt_PickUpFuelContainers_Init();
    gt_DeliverFuel_Init();
    gt_HelicopterEnd_Init();
    gt_TitanHealthBar_Init();
    gt_ThanatosHealthBar_Init();
    gt_ThanatosMove_Init();
    gt_ApproachGenerator_Init();
    gt_GeneratorPowered_Init();
    gt_GeneratorTimeEnd_Init();
    gt_AcquireBDS_Init();
    gt_ApproachBDS_Init();
    gt_VIPKilled_Init();
    gt_VIPSite_Init();
    gt_VIPMovementLoop_Init();
    gt_VIPExtracted_Init();
    gt_VIPTimeEnd_Init();
    gt_ReconnaissanceDroneFound_Init();
    gt_RefugeeDies_Init();
    gt_RefugeeConvoyLoop_Init();
    gt_RefugeeConvoyLeave_Init();
    gt_RefugeeConvoyDies_Init();
    gt_RefugeeConvoyEnd_Init();
    gt_PlayerLeaveAO_Init();
    gt_DSDialogButton_Init();
    gt_DSVoteEnd_Init();
    gt_SearchHome_Init();
    gt_PhantomArrivesDS_Init();
    gt_EvacPlayerToPhantomDS_Init();
    gt_EvacPlayerToPhantomTimeEndDS_Init();
    gt_DestroySatchelSpawnPing_Init();
    gt_SeismicSpawnLoop_Init();
    gt_Satchel_Init();
    gt_InfernusIsAttacked_Init();
    gt_FungusCoreSpawns_Init();
    gt_EnterLZ_Init();
    gt_T1TimerEnd_Init();
    gt_PhantomArrives_Init();
    gt_EvacPlayerToPhantom_Init();
    gt_EvacPlayerToPhantomTimeEnd_Init();
    gt_Epilogue_Init();
    gt_RemoveLLDR_Init();
    gt_UndeadVisualContact_Init();
    gt_Satchel1PickUp_Init();
    gt_Satchel2PickUp_Init();
    gt_Satchel3PickUp_Init();
    gt_Tunnel1_Init();
    gt_Tunnel2_Init();
    gt_Tunnel3_Init();
    gt_SatchelTimerWarning1_Init();
    gt_SatchelTimerWarning2_Init();
    gt_SatchelTimerWarning3_Init();
    gt_SatchelTimeout_Init();
    gt_RedoTunnel_Init();
    gt_CharonSatchelSpawns_Init();
    gt_CharonTimer_Init();
    gt_CharonSpawnsFinal_Init();
    gt_CharonMendLoop_Init();
    gt_CharonBurrows_Init();
    gt_CharonDies_Init();
    gt_EpilogueDS_Init();
    gt_SearchTargeter_Init();
    gt_InfestedSmithyFlee_Init();
    gt_InfestedSmithyFleeDamage_Init();
    gt_SmithyTimerExpire_Init();
    gt_SmithyFleeTimerExpire_Init();
    gt_SmithyZombieSpawns_Init();
    gt_OffmapArtillery_Init();
    gt_ActivateSAM_Init();
    gt_ApproachComputer_Init();
    gt_SmithyDies_Init();
    gt_UACGameEnd_Init();
    gt_SurvivalMode_Init();
    gt_SurvivalPeriodicXP_Init();
    gt_SurvivalPeriodicXPEnhanced_Init();
    gt_Survival5Min_Init();
    gt_Survival10Min_Init();
    gt_Survival15Min_Init();
    gt_Survival20Min_Init();
    gt_Survival25Min_Init();
    gt_Survival30Min_Init();
    gt_Survival35Min_Init();
    gt_Survival40Min_Init();
    gt_AirDrop40Min_Init();
    gt_AirDropPing2_Init();
    gt_Survival45Min_Init();
    gt_SurvivalHellSpawning_Init();
    gt_SurvivalModeTimeout_Init();
    gt_SurvivalEvacPlayerEnter_Init();
    gt_SurvivalEnd_Init();
    gt_SurvivalIncreasedT2Spawning_Init();
    gt__1020RandomTimer_Init();
    gt_Cockblock_Init();
    gt_PMCSurvivalMode_Init();
    gt_PMCPeriodicXP_Init();
    gt_PMCPeriodicXPEnhanced_Init();
    gt_CacheSystem_Init();
    gt_PMCSurvival5Min_Init();
    gt_PMCSurvival10Min_Init();
    gt_PMCSurvival15Min_Init();
    gt_PMCSurvival20Min_Init();
    gt_PMCSurvival25Min_Init();
    gt_PMCSurvival30Min_Init();
    gt_PMCSurvival35Min_Init();
    gt_PMCSurvival40Min_Init();
    gt_PMCSurvival45Min_Init();
    gt_PMCSurvivalModeTimeout_Init();
    gt_PMCSurvivalEvacPlayerEnter_Init();
    gt_SmithyDeath_Init();
    gt_PMCSurvivalEnd_Init();
    gt_PMCSurvivalOpenRAFacilityGates_Init();
    gt_PMCSurvivalDownloadResearch_Init();
    gt_JuggernaughtDeath_Init();
    gt_NewBossModeLoadSequences_Init();
    gt_NewBossModeInitialize_Init();
    gt_NewBossMode5Min_Init();
    gt_NewBossMode10Min_Init();
    gt_NewBossMode15Min_Init();
    gt_NewBossMode20Min_Init();
    gt_NewBossMode25Min_Init();
    gt_NewBossMode30Min_Init();
    gt_NewBossMode35Min_Init();
    gt_NewBossMode40Min_Init();
    gt_NewBossMode45Min_Init();
    gt_NewBossMode50Min_Init();
    gt_NewBossModeKillCheck_Init();
    gt_NewBossModeEnd_Init();
    gt_IonCannonUmbra_Init();
    gt_CallForFireAspectus_Init();
    gt_PartyHat_Init();
    gt_FragOutWarningPMC_Init();
    gt_SquadLoop_Init();
    gt_SquadContact_Init();
    gt_PMCAlertExpire_Init();
    gt_PMCPeriodicSpawn_Init();
    gt_PMCIdle_Init();
    gt_RemovePMCItem_Init();
    gt_PMCMode_Init();
    gt_PCommissioner_Init();
    gt_PApproachCommissioner_Init();
    gt_PCommissionerTimeout_Init();
    gt_PMCFirstContact_Init();
    gt_PPoliceCheckpoint_Init();
    gt_PEnterPoliceTCP_Init();
    gt_PPoliceTCPEnd_Init();
    gt_PRAPhantomDown_Init();
    gt_PEnterPhantomLZ_Init();
    gt_PKillCrew_Init();
    gt_PExtractCrew_Init();
    gt_PhantomDownEnd_Init();
    gt_RAJuggernaught_Init();
    gt_PChapter1GhostOfTheJungle_Init();
    gt_PConvoyRaid_Init();
    gt_PConvoyPatrols_Init();
    gt_PConvoyRaidLoop_Init();
    gt_PConvoyRaidLeave_Init();
    gt_PConvoyRaidDies_Init();
    gt_PConvoyRaidEnd_Init();
    gt_PIgnisVesania_Init();
    gt_PGuardPosts_Init();
    gt_PDestroyGuardPost_Init();
    gt_PGuardPostsTimeout_Init();
    gt_PUmbra_Init();
    gt_PChapter2TameTheBeast_Init();
    gt_PTheBurrowed_Init();
    gt_UseSeismicResonator_Init();
    gt_PGhostConvoy_Init();
    gt_PGhostRAPatrols_Init();
    gt_PGhostConvoyLoop_Init();
    gt_PGhostConvoyLeave_Init();
    gt_PGhostConvoyContact_Init();
    gt_PGhostConvoyDies_Init();
    gt_PGhostConvoyEnd_Init();
    gt_PCombatWalker_Init();
    gt_PCombatEngineerDies_Init();
    gt_ObjectiveLoop_Init();
    gt_PickUpCasualty_Init();
    gt_EnterMEDEVACSite_Init();
    gt_MedevacTimeEnd_Init();
    gt_PTametheBeast_Init();
    gt_SmithyBarrageAI_Init();
    gt_PChapter3TimeStops_Init();
    gt_PBioSamples_Init();
    gt_PCollectSample_Init();
    gt_PTurnInSample_Init();
    gt_PSampleTimeEnd_Init();
    gt_PAspectus_Init();
    gt_WCallForFireTargetPlayer_Init();
    gt_PAntiAir_Init();
    gt_CreateSamSite_Init();
    gt_UseSamSiteItem_Init();
    gt_SamSitePing_Init();
    gt_PTimeStops_Init();
    gt_PSatchelPing_Init();
    gt_PTSPlaceSatchel_Init();
    gt_PTSAbortCodes_Init();
    gt_PTSTimeStops_Init();
    gt_PTSTimeStopRevert_Init();
    gt_PTSTimeStopEnd_Init();
    gt_PDestroytheRA_Init();
    gt_SandBoxVote_Init();
    gt_SandBoxVoteTimer_Init();
    gt_SandBoxCommands_Init();
    gt_ReviveSandBoxMode_Init();
    gt_ShowHideSpawnMenu_Init();
    gt_SandBoxListBox_Init();
    gt_SandBoxSpawnUnitItem_Init();
    gt_SmithyBarrageAI2_Init();
    gt_ThalimHoldout_Init();
    gt_HoldoutCivDies_Init();
    gt_HoldoutCivExtracts_Init();
    gt_ThalimHoldout5Min_Init();
    gt_ThalimHoldout10Min_Init();
    gt_ThalimHoldout15Min_Init();
    gt_ThalimHoldout20Min_Init();
    gt_ThalimHoldout25Min_Init();
    gt_ThalimHoldoutTimeout_Init();
    gt_ThalimHoldoutEvacPlayerEnter_Init();
    gt_ThalimHoldoutEnd_Init();
    gt_FailGameOver_Init();
    gt_ClassicSurvival_Init();
    gt_ClassicSurvival6Min_Init();
    gt_ClassicSurvival12Min_Init();
    gt_ClassicSurvival18Min_Init();
    gt_ClassicSurvival24Min_Init();
    gt_ClassicSurvival27Min_Init();
    gt_ClassicSurvivalTimeout_Init();
    gt_ClassicSurvivalEvacPlayerEnter_Init();
    gt_ClassicSurvivalEnd_Init();
    gt_PolicePatrolLoop_Init();
    gt_PoliceDecal_Init();
    gt_Initialization_Init();
    gt_ISRTowerLoop_Init();
    gt_MissionItemPickedUp_Init();
    gt_MissionItemDropped_Init();
    gt_PingHandler_Init();
    gt_SwampSlowEnter_Init();
    gt_SwampSlowExit_Init();
    gt_RandomFog_Init();
    gt_WeatherThunderStormEffect_Init();
    gt_SuitMalfunctionChance_Init();
    gt_RandomFogIntense_Init();
    gt_SuitMalfunctionChanceIntense_Init();
    gt_FrostBiteChanceIntense_Init();
    gt_PowerUserEcell_Init();
    gt_ItemCombining_Init();
    gt_APDUFilter_Init();
    gt_UpdateItemCharges_Init();
    gt_ReloadSentryGun_Init();
    gt_SentryGunItemDropFilter_Init();
    gt_SentryGunEnergyCell_Init();
    gt_ShockPaddlesRemovePing_Init();
    gt_WeaponsItems1_Init();
    gt_WeaponsItems2_Init();
    gt_WeaponsItemsSurvival_Init();
    gt_InitWeaponCaches_Init();
    gt_FindWeaponsCache_Init();
    gt_AssaultmanSkills_Init();
    gt_SoldierSkillsUpgrade_Init();
    gt_BeltLinking_Init();
    gt_BeltLinkingReload_Init();
    gt_ARSkills_Init();
    gt_SpecialistSkills_Init();
    gt_StrengthTraining_Init();
    gt_ImprovedHeartbeatSensorSS4_Init();
    gt_LearnReconSkills_Init();
    gt_Heartbeat_Init();
    gt_M2SentryDeathEffect_Init();
    gt_ReviveBonus_Init();
    gt_HealBonus_Init();
    gt_GiveBonus_Init();
    gt_SITREPDisplay_Init();
    gt_ExplosivesExpert_Init();
    gt_ImprovedAutomaticMode_Init();
    gt_ChronoShift_Init();
    gt_ChronoShiftEscort_Init();
    gt_WeaponSwapShot_Init();
    gt_WeaponSwapRifle_Init();
    gt_CyborgSkills_Init();
    gt_StonewallTexture_Init();
    gt_CrowdControl_Init();
    gt_Commanda_Init();
    gt_Commandc_Init();
    gt_Commands_Init();
    gt_Commandr_Init();
    gt_Commandd_Init();
    gt_Commandi_Init();
    gt_CAS_Init();
    gt_LLDR_Init();
    gt_AttackWeaponsTeam_Init();
    gt_CallForFire_Init();
    gt_CFFAspectus_Init();
    gt_ImmediateEffects_Init();
    gt_ImmediateFlareShareVision_Init();
    gt_OSR_Init();
    gt_StrafeRun_Init();
    gt_FuelDischargeFireinyohole_Init();
    gt_FuelDischarge_Init();
    gt_LearnGhostSkillsISR_Init();
    gt_LearnGhostSkillsandIonCannon_Init();
    gt_CrysisSuit_Init();
    gt_IonCannonSelection_Init();
    gt_IonCannonWarning_Init();
    gt_Overheat_Init();
    gt_OverheatCoolDown_Init();
    gt_LearnPreciseAim_Init();
    gt_LearnBeltLinkingHG_Init();
    gt_LearnWPHG_Init();
    gt_LearnSSHG_Init();
    gt_JavelinSkills_Init();
    gt_RocketWarning_Init();
    gt_LaserPrismD20_Init();
    gt_ImprovedLaserPrismD20_Init();
    gt_MaxLaserPrismD20_Init();
    gt_BlueCrystalSS4_Init();
    gt_ProximitySensor_Init();
    gt_MechCalldown_Init();
    gt_MechAdjustments_Init();
    gt_LearnEM25r_Init();
    gt_LearnW34Python_Init();
    gt_MercenarySkills_Init();
    gt_WeaponSwitch_Init();
    gt_ItemScanner_Init();
    gt_Tier1Scanner_Init();
    gt_OrbitalBombardment_Init();
    gt_EnergyRaysDelay_Init();
    gt_AbilityUseNotification_Init();
    gt_LearnOrbitalStrike_Init();
    gt_LearnOrbitalSurveillience_Init();
    gt_LearnOrbitalSupport_Init();
    gt_ImprovedConcentrationSS4_Init();
    gt_PlatoonLeaderSkillsLevelUp_Init();
    gt_InitLNS_Init();
    gt_PeriodicLNSpawn_Init();
    gt_AOCommander_Init();
    gt_AdvancedLeadershipLNSpawn_Init();
    gt_PingLNs_Init();
    gt_LNDeath_Init();
    gt_Leadership_Init();
    gt_Dismiss_Init();
    gt_LNReport_Init();
    gt_LNSITREPDisplay_Init();
    gt_FragLevelUp_Init();
    gt_RiflemanSkillLevelUp_Init();
    gt_LearnChargeRefund_Init();
    gt_Disarm_Init();
    gt_SpawnedUnitVision_Init();
    gt_JumpFail_Init();
    gt_FragOutWarning_Init();
    gt_FragOutWarningItem_Init();
    gt_CameraShakeSmall_Init();
    gt_CameraShakeLarge_Init();
    gt_SelfApplyFirstAidKit_Init();
    gt_LaserDesignatorReveal_Init();
    gt_LaserDesignatorRevealPMC_Init();
    gt_StrafeDesignator_Init();
    gt_TerminalLanceStrafe_Init();
    gt_UpgradeSkillsLevelUp_Init();
    gt_Omniscience_Init();
    gt_JumpInjury_Init();
    gt_ApplySentryDecal_Init();
    gt_CycloneMissileWarning_Init();
    gt_SMGSniperToggle_Init();
    gt_WeaponSwitchVindicare_Init();
    gt_SpyPlane_Init();
    gt_SnipeCritical_Init();
    gt_SnipeLevelup_Init();
    gt_PenetratorRoundLevelup_Init();
    gt_AssassinSkills_Init();
    gt_SpecterSkillsLevelup_Init();
    gt_WeaponsTrainingLevelup_Init();
    gt_MunitionsUpgradesLevelup_Init();
    gt_LearnMarksmanSkills_Init();
    gt_PinpointRapidFireSS4_Init();
    gt_Viper30mmChainGun_Init();
    gt_LearnAirReconnaissance_Init();
    gt_AkmasBulldozer_Init();
    gt_JashansZulus_Init();
    gt_FragOutWarningAkma_Init();
    gt_LoadPlayerBank_Init();
    gt_SavePlayerBank_Init();
    gt_EditorBank_Init();
    gt_PlayerLeavesGame_Init();
    gt_Cheats_Init();
    gt_GamesPlayed_Init();
    gt_PlayerKills_Init();
    gt_PlayerHeal_Init();
    gt_PlayerHit_Init();
    gt_PlayerQuits_Init();
    gt_BorgWeaponSelect_Init();
    gt_Init_Init();
    gt_SMResponses_Init();
    gt_AccessorySelected_Init();
    gt_InitVoteKick_Init();
    gt_KickPlayerPressed_Init();
    gt_KickVoteYesNo_Init();
    gt_KickVoteTimerLabel_Init();
    gt_PlayerTKKillCount_Init();
    gt_KickVoteTimerExpires_Init();
    gt_CamoSelected_Init();
    gt_DecalSelected_Init();
    gt_OctoCamo_Init();
    gt_SYL_Init();
    gt_ZES_Init();
    gt_AUC_Init();
    gt_NormalSpecialSIs_Init();
    gt_MOSSpecificSIs_Init();
    gt_BattleBuddySelection_Init();
    gt_BattleBuddyDies_Init();
    gt_beer_Init();
    gt_giveCommand_Init();
    gt_FunctionalButtons_Init();
    gt_CommandPanel_Init();
    gt_CustomHeroNameTag_Init();
    gt_EscButton_Init();
    gt_Command_Init();
    gt_InitHUDDialog_Init();
    gt_HUDUpdate_Init();
    gt_ShowHUDDialogButton_Init();
    gt_InitStatusDialog_Init();
    gt_PingPlayerLocation_Init();
    gt_FireteamDialogInitialize_Init();
    gt_FireteamLeaderORP_Init();
    gt_AmmoBarRounds_Init();
    gt_AmmoBarMagazines_Init();
    gt_FlamethrowerAmmoBar_Init();
    gt_Sprint_Init();
    gt_RemoveSprintWhenProne_Init();
    gt_InventoryInOut_Init();
    gt_SelectPlayer_Init();
    gt_DeselectPlayer_Init();
    gt_VisorTextTimerExpire_Init();
    gt_AcquireBehavior_Init();
    gt_RemoveBehavior_Init();
    gt_SelectMos_Init();
    gt_DeselectMos_Init();
    gt_SelectHG_Init();
    gt_DeselectHG_Init();
    gt_EndGameButton_Init();
    gt_RankMenu_Init();
    gt_BluntAilments_Init();
    gt_SlashAilments_Init();
    gt_PierceAilments_Init();
    gt_PoisonAilments_Init();
    gt_TBICameraShake_Init();
    gt_CursedHit_Init();
    gt_ScorpioHit_Init();
    gt_CharonHit_Init();
    gt_CureAilments_Init();
    gt_AilmentSpawnZombie_Init();
    gt_AilmentSpawnZombie2_Init();
    gt_HeroGainLevel_Init();
    gt_SubmachineGunLNMini_Init();
    gt_DropMagazine_Init();
    gt_DropMagazineShortage_Init();
    gt_EffectMagazine_Init();
    gt_PickUpPlayerDroppedMag_Init();
    gt_HeroReload_Init();
    gt_ReloadClearJam_Init();
    gt_ReloadMini_Init();
    gt_AutomaticReloadMini_Init();
    gt_AutomaticReloadMiniFromEffect_Init();
    gt_Jam_Init();
    gt_Unjam_Init();
    gt_HeroDeath_Init();
    gt_Revive_Init();
    gt_GameOver_Init();
    gt_UndeadSpawningPrologue_Init();
    gt_UndeadSpawning1_Init();
    gt_UndeadSpawning2_Init();
    gt_UndeadSpawning3_Init();
    gt_UndeadSpawningOutbreak1_Init();
    gt_UndeadSpawningOutbreak2_Init();
    gt_UndeadSpawningOutbreak3_Init();
    gt_UndeadSpawningOnslaught1_Init();
    gt_UndeadSpawningOnslaught2_Init();
    gt_UndeadSpawningOnslaught3_Init();
    gt_GenesisSpawning1_Init();
    gt_GenesisSpawning2_Init();
    gt_GenesisSpawning3_Init();
    gt_UndeadSpawningBurrowed_Init();
    gt_UndeadSpawningTier1_Init();
    gt_UndeadSpawningZulu_Init();
    gt_UndeadOrders_Init();
    gt_UndeadIdles_Init();
    gt_UndeadMassiveInfestationLevel_Init();
    gt_ParasiteSpawn_Init();
    gt_ParasiteMorph_Init();
    gt_ThanatosLoop_Init();
    gt_TyrantPull_Init();
    gt_ThanatosPull_Init();
    gt_DevTriggerCommandExecuting_Init();
    gt_BetaTestingUnlocks_Init();
    gt_DevCommandDisplay_Init();
    gt_DevCommands_Init();
    gt_Exterminatus_Init();
    gt_ModCommands_Init();
    gt_BetaCommands_Init();
    gt_ColorCommands_Init();
    gt_TournamentRewardUnlocks_Init();
    gt_VIPDonatorTrigger_Init();
    gt_DevSIs_Init();
    gt_DevModTrigger_Init();
    gt_ForceMakeEditorGeneratedConnectiontoLibWH_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitCustomScript();
    InitTriggers();
}
